
Project_bms_elevator_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004528  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08004664  08004664  00014664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046a8  080046a8  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  080046a8  080046a8  000146a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046b0  080046b0  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046b0  080046b0  000146b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046b4  080046b4  000146b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  080046b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000077c  20000034  080046ec  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007b0  080046ec  000207b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002005d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bd45  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022c8  00000000  00000000  0002bde5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac8  00000000  00000000  0002e0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000848  00000000  00000000  0002eb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000155ad  00000000  00000000  0002f3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ce13  00000000  00000000  0004496d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000852ad  00000000  00000000  00051780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b18  00000000  00000000  000d6a30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000d9548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000034 	.word	0x20000034
 8000158:	00000000 	.word	0x00000000
 800015c:	0800464c 	.word	0x0800464c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000038 	.word	0x20000038
 8000178:	0800464c 	.word	0x0800464c

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800018c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14c      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d967      	bls.n	8000292 <__udivmoddi4+0xe6>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b153      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	fa01 fe03 	lsl.w	lr, r1, r3
 80001d4:	fa20 f202 	lsr.w	r2, r0, r2
 80001d8:	ea42 0e0e 	orr.w	lr, r2, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001e2:	fbbe f1f7 	udiv	r1, lr, r7
 80001e6:	fa1f f58c 	uxth.w	r5, ip
 80001ea:	fb07 ee11 	mls	lr, r7, r1, lr
 80001ee:	fb01 f005 	mul.w	r0, r1, r5
 80001f2:	0c22      	lsrs	r2, r4, #16
 80001f4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000200:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8000204:	f080 8119 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000208:	4290      	cmp	r0, r2
 800020a:	f240 8116 	bls.w	800043a <__udivmoddi4+0x28e>
 800020e:	3902      	subs	r1, #2
 8000210:	4462      	add	r2, ip
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f7 	udiv	r0, r2, r7
 8000218:	fb07 2210 	mls	r2, r7, r0, r2
 800021c:	fb00 f505 	mul.w	r5, r0, r5
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a5      	cmp	r5, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000232:	f080 8104 	bcs.w	800043e <__udivmoddi4+0x292>
 8000236:	42a5      	cmp	r5, r4
 8000238:	f240 8101 	bls.w	800043e <__udivmoddi4+0x292>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	1b64      	subs	r4, r4, r5
 8000248:	b11e      	cbz	r6, 8000252 <__udivmoddi4+0xa6>
 800024a:	40dc      	lsrs	r4, r3
 800024c:	2300      	movs	r3, #0
 800024e:	e9c6 4300 	strd	r4, r3, [r6]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d908      	bls.n	800026c <__udivmoddi4+0xc0>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80ea 	beq.w	8000434 <__udivmoddi4+0x288>
 8000260:	2100      	movs	r1, #0
 8000262:	e9c6 0500 	strd	r0, r5, [r6]
 8000266:	4608      	mov	r0, r1
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	fab3 f183 	clz	r1, r3
 8000270:	2900      	cmp	r1, #0
 8000272:	d148      	bne.n	8000306 <__udivmoddi4+0x15a>
 8000274:	42ab      	cmp	r3, r5
 8000276:	d302      	bcc.n	800027e <__udivmoddi4+0xd2>
 8000278:	4282      	cmp	r2, r0
 800027a:	f200 80f8 	bhi.w	800046e <__udivmoddi4+0x2c2>
 800027e:	1a84      	subs	r4, r0, r2
 8000280:	eb65 0203 	sbc.w	r2, r5, r3
 8000284:	2001      	movs	r0, #1
 8000286:	4696      	mov	lr, r2
 8000288:	2e00      	cmp	r6, #0
 800028a:	d0e2      	beq.n	8000252 <__udivmoddi4+0xa6>
 800028c:	e9c6 4e00 	strd	r4, lr, [r6]
 8000290:	e7df      	b.n	8000252 <__udivmoddi4+0xa6>
 8000292:	b902      	cbnz	r2, 8000296 <__udivmoddi4+0xea>
 8000294:	deff      	udf	#255	; 0xff
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	2b00      	cmp	r3, #0
 800029c:	f040 808e 	bne.w	80003bc <__udivmoddi4+0x210>
 80002a0:	1a88      	subs	r0, r1, r2
 80002a2:	2101      	movs	r1, #1
 80002a4:	0c17      	lsrs	r7, r2, #16
 80002a6:	fa1f fe82 	uxth.w	lr, r2
 80002aa:	fbb0 f5f7 	udiv	r5, r0, r7
 80002ae:	fb07 0015 	mls	r0, r7, r5, r0
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b8:	fb0e f005 	mul.w	r0, lr, r5
 80002bc:	4290      	cmp	r0, r2
 80002be:	d908      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c0:	eb1c 0202 	adds.w	r2, ip, r2
 80002c4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f200 80cc 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002d0:	4645      	mov	r5, r8
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	fb0e fe00 	mul.w	lr, lr, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e6:	45a6      	cmp	lr, r4
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x150>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x14e>
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	f200 80b4 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002fa:	4610      	mov	r0, r2
 80002fc:	eba4 040e 	sub.w	r4, r4, lr
 8000300:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000304:	e7a0      	b.n	8000248 <__udivmoddi4+0x9c>
 8000306:	f1c1 0720 	rsb	r7, r1, #32
 800030a:	408b      	lsls	r3, r1
 800030c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000310:	ea4c 0c03 	orr.w	ip, ip, r3
 8000314:	fa25 fa07 	lsr.w	sl, r5, r7
 8000318:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800031c:	fbba f8f9 	udiv	r8, sl, r9
 8000320:	408d      	lsls	r5, r1
 8000322:	fa20 f307 	lsr.w	r3, r0, r7
 8000326:	fb09 aa18 	mls	sl, r9, r8, sl
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	432b      	orrs	r3, r5
 8000330:	fa00 f501 	lsl.w	r5, r0, r1
 8000334:	fb08 f00e 	mul.w	r0, r8, lr
 8000338:	0c1c      	lsrs	r4, r3, #16
 800033a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800033e:	42a0      	cmp	r0, r4
 8000340:	fa02 f201 	lsl.w	r2, r2, r1
 8000344:	d90b      	bls.n	800035e <__udivmoddi4+0x1b2>
 8000346:	eb1c 0404 	adds.w	r4, ip, r4
 800034a:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800034e:	f080 8086 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000352:	42a0      	cmp	r0, r4
 8000354:	f240 8083 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000358:	f1a8 0802 	sub.w	r8, r8, #2
 800035c:	4464      	add	r4, ip
 800035e:	1a24      	subs	r4, r4, r0
 8000360:	b298      	uxth	r0, r3
 8000362:	fbb4 f3f9 	udiv	r3, r4, r9
 8000366:	fb09 4413 	mls	r4, r9, r3, r4
 800036a:	fb03 fe0e 	mul.w	lr, r3, lr
 800036e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000372:	45a6      	cmp	lr, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 800037e:	d26a      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 8000380:	45a6      	cmp	lr, r4
 8000382:	d968      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000384:	3b02      	subs	r3, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800038c:	fba0 9302 	umull	r9, r3, r0, r2
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	429c      	cmp	r4, r3
 8000396:	46c8      	mov	r8, r9
 8000398:	469e      	mov	lr, r3
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d067      	beq.n	8000472 <__udivmoddi4+0x2c6>
 80003a2:	ebb5 0308 	subs.w	r3, r5, r8
 80003a6:	eb64 040e 	sbc.w	r4, r4, lr
 80003aa:	40cb      	lsrs	r3, r1
 80003ac:	fa04 f707 	lsl.w	r7, r4, r7
 80003b0:	431f      	orrs	r7, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c6 7400 	strd	r7, r4, [r6]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e74a      	b.n	8000252 <__udivmoddi4+0xa6>
 80003bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c0:	f1c3 0020 	rsb	r0, r3, #32
 80003c4:	40c1      	lsrs	r1, r0
 80003c6:	409d      	lsls	r5, r3
 80003c8:	fa24 f000 	lsr.w	r0, r4, r0
 80003cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d0:	4328      	orrs	r0, r5
 80003d2:	fbb1 f5f7 	udiv	r5, r1, r7
 80003d6:	fb07 1115 	mls	r1, r7, r5, r1
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	0c02      	lsrs	r2, r0, #16
 80003e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003e4:	fb05 f10e 	mul.w	r1, r5, lr
 80003e8:	4291      	cmp	r1, r2
 80003ea:	fa04 f403 	lsl.w	r4, r4, r3
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f0:	eb1c 0202 	adds.w	r2, ip, r2
 80003f4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	4291      	cmp	r1, r2
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3d02      	subs	r5, #2
 8000400:	4462      	add	r2, ip
 8000402:	1a52      	subs	r2, r2, r1
 8000404:	fbb2 f1f7 	udiv	r1, r2, r7
 8000408:	fb07 2211 	mls	r2, r7, r1, r2
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000412:	fb01 f20e 	mul.w	r2, r1, lr
 8000416:	4282      	cmp	r2, r0
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x280>
 800041a:	eb1c 0000 	adds.w	r0, ip, r0
 800041e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000422:	d216      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000424:	4282      	cmp	r2, r0
 8000426:	d914      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000428:	3902      	subs	r1, #2
 800042a:	4460      	add	r0, ip
 800042c:	1a80      	subs	r0, r0, r2
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4631      	mov	r1, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e70b      	b.n	8000252 <__udivmoddi4+0xa6>
 800043a:	4671      	mov	r1, lr
 800043c:	e6e9      	b.n	8000212 <__udivmoddi4+0x66>
 800043e:	4610      	mov	r0, r2
 8000440:	e6fe      	b.n	8000240 <__udivmoddi4+0x94>
 8000442:	454d      	cmp	r5, r9
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb9 0802 	subs.w	r8, r9, r2
 800044a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800044e:	3801      	subs	r0, #1
 8000450:	e7a5      	b.n	800039e <__udivmoddi4+0x1f2>
 8000452:	4641      	mov	r1, r8
 8000454:	e7ea      	b.n	800042c <__udivmoddi4+0x280>
 8000456:	4603      	mov	r3, r0
 8000458:	e796      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045a:	4645      	mov	r5, r8
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	46d0      	mov	r8, sl
 8000460:	e77d      	b.n	800035e <__udivmoddi4+0x1b2>
 8000462:	4464      	add	r4, ip
 8000464:	3802      	subs	r0, #2
 8000466:	e749      	b.n	80002fc <__udivmoddi4+0x150>
 8000468:	3d02      	subs	r5, #2
 800046a:	4462      	add	r2, ip
 800046c:	e731      	b.n	80002d2 <__udivmoddi4+0x126>
 800046e:	4608      	mov	r0, r1
 8000470:	e70a      	b.n	8000288 <__udivmoddi4+0xdc>
 8000472:	4631      	mov	r1, r6
 8000474:	e6ed      	b.n	8000252 <__udivmoddi4+0xa6>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000482:	4b14      	ldr	r3, [pc, #80]	; (80004d4 <HAL_MspInit+0x58>)
 8000484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000486:	4a13      	ldr	r2, [pc, #76]	; (80004d4 <HAL_MspInit+0x58>)
 8000488:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800048c:	6253      	str	r3, [r2, #36]	; 0x24
 800048e:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <HAL_MspInit+0x58>)
 8000490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000492:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800049a:	4b0e      	ldr	r3, [pc, #56]	; (80004d4 <HAL_MspInit+0x58>)
 800049c:	6a1b      	ldr	r3, [r3, #32]
 800049e:	4a0d      	ldr	r2, [pc, #52]	; (80004d4 <HAL_MspInit+0x58>)
 80004a0:	f043 0301 	orr.w	r3, r3, #1
 80004a4:	6213      	str	r3, [r2, #32]
 80004a6:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <HAL_MspInit+0x58>)
 80004a8:	6a1b      	ldr	r3, [r3, #32]
 80004aa:	f003 0301 	and.w	r3, r3, #1
 80004ae:	60bb      	str	r3, [r7, #8]
 80004b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b2:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <HAL_MspInit+0x58>)
 80004b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004b6:	4a07      	ldr	r2, [pc, #28]	; (80004d4 <HAL_MspInit+0x58>)
 80004b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004bc:	6253      	str	r3, [r2, #36]	; 0x24
 80004be:	4b05      	ldr	r3, [pc, #20]	; (80004d4 <HAL_MspInit+0x58>)
 80004c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ca:	bf00      	nop
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr
 80004d4:	40023800 	.word	0x40023800

080004d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08c      	sub	sp, #48	; 0x30
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e0:	f107 031c 	add.w	r3, r7, #28
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
 80004ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a36      	ldr	r2, [pc, #216]	; (80005d0 <HAL_UART_MspInit+0xf8>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d131      	bne.n	800055e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80004fa:	4b36      	ldr	r3, [pc, #216]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 80004fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004fe:	4a35      	ldr	r2, [pc, #212]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 8000500:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000504:	6253      	str	r3, [r2, #36]	; 0x24
 8000506:	4b33      	ldr	r3, [pc, #204]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 8000508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800050a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800050e:	61bb      	str	r3, [r7, #24]
 8000510:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000512:	4b30      	ldr	r3, [pc, #192]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	4a2f      	ldr	r2, [pc, #188]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 8000518:	f043 0304 	orr.w	r3, r3, #4
 800051c:	61d3      	str	r3, [r2, #28]
 800051e:	4b2d      	ldr	r3, [pc, #180]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	f003 0304 	and.w	r3, r3, #4
 8000526:	617b      	str	r3, [r7, #20]
 8000528:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800052a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800052e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000530:	2302      	movs	r3, #2
 8000532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000534:	2301      	movs	r3, #1
 8000536:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000538:	2303      	movs	r3, #3
 800053a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800053c:	2308      	movs	r3, #8
 800053e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000540:	f107 031c 	add.w	r3, r7, #28
 8000544:	4619      	mov	r1, r3
 8000546:	4824      	ldr	r0, [pc, #144]	; (80005d8 <HAL_UART_MspInit+0x100>)
 8000548:	f000 fac2 	bl	8000ad0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800054c:	2200      	movs	r2, #0
 800054e:	2100      	movs	r1, #0
 8000550:	2030      	movs	r0, #48	; 0x30
 8000552:	f000 f9fc 	bl	800094e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000556:	2030      	movs	r0, #48	; 0x30
 8000558:	f000 fa15 	bl	8000986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800055c:	e034      	b.n	80005c8 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a1e      	ldr	r2, [pc, #120]	; (80005dc <HAL_UART_MspInit+0x104>)
 8000564:	4293      	cmp	r3, r2
 8000566:	d12f      	bne.n	80005c8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000568:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 800056a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800056c:	4a19      	ldr	r2, [pc, #100]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 800056e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000572:	6253      	str	r3, [r2, #36]	; 0x24
 8000574:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 8000576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800057c:	613b      	str	r3, [r7, #16]
 800057e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000580:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 8000582:	69db      	ldr	r3, [r3, #28]
 8000584:	4a13      	ldr	r2, [pc, #76]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 8000586:	f043 0301 	orr.w	r3, r3, #1
 800058a:	61d3      	str	r3, [r2, #28]
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 800058e:	69db      	ldr	r3, [r3, #28]
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000598:	230c      	movs	r3, #12
 800059a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800059c:	2302      	movs	r3, #2
 800059e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005a4:	2303      	movs	r3, #3
 80005a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005a8:	2307      	movs	r3, #7
 80005aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ac:	f107 031c 	add.w	r3, r7, #28
 80005b0:	4619      	mov	r1, r3
 80005b2:	480b      	ldr	r0, [pc, #44]	; (80005e0 <HAL_UART_MspInit+0x108>)
 80005b4:	f000 fa8c 	bl	8000ad0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2100      	movs	r1, #0
 80005bc:	2026      	movs	r0, #38	; 0x26
 80005be:	f000 f9c6 	bl	800094e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80005c2:	2026      	movs	r0, #38	; 0x26
 80005c4:	f000 f9df 	bl	8000986 <HAL_NVIC_EnableIRQ>
}
 80005c8:	bf00      	nop
 80005ca:	3730      	adds	r7, #48	; 0x30
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40004c00 	.word	0x40004c00
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40020800 	.word	0x40020800
 80005dc:	40004400 	.word	0x40004400
 80005e0:	40020000 	.word	0x40020000

080005e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <NMI_Handler+0x4>

080005ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ee:	e7fe      	b.n	80005ee <HardFault_Handler+0x4>

080005f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <MemManage_Handler+0x4>

080005f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005fa:	e7fe      	b.n	80005fa <BusFault_Handler+0x4>

080005fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <UsageFault_Handler+0x4>

08000602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr

0800060e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr

0800061a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr

08000626 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
	...

08000634 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000634:	f7ff fff7 	bl	8000626 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000638:	480b      	ldr	r0, [pc, #44]	; (8000668 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800063a:	490c      	ldr	r1, [pc, #48]	; (800066c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800063c:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <LoopFillZerobss+0x16>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000640:	e002      	b.n	8000648 <LoopCopyDataInit>

08000642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000646:	3304      	adds	r3, #4

08000648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800064c:	d3f9      	bcc.n	8000642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064e:	4a09      	ldr	r2, [pc, #36]	; (8000674 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000650:	4c09      	ldr	r4, [pc, #36]	; (8000678 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000654:	e001      	b.n	800065a <LoopFillZerobss>

08000656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000658:	3204      	adds	r2, #4

0800065a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800065c:	d3fb      	bcc.n	8000656 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800065e:	f003 ffd1 	bl	8004604 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000662:	f002 fbc1 	bl	8002de8 <main>
  bx lr
 8000666:	4770      	bx	lr
  ldr r0, =_sdata
 8000668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800066c:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000670:	080046b8 	.word	0x080046b8
  ldr r2, =_sbss
 8000674:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8000678:	200007b0 	.word	0x200007b0

0800067c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800067c:	e7fe      	b.n	800067c <ADC1_IRQHandler>

0800067e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	b082      	sub	sp, #8
 8000682:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000684:	2300      	movs	r3, #0
 8000686:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000688:	2003      	movs	r0, #3
 800068a:	f000 f955 	bl	8000938 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800068e:	200f      	movs	r0, #15
 8000690:	f000 f80e 	bl	80006b0 <HAL_InitTick>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d002      	beq.n	80006a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800069a:	2301      	movs	r3, #1
 800069c:	71fb      	strb	r3, [r7, #7]
 800069e:	e001      	b.n	80006a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006a0:	f7ff feec 	bl	800047c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006a4:	79fb      	ldrb	r3, [r7, #7]
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006b8:	2300      	movs	r3, #0
 80006ba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80006bc:	4b16      	ldr	r3, [pc, #88]	; (8000718 <HAL_InitTick+0x68>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d022      	beq.n	800070a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80006c4:	4b15      	ldr	r3, [pc, #84]	; (800071c <HAL_InitTick+0x6c>)
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	4b13      	ldr	r3, [pc, #76]	; (8000718 <HAL_InitTick+0x68>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80006d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 f962 	bl	80009a2 <HAL_SYSTICK_Config>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d10f      	bne.n	8000704 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2b0f      	cmp	r3, #15
 80006e8:	d809      	bhi.n	80006fe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006ea:	2200      	movs	r2, #0
 80006ec:	6879      	ldr	r1, [r7, #4]
 80006ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006f2:	f000 f92c 	bl	800094e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006f6:	4a0a      	ldr	r2, [pc, #40]	; (8000720 <HAL_InitTick+0x70>)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	6013      	str	r3, [r2, #0]
 80006fc:	e007      	b.n	800070e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80006fe:	2301      	movs	r3, #1
 8000700:	73fb      	strb	r3, [r7, #15]
 8000702:	e004      	b.n	800070e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000704:	2301      	movs	r3, #1
 8000706:	73fb      	strb	r3, [r7, #15]
 8000708:	e001      	b.n	800070e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800070a:	2301      	movs	r3, #1
 800070c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800070e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000710:	4618      	mov	r0, r3
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000008 	.word	0x20000008
 800071c:	20000000 	.word	0x20000000
 8000720:	20000004 	.word	0x20000004

08000724 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000728:	4b05      	ldr	r3, [pc, #20]	; (8000740 <HAL_IncTick+0x1c>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <HAL_IncTick+0x20>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4413      	add	r3, r2
 8000732:	4a03      	ldr	r2, [pc, #12]	; (8000740 <HAL_IncTick+0x1c>)
 8000734:	6013      	str	r3, [r2, #0]
}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	20000050 	.word	0x20000050
 8000744:	20000008 	.word	0x20000008

08000748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  return uwTick;
 800074c:	4b02      	ldr	r3, [pc, #8]	; (8000758 <HAL_GetTick+0x10>)
 800074e:	681b      	ldr	r3, [r3, #0]
}
 8000750:	4618      	mov	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	20000050 	.word	0x20000050

0800075c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000764:	f7ff fff0 	bl	8000748 <HAL_GetTick>
 8000768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000774:	d004      	beq.n	8000780 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <HAL_Delay+0x40>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	4413      	add	r3, r2
 800077e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000780:	bf00      	nop
 8000782:	f7ff ffe1 	bl	8000748 <HAL_GetTick>
 8000786:	4602      	mov	r2, r0
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	1ad3      	subs	r3, r2, r3
 800078c:	68fa      	ldr	r2, [r7, #12]
 800078e:	429a      	cmp	r2, r3
 8000790:	d8f7      	bhi.n	8000782 <HAL_Delay+0x26>
  {
  }
}
 8000792:	bf00      	nop
 8000794:	bf00      	nop
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000008 	.word	0x20000008

080007a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <__NVIC_SetPriorityGrouping+0x44>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007b6:	68ba      	ldr	r2, [r7, #8]
 80007b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007bc:	4013      	ands	r3, r2
 80007be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007d2:	4a04      	ldr	r2, [pc, #16]	; (80007e4 <__NVIC_SetPriorityGrouping+0x44>)
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	60d3      	str	r3, [r2, #12]
}
 80007d8:	bf00      	nop
 80007da:	3714      	adds	r7, #20
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007ec:	4b04      	ldr	r3, [pc, #16]	; (8000800 <__NVIC_GetPriorityGrouping+0x18>)
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	0a1b      	lsrs	r3, r3, #8
 80007f2:	f003 0307 	and.w	r3, r3, #7
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800080e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000812:	2b00      	cmp	r3, #0
 8000814:	db0b      	blt.n	800082e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	f003 021f 	and.w	r2, r3, #31
 800081c:	4906      	ldr	r1, [pc, #24]	; (8000838 <__NVIC_EnableIRQ+0x34>)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	095b      	lsrs	r3, r3, #5
 8000824:	2001      	movs	r0, #1
 8000826:	fa00 f202 	lsl.w	r2, r0, r2
 800082a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr
 8000838:	e000e100 	.word	0xe000e100

0800083c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	6039      	str	r1, [r7, #0]
 8000846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084c:	2b00      	cmp	r3, #0
 800084e:	db0a      	blt.n	8000866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	b2da      	uxtb	r2, r3
 8000854:	490c      	ldr	r1, [pc, #48]	; (8000888 <__NVIC_SetPriority+0x4c>)
 8000856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085a:	0112      	lsls	r2, r2, #4
 800085c:	b2d2      	uxtb	r2, r2
 800085e:	440b      	add	r3, r1
 8000860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000864:	e00a      	b.n	800087c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4908      	ldr	r1, [pc, #32]	; (800088c <__NVIC_SetPriority+0x50>)
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	f003 030f 	and.w	r3, r3, #15
 8000872:	3b04      	subs	r3, #4
 8000874:	0112      	lsls	r2, r2, #4
 8000876:	b2d2      	uxtb	r2, r2
 8000878:	440b      	add	r3, r1
 800087a:	761a      	strb	r2, [r3, #24]
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000e100 	.word	0xe000e100
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000890:	b480      	push	{r7}
 8000892:	b089      	sub	sp, #36	; 0x24
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	f1c3 0307 	rsb	r3, r3, #7
 80008aa:	2b04      	cmp	r3, #4
 80008ac:	bf28      	it	cs
 80008ae:	2304      	movcs	r3, #4
 80008b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	3304      	adds	r3, #4
 80008b6:	2b06      	cmp	r3, #6
 80008b8:	d902      	bls.n	80008c0 <NVIC_EncodePriority+0x30>
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	3b03      	subs	r3, #3
 80008be:	e000      	b.n	80008c2 <NVIC_EncodePriority+0x32>
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	43da      	mvns	r2, r3
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	401a      	ands	r2, r3
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	fa01 f303 	lsl.w	r3, r1, r3
 80008e2:	43d9      	mvns	r1, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e8:	4313      	orrs	r3, r2
         );
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3724      	adds	r7, #36	; 0x24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr

080008f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3b01      	subs	r3, #1
 8000900:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000904:	d301      	bcc.n	800090a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000906:	2301      	movs	r3, #1
 8000908:	e00f      	b.n	800092a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800090a:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <SysTick_Config+0x40>)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3b01      	subs	r3, #1
 8000910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000912:	210f      	movs	r1, #15
 8000914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000918:	f7ff ff90 	bl	800083c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800091c:	4b05      	ldr	r3, [pc, #20]	; (8000934 <SysTick_Config+0x40>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000922:	4b04      	ldr	r3, [pc, #16]	; (8000934 <SysTick_Config+0x40>)
 8000924:	2207      	movs	r2, #7
 8000926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	e000e010 	.word	0xe000e010

08000938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff ff2d 	bl	80007a0 <__NVIC_SetPriorityGrouping>
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b086      	sub	sp, #24
 8000952:	af00      	add	r7, sp, #0
 8000954:	4603      	mov	r3, r0
 8000956:	60b9      	str	r1, [r7, #8]
 8000958:	607a      	str	r2, [r7, #4]
 800095a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000960:	f7ff ff42 	bl	80007e8 <__NVIC_GetPriorityGrouping>
 8000964:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	68b9      	ldr	r1, [r7, #8]
 800096a:	6978      	ldr	r0, [r7, #20]
 800096c:	f7ff ff90 	bl	8000890 <NVIC_EncodePriority>
 8000970:	4602      	mov	r2, r0
 8000972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000976:	4611      	mov	r1, r2
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ff5f 	bl	800083c <__NVIC_SetPriority>
}
 800097e:	bf00      	nop
 8000980:	3718      	adds	r7, #24
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b082      	sub	sp, #8
 800098a:	af00      	add	r7, sp, #0
 800098c:	4603      	mov	r3, r0
 800098e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff ff35 	bl	8000804 <__NVIC_EnableIRQ>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b082      	sub	sp, #8
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff ffa2 	bl	80008f4 <SysTick_Config>
 80009b0:	4603      	mov	r3, r0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80009be:	f000 f802 	bl	80009c6 <HAL_SYSTICK_Callback>
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr

080009d2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80009d2:	b480      	push	{r7}
 80009d4:	b085      	sub	sp, #20
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009da:	2300      	movs	r3, #0
 80009dc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	2b02      	cmp	r3, #2
 80009e8:	d008      	beq.n	80009fc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2204      	movs	r2, #4
 80009ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2200      	movs	r2, #0
 80009f4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80009f8:	2301      	movs	r3, #1
 80009fa:	e022      	b.n	8000a42 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f022 020e 	bic.w	r2, r2, #14
 8000a0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f022 0201 	bic.w	r2, r2, #1
 8000a1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a20:	f003 021c 	and.w	r2, r3, #28
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a28:	2101      	movs	r1, #1
 8000a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a2e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2201      	movs	r2, #1
 8000a34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3714      	adds	r7, #20
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr

08000a4c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a54:	2300      	movs	r3, #0
 8000a56:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	2b02      	cmp	r3, #2
 8000a62:	d005      	beq.n	8000a70 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2204      	movs	r2, #4
 8000a68:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	73fb      	strb	r3, [r7, #15]
 8000a6e:	e029      	b.n	8000ac4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f022 020e 	bic.w	r2, r2, #14
 8000a7e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f022 0201 	bic.w	r2, r2, #1
 8000a8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	f003 021c 	and.w	r2, r3, #28
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d003      	beq.n	8000ac4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	4798      	blx	r3
    }
  }
  return status;
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b087      	sub	sp, #28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ae6:	e160      	b.n	8000daa <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	2101      	movs	r1, #1
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	fa01 f303 	lsl.w	r3, r1, r3
 8000af4:	4013      	ands	r3, r2
 8000af6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	f000 8152 	beq.w	8000da4 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f003 0303 	and.w	r3, r3, #3
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d005      	beq.n	8000b18 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d130      	bne.n	8000b7a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	2203      	movs	r2, #3
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	68da      	ldr	r2, [r3, #12]
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000b4e:	2201      	movs	r2, #1
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43db      	mvns	r3, r3
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	091b      	lsrs	r3, r3, #4
 8000b64:	f003 0201 	and.w	r2, r3, #1
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f003 0303 	and.w	r3, r3, #3
 8000b82:	2b03      	cmp	r3, #3
 8000b84:	d017      	beq.n	8000bb6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	2203      	movs	r2, #3
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43db      	mvns	r3, r3
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	689a      	ldr	r2, [r3, #8]
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f003 0303 	and.w	r3, r3, #3
 8000bbe:	2b02      	cmp	r3, #2
 8000bc0:	d123      	bne.n	8000c0a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	08da      	lsrs	r2, r3, #3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	3208      	adds	r2, #8
 8000bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bce:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	220f      	movs	r2, #15
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43db      	mvns	r3, r3
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	4013      	ands	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	691a      	ldr	r2, [r3, #16]
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	f003 0307 	and.w	r3, r3, #7
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	08da      	lsrs	r2, r3, #3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3208      	adds	r2, #8
 8000c04:	6939      	ldr	r1, [r7, #16]
 8000c06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	2203      	movs	r2, #3
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f003 0203 	and.w	r2, r3, #3
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f000 80ac 	beq.w	8000da4 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4c:	4b5e      	ldr	r3, [pc, #376]	; (8000dc8 <HAL_GPIO_Init+0x2f8>)
 8000c4e:	6a1b      	ldr	r3, [r3, #32]
 8000c50:	4a5d      	ldr	r2, [pc, #372]	; (8000dc8 <HAL_GPIO_Init+0x2f8>)
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	6213      	str	r3, [r2, #32]
 8000c58:	4b5b      	ldr	r3, [pc, #364]	; (8000dc8 <HAL_GPIO_Init+0x2f8>)
 8000c5a:	6a1b      	ldr	r3, [r3, #32]
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000c64:	4a59      	ldr	r2, [pc, #356]	; (8000dcc <HAL_GPIO_Init+0x2fc>)
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	089b      	lsrs	r3, r3, #2
 8000c6a:	3302      	adds	r3, #2
 8000c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c70:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	f003 0303 	and.w	r3, r3, #3
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	220f      	movs	r2, #15
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4013      	ands	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a51      	ldr	r2, [pc, #324]	; (8000dd0 <HAL_GPIO_Init+0x300>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d025      	beq.n	8000cdc <HAL_GPIO_Init+0x20c>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a50      	ldr	r2, [pc, #320]	; (8000dd4 <HAL_GPIO_Init+0x304>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d01f      	beq.n	8000cd8 <HAL_GPIO_Init+0x208>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a4f      	ldr	r2, [pc, #316]	; (8000dd8 <HAL_GPIO_Init+0x308>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d019      	beq.n	8000cd4 <HAL_GPIO_Init+0x204>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a4e      	ldr	r2, [pc, #312]	; (8000ddc <HAL_GPIO_Init+0x30c>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d013      	beq.n	8000cd0 <HAL_GPIO_Init+0x200>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4a4d      	ldr	r2, [pc, #308]	; (8000de0 <HAL_GPIO_Init+0x310>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d00d      	beq.n	8000ccc <HAL_GPIO_Init+0x1fc>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a4c      	ldr	r2, [pc, #304]	; (8000de4 <HAL_GPIO_Init+0x314>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d007      	beq.n	8000cc8 <HAL_GPIO_Init+0x1f8>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a4b      	ldr	r2, [pc, #300]	; (8000de8 <HAL_GPIO_Init+0x318>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d101      	bne.n	8000cc4 <HAL_GPIO_Init+0x1f4>
 8000cc0:	2306      	movs	r3, #6
 8000cc2:	e00c      	b.n	8000cde <HAL_GPIO_Init+0x20e>
 8000cc4:	2307      	movs	r3, #7
 8000cc6:	e00a      	b.n	8000cde <HAL_GPIO_Init+0x20e>
 8000cc8:	2305      	movs	r3, #5
 8000cca:	e008      	b.n	8000cde <HAL_GPIO_Init+0x20e>
 8000ccc:	2304      	movs	r3, #4
 8000cce:	e006      	b.n	8000cde <HAL_GPIO_Init+0x20e>
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	e004      	b.n	8000cde <HAL_GPIO_Init+0x20e>
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	e002      	b.n	8000cde <HAL_GPIO_Init+0x20e>
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e000      	b.n	8000cde <HAL_GPIO_Init+0x20e>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	697a      	ldr	r2, [r7, #20]
 8000ce0:	f002 0203 	and.w	r2, r2, #3
 8000ce4:	0092      	lsls	r2, r2, #2
 8000ce6:	4093      	lsls	r3, r2
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000cee:	4937      	ldr	r1, [pc, #220]	; (8000dcc <HAL_GPIO_Init+0x2fc>)
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	089b      	lsrs	r3, r3, #2
 8000cf4:	3302      	adds	r3, #2
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cfc:	4b3b      	ldr	r3, [pc, #236]	; (8000dec <HAL_GPIO_Init+0x31c>)
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	43db      	mvns	r3, r3
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d003      	beq.n	8000d20 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d20:	4a32      	ldr	r2, [pc, #200]	; (8000dec <HAL_GPIO_Init+0x31c>)
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d26:	4b31      	ldr	r3, [pc, #196]	; (8000dec <HAL_GPIO_Init+0x31c>)
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4013      	ands	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d003      	beq.n	8000d4a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d4a:	4a28      	ldr	r2, [pc, #160]	; (8000dec <HAL_GPIO_Init+0x31c>)
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d50:	4b26      	ldr	r3, [pc, #152]	; (8000dec <HAL_GPIO_Init+0x31c>)
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d003      	beq.n	8000d74 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d74:	4a1d      	ldr	r2, [pc, #116]	; (8000dec <HAL_GPIO_Init+0x31c>)
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d7a:	4b1c      	ldr	r3, [pc, #112]	; (8000dec <HAL_GPIO_Init+0x31c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	43db      	mvns	r3, r3
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	4013      	ands	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d003      	beq.n	8000d9e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d9e:	4a13      	ldr	r2, [pc, #76]	; (8000dec <HAL_GPIO_Init+0x31c>)
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	3301      	adds	r3, #1
 8000da8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	fa22 f303 	lsr.w	r3, r2, r3
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	f47f ae97 	bne.w	8000ae8 <HAL_GPIO_Init+0x18>
  }
}
 8000dba:	bf00      	nop
 8000dbc:	bf00      	nop
 8000dbe:	371c      	adds	r7, #28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bc80      	pop	{r7}
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40010000 	.word	0x40010000
 8000dd0:	40020000 	.word	0x40020000
 8000dd4:	40020400 	.word	0x40020400
 8000dd8:	40020800 	.word	0x40020800
 8000ddc:	40020c00 	.word	0x40020c00
 8000de0:	40021000 	.word	0x40021000
 8000de4:	40021400 	.word	0x40021400
 8000de8:	40021800 	.word	0x40021800
 8000dec:	40010400 	.word	0x40010400

08000df0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	691a      	ldr	r2, [r3, #16]
 8000e00:	887b      	ldrh	r3, [r7, #2]
 8000e02:	4013      	ands	r3, r2
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d002      	beq.n	8000e0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	73fb      	strb	r3, [r7, #15]
 8000e0c:	e001      	b.n	8000e12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr

08000e1e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
 8000e26:	460b      	mov	r3, r1
 8000e28:	807b      	strh	r3, [r7, #2]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e2e:	787b      	ldrb	r3, [r7, #1]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d003      	beq.n	8000e3c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e34:	887a      	ldrh	r2, [r7, #2]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000e3a:	e003      	b.n	8000e44 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000e3c:	887b      	ldrh	r3, [r7, #2]
 8000e3e:	041a      	lsls	r2, r3, #16
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	619a      	str	r2, [r3, #24]
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc80      	pop	{r7}
 8000e4c:	4770      	bx	lr
	...

08000e50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d101      	bne.n	8000e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e31d      	b.n	800149e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e62:	4b94      	ldr	r3, [pc, #592]	; (80010b4 <HAL_RCC_OscConfig+0x264>)
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	f003 030c 	and.w	r3, r3, #12
 8000e6a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e6c:	4b91      	ldr	r3, [pc, #580]	; (80010b4 <HAL_RCC_OscConfig+0x264>)
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e74:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d07b      	beq.n	8000f7a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	2b08      	cmp	r3, #8
 8000e86:	d006      	beq.n	8000e96 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	2b0c      	cmp	r3, #12
 8000e8c:	d10f      	bne.n	8000eae <HAL_RCC_OscConfig+0x5e>
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e94:	d10b      	bne.n	8000eae <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e96:	4b87      	ldr	r3, [pc, #540]	; (80010b4 <HAL_RCC_OscConfig+0x264>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d06a      	beq.n	8000f78 <HAL_RCC_OscConfig+0x128>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d166      	bne.n	8000f78 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e2f7      	b.n	800149e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d106      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x74>
 8000eb6:	4b7f      	ldr	r3, [pc, #508]	; (80010b4 <HAL_RCC_OscConfig+0x264>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a7e      	ldr	r2, [pc, #504]	; (80010b4 <HAL_RCC_OscConfig+0x264>)
 8000ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	e02d      	b.n	8000f20 <HAL_RCC_OscConfig+0xd0>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d10c      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x96>
 8000ecc:	4b79      	ldr	r3, [pc, #484]	; (80010b4 <HAL_RCC_OscConfig+0x264>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a78      	ldr	r2, [pc, #480]	; (80010b4 <HAL_RCC_OscConfig+0x264>)
 8000ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	4b76      	ldr	r3, [pc, #472]	; (80010b4 <HAL_RCC_OscConfig+0x264>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a75      	ldr	r2, [pc, #468]	; (80010b4 <HAL_RCC_OscConfig+0x264>)
 8000ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	e01c      	b.n	8000f20 <HAL_RCC_OscConfig+0xd0>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	2b05      	cmp	r3, #5
 8000eec:	d10c      	bne.n	8000f08 <HAL_RCC_OscConfig+0xb8>
 8000eee:	4b71      	ldr	r3, [pc, #452]	; (80010b4 <HAL_RCC_OscConfig+0x264>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a70      	ldr	r2, [pc, #448]	; (80010b4 <HAL_RCC_OscConfig+0x264>)
 8000ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ef8:	6013      	str	r3, [r2, #0]
 8000efa:	4b6e      	ldr	r3, [pc, #440]	; (80010b4 <HAL_RCC_OscConfig+0x264>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a6d      	ldr	r2, [pc, #436]	; (80010b4 <HAL_RCC_OscConfig+0x264>)
 8000f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	e00b      	b.n	8000f20 <HAL_RCC_OscConfig+0xd0>
 8000f08:	4b6a      	ldr	r3, [pc, #424]	; (80010b4 <HAL_RCC_OscConfig+0x264>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a69      	ldr	r2, [pc, #420]	; (80010b4 <HAL_RCC_OscConfig+0x264>)
 8000f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	4b67      	ldr	r3, [pc, #412]	; (80010b4 <HAL_RCC_OscConfig+0x264>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a66      	ldr	r2, [pc, #408]	; (80010b4 <HAL_RCC_OscConfig+0x264>)
 8000f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d013      	beq.n	8000f50 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f28:	f7ff fc0e 	bl	8000748 <HAL_GetTick>
 8000f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f2e:	e008      	b.n	8000f42 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f30:	f7ff fc0a 	bl	8000748 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b64      	cmp	r3, #100	; 0x64
 8000f3c:	d901      	bls.n	8000f42 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e2ad      	b.n	800149e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f42:	4b5c      	ldr	r3, [pc, #368]	; (80010b4 <HAL_RCC_OscConfig+0x264>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d0f0      	beq.n	8000f30 <HAL_RCC_OscConfig+0xe0>
 8000f4e:	e014      	b.n	8000f7a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f50:	f7ff fbfa 	bl	8000748 <HAL_GetTick>
 8000f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f56:	e008      	b.n	8000f6a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f58:	f7ff fbf6 	bl	8000748 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b64      	cmp	r3, #100	; 0x64
 8000f64:	d901      	bls.n	8000f6a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e299      	b.n	800149e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f6a:	4b52      	ldr	r3, [pc, #328]	; (80010b4 <HAL_RCC_OscConfig+0x264>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1f0      	bne.n	8000f58 <HAL_RCC_OscConfig+0x108>
 8000f76:	e000      	b.n	8000f7a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d05a      	beq.n	800103c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	2b04      	cmp	r3, #4
 8000f8a:	d005      	beq.n	8000f98 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	2b0c      	cmp	r3, #12
 8000f90:	d119      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x176>
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d116      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f98:	4b46      	ldr	r3, [pc, #280]	; (80010b4 <HAL_RCC_OscConfig+0x264>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d005      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x160>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d001      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e276      	b.n	800149e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb0:	4b40      	ldr	r3, [pc, #256]	; (80010b4 <HAL_RCC_OscConfig+0x264>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	493d      	ldr	r1, [pc, #244]	; (80010b4 <HAL_RCC_OscConfig+0x264>)
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fc4:	e03a      	b.n	800103c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d020      	beq.n	8001010 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fce:	4b3a      	ldr	r3, [pc, #232]	; (80010b8 <HAL_RCC_OscConfig+0x268>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fbb8 	bl	8000748 <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fdc:	f7ff fbb4 	bl	8000748 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e257      	b.n	800149e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000fee:	4b31      	ldr	r3, [pc, #196]	; (80010b4 <HAL_RCC_OscConfig+0x264>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d0f0      	beq.n	8000fdc <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ffa:	4b2e      	ldr	r3, [pc, #184]	; (80010b4 <HAL_RCC_OscConfig+0x264>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	691b      	ldr	r3, [r3, #16]
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	492a      	ldr	r1, [pc, #168]	; (80010b4 <HAL_RCC_OscConfig+0x264>)
 800100a:	4313      	orrs	r3, r2
 800100c:	604b      	str	r3, [r1, #4]
 800100e:	e015      	b.n	800103c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001010:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <HAL_RCC_OscConfig+0x268>)
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001016:	f7ff fb97 	bl	8000748 <HAL_GetTick>
 800101a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800101c:	e008      	b.n	8001030 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800101e:	f7ff fb93 	bl	8000748 <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e236      	b.n	800149e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001030:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <HAL_RCC_OscConfig+0x264>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1f0      	bne.n	800101e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0310 	and.w	r3, r3, #16
 8001044:	2b00      	cmp	r3, #0
 8001046:	f000 80b8 	beq.w	80011ba <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d170      	bne.n	8001132 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001050:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <HAL_RCC_OscConfig+0x264>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001058:	2b00      	cmp	r3, #0
 800105a:	d005      	beq.n	8001068 <HAL_RCC_OscConfig+0x218>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d101      	bne.n	8001068 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e21a      	b.n	800149e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a1a      	ldr	r2, [r3, #32]
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <HAL_RCC_OscConfig+0x264>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001074:	429a      	cmp	r2, r3
 8001076:	d921      	bls.n	80010bc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fc3b 	bl	80018f8 <RCC_SetFlashLatencyFromMSIRange>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e208      	b.n	800149e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800108c:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <HAL_RCC_OscConfig+0x264>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	4906      	ldr	r1, [pc, #24]	; (80010b4 <HAL_RCC_OscConfig+0x264>)
 800109a:	4313      	orrs	r3, r2
 800109c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800109e:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <HAL_RCC_OscConfig+0x264>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	061b      	lsls	r3, r3, #24
 80010ac:	4901      	ldr	r1, [pc, #4]	; (80010b4 <HAL_RCC_OscConfig+0x264>)
 80010ae:	4313      	orrs	r3, r2
 80010b0:	604b      	str	r3, [r1, #4]
 80010b2:	e020      	b.n	80010f6 <HAL_RCC_OscConfig+0x2a6>
 80010b4:	40023800 	.word	0x40023800
 80010b8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010bc:	4b99      	ldr	r3, [pc, #612]	; (8001324 <HAL_RCC_OscConfig+0x4d4>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a1b      	ldr	r3, [r3, #32]
 80010c8:	4996      	ldr	r1, [pc, #600]	; (8001324 <HAL_RCC_OscConfig+0x4d4>)
 80010ca:	4313      	orrs	r3, r2
 80010cc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010ce:	4b95      	ldr	r3, [pc, #596]	; (8001324 <HAL_RCC_OscConfig+0x4d4>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	061b      	lsls	r3, r3, #24
 80010dc:	4991      	ldr	r1, [pc, #580]	; (8001324 <HAL_RCC_OscConfig+0x4d4>)
 80010de:	4313      	orrs	r3, r2
 80010e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a1b      	ldr	r3, [r3, #32]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 fc06 	bl	80018f8 <RCC_SetFlashLatencyFromMSIRange>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e1d3      	b.n	800149e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a1b      	ldr	r3, [r3, #32]
 80010fa:	0b5b      	lsrs	r3, r3, #13
 80010fc:	3301      	adds	r3, #1
 80010fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001106:	4a87      	ldr	r2, [pc, #540]	; (8001324 <HAL_RCC_OscConfig+0x4d4>)
 8001108:	6892      	ldr	r2, [r2, #8]
 800110a:	0912      	lsrs	r2, r2, #4
 800110c:	f002 020f 	and.w	r2, r2, #15
 8001110:	4985      	ldr	r1, [pc, #532]	; (8001328 <HAL_RCC_OscConfig+0x4d8>)
 8001112:	5c8a      	ldrb	r2, [r1, r2]
 8001114:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001116:	4a85      	ldr	r2, [pc, #532]	; (800132c <HAL_RCC_OscConfig+0x4dc>)
 8001118:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800111a:	4b85      	ldr	r3, [pc, #532]	; (8001330 <HAL_RCC_OscConfig+0x4e0>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fac6 	bl	80006b0 <HAL_InitTick>
 8001124:	4603      	mov	r3, r0
 8001126:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d045      	beq.n	80011ba <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	e1b5      	b.n	800149e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d029      	beq.n	800118e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800113a:	4b7e      	ldr	r3, [pc, #504]	; (8001334 <HAL_RCC_OscConfig+0x4e4>)
 800113c:	2201      	movs	r2, #1
 800113e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001140:	f7ff fb02 	bl	8000748 <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001148:	f7ff fafe 	bl	8000748 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e1a1      	b.n	800149e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800115a:	4b72      	ldr	r3, [pc, #456]	; (8001324 <HAL_RCC_OscConfig+0x4d4>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001162:	2b00      	cmp	r3, #0
 8001164:	d0f0      	beq.n	8001148 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001166:	4b6f      	ldr	r3, [pc, #444]	; (8001324 <HAL_RCC_OscConfig+0x4d4>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6a1b      	ldr	r3, [r3, #32]
 8001172:	496c      	ldr	r1, [pc, #432]	; (8001324 <HAL_RCC_OscConfig+0x4d4>)
 8001174:	4313      	orrs	r3, r2
 8001176:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001178:	4b6a      	ldr	r3, [pc, #424]	; (8001324 <HAL_RCC_OscConfig+0x4d4>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	69db      	ldr	r3, [r3, #28]
 8001184:	061b      	lsls	r3, r3, #24
 8001186:	4967      	ldr	r1, [pc, #412]	; (8001324 <HAL_RCC_OscConfig+0x4d4>)
 8001188:	4313      	orrs	r3, r2
 800118a:	604b      	str	r3, [r1, #4]
 800118c:	e015      	b.n	80011ba <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800118e:	4b69      	ldr	r3, [pc, #420]	; (8001334 <HAL_RCC_OscConfig+0x4e4>)
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001194:	f7ff fad8 	bl	8000748 <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800119c:	f7ff fad4 	bl	8000748 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e177      	b.n	800149e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80011ae:	4b5d      	ldr	r3, [pc, #372]	; (8001324 <HAL_RCC_OscConfig+0x4d4>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f0      	bne.n	800119c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d030      	beq.n	8001228 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d016      	beq.n	80011fc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ce:	4b5a      	ldr	r3, [pc, #360]	; (8001338 <HAL_RCC_OscConfig+0x4e8>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d4:	f7ff fab8 	bl	8000748 <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011dc:	f7ff fab4 	bl	8000748 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e157      	b.n	800149e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011ee:	4b4d      	ldr	r3, [pc, #308]	; (8001324 <HAL_RCC_OscConfig+0x4d4>)
 80011f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d0f0      	beq.n	80011dc <HAL_RCC_OscConfig+0x38c>
 80011fa:	e015      	b.n	8001228 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011fc:	4b4e      	ldr	r3, [pc, #312]	; (8001338 <HAL_RCC_OscConfig+0x4e8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001202:	f7ff faa1 	bl	8000748 <HAL_GetTick>
 8001206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001208:	e008      	b.n	800121c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800120a:	f7ff fa9d 	bl	8000748 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e140      	b.n	800149e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800121c:	4b41      	ldr	r3, [pc, #260]	; (8001324 <HAL_RCC_OscConfig+0x4d4>)
 800121e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1f0      	bne.n	800120a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 80b5 	beq.w	80013a0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001236:	2300      	movs	r3, #0
 8001238:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800123a:	4b3a      	ldr	r3, [pc, #232]	; (8001324 <HAL_RCC_OscConfig+0x4d4>)
 800123c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d10d      	bne.n	8001262 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001246:	4b37      	ldr	r3, [pc, #220]	; (8001324 <HAL_RCC_OscConfig+0x4d4>)
 8001248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124a:	4a36      	ldr	r2, [pc, #216]	; (8001324 <HAL_RCC_OscConfig+0x4d4>)
 800124c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001250:	6253      	str	r3, [r2, #36]	; 0x24
 8001252:	4b34      	ldr	r3, [pc, #208]	; (8001324 <HAL_RCC_OscConfig+0x4d4>)
 8001254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800125e:	2301      	movs	r3, #1
 8001260:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001262:	4b36      	ldr	r3, [pc, #216]	; (800133c <HAL_RCC_OscConfig+0x4ec>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126a:	2b00      	cmp	r3, #0
 800126c:	d118      	bne.n	80012a0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800126e:	4b33      	ldr	r3, [pc, #204]	; (800133c <HAL_RCC_OscConfig+0x4ec>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a32      	ldr	r2, [pc, #200]	; (800133c <HAL_RCC_OscConfig+0x4ec>)
 8001274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001278:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800127a:	f7ff fa65 	bl	8000748 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001282:	f7ff fa61 	bl	8000748 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b64      	cmp	r3, #100	; 0x64
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e104      	b.n	800149e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001294:	4b29      	ldr	r3, [pc, #164]	; (800133c <HAL_RCC_OscConfig+0x4ec>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0f0      	beq.n	8001282 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d106      	bne.n	80012b6 <HAL_RCC_OscConfig+0x466>
 80012a8:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <HAL_RCC_OscConfig+0x4d4>)
 80012aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ac:	4a1d      	ldr	r2, [pc, #116]	; (8001324 <HAL_RCC_OscConfig+0x4d4>)
 80012ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b2:	6353      	str	r3, [r2, #52]	; 0x34
 80012b4:	e02d      	b.n	8001312 <HAL_RCC_OscConfig+0x4c2>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10c      	bne.n	80012d8 <HAL_RCC_OscConfig+0x488>
 80012be:	4b19      	ldr	r3, [pc, #100]	; (8001324 <HAL_RCC_OscConfig+0x4d4>)
 80012c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012c2:	4a18      	ldr	r2, [pc, #96]	; (8001324 <HAL_RCC_OscConfig+0x4d4>)
 80012c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012c8:	6353      	str	r3, [r2, #52]	; 0x34
 80012ca:	4b16      	ldr	r3, [pc, #88]	; (8001324 <HAL_RCC_OscConfig+0x4d4>)
 80012cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ce:	4a15      	ldr	r2, [pc, #84]	; (8001324 <HAL_RCC_OscConfig+0x4d4>)
 80012d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80012d4:	6353      	str	r3, [r2, #52]	; 0x34
 80012d6:	e01c      	b.n	8001312 <HAL_RCC_OscConfig+0x4c2>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	2b05      	cmp	r3, #5
 80012de:	d10c      	bne.n	80012fa <HAL_RCC_OscConfig+0x4aa>
 80012e0:	4b10      	ldr	r3, [pc, #64]	; (8001324 <HAL_RCC_OscConfig+0x4d4>)
 80012e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e4:	4a0f      	ldr	r2, [pc, #60]	; (8001324 <HAL_RCC_OscConfig+0x4d4>)
 80012e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ea:	6353      	str	r3, [r2, #52]	; 0x34
 80012ec:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <HAL_RCC_OscConfig+0x4d4>)
 80012ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f0:	4a0c      	ldr	r2, [pc, #48]	; (8001324 <HAL_RCC_OscConfig+0x4d4>)
 80012f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f6:	6353      	str	r3, [r2, #52]	; 0x34
 80012f8:	e00b      	b.n	8001312 <HAL_RCC_OscConfig+0x4c2>
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <HAL_RCC_OscConfig+0x4d4>)
 80012fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012fe:	4a09      	ldr	r2, [pc, #36]	; (8001324 <HAL_RCC_OscConfig+0x4d4>)
 8001300:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001304:	6353      	str	r3, [r2, #52]	; 0x34
 8001306:	4b07      	ldr	r3, [pc, #28]	; (8001324 <HAL_RCC_OscConfig+0x4d4>)
 8001308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800130a:	4a06      	ldr	r2, [pc, #24]	; (8001324 <HAL_RCC_OscConfig+0x4d4>)
 800130c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001310:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d024      	beq.n	8001364 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131a:	f7ff fa15 	bl	8000748 <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001320:	e019      	b.n	8001356 <HAL_RCC_OscConfig+0x506>
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800
 8001328:	08004670 	.word	0x08004670
 800132c:	20000000 	.word	0x20000000
 8001330:	20000004 	.word	0x20000004
 8001334:	42470020 	.word	0x42470020
 8001338:	42470680 	.word	0x42470680
 800133c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001340:	f7ff fa02 	bl	8000748 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	f241 3288 	movw	r2, #5000	; 0x1388
 800134e:	4293      	cmp	r3, r2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e0a3      	b.n	800149e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001356:	4b54      	ldr	r3, [pc, #336]	; (80014a8 <HAL_RCC_OscConfig+0x658>)
 8001358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800135a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0ee      	beq.n	8001340 <HAL_RCC_OscConfig+0x4f0>
 8001362:	e014      	b.n	800138e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001364:	f7ff f9f0 	bl	8000748 <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800136a:	e00a      	b.n	8001382 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800136c:	f7ff f9ec 	bl	8000748 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	f241 3288 	movw	r2, #5000	; 0x1388
 800137a:	4293      	cmp	r3, r2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e08d      	b.n	800149e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001382:	4b49      	ldr	r3, [pc, #292]	; (80014a8 <HAL_RCC_OscConfig+0x658>)
 8001384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001386:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1ee      	bne.n	800136c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800138e:	7ffb      	ldrb	r3, [r7, #31]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d105      	bne.n	80013a0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001394:	4b44      	ldr	r3, [pc, #272]	; (80014a8 <HAL_RCC_OscConfig+0x658>)
 8001396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001398:	4a43      	ldr	r2, [pc, #268]	; (80014a8 <HAL_RCC_OscConfig+0x658>)
 800139a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800139e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d079      	beq.n	800149c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	2b0c      	cmp	r3, #12
 80013ac:	d056      	beq.n	800145c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d13b      	bne.n	800142e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013b6:	4b3d      	ldr	r3, [pc, #244]	; (80014ac <HAL_RCC_OscConfig+0x65c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013bc:	f7ff f9c4 	bl	8000748 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013c4:	f7ff f9c0 	bl	8000748 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e063      	b.n	800149e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80013d6:	4b34      	ldr	r3, [pc, #208]	; (80014a8 <HAL_RCC_OscConfig+0x658>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f0      	bne.n	80013c4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013e2:	4b31      	ldr	r3, [pc, #196]	; (80014a8 <HAL_RCC_OscConfig+0x658>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f2:	4319      	orrs	r1, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f8:	430b      	orrs	r3, r1
 80013fa:	492b      	ldr	r1, [pc, #172]	; (80014a8 <HAL_RCC_OscConfig+0x658>)
 80013fc:	4313      	orrs	r3, r2
 80013fe:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001400:	4b2a      	ldr	r3, [pc, #168]	; (80014ac <HAL_RCC_OscConfig+0x65c>)
 8001402:	2201      	movs	r2, #1
 8001404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001406:	f7ff f99f 	bl	8000748 <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800140e:	f7ff f99b 	bl	8000748 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e03e      	b.n	800149e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001420:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <HAL_RCC_OscConfig+0x658>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f0      	beq.n	800140e <HAL_RCC_OscConfig+0x5be>
 800142c:	e036      	b.n	800149c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800142e:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <HAL_RCC_OscConfig+0x65c>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001434:	f7ff f988 	bl	8000748 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800143c:	f7ff f984 	bl	8000748 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e027      	b.n	800149e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800144e:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <HAL_RCC_OscConfig+0x658>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f0      	bne.n	800143c <HAL_RCC_OscConfig+0x5ec>
 800145a:	e01f      	b.n	800149c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001460:	2b01      	cmp	r3, #1
 8001462:	d101      	bne.n	8001468 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e01a      	b.n	800149e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <HAL_RCC_OscConfig+0x658>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001478:	429a      	cmp	r2, r3
 800147a:	d10d      	bne.n	8001498 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001486:	429a      	cmp	r2, r3
 8001488:	d106      	bne.n	8001498 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001494:	429a      	cmp	r2, r3
 8001496:	d001      	beq.n	800149c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e000      	b.n	800149e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3720      	adds	r7, #32
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800
 80014ac:	42470060 	.word	0x42470060

080014b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e11a      	b.n	80016fa <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014c4:	4b8f      	ldr	r3, [pc, #572]	; (8001704 <HAL_RCC_ClockConfig+0x254>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d919      	bls.n	8001506 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d105      	bne.n	80014e4 <HAL_RCC_ClockConfig+0x34>
 80014d8:	4b8a      	ldr	r3, [pc, #552]	; (8001704 <HAL_RCC_ClockConfig+0x254>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a89      	ldr	r2, [pc, #548]	; (8001704 <HAL_RCC_ClockConfig+0x254>)
 80014de:	f043 0304 	orr.w	r3, r3, #4
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	4b87      	ldr	r3, [pc, #540]	; (8001704 <HAL_RCC_ClockConfig+0x254>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f023 0201 	bic.w	r2, r3, #1
 80014ec:	4985      	ldr	r1, [pc, #532]	; (8001704 <HAL_RCC_ClockConfig+0x254>)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014f4:	4b83      	ldr	r3, [pc, #524]	; (8001704 <HAL_RCC_ClockConfig+0x254>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d001      	beq.n	8001506 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e0f9      	b.n	80016fa <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d008      	beq.n	8001524 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001512:	4b7d      	ldr	r3, [pc, #500]	; (8001708 <HAL_RCC_ClockConfig+0x258>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	497a      	ldr	r1, [pc, #488]	; (8001708 <HAL_RCC_ClockConfig+0x258>)
 8001520:	4313      	orrs	r3, r2
 8001522:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 808e 	beq.w	800164e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d107      	bne.n	800154a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800153a:	4b73      	ldr	r3, [pc, #460]	; (8001708 <HAL_RCC_ClockConfig+0x258>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d121      	bne.n	800158a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e0d7      	b.n	80016fa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b03      	cmp	r3, #3
 8001550:	d107      	bne.n	8001562 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001552:	4b6d      	ldr	r3, [pc, #436]	; (8001708 <HAL_RCC_ClockConfig+0x258>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d115      	bne.n	800158a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e0cb      	b.n	80016fa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d107      	bne.n	800157a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800156a:	4b67      	ldr	r3, [pc, #412]	; (8001708 <HAL_RCC_ClockConfig+0x258>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d109      	bne.n	800158a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e0bf      	b.n	80016fa <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800157a:	4b63      	ldr	r3, [pc, #396]	; (8001708 <HAL_RCC_ClockConfig+0x258>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e0b7      	b.n	80016fa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800158a:	4b5f      	ldr	r3, [pc, #380]	; (8001708 <HAL_RCC_ClockConfig+0x258>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f023 0203 	bic.w	r2, r3, #3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	495c      	ldr	r1, [pc, #368]	; (8001708 <HAL_RCC_ClockConfig+0x258>)
 8001598:	4313      	orrs	r3, r2
 800159a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800159c:	f7ff f8d4 	bl	8000748 <HAL_GetTick>
 80015a0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d112      	bne.n	80015d0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015aa:	e00a      	b.n	80015c2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ac:	f7ff f8cc 	bl	8000748 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e09b      	b.n	80016fa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015c2:	4b51      	ldr	r3, [pc, #324]	; (8001708 <HAL_RCC_ClockConfig+0x258>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 030c 	and.w	r3, r3, #12
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	d1ee      	bne.n	80015ac <HAL_RCC_ClockConfig+0xfc>
 80015ce:	e03e      	b.n	800164e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	d112      	bne.n	80015fe <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015d8:	e00a      	b.n	80015f0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015da:	f7ff f8b5 	bl	8000748 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e084      	b.n	80016fa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015f0:	4b45      	ldr	r3, [pc, #276]	; (8001708 <HAL_RCC_ClockConfig+0x258>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f003 030c 	and.w	r3, r3, #12
 80015f8:	2b0c      	cmp	r3, #12
 80015fa:	d1ee      	bne.n	80015da <HAL_RCC_ClockConfig+0x12a>
 80015fc:	e027      	b.n	800164e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d11d      	bne.n	8001642 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001606:	e00a      	b.n	800161e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001608:	f7ff f89e 	bl	8000748 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	f241 3288 	movw	r2, #5000	; 0x1388
 8001616:	4293      	cmp	r3, r2
 8001618:	d901      	bls.n	800161e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e06d      	b.n	80016fa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800161e:	4b3a      	ldr	r3, [pc, #232]	; (8001708 <HAL_RCC_ClockConfig+0x258>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 030c 	and.w	r3, r3, #12
 8001626:	2b04      	cmp	r3, #4
 8001628:	d1ee      	bne.n	8001608 <HAL_RCC_ClockConfig+0x158>
 800162a:	e010      	b.n	800164e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800162c:	f7ff f88c 	bl	8000748 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	f241 3288 	movw	r2, #5000	; 0x1388
 800163a:	4293      	cmp	r3, r2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e05b      	b.n	80016fa <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001642:	4b31      	ldr	r3, [pc, #196]	; (8001708 <HAL_RCC_ClockConfig+0x258>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1ee      	bne.n	800162c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800164e:	4b2d      	ldr	r3, [pc, #180]	; (8001704 <HAL_RCC_ClockConfig+0x254>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	429a      	cmp	r2, r3
 800165a:	d219      	bcs.n	8001690 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d105      	bne.n	800166e <HAL_RCC_ClockConfig+0x1be>
 8001662:	4b28      	ldr	r3, [pc, #160]	; (8001704 <HAL_RCC_ClockConfig+0x254>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a27      	ldr	r2, [pc, #156]	; (8001704 <HAL_RCC_ClockConfig+0x254>)
 8001668:	f043 0304 	orr.w	r3, r3, #4
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	4b25      	ldr	r3, [pc, #148]	; (8001704 <HAL_RCC_ClockConfig+0x254>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f023 0201 	bic.w	r2, r3, #1
 8001676:	4923      	ldr	r1, [pc, #140]	; (8001704 <HAL_RCC_ClockConfig+0x254>)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	4313      	orrs	r3, r2
 800167c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800167e:	4b21      	ldr	r3, [pc, #132]	; (8001704 <HAL_RCC_ClockConfig+0x254>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	429a      	cmp	r2, r3
 800168a:	d001      	beq.n	8001690 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e034      	b.n	80016fa <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	2b00      	cmp	r3, #0
 800169a:	d008      	beq.n	80016ae <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800169c:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <HAL_RCC_ClockConfig+0x258>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	4917      	ldr	r1, [pc, #92]	; (8001708 <HAL_RCC_ClockConfig+0x258>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d009      	beq.n	80016ce <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ba:	4b13      	ldr	r3, [pc, #76]	; (8001708 <HAL_RCC_ClockConfig+0x258>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	490f      	ldr	r1, [pc, #60]	; (8001708 <HAL_RCC_ClockConfig+0x258>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016ce:	f000 f823 	bl	8001718 <HAL_RCC_GetSysClockFreq>
 80016d2:	4602      	mov	r2, r0
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <HAL_RCC_ClockConfig+0x258>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	091b      	lsrs	r3, r3, #4
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	490b      	ldr	r1, [pc, #44]	; (800170c <HAL_RCC_ClockConfig+0x25c>)
 80016e0:	5ccb      	ldrb	r3, [r1, r3]
 80016e2:	fa22 f303 	lsr.w	r3, r2, r3
 80016e6:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <HAL_RCC_ClockConfig+0x260>)
 80016e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <HAL_RCC_ClockConfig+0x264>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe ffde 	bl	80006b0 <HAL_InitTick>
 80016f4:	4603      	mov	r3, r0
 80016f6:	72fb      	strb	r3, [r7, #11]

  return status;
 80016f8:	7afb      	ldrb	r3, [r7, #11]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40023c00 	.word	0x40023c00
 8001708:	40023800 	.word	0x40023800
 800170c:	08004670 	.word	0x08004670
 8001710:	20000000 	.word	0x20000000
 8001714:	20000004 	.word	0x20000004

08001718 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800171c:	b08e      	sub	sp, #56	; 0x38
 800171e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001720:	4b58      	ldr	r3, [pc, #352]	; (8001884 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001728:	f003 030c 	and.w	r3, r3, #12
 800172c:	2b0c      	cmp	r3, #12
 800172e:	d00d      	beq.n	800174c <HAL_RCC_GetSysClockFreq+0x34>
 8001730:	2b0c      	cmp	r3, #12
 8001732:	f200 8092 	bhi.w	800185a <HAL_RCC_GetSysClockFreq+0x142>
 8001736:	2b04      	cmp	r3, #4
 8001738:	d002      	beq.n	8001740 <HAL_RCC_GetSysClockFreq+0x28>
 800173a:	2b08      	cmp	r3, #8
 800173c:	d003      	beq.n	8001746 <HAL_RCC_GetSysClockFreq+0x2e>
 800173e:	e08c      	b.n	800185a <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001740:	4b51      	ldr	r3, [pc, #324]	; (8001888 <HAL_RCC_GetSysClockFreq+0x170>)
 8001742:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001744:	e097      	b.n	8001876 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001746:	4b51      	ldr	r3, [pc, #324]	; (800188c <HAL_RCC_GetSysClockFreq+0x174>)
 8001748:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800174a:	e094      	b.n	8001876 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800174c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800174e:	0c9b      	lsrs	r3, r3, #18
 8001750:	f003 020f 	and.w	r2, r3, #15
 8001754:	4b4e      	ldr	r3, [pc, #312]	; (8001890 <HAL_RCC_GetSysClockFreq+0x178>)
 8001756:	5c9b      	ldrb	r3, [r3, r2]
 8001758:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800175a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800175c:	0d9b      	lsrs	r3, r3, #22
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	3301      	adds	r3, #1
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001766:	4b47      	ldr	r3, [pc, #284]	; (8001884 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d021      	beq.n	80017b6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001774:	2200      	movs	r2, #0
 8001776:	61bb      	str	r3, [r7, #24]
 8001778:	61fa      	str	r2, [r7, #28]
 800177a:	4b44      	ldr	r3, [pc, #272]	; (800188c <HAL_RCC_GetSysClockFreq+0x174>)
 800177c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001780:	464a      	mov	r2, r9
 8001782:	fb03 f202 	mul.w	r2, r3, r2
 8001786:	2300      	movs	r3, #0
 8001788:	4644      	mov	r4, r8
 800178a:	fb04 f303 	mul.w	r3, r4, r3
 800178e:	4413      	add	r3, r2
 8001790:	4a3e      	ldr	r2, [pc, #248]	; (800188c <HAL_RCC_GetSysClockFreq+0x174>)
 8001792:	4644      	mov	r4, r8
 8001794:	fba4 0102 	umull	r0, r1, r4, r2
 8001798:	440b      	add	r3, r1
 800179a:	4619      	mov	r1, r3
 800179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179e:	2200      	movs	r2, #0
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	617a      	str	r2, [r7, #20]
 80017a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017a8:	f7fe fce8 	bl	800017c <__aeabi_uldivmod>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4613      	mov	r3, r2
 80017b2:	637b      	str	r3, [r7, #52]	; 0x34
 80017b4:	e04e      	b.n	8001854 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80017b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b8:	2200      	movs	r2, #0
 80017ba:	469a      	mov	sl, r3
 80017bc:	4693      	mov	fp, r2
 80017be:	4652      	mov	r2, sl
 80017c0:	465b      	mov	r3, fp
 80017c2:	f04f 0000 	mov.w	r0, #0
 80017c6:	f04f 0100 	mov.w	r1, #0
 80017ca:	0159      	lsls	r1, r3, #5
 80017cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017d0:	0150      	lsls	r0, r2, #5
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	ebb2 080a 	subs.w	r8, r2, sl
 80017da:	eb63 090b 	sbc.w	r9, r3, fp
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	f04f 0300 	mov.w	r3, #0
 80017e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80017ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80017ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80017f2:	ebb2 0408 	subs.w	r4, r2, r8
 80017f6:	eb63 0509 	sbc.w	r5, r3, r9
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	f04f 0300 	mov.w	r3, #0
 8001802:	00eb      	lsls	r3, r5, #3
 8001804:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001808:	00e2      	lsls	r2, r4, #3
 800180a:	4614      	mov	r4, r2
 800180c:	461d      	mov	r5, r3
 800180e:	eb14 030a 	adds.w	r3, r4, sl
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	eb45 030b 	adc.w	r3, r5, fp
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001826:	4629      	mov	r1, r5
 8001828:	028b      	lsls	r3, r1, #10
 800182a:	4620      	mov	r0, r4
 800182c:	4629      	mov	r1, r5
 800182e:	4604      	mov	r4, r0
 8001830:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001834:	4601      	mov	r1, r0
 8001836:	028a      	lsls	r2, r1, #10
 8001838:	4610      	mov	r0, r2
 800183a:	4619      	mov	r1, r3
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	2200      	movs	r2, #0
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	60fa      	str	r2, [r7, #12]
 8001844:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001848:	f7fe fc98 	bl	800017c <__aeabi_uldivmod>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4613      	mov	r3, r2
 8001852:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8001854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001856:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001858:	e00d      	b.n	8001876 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800185a:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <HAL_RCC_GetSysClockFreq+0x16c>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	0b5b      	lsrs	r3, r3, #13
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001866:	6a3b      	ldr	r3, [r7, #32]
 8001868:	3301      	adds	r3, #1
 800186a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001874:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001878:	4618      	mov	r0, r3
 800187a:	3738      	adds	r7, #56	; 0x38
 800187c:	46bd      	mov	sp, r7
 800187e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001882:	bf00      	nop
 8001884:	40023800 	.word	0x40023800
 8001888:	00f42400 	.word	0x00f42400
 800188c:	016e3600 	.word	0x016e3600
 8001890:	08004664 	.word	0x08004664

08001894 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001898:	4b02      	ldr	r3, [pc, #8]	; (80018a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr
 80018a4:	20000000 	.word	0x20000000

080018a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018ac:	f7ff fff2 	bl	8001894 <HAL_RCC_GetHCLKFreq>
 80018b0:	4602      	mov	r2, r0
 80018b2:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	0a1b      	lsrs	r3, r3, #8
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	4903      	ldr	r1, [pc, #12]	; (80018cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80018be:	5ccb      	ldrb	r3, [r1, r3]
 80018c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40023800 	.word	0x40023800
 80018cc:	08004680 	.word	0x08004680

080018d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018d4:	f7ff ffde 	bl	8001894 <HAL_RCC_GetHCLKFreq>
 80018d8:	4602      	mov	r2, r0
 80018da:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	0adb      	lsrs	r3, r3, #11
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	4903      	ldr	r1, [pc, #12]	; (80018f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018e6:	5ccb      	ldrb	r3, [r1, r3]
 80018e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40023800 	.word	0x40023800
 80018f4:	08004680 	.word	0x08004680

080018f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b087      	sub	sp, #28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001900:	2300      	movs	r3, #0
 8001902:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001904:	4b29      	ldr	r3, [pc, #164]	; (80019ac <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d12c      	bne.n	800196a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001910:	4b26      	ldr	r3, [pc, #152]	; (80019ac <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d005      	beq.n	8001928 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800191c:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	e016      	b.n	8001956 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001928:	4b20      	ldr	r3, [pc, #128]	; (80019ac <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	4a1f      	ldr	r2, [pc, #124]	; (80019ac <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800192e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001932:	6253      	str	r3, [r2, #36]	; 0x24
 8001934:	4b1d      	ldr	r3, [pc, #116]	; (80019ac <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001940:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001948:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800194a:	4b18      	ldr	r3, [pc, #96]	; (80019ac <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	4a17      	ldr	r2, [pc, #92]	; (80019ac <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001954:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800195c:	d105      	bne.n	800196a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001964:	d101      	bne.n	800196a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001966:	2301      	movs	r3, #1
 8001968:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d105      	bne.n	800197c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001970:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a0f      	ldr	r2, [pc, #60]	; (80019b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001976:	f043 0304 	orr.w	r3, r3, #4
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f023 0201 	bic.w	r2, r3, #1
 8001984:	490b      	ldr	r1, [pc, #44]	; (80019b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	429a      	cmp	r2, r3
 8001998:	d001      	beq.n	800199e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	371c      	adds	r7, #28
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40007000 	.word	0x40007000
 80019b4:	40023c00 	.word	0x40023c00

080019b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e042      	b.n	8001a50 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d106      	bne.n	80019e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7fe fd7a 	bl	80004d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2224      	movs	r2, #36	; 0x24
 80019e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 fdcd 	bl	800259c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	691a      	ldr	r2, [r3, #16]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	695a      	ldr	r2, [r3, #20]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2220      	movs	r2, #32
 8001a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2220      	movs	r2, #32
 8001a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	; 0x28
 8001a5c:	af02      	add	r7, sp, #8
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	603b      	str	r3, [r7, #0]
 8001a64:	4613      	mov	r3, r2
 8001a66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b20      	cmp	r3, #32
 8001a76:	d16d      	bne.n	8001b54 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d002      	beq.n	8001a84 <HAL_UART_Transmit+0x2c>
 8001a7e:	88fb      	ldrh	r3, [r7, #6]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e066      	b.n	8001b56 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2221      	movs	r2, #33	; 0x21
 8001a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a96:	f7fe fe57 	bl	8000748 <HAL_GetTick>
 8001a9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	88fa      	ldrh	r2, [r7, #6]
 8001aa0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	88fa      	ldrh	r2, [r7, #6]
 8001aa6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ab0:	d108      	bne.n	8001ac4 <HAL_UART_Transmit+0x6c>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d104      	bne.n	8001ac4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	61bb      	str	r3, [r7, #24]
 8001ac2:	e003      	b.n	8001acc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001acc:	e02a      	b.n	8001b24 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2180      	movs	r1, #128	; 0x80
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f000 fb1d 	bl	8002118 <UART_WaitOnFlagUntilTimeout>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e036      	b.n	8001b56 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10b      	bne.n	8001b06 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	461a      	mov	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001afc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	3302      	adds	r3, #2
 8001b02:	61bb      	str	r3, [r7, #24]
 8001b04:	e007      	b.n	8001b16 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	781a      	ldrb	r2, [r3, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	3301      	adds	r3, #1
 8001b14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1cf      	bne.n	8001ace <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	2200      	movs	r2, #0
 8001b36:	2140      	movs	r1, #64	; 0x40
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f000 faed 	bl	8002118 <UART_WaitOnFlagUntilTimeout>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e006      	b.n	8001b56 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001b50:	2300      	movs	r3, #0
 8001b52:	e000      	b.n	8001b56 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001b54:	2302      	movs	r3, #2
  }
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3720      	adds	r7, #32
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b084      	sub	sp, #16
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	60f8      	str	r0, [r7, #12]
 8001b66:	60b9      	str	r1, [r7, #8]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b20      	cmp	r3, #32
 8001b76:	d112      	bne.n	8001b9e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d002      	beq.n	8001b84 <HAL_UART_Receive_IT+0x26>
 8001b7e:	88fb      	ldrh	r3, [r7, #6]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e00b      	b.n	8001ba0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001b8e:	88fb      	ldrh	r3, [r7, #6]
 8001b90:	461a      	mov	r2, r3
 8001b92:	68b9      	ldr	r1, [r7, #8]
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f000 fb2d 	bl	80021f4 <UART_Start_Receive_IT>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	e000      	b.n	8001ba0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001b9e:	2302      	movs	r3, #2
  }
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b0ba      	sub	sp, #232	; 0xe8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001be6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10f      	bne.n	8001c0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bf2:	f003 0320 	and.w	r3, r3, #32
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d009      	beq.n	8001c0e <HAL_UART_IRQHandler+0x66>
 8001bfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001bfe:	f003 0320 	and.w	r3, r3, #32
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 fc0a 	bl	8002420 <UART_Receive_IT>
      return;
 8001c0c:	e25b      	b.n	80020c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001c0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 80de 	beq.w	8001dd4 <HAL_UART_IRQHandler+0x22c>
 8001c18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d106      	bne.n	8001c32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c28:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 80d1 	beq.w	8001dd4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00b      	beq.n	8001c56 <HAL_UART_IRQHandler+0xae>
 8001c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d005      	beq.n	8001c56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f043 0201 	orr.w	r2, r3, #1
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00b      	beq.n	8001c7a <HAL_UART_IRQHandler+0xd2>
 8001c62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d005      	beq.n	8001c7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	f043 0202 	orr.w	r2, r3, #2
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00b      	beq.n	8001c9e <HAL_UART_IRQHandler+0xf6>
 8001c86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d005      	beq.n	8001c9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	f043 0204 	orr.w	r2, r3, #4
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d011      	beq.n	8001cce <HAL_UART_IRQHandler+0x126>
 8001caa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001cae:	f003 0320 	and.w	r3, r3, #32
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d105      	bne.n	8001cc2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001cb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d005      	beq.n	8001cce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc6:	f043 0208 	orr.w	r2, r3, #8
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 81f2 	beq.w	80020bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001cdc:	f003 0320 	and.w	r3, r3, #32
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d008      	beq.n	8001cf6 <HAL_UART_IRQHandler+0x14e>
 8001ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ce8:	f003 0320 	and.w	r3, r3, #32
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d002      	beq.n	8001cf6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 fb95 	bl	8002420 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d00:	2b40      	cmp	r3, #64	; 0x40
 8001d02:	bf0c      	ite	eq
 8001d04:	2301      	moveq	r3, #1
 8001d06:	2300      	movne	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d103      	bne.n	8001d22 <HAL_UART_IRQHandler+0x17a>
 8001d1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d04f      	beq.n	8001dc2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 fa9f 	bl	8002266 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d32:	2b40      	cmp	r3, #64	; 0x40
 8001d34:	d141      	bne.n	8001dba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	3314      	adds	r3, #20
 8001d3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d44:	e853 3f00 	ldrex	r3, [r3]
 8001d48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001d4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	3314      	adds	r3, #20
 8001d5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001d62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001d66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001d6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001d72:	e841 2300 	strex	r3, r2, [r1]
 8001d76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001d7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1d9      	bne.n	8001d36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d013      	beq.n	8001db2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d8e:	4a7e      	ldr	r2, [pc, #504]	; (8001f88 <HAL_UART_IRQHandler+0x3e0>)
 8001d90:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fe58 	bl	8000a4c <HAL_DMA_Abort_IT>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d016      	beq.n	8001dd0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001dac:	4610      	mov	r0, r2
 8001dae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001db0:	e00e      	b.n	8001dd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f99c 	bl	80020f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001db8:	e00a      	b.n	8001dd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f998 	bl	80020f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dc0:	e006      	b.n	8001dd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f994 	bl	80020f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8001dce:	e175      	b.n	80020bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dd0:	bf00      	nop
    return;
 8001dd2:	e173      	b.n	80020bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	f040 814f 	bne.w	800207c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001de2:	f003 0310 	and.w	r3, r3, #16
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 8148 	beq.w	800207c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001df0:	f003 0310 	and.w	r3, r3, #16
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 8141 	beq.w	800207c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e1a:	2b40      	cmp	r3, #64	; 0x40
 8001e1c:	f040 80b6 	bne.w	8001f8c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001e2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 8145 	beq.w	80020c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001e3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	f080 813e 	bcs.w	80020c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001e4a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	2b20      	cmp	r3, #32
 8001e54:	f000 8088 	beq.w	8001f68 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	330c      	adds	r3, #12
 8001e5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e66:	e853 3f00 	ldrex	r3, [r3]
 8001e6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001e6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	330c      	adds	r3, #12
 8001e80:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001e84:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001e88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e8c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001e90:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001e94:	e841 2300 	strex	r3, r2, [r1]
 8001e98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001e9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1d9      	bne.n	8001e58 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	3314      	adds	r3, #20
 8001eaa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001eac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001eae:	e853 3f00 	ldrex	r3, [r3]
 8001eb2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001eb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001eb6:	f023 0301 	bic.w	r3, r3, #1
 8001eba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	3314      	adds	r3, #20
 8001ec4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001ec8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001ecc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ece:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001ed0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001ed4:	e841 2300 	strex	r3, r2, [r1]
 8001ed8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001eda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1e1      	bne.n	8001ea4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	3314      	adds	r3, #20
 8001ee6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ee8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001eea:	e853 3f00 	ldrex	r3, [r3]
 8001eee:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001ef0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ef2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ef6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	3314      	adds	r3, #20
 8001f00:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001f04:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001f06:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f08:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001f0a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001f0c:	e841 2300 	strex	r3, r2, [r1]
 8001f10:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001f12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1e3      	bne.n	8001ee0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	330c      	adds	r3, #12
 8001f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f30:	e853 3f00 	ldrex	r3, [r3]
 8001f34:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001f36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f38:	f023 0310 	bic.w	r3, r3, #16
 8001f3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	330c      	adds	r3, #12
 8001f46:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001f4a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f4c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f52:	e841 2300 	strex	r3, r2, [r1]
 8001f56:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001f58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1e3      	bne.n	8001f26 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe fd35 	bl	80009d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f8bf 	bl	8002102 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001f84:	e09c      	b.n	80020c0 <HAL_UART_IRQHandler+0x518>
 8001f86:	bf00      	nop
 8001f88:	0800232b 	.word	0x0800232b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 808e 	beq.w	80020c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001fa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 8089 	beq.w	80020c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	330c      	adds	r3, #12
 8001fb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fbc:	e853 3f00 	ldrex	r3, [r3]
 8001fc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001fc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	330c      	adds	r3, #12
 8001fd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001fd6:	647a      	str	r2, [r7, #68]	; 0x44
 8001fd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001fdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001fde:	e841 2300 	strex	r3, r2, [r1]
 8001fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1e3      	bne.n	8001fb2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	3314      	adds	r3, #20
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	e853 3f00 	ldrex	r3, [r3]
 8001ff8:	623b      	str	r3, [r7, #32]
   return(result);
 8001ffa:	6a3b      	ldr	r3, [r7, #32]
 8001ffc:	f023 0301 	bic.w	r3, r3, #1
 8002000:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	3314      	adds	r3, #20
 800200a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800200e:	633a      	str	r2, [r7, #48]	; 0x30
 8002010:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002012:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002016:	e841 2300 	strex	r3, r2, [r1]
 800201a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800201c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1e3      	bne.n	8001fea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2220      	movs	r2, #32
 8002026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	330c      	adds	r3, #12
 8002036:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	e853 3f00 	ldrex	r3, [r3]
 800203e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f023 0310 	bic.w	r3, r3, #16
 8002046:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	330c      	adds	r3, #12
 8002050:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002054:	61fa      	str	r2, [r7, #28]
 8002056:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002058:	69b9      	ldr	r1, [r7, #24]
 800205a:	69fa      	ldr	r2, [r7, #28]
 800205c:	e841 2300 	strex	r3, r2, [r1]
 8002060:	617b      	str	r3, [r7, #20]
   return(result);
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1e3      	bne.n	8002030 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2202      	movs	r2, #2
 800206c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800206e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002072:	4619      	mov	r1, r3
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f844 	bl	8002102 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800207a:	e023      	b.n	80020c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800207c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002084:	2b00      	cmp	r3, #0
 8002086:	d009      	beq.n	800209c <HAL_UART_IRQHandler+0x4f4>
 8002088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800208c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f95c 	bl	8002352 <UART_Transmit_IT>
    return;
 800209a:	e014      	b.n	80020c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800209c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00e      	beq.n	80020c6 <HAL_UART_IRQHandler+0x51e>
 80020a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d008      	beq.n	80020c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f99b 	bl	80023f0 <UART_EndTransmit_IT>
    return;
 80020ba:	e004      	b.n	80020c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80020bc:	bf00      	nop
 80020be:	e002      	b.n	80020c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80020c0:	bf00      	nop
 80020c2:	e000      	b.n	80020c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80020c4:	bf00      	nop
  }
}
 80020c6:	37e8      	adds	r7, #232	; 0xe8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr

080020de <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr

080020f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr

08002102 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	460b      	mov	r3, r1
 800210c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b090      	sub	sp, #64	; 0x40
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	603b      	str	r3, [r7, #0]
 8002124:	4613      	mov	r3, r2
 8002126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002128:	e050      	b.n	80021cc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800212a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800212c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002130:	d04c      	beq.n	80021cc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002134:	2b00      	cmp	r3, #0
 8002136:	d007      	beq.n	8002148 <UART_WaitOnFlagUntilTimeout+0x30>
 8002138:	f7fe fb06 	bl	8000748 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002144:	429a      	cmp	r2, r3
 8002146:	d241      	bcs.n	80021cc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	330c      	adds	r3, #12
 800214e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002152:	e853 3f00 	ldrex	r3, [r3]
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800215e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	330c      	adds	r3, #12
 8002166:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002168:	637a      	str	r2, [r7, #52]	; 0x34
 800216a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800216c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800216e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002170:	e841 2300 	strex	r3, r2, [r1]
 8002174:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1e5      	bne.n	8002148 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	3314      	adds	r3, #20
 8002182:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	e853 3f00 	ldrex	r3, [r3]
 800218a:	613b      	str	r3, [r7, #16]
   return(result);
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	f023 0301 	bic.w	r3, r3, #1
 8002192:	63bb      	str	r3, [r7, #56]	; 0x38
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	3314      	adds	r3, #20
 800219a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800219c:	623a      	str	r2, [r7, #32]
 800219e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021a0:	69f9      	ldr	r1, [r7, #28]
 80021a2:	6a3a      	ldr	r2, [r7, #32]
 80021a4:	e841 2300 	strex	r3, r2, [r1]
 80021a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1e5      	bne.n	800217c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2220      	movs	r2, #32
 80021b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2220      	movs	r2, #32
 80021bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e00f      	b.n	80021ec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	4013      	ands	r3, r2
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	429a      	cmp	r2, r3
 80021da:	bf0c      	ite	eq
 80021dc:	2301      	moveq	r3, #1
 80021de:	2300      	movne	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	461a      	mov	r2, r3
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d09f      	beq.n	800212a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3740      	adds	r7, #64	; 0x40
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	4613      	mov	r3, r2
 8002200:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	68ba      	ldr	r2, [r7, #8]
 8002206:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	88fa      	ldrh	r2, [r7, #6]
 800220c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	88fa      	ldrh	r2, [r7, #6]
 8002212:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2222      	movs	r2, #34	; 0x22
 800221e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d007      	beq.n	800223a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002238:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695a      	ldr	r2, [r3, #20]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f042 0201 	orr.w	r2, r2, #1
 8002248:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f042 0220 	orr.w	r2, r2, #32
 8002258:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr

08002266 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002266:	b480      	push	{r7}
 8002268:	b095      	sub	sp, #84	; 0x54
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	330c      	adds	r3, #12
 8002274:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002278:	e853 3f00 	ldrex	r3, [r3]
 800227c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800227e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002280:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002284:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	330c      	adds	r3, #12
 800228c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800228e:	643a      	str	r2, [r7, #64]	; 0x40
 8002290:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002292:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002294:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002296:	e841 2300 	strex	r3, r2, [r1]
 800229a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800229c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1e5      	bne.n	800226e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	3314      	adds	r3, #20
 80022a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	e853 3f00 	ldrex	r3, [r3]
 80022b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	f023 0301 	bic.w	r3, r3, #1
 80022b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	3314      	adds	r3, #20
 80022c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022ca:	e841 2300 	strex	r3, r2, [r1]
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1e5      	bne.n	80022a2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d119      	bne.n	8002312 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	330c      	adds	r3, #12
 80022e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	e853 3f00 	ldrex	r3, [r3]
 80022ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	f023 0310 	bic.w	r3, r3, #16
 80022f4:	647b      	str	r3, [r7, #68]	; 0x44
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	330c      	adds	r3, #12
 80022fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022fe:	61ba      	str	r2, [r7, #24]
 8002300:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002302:	6979      	ldr	r1, [r7, #20]
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	e841 2300 	strex	r3, r2, [r1]
 800230a:	613b      	str	r3, [r7, #16]
   return(result);
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1e5      	bne.n	80022de <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2220      	movs	r2, #32
 8002316:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002320:	bf00      	nop
 8002322:	3754      	adds	r7, #84	; 0x54
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr

0800232a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b084      	sub	sp, #16
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f7ff fed3 	bl	80020f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002352:	b480      	push	{r7}
 8002354:	b085      	sub	sp, #20
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b21      	cmp	r3, #33	; 0x21
 8002364:	d13e      	bne.n	80023e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800236e:	d114      	bne.n	800239a <UART_Transmit_IT+0x48>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d110      	bne.n	800239a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800238c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	1c9a      	adds	r2, r3, #2
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	621a      	str	r2, [r3, #32]
 8002398:	e008      	b.n	80023ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	1c59      	adds	r1, r3, #1
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6211      	str	r1, [r2, #32]
 80023a4:	781a      	ldrb	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	3b01      	subs	r3, #1
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	4619      	mov	r1, r3
 80023ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10f      	bne.n	80023e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	e000      	b.n	80023e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80023e4:	2302      	movs	r3, #2
  }
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr

080023f0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002406:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2220      	movs	r2, #32
 800240c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff fe5b 	bl	80020cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08c      	sub	sp, #48	; 0x30
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b22      	cmp	r3, #34	; 0x22
 8002432:	f040 80ae 	bne.w	8002592 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800243e:	d117      	bne.n	8002470 <UART_Receive_IT+0x50>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d113      	bne.n	8002470 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002448:	2300      	movs	r3, #0
 800244a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002450:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	b29b      	uxth	r3, r3
 800245a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800245e:	b29a      	uxth	r2, r3
 8002460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002462:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002468:	1c9a      	adds	r2, r3, #2
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	629a      	str	r2, [r3, #40]	; 0x28
 800246e:	e026      	b.n	80024be <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002474:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002476:	2300      	movs	r3, #0
 8002478:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002482:	d007      	beq.n	8002494 <UART_Receive_IT+0x74>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10a      	bne.n	80024a2 <UART_Receive_IT+0x82>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d106      	bne.n	80024a2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	b2da      	uxtb	r2, r3
 800249c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249e:	701a      	strb	r2, [r3, #0]
 80024a0:	e008      	b.n	80024b4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	3b01      	subs	r3, #1
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	4619      	mov	r1, r3
 80024cc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d15d      	bne.n	800258e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68da      	ldr	r2, [r3, #12]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0220 	bic.w	r2, r2, #32
 80024e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695a      	ldr	r2, [r3, #20]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0201 	bic.w	r2, r2, #1
 8002500:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2220      	movs	r2, #32
 8002506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002514:	2b01      	cmp	r3, #1
 8002516:	d135      	bne.n	8002584 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	330c      	adds	r3, #12
 8002524:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	e853 3f00 	ldrex	r3, [r3]
 800252c:	613b      	str	r3, [r7, #16]
   return(result);
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	f023 0310 	bic.w	r3, r3, #16
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	330c      	adds	r3, #12
 800253c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253e:	623a      	str	r2, [r7, #32]
 8002540:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002542:	69f9      	ldr	r1, [r7, #28]
 8002544:	6a3a      	ldr	r2, [r7, #32]
 8002546:	e841 2300 	strex	r3, r2, [r1]
 800254a:	61bb      	str	r3, [r7, #24]
   return(result);
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1e5      	bne.n	800251e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0310 	and.w	r3, r3, #16
 800255c:	2b10      	cmp	r3, #16
 800255e:	d10a      	bne.n	8002576 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002560:	2300      	movs	r3, #0
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800257a:	4619      	mov	r1, r3
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7ff fdc0 	bl	8002102 <HAL_UARTEx_RxEventCallback>
 8002582:	e002      	b.n	800258a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff fdaa 	bl	80020de <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	e002      	b.n	8002594 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	e000      	b.n	8002594 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002592:	2302      	movs	r3, #2
  }
}
 8002594:	4618      	mov	r0, r3
 8002596:	3730      	adds	r7, #48	; 0x30
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80025dc:	f023 030c 	bic.w	r3, r3, #12
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	68b9      	ldr	r1, [r7, #8]
 80025e6:	430b      	orrs	r3, r1
 80025e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	699a      	ldr	r2, [r3, #24]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a55      	ldr	r2, [pc, #340]	; (800275c <UART_SetConfig+0x1c0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d103      	bne.n	8002612 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800260a:	f7ff f961 	bl	80018d0 <HAL_RCC_GetPCLK2Freq>
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	e002      	b.n	8002618 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002612:	f7ff f949 	bl	80018a8 <HAL_RCC_GetPCLK1Freq>
 8002616:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002620:	d14c      	bne.n	80026bc <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	009a      	lsls	r2, r3, #2
 800262c:	441a      	add	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	fbb2 f3f3 	udiv	r3, r2, r3
 8002638:	4a49      	ldr	r2, [pc, #292]	; (8002760 <UART_SetConfig+0x1c4>)
 800263a:	fba2 2303 	umull	r2, r3, r2, r3
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	0119      	lsls	r1, r3, #4
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	009a      	lsls	r2, r3, #2
 800264c:	441a      	add	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	fbb2 f2f3 	udiv	r2, r2, r3
 8002658:	4b41      	ldr	r3, [pc, #260]	; (8002760 <UART_SetConfig+0x1c4>)
 800265a:	fba3 0302 	umull	r0, r3, r3, r2
 800265e:	095b      	lsrs	r3, r3, #5
 8002660:	2064      	movs	r0, #100	; 0x64
 8002662:	fb00 f303 	mul.w	r3, r0, r3
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	3332      	adds	r3, #50	; 0x32
 800266c:	4a3c      	ldr	r2, [pc, #240]	; (8002760 <UART_SetConfig+0x1c4>)
 800266e:	fba2 2303 	umull	r2, r3, r2, r3
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800267a:	4419      	add	r1, r3
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	4613      	mov	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	009a      	lsls	r2, r3, #2
 8002686:	441a      	add	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002692:	4b33      	ldr	r3, [pc, #204]	; (8002760 <UART_SetConfig+0x1c4>)
 8002694:	fba3 0302 	umull	r0, r3, r3, r2
 8002698:	095b      	lsrs	r3, r3, #5
 800269a:	2064      	movs	r0, #100	; 0x64
 800269c:	fb00 f303 	mul.w	r3, r0, r3
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	3332      	adds	r3, #50	; 0x32
 80026a6:	4a2e      	ldr	r2, [pc, #184]	; (8002760 <UART_SetConfig+0x1c4>)
 80026a8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ac:	095b      	lsrs	r3, r3, #5
 80026ae:	f003 0207 	and.w	r2, r3, #7
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	440a      	add	r2, r1
 80026b8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80026ba:	e04a      	b.n	8002752 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	4613      	mov	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	009a      	lsls	r2, r3, #2
 80026c6:	441a      	add	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d2:	4a23      	ldr	r2, [pc, #140]	; (8002760 <UART_SetConfig+0x1c4>)
 80026d4:	fba2 2303 	umull	r2, r3, r2, r3
 80026d8:	095b      	lsrs	r3, r3, #5
 80026da:	0119      	lsls	r1, r3, #4
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	009a      	lsls	r2, r3, #2
 80026e6:	441a      	add	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80026f2:	4b1b      	ldr	r3, [pc, #108]	; (8002760 <UART_SetConfig+0x1c4>)
 80026f4:	fba3 0302 	umull	r0, r3, r3, r2
 80026f8:	095b      	lsrs	r3, r3, #5
 80026fa:	2064      	movs	r0, #100	; 0x64
 80026fc:	fb00 f303 	mul.w	r3, r0, r3
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	3332      	adds	r3, #50	; 0x32
 8002706:	4a16      	ldr	r2, [pc, #88]	; (8002760 <UART_SetConfig+0x1c4>)
 8002708:	fba2 2303 	umull	r2, r3, r2, r3
 800270c:	095b      	lsrs	r3, r3, #5
 800270e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002712:	4419      	add	r1, r3
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	009a      	lsls	r2, r3, #2
 800271e:	441a      	add	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	fbb2 f2f3 	udiv	r2, r2, r3
 800272a:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <UART_SetConfig+0x1c4>)
 800272c:	fba3 0302 	umull	r0, r3, r3, r2
 8002730:	095b      	lsrs	r3, r3, #5
 8002732:	2064      	movs	r0, #100	; 0x64
 8002734:	fb00 f303 	mul.w	r3, r0, r3
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	3332      	adds	r3, #50	; 0x32
 800273e:	4a08      	ldr	r2, [pc, #32]	; (8002760 <UART_SetConfig+0x1c4>)
 8002740:	fba2 2303 	umull	r2, r3, r2, r3
 8002744:	095b      	lsrs	r3, r3, #5
 8002746:	f003 020f 	and.w	r2, r3, #15
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	440a      	add	r2, r1
 8002750:	609a      	str	r2, [r3, #8]
}
 8002752:	bf00      	nop
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40013800 	.word	0x40013800
 8002760:	51eb851f 	.word	0x51eb851f

08002764 <TM1637_ClkHigh>:
	0x77, 0x7c, 0x39, 0x5E, 0x79, 0x71, 0x5C, 0x3e, 0x73, 0x08, // A-F (d = 13, o = 16, u = 17, p = 18 _ = 19
    0x00, 0b0111000, 0b0111110, 1 , 1<<3, 1<<1, 1<<4, 1<<2, 1<<5, 1<<4, 1<<1
};

void TM1637_ClkHigh(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_SET);
 8002768:	2201      	movs	r2, #1
 800276a:	2108      	movs	r1, #8
 800276c:	4802      	ldr	r0, [pc, #8]	; (8002778 <TM1637_ClkHigh+0x14>)
 800276e:	f7fe fb56 	bl	8000e1e <HAL_GPIO_WritePin>
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40020800 	.word	0x40020800

0800277c <TM1637_ClkLow>:

void TM1637_ClkLow(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_RESET);
 8002780:	2200      	movs	r2, #0
 8002782:	2108      	movs	r1, #8
 8002784:	4802      	ldr	r0, [pc, #8]	; (8002790 <TM1637_ClkLow+0x14>)
 8002786:	f7fe fb4a 	bl	8000e1e <HAL_GPIO_WritePin>
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40020800 	.word	0x40020800

08002794 <TM1637_DataHigh>:

void TM1637_DataHigh(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_SET);
 8002798:	2201      	movs	r2, #1
 800279a:	2104      	movs	r1, #4
 800279c:	4802      	ldr	r0, [pc, #8]	; (80027a8 <TM1637_DataHigh+0x14>)
 800279e:	f7fe fb3e 	bl	8000e1e <HAL_GPIO_WritePin>
}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40020800 	.word	0x40020800

080027ac <TM1637_DataLow>:

void TM1637_DataLow(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_RESET);
 80027b0:	2200      	movs	r2, #0
 80027b2:	2104      	movs	r1, #4
 80027b4:	4802      	ldr	r0, [pc, #8]	; (80027c0 <TM1637_DataLow+0x14>)
 80027b6:	f7fe fb32 	bl	8000e1e <HAL_GPIO_WritePin>
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40020800 	.word	0x40020800

080027c4 <TM1637_Display_4_char>:
{
    TM1637_SetBrightness(8);
}

void TM1637_Display_4_char(uint8_t char1,uint8_t char2, uint8_t char3, uint8_t char4, int displaySeparator)
{
 80027c4:	b590      	push	{r4, r7, lr}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4604      	mov	r4, r0
 80027cc:	4608      	mov	r0, r1
 80027ce:	4611      	mov	r1, r2
 80027d0:	461a      	mov	r2, r3
 80027d2:	4623      	mov	r3, r4
 80027d4:	71fb      	strb	r3, [r7, #7]
 80027d6:	4603      	mov	r3, r0
 80027d8:	71bb      	strb	r3, [r7, #6]
 80027da:	460b      	mov	r3, r1
 80027dc:	717b      	strb	r3, [r7, #5]
 80027de:	4613      	mov	r3, r2
 80027e0:	713b      	strb	r3, [r7, #4]
    unsigned char digitArr[4];

    digitArr[0] = segmentMap[char1];
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	4a20      	ldr	r2, [pc, #128]	; (8002868 <TM1637_Display_4_char+0xa4>)
 80027e6:	5cd3      	ldrb	r3, [r2, r3]
 80027e8:	723b      	strb	r3, [r7, #8]
    digitArr[1] = segmentMap[char2];
 80027ea:	79bb      	ldrb	r3, [r7, #6]
 80027ec:	4a1e      	ldr	r2, [pc, #120]	; (8002868 <TM1637_Display_4_char+0xa4>)
 80027ee:	5cd3      	ldrb	r3, [r2, r3]
 80027f0:	727b      	strb	r3, [r7, #9]
    digitArr[2] = segmentMap[char3];
 80027f2:	797b      	ldrb	r3, [r7, #5]
 80027f4:	4a1c      	ldr	r2, [pc, #112]	; (8002868 <TM1637_Display_4_char+0xa4>)
 80027f6:	5cd3      	ldrb	r3, [r2, r3]
 80027f8:	72bb      	strb	r3, [r7, #10]
    digitArr[3] = segmentMap[char4];
 80027fa:	793b      	ldrb	r3, [r7, #4]
 80027fc:	4a1a      	ldr	r2, [pc, #104]	; (8002868 <TM1637_Display_4_char+0xa4>)
 80027fe:	5cd3      	ldrb	r3, [r2, r3]
 8002800:	72fb      	strb	r3, [r7, #11]

    if(displaySeparator){
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d004      	beq.n	8002812 <TM1637_Display_4_char+0x4e>
        digitArr[2] |= 1 << 7;
 8002808:	7abb      	ldrb	r3, [r7, #10]
 800280a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800280e:	b2db      	uxtb	r3, r3
 8002810:	72bb      	strb	r3, [r7, #10]
    }

    TM1637_Start();
 8002812:	f000 f840 	bl	8002896 <TM1637_Start>
    TM1637_WriteByte(0x40);
 8002816:	2040      	movs	r0, #64	; 0x40
 8002818:	f000 f86f 	bl	80028fa <TM1637_WriteByte>
    TM1637_ReadResult();
 800281c:	f000 f85d 	bl	80028da <TM1637_ReadResult>
    TM1637_Stop();
 8002820:	f000 f846 	bl	80028b0 <TM1637_Stop>

    TM1637_Start();
 8002824:	f000 f837 	bl	8002896 <TM1637_Start>
    TM1637_WriteByte(0xc0);
 8002828:	20c0      	movs	r0, #192	; 0xc0
 800282a:	f000 f866 	bl	80028fa <TM1637_WriteByte>
    TM1637_ReadResult();
 800282e:	f000 f854 	bl	80028da <TM1637_ReadResult>

    for (int i = 0; i < 4; ++i) {
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	e00e      	b.n	8002856 <TM1637_Display_4_char+0x92>
        TM1637_WriteByte(digitArr[3 - i]);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f1c3 0303 	rsb	r3, r3, #3
 800283e:	3310      	adds	r3, #16
 8002840:	443b      	add	r3, r7
 8002842:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8002846:	4618      	mov	r0, r3
 8002848:	f000 f857 	bl	80028fa <TM1637_WriteByte>
        TM1637_ReadResult();
 800284c:	f000 f845 	bl	80028da <TM1637_ReadResult>
    for (int i = 0; i < 4; ++i) {
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	3301      	adds	r3, #1
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2b03      	cmp	r3, #3
 800285a:	dded      	ble.n	8002838 <TM1637_Display_4_char+0x74>
    }

    TM1637_Stop();
 800285c:	f000 f828 	bl	80028b0 <TM1637_Stop>
}
 8002860:	bf00      	nop
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	bd90      	pop	{r4, r7, pc}
 8002868:	08004688 	.word	0x08004688

0800286c <TM1637_SetBrightness>:
}

// Valid brightness values: 0 - 8.
// 0 = display off.
void TM1637_SetBrightness(char brightness)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	71fb      	strb	r3, [r7, #7]
    // Brightness command:
    // 1000 0XXX = display off
    // 1000 1BBB = display on, brightness 0-7
    // X = don't care
    // B = brightness
    TM1637_Start();
 8002876:	f000 f80e 	bl	8002896 <TM1637_Start>
    TM1637_WriteByte(0x87 + brightness);
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	3b79      	subs	r3, #121	; 0x79
 800287e:	b2db      	uxtb	r3, r3
 8002880:	4618      	mov	r0, r3
 8002882:	f000 f83a 	bl	80028fa <TM1637_WriteByte>
    TM1637_ReadResult();
 8002886:	f000 f828 	bl	80028da <TM1637_ReadResult>
    TM1637_Stop();
 800288a:	f000 f811 	bl	80028b0 <TM1637_Stop>
}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <TM1637_Start>:

void TM1637_Start(void)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	af00      	add	r7, sp, #0
    TM1637_ClkHigh();
 800289a:	f7ff ff63 	bl	8002764 <TM1637_ClkHigh>
    TM1637_DataHigh();
 800289e:	f7ff ff79 	bl	8002794 <TM1637_DataHigh>
    TM1637_DelayUsec(2);
 80028a2:	2002      	movs	r0, #2
 80028a4:	f000 f853 	bl	800294e <TM1637_DelayUsec>
    TM1637_DataLow();
 80028a8:	f7ff ff80 	bl	80027ac <TM1637_DataLow>
}
 80028ac:	bf00      	nop
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <TM1637_Stop>:

void TM1637_Stop(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
    TM1637_ClkLow();
 80028b4:	f7ff ff62 	bl	800277c <TM1637_ClkLow>
    TM1637_DelayUsec(2);
 80028b8:	2002      	movs	r0, #2
 80028ba:	f000 f848 	bl	800294e <TM1637_DelayUsec>
    TM1637_DataLow();
 80028be:	f7ff ff75 	bl	80027ac <TM1637_DataLow>
    TM1637_DelayUsec(2);
 80028c2:	2002      	movs	r0, #2
 80028c4:	f000 f843 	bl	800294e <TM1637_DelayUsec>
    TM1637_ClkHigh();
 80028c8:	f7ff ff4c 	bl	8002764 <TM1637_ClkHigh>
    TM1637_DelayUsec(2);
 80028cc:	2002      	movs	r0, #2
 80028ce:	f000 f83e 	bl	800294e <TM1637_DelayUsec>
    TM1637_DataHigh();
 80028d2:	f7ff ff5f 	bl	8002794 <TM1637_DataHigh>
}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}

080028da <TM1637_ReadResult>:

void TM1637_ReadResult(void)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	af00      	add	r7, sp, #0
    TM1637_ClkLow();
 80028de:	f7ff ff4d 	bl	800277c <TM1637_ClkLow>
    TM1637_DelayUsec(5);
 80028e2:	2005      	movs	r0, #5
 80028e4:	f000 f833 	bl	800294e <TM1637_DelayUsec>

    TM1637_ClkHigh();
 80028e8:	f7ff ff3c 	bl	8002764 <TM1637_ClkHigh>
    TM1637_DelayUsec(2);
 80028ec:	2002      	movs	r0, #2
 80028ee:	f000 f82e 	bl	800294e <TM1637_DelayUsec>
    TM1637_ClkLow();
 80028f2:	f7ff ff43 	bl	800277c <TM1637_ClkLow>
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}

080028fa <TM1637_WriteByte>:

void TM1637_WriteByte(unsigned char b)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b084      	sub	sp, #16
 80028fe:	af00      	add	r7, sp, #0
 8002900:	4603      	mov	r3, r0
 8002902:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 8; ++i) {
 8002904:	2300      	movs	r3, #0
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	e019      	b.n	800293e <TM1637_WriteByte+0x44>
		TM1637_ClkLow();
 800290a:	f7ff ff37 	bl	800277c <TM1637_ClkLow>
		if (b & 0x01) {
 800290e:	79fb      	ldrb	r3, [r7, #7]
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <TM1637_WriteByte+0x24>
			TM1637_DataHigh();
 8002918:	f7ff ff3c 	bl	8002794 <TM1637_DataHigh>
 800291c:	e001      	b.n	8002922 <TM1637_WriteByte+0x28>
		}
		else {
			TM1637_DataLow();
 800291e:	f7ff ff45 	bl	80027ac <TM1637_DataLow>
		}
		TM1637_DelayUsec(3);
 8002922:	2003      	movs	r0, #3
 8002924:	f000 f813 	bl	800294e <TM1637_DelayUsec>
		b >>= 1;
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	085b      	lsrs	r3, r3, #1
 800292c:	71fb      	strb	r3, [r7, #7]
		TM1637_ClkHigh();
 800292e:	f7ff ff19 	bl	8002764 <TM1637_ClkHigh>
		TM1637_DelayUsec(3);
 8002932:	2003      	movs	r0, #3
 8002934:	f000 f80b 	bl	800294e <TM1637_DelayUsec>
	for (int i = 0; i < 8; ++i) {
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	3301      	adds	r3, #1
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2b07      	cmp	r3, #7
 8002942:	dde2      	ble.n	800290a <TM1637_WriteByte+0x10>
	}
}
 8002944:	bf00      	nop
 8002946:	bf00      	nop
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <TM1637_DelayUsec>:

void TM1637_DelayUsec(unsigned int i)
{
 800294e:	b480      	push	{r7}
 8002950:	b085      	sub	sp, #20
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
    for (; i>0; i--) {
 8002956:	e00c      	b.n	8002972 <TM1637_DelayUsec+0x24>
        for (int j = 0; j < 100; ++j) {
 8002958:	2300      	movs	r3, #0
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	e003      	b.n	8002966 <TM1637_DelayUsec+0x18>
					__NOP();
 800295e:	bf00      	nop
        for (int j = 0; j < 100; ++j) {
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	3301      	adds	r3, #1
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2b63      	cmp	r3, #99	; 0x63
 800296a:	ddf8      	ble.n	800295e <TM1637_DelayUsec+0x10>
    for (; i>0; i--) {
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3b01      	subs	r3, #1
 8002970:	607b      	str	r3, [r7, #4]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1ef      	bne.n	8002958 <TM1637_DelayUsec+0xa>
        }
    }
}
 8002978:	bf00      	nop
 800297a:	bf00      	nop
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <GPIO_sensor_init>:
	  HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_SET);
	  HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_SET);
}


void GPIO_sensor_init(void){
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af00      	add	r7, sp, #0

	 __HAL_RCC_GPIOC_CLK_ENABLE();
 800298a:	4b33      	ldr	r3, [pc, #204]	; (8002a58 <GPIO_sensor_init+0xd4>)
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	4a32      	ldr	r2, [pc, #200]	; (8002a58 <GPIO_sensor_init+0xd4>)
 8002990:	f043 0304 	orr.w	r3, r3, #4
 8002994:	61d3      	str	r3, [r2, #28]
 8002996:	4b30      	ldr	r3, [pc, #192]	; (8002a58 <GPIO_sensor_init+0xd4>)
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	f003 0304 	and.w	r3, r3, #4
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	68bb      	ldr	r3, [r7, #8]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a2:	4b2d      	ldr	r3, [pc, #180]	; (8002a58 <GPIO_sensor_init+0xd4>)
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	4a2c      	ldr	r2, [pc, #176]	; (8002a58 <GPIO_sensor_init+0xd4>)
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	61d3      	str	r3, [r2, #28]
 80029ae:	4b2a      	ldr	r3, [pc, #168]	; (8002a58 <GPIO_sensor_init+0xd4>)
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	607b      	str	r3, [r7, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ba:	4b27      	ldr	r3, [pc, #156]	; (8002a58 <GPIO_sensor_init+0xd4>)
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	4a26      	ldr	r2, [pc, #152]	; (8002a58 <GPIO_sensor_init+0xd4>)
 80029c0:	f043 0302 	orr.w	r3, r3, #2
 80029c4:	61d3      	str	r3, [r2, #28]
 80029c6:	4b24      	ldr	r3, [pc, #144]	; (8002a58 <GPIO_sensor_init+0xd4>)
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d2:	f107 030c 	add.w	r3, r7, #12
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	605a      	str	r2, [r3, #4]
 80029dc:	609a      	str	r2, [r3, #8]
 80029de:	60da      	str	r2, [r3, #12]
 80029e0:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029e2:	2300      	movs	r3, #0
 80029e4:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029ea:	2302      	movs	r3, #2
 80029ec:	61bb      	str	r3, [r7, #24]

	  GPIO_InitStruct.Pin = SENSOR_1_PIN;
 80029ee:	2301      	movs	r3, #1
 80029f0:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(SENSOR_1_PORT, &GPIO_InitStruct);
 80029f2:	f107 030c 	add.w	r3, r7, #12
 80029f6:	4619      	mov	r1, r3
 80029f8:	4818      	ldr	r0, [pc, #96]	; (8002a5c <GPIO_sensor_init+0xd8>)
 80029fa:	f7fe f869 	bl	8000ad0 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = SENSOR_2_PIN;
 80029fe:	2302      	movs	r3, #2
 8002a00:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(SENSOR_2_PORT, &GPIO_InitStruct);
 8002a02:	f107 030c 	add.w	r3, r7, #12
 8002a06:	4619      	mov	r1, r3
 8002a08:	4814      	ldr	r0, [pc, #80]	; (8002a5c <GPIO_sensor_init+0xd8>)
 8002a0a:	f7fe f861 	bl	8000ad0 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = SENSOR_3_PIN;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(SENSOR_3_PORT, &GPIO_InitStruct);
 8002a12:	f107 030c 	add.w	r3, r7, #12
 8002a16:	4619      	mov	r1, r3
 8002a18:	4811      	ldr	r0, [pc, #68]	; (8002a60 <GPIO_sensor_init+0xdc>)
 8002a1a:	f7fe f859 	bl	8000ad0 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = SENSOR_4_PIN;
 8002a1e:	2310      	movs	r3, #16
 8002a20:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(SENSOR_4_PORT, &GPIO_InitStruct);
 8002a22:	f107 030c 	add.w	r3, r7, #12
 8002a26:	4619      	mov	r1, r3
 8002a28:	480e      	ldr	r0, [pc, #56]	; (8002a64 <GPIO_sensor_init+0xe0>)
 8002a2a:	f7fe f851 	bl	8000ad0 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = SENSOR_5_PIN;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(SENSOR_5_PORT, &GPIO_InitStruct);
 8002a32:	f107 030c 	add.w	r3, r7, #12
 8002a36:	4619      	mov	r1, r3
 8002a38:	480a      	ldr	r0, [pc, #40]	; (8002a64 <GPIO_sensor_init+0xe0>)
 8002a3a:	f7fe f849 	bl	8000ad0 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = SENSOR_6_PIN;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(SENSOR_6_PORT, &GPIO_InitStruct);
 8002a42:	f107 030c 	add.w	r3, r7, #12
 8002a46:	4619      	mov	r1, r3
 8002a48:	4806      	ldr	r0, [pc, #24]	; (8002a64 <GPIO_sensor_init+0xe0>)
 8002a4a:	f7fe f841 	bl	8000ad0 <HAL_GPIO_Init>

}
 8002a4e:	bf00      	nop
 8002a50:	3720      	adds	r7, #32
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40020800 	.word	0x40020800
 8002a60:	40020400 	.word	0x40020400
 8002a64:	40020000 	.word	0x40020000

08002a68 <get_current_level>:


LEVEL_T get_current_level(void){
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0

	ss_arr[0] = SS0;
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	4855      	ldr	r0, [pc, #340]	; (8002bc4 <get_current_level+0x15c>)
 8002a70:	f7fe f9be 	bl	8000df0 <HAL_GPIO_ReadPin>
 8002a74:	4603      	mov	r3, r0
 8002a76:	461a      	mov	r2, r3
 8002a78:	4b53      	ldr	r3, [pc, #332]	; (8002bc8 <get_current_level+0x160>)
 8002a7a:	701a      	strb	r2, [r3, #0]
	ss_arr[1] = SS1_2;
 8002a7c:	2102      	movs	r1, #2
 8002a7e:	4851      	ldr	r0, [pc, #324]	; (8002bc4 <get_current_level+0x15c>)
 8002a80:	f7fe f9b6 	bl	8000df0 <HAL_GPIO_ReadPin>
 8002a84:	4603      	mov	r3, r0
 8002a86:	461a      	mov	r2, r3
 8002a88:	4b4f      	ldr	r3, [pc, #316]	; (8002bc8 <get_current_level+0x160>)
 8002a8a:	705a      	strb	r2, [r3, #1]
	ss_arr[2] = SS2_3;
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	484f      	ldr	r0, [pc, #316]	; (8002bcc <get_current_level+0x164>)
 8002a90:	f7fe f9ae 	bl	8000df0 <HAL_GPIO_ReadPin>
 8002a94:	4603      	mov	r3, r0
 8002a96:	461a      	mov	r2, r3
 8002a98:	4b4b      	ldr	r3, [pc, #300]	; (8002bc8 <get_current_level+0x160>)
 8002a9a:	709a      	strb	r2, [r3, #2]
	ss_arr[3] = SS3_4;
 8002a9c:	2110      	movs	r1, #16
 8002a9e:	484c      	ldr	r0, [pc, #304]	; (8002bd0 <get_current_level+0x168>)
 8002aa0:	f7fe f9a6 	bl	8000df0 <HAL_GPIO_ReadPin>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	4b47      	ldr	r3, [pc, #284]	; (8002bc8 <get_current_level+0x160>)
 8002aaa:	70da      	strb	r2, [r3, #3]
	ss_arr[4] = SS4_A;
 8002aac:	2102      	movs	r1, #2
 8002aae:	4848      	ldr	r0, [pc, #288]	; (8002bd0 <get_current_level+0x168>)
 8002ab0:	f7fe f99e 	bl	8000df0 <HAL_GPIO_ReadPin>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	4b43      	ldr	r3, [pc, #268]	; (8002bc8 <get_current_level+0x160>)
 8002aba:	711a      	strb	r2, [r3, #4]
	ss_arr[5] = SS4_B;
 8002abc:	2101      	movs	r1, #1
 8002abe:	4844      	ldr	r0, [pc, #272]	; (8002bd0 <get_current_level+0x168>)
 8002ac0:	f7fe f996 	bl	8000df0 <HAL_GPIO_ReadPin>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	4b3f      	ldr	r3, [pc, #252]	; (8002bc8 <get_current_level+0x160>)
 8002aca:	715a      	strb	r2, [r3, #5]


	if((SS4_B == ON) || (SS4_A == ON)){
 8002acc:	2101      	movs	r1, #1
 8002ace:	4840      	ldr	r0, [pc, #256]	; (8002bd0 <get_current_level+0x168>)
 8002ad0:	f7fe f98e 	bl	8000df0 <HAL_GPIO_ReadPin>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d006      	beq.n	8002ae8 <get_current_level+0x80>
 8002ada:	2102      	movs	r1, #2
 8002adc:	483c      	ldr	r0, [pc, #240]	; (8002bd0 <get_current_level+0x168>)
 8002ade:	f7fe f987 	bl	8000df0 <HAL_GPIO_ReadPin>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <get_current_level+0x84>
		return LEVEL_4;
 8002ae8:	2328      	movs	r3, #40	; 0x28
 8002aea:	e069      	b.n	8002bc0 <get_current_level+0x158>
	}

	if(SS0 == ON){
 8002aec:	2101      	movs	r1, #1
 8002aee:	4835      	ldr	r0, [pc, #212]	; (8002bc4 <get_current_level+0x15c>)
 8002af0:	f7fe f97e 	bl	8000df0 <HAL_GPIO_ReadPin>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <get_current_level+0x96>
		return LEVEL_1;
 8002afa:	230a      	movs	r3, #10
 8002afc:	e060      	b.n	8002bc0 <get_current_level+0x158>
	}

	if((SS1_2 == ON) && (SS2_3 == OFF) ){
 8002afe:	2102      	movs	r1, #2
 8002b00:	4830      	ldr	r0, [pc, #192]	; (8002bc4 <get_current_level+0x15c>)
 8002b02:	f7fe f975 	bl	8000df0 <HAL_GPIO_ReadPin>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d108      	bne.n	8002b1e <get_current_level+0xb6>
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	482f      	ldr	r0, [pc, #188]	; (8002bcc <get_current_level+0x164>)
 8002b10:	f7fe f96e 	bl	8000df0 <HAL_GPIO_ReadPin>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <get_current_level+0xb6>
		return LEVEL_1_2;
 8002b1a:	230f      	movs	r3, #15
 8002b1c:	e050      	b.n	8002bc0 <get_current_level+0x158>
	}

	if((SS1_2 == ON) && (SS2_3 == ON) ){
 8002b1e:	2102      	movs	r1, #2
 8002b20:	4828      	ldr	r0, [pc, #160]	; (8002bc4 <get_current_level+0x15c>)
 8002b22:	f7fe f965 	bl	8000df0 <HAL_GPIO_ReadPin>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d108      	bne.n	8002b3e <get_current_level+0xd6>
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	4827      	ldr	r0, [pc, #156]	; (8002bcc <get_current_level+0x164>)
 8002b30:	f7fe f95e 	bl	8000df0 <HAL_GPIO_ReadPin>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <get_current_level+0xd6>
		return LEVEL_2;
 8002b3a:	2314      	movs	r3, #20
 8002b3c:	e040      	b.n	8002bc0 <get_current_level+0x158>
	}

	if((SS2_3 == ON) && (SS3_4 == OFF) ){
 8002b3e:	2101      	movs	r1, #1
 8002b40:	4822      	ldr	r0, [pc, #136]	; (8002bcc <get_current_level+0x164>)
 8002b42:	f7fe f955 	bl	8000df0 <HAL_GPIO_ReadPin>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d108      	bne.n	8002b5e <get_current_level+0xf6>
 8002b4c:	2110      	movs	r1, #16
 8002b4e:	4820      	ldr	r0, [pc, #128]	; (8002bd0 <get_current_level+0x168>)
 8002b50:	f7fe f94e 	bl	8000df0 <HAL_GPIO_ReadPin>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d101      	bne.n	8002b5e <get_current_level+0xf6>
		return LEVEL_2_3;
 8002b5a:	2319      	movs	r3, #25
 8002b5c:	e030      	b.n	8002bc0 <get_current_level+0x158>
	}

	if((SS2_3 == ON) && (SS3_4 == ON) ){
 8002b5e:	2101      	movs	r1, #1
 8002b60:	481a      	ldr	r0, [pc, #104]	; (8002bcc <get_current_level+0x164>)
 8002b62:	f7fe f945 	bl	8000df0 <HAL_GPIO_ReadPin>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d108      	bne.n	8002b7e <get_current_level+0x116>
 8002b6c:	2110      	movs	r1, #16
 8002b6e:	4818      	ldr	r0, [pc, #96]	; (8002bd0 <get_current_level+0x168>)
 8002b70:	f7fe f93e 	bl	8000df0 <HAL_GPIO_ReadPin>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <get_current_level+0x116>
		return LEVEL_3;
 8002b7a:	231e      	movs	r3, #30
 8002b7c:	e020      	b.n	8002bc0 <get_current_level+0x158>
	}

	if((SS3_4 == ON) && (SS4_A == OFF) ){
 8002b7e:	2110      	movs	r1, #16
 8002b80:	4813      	ldr	r0, [pc, #76]	; (8002bd0 <get_current_level+0x168>)
 8002b82:	f7fe f935 	bl	8000df0 <HAL_GPIO_ReadPin>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d108      	bne.n	8002b9e <get_current_level+0x136>
 8002b8c:	2102      	movs	r1, #2
 8002b8e:	4810      	ldr	r0, [pc, #64]	; (8002bd0 <get_current_level+0x168>)
 8002b90:	f7fe f92e 	bl	8000df0 <HAL_GPIO_ReadPin>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d101      	bne.n	8002b9e <get_current_level+0x136>
		return LEVEL_3_4;
 8002b9a:	2323      	movs	r3, #35	; 0x23
 8002b9c:	e010      	b.n	8002bc0 <get_current_level+0x158>
	}

	if((SS3_4 == ON) && (SS4_B == OFF)){
 8002b9e:	2110      	movs	r1, #16
 8002ba0:	480b      	ldr	r0, [pc, #44]	; (8002bd0 <get_current_level+0x168>)
 8002ba2:	f7fe f925 	bl	8000df0 <HAL_GPIO_ReadPin>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d108      	bne.n	8002bbe <get_current_level+0x156>
 8002bac:	2101      	movs	r1, #1
 8002bae:	4808      	ldr	r0, [pc, #32]	; (8002bd0 <get_current_level+0x168>)
 8002bb0:	f7fe f91e 	bl	8000df0 <HAL_GPIO_ReadPin>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d101      	bne.n	8002bbe <get_current_level+0x156>
		return LEVEL_4;
 8002bba:	2328      	movs	r3, #40	; 0x28
 8002bbc:	e000      	b.n	8002bc0 <get_current_level+0x158>
	}

	return LEVEL_ERROR;
 8002bbe:	2363      	movs	r3, #99	; 0x63

}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40020800 	.word	0x40020800
 8002bc8:	200000e4 	.word	0x200000e4
 8002bcc:	40020400 	.word	0x40020400
 8002bd0:	40020000 	.word	0x40020000

08002bd4 <board_init>:

void board_init(void){
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
	  HAL_Init();
 8002bd8:	f7fd fd51 	bl	800067e <HAL_Init>
	  SystemClock_Config();
 8002bdc:	f000 f81a 	bl	8002c14 <SystemClock_Config>
	  MX_GPIO_Init();
 8002be0:	f000 f8ba 	bl	8002d58 <MX_GPIO_Init>
	  MX_UART4_Init();
 8002be4:	f000 f864 	bl	8002cb0 <MX_UART4_Init>
	  MX_USART2_UART_Init();
 8002be8:	f000 f88c 	bl	8002d04 <MX_USART2_UART_Init>
	  HAL_UART_Receive_IT(&huart2, &buff_rx, 1);
 8002bec:	2201      	movs	r2, #1
 8002bee:	4905      	ldr	r1, [pc, #20]	; (8002c04 <board_init+0x30>)
 8002bf0:	4805      	ldr	r0, [pc, #20]	; (8002c08 <board_init+0x34>)
 8002bf2:	f7fe ffb4 	bl	8001b5e <HAL_UART_Receive_IT>
	  HAL_UART_Receive_IT(&huart4, &buff_rx_mqtt, 1);
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	4904      	ldr	r1, [pc, #16]	; (8002c0c <board_init+0x38>)
 8002bfa:	4805      	ldr	r0, [pc, #20]	; (8002c10 <board_init+0x3c>)
 8002bfc:	f7fe ffaf 	bl	8001b5e <HAL_UART_Receive_IT>
}
 8002c00:	bf00      	nop
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	200002ac 	.word	0x200002ac
 8002c08:	2000009c 	.word	0x2000009c
 8002c0c:	200002ad 	.word	0x200002ad
 8002c10:	20000054 	.word	0x20000054

08002c14 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b092      	sub	sp, #72	; 0x48
 8002c18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c1a:	f107 0314 	add.w	r3, r7, #20
 8002c1e:	2234      	movs	r2, #52	; 0x34
 8002c20:	2100      	movs	r1, #0
 8002c22:	4618      	mov	r0, r3
 8002c24:	f001 fce6 	bl	80045f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c28:	463b      	mov	r3, r7
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	605a      	str	r2, [r3, #4]
 8002c30:	609a      	str	r2, [r3, #8]
 8002c32:	60da      	str	r2, [r3, #12]
 8002c34:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c36:	4b1d      	ldr	r3, [pc, #116]	; (8002cac <SystemClock_Config+0x98>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8002c3e:	4a1b      	ldr	r2, [pc, #108]	; (8002cac <SystemClock_Config+0x98>)
 8002c40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c44:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c46:	2302      	movs	r3, #2
 8002c48:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c4e:	2310      	movs	r3, #16
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c52:	2302      	movs	r3, #2
 8002c54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c56:	2300      	movs	r3, #0
 8002c58:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002c5a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8002c60:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c64:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c66:	f107 0314 	add.w	r3, r7, #20
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fe f8f0 	bl	8000e50 <HAL_RCC_OscConfig>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002c76:	f000 f8b1 	bl	8002ddc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c7a:	230f      	movs	r3, #15
 8002c7c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c82:	2300      	movs	r3, #0
 8002c84:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002c8e:	463b      	mov	r3, r7
 8002c90:	2101      	movs	r1, #1
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe fc0c 	bl	80014b0 <HAL_RCC_ClockConfig>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002c9e:	f000 f89d 	bl	8002ddc <Error_Handler>
  }
}
 8002ca2:	bf00      	nop
 8002ca4:	3748      	adds	r7, #72	; 0x48
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40007000 	.word	0x40007000

08002cb0 <MX_UART4_Init>:


static void MX_UART4_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0


  huart4.Instance = UART4;
 8002cb4:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <MX_UART4_Init+0x4c>)
 8002cb6:	4a12      	ldr	r2, [pc, #72]	; (8002d00 <MX_UART4_Init+0x50>)
 8002cb8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 8002cba:	4b10      	ldr	r3, [pc, #64]	; (8002cfc <MX_UART4_Init+0x4c>)
 8002cbc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002cc0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <MX_UART4_Init+0x4c>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <MX_UART4_Init+0x4c>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002cce:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <MX_UART4_Init+0x4c>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002cd4:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <MX_UART4_Init+0x4c>)
 8002cd6:	220c      	movs	r2, #12
 8002cd8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cda:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <MX_UART4_Init+0x4c>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <MX_UART4_Init+0x4c>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002ce6:	4805      	ldr	r0, [pc, #20]	; (8002cfc <MX_UART4_Init+0x4c>)
 8002ce8:	f7fe fe66 	bl	80019b8 <HAL_UART_Init>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002cf2:	f000 f873 	bl	8002ddc <Error_Handler>
  }


}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000054 	.word	0x20000054
 8002d00:	40004c00 	.word	0x40004c00

08002d04 <MX_USART2_UART_Init>:


static void MX_USART2_UART_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0


  huart2.Instance = USART2;
 8002d08:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <MX_USART2_UART_Init+0x4c>)
 8002d0a:	4a12      	ldr	r2, [pc, #72]	; (8002d54 <MX_USART2_UART_Init+0x50>)
 8002d0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d0e:	4b10      	ldr	r3, [pc, #64]	; (8002d50 <MX_USART2_UART_Init+0x4c>)
 8002d10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d16:	4b0e      	ldr	r3, [pc, #56]	; (8002d50 <MX_USART2_UART_Init+0x4c>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <MX_USART2_UART_Init+0x4c>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d22:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <MX_USART2_UART_Init+0x4c>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d28:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <MX_USART2_UART_Init+0x4c>)
 8002d2a:	220c      	movs	r2, #12
 8002d2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d2e:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <MX_USART2_UART_Init+0x4c>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d34:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <MX_USART2_UART_Init+0x4c>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d3a:	4805      	ldr	r0, [pc, #20]	; (8002d50 <MX_USART2_UART_Init+0x4c>)
 8002d3c:	f7fe fe3c 	bl	80019b8 <HAL_UART_Init>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002d46:	f000 f849 	bl	8002ddc <Error_Handler>
  }


}
 8002d4a:	bf00      	nop
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	2000009c 	.word	0x2000009c
 8002d54:	40004400 	.word	0x40004400

08002d58 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af00      	add	r7, sp, #0

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d5e:	4b1d      	ldr	r3, [pc, #116]	; (8002dd4 <MX_GPIO_Init+0x7c>)
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	4a1c      	ldr	r2, [pc, #112]	; (8002dd4 <MX_GPIO_Init+0x7c>)
 8002d64:	f043 0301 	orr.w	r3, r3, #1
 8002d68:	61d3      	str	r3, [r2, #28]
 8002d6a:	4b1a      	ldr	r3, [pc, #104]	; (8002dd4 <MX_GPIO_Init+0x7c>)
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d76:	4b17      	ldr	r3, [pc, #92]	; (8002dd4 <MX_GPIO_Init+0x7c>)
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	4a16      	ldr	r2, [pc, #88]	; (8002dd4 <MX_GPIO_Init+0x7c>)
 8002d7c:	f043 0304 	orr.w	r3, r3, #4
 8002d80:	61d3      	str	r3, [r2, #28]
 8002d82:	4b14      	ldr	r3, [pc, #80]	; (8002dd4 <MX_GPIO_Init+0x7c>)
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	f003 0304 	and.w	r3, r3, #4
 8002d8a:	607b      	str	r3, [r7, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]


  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d8e:	f107 030c 	add.w	r3, r7, #12
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	605a      	str	r2, [r3, #4]
 8002d98:	609a      	str	r2, [r3, #8]
 8002d9a:	60da      	str	r2, [r3, #12]
 8002d9c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002da6:	2302      	movs	r3, #2
 8002da8:	61bb      	str	r3, [r7, #24]

  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002daa:	2304      	movs	r3, #4
 8002dac:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dae:	f107 030c 	add.w	r3, r7, #12
 8002db2:	4619      	mov	r1, r3
 8002db4:	4808      	ldr	r0, [pc, #32]	; (8002dd8 <MX_GPIO_Init+0x80>)
 8002db6:	f7fd fe8b 	bl	8000ad0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002dba:	2308      	movs	r3, #8
 8002dbc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dbe:	f107 030c 	add.w	r3, r7, #12
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4804      	ldr	r0, [pc, #16]	; (8002dd8 <MX_GPIO_Init+0x80>)
 8002dc6:	f7fd fe83 	bl	8000ad0 <HAL_GPIO_Init>


}
 8002dca:	bf00      	nop
 8002dcc:	3720      	adds	r7, #32
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	40020800 	.word	0x40020800

08002ddc <Error_Handler>:

void Error_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002de0:	b672      	cpsid	i
}
 8002de2:	bf00      	nop
  __disable_irq();
  while (1)
 8002de4:	e7fe      	b.n	8002de4 <Error_Handler+0x8>
	...

08002de8 <main>:




int main(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
   board_init();
 8002dec:	f7ff fef2 	bl	8002bd4 <board_init>
  matrix_init();
 8002df0:	f000 fdbc 	bl	800396c <matrix_init>
  GPIO_sensor_init();
 8002df4:	f7ff fdc6 	bl	8002984 <GPIO_sensor_init>
  lkv_stepmotor_gpio_init();
 8002df8:	f001 fb72 	bl	80044e0 <lkv_stepmotor_gpio_init>
  modbus_sever_init();
 8002dfc:	f000 fc32 	bl	8003664 <modbus_sever_init>

	current_level = get_current_level();
 8002e00:	f7ff fe32 	bl	8002a68 <get_current_level>
 8002e04:	4603      	mov	r3, r0
 8002e06:	461a      	mov	r2, r3
 8002e08:	4b6d      	ldr	r3, [pc, #436]	; (8002fc0 <main+0x1d8>)
 8002e0a:	701a      	strb	r2, [r3, #0]

   if((current_level % 10) == 0){
 8002e0c:	4b6c      	ldr	r3, [pc, #432]	; (8002fc0 <main+0x1d8>)
 8002e0e:	781a      	ldrb	r2, [r3, #0]
 8002e10:	4b6c      	ldr	r3, [pc, #432]	; (8002fc4 <main+0x1dc>)
 8002e12:	fba3 1302 	umull	r1, r3, r3, r2
 8002e16:	08d9      	lsrs	r1, r3, #3
 8002e18:	460b      	mov	r3, r1
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d104      	bne.n	8002e32 <main+0x4a>
	   target_level = current_level;
 8002e28:	4b65      	ldr	r3, [pc, #404]	; (8002fc0 <main+0x1d8>)
 8002e2a:	781a      	ldrb	r2, [r3, #0]
 8002e2c:	4b66      	ldr	r3, [pc, #408]	; (8002fc8 <main+0x1e0>)
 8002e2e:	701a      	strb	r2, [r3, #0]
 8002e30:	e005      	b.n	8002e3e <main+0x56>
   }else{
	   target_level = current_level - 5;
 8002e32:	4b63      	ldr	r3, [pc, #396]	; (8002fc0 <main+0x1d8>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	3b05      	subs	r3, #5
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	4b63      	ldr	r3, [pc, #396]	; (8002fc8 <main+0x1e0>)
 8002e3c:	701a      	strb	r2, [r3, #0]
   }

      elevator_process_force(STEP_MOTOR_SPEED_NOR);
 8002e3e:	f640 2028 	movw	r0, #2600	; 0xa28
 8002e42:	f000 fc61 	bl	8003708 <elevator_process_force>

	    blink_led_delay(BLINK_START);
 8002e46:	2002      	movs	r0, #2
 8002e48:	f000 faf6 	bl	8003438 <blink_led_delay>
		status_cabin = WAIT_USER_FIST_CALL;
 8002e4c:	4b5f      	ldr	r3, [pc, #380]	; (8002fcc <main+0x1e4>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	701a      	strb	r2, [r3, #0]


  while (1)
  {
	  switch (status_cabin) {
 8002e52:	4b5e      	ldr	r3, [pc, #376]	; (8002fcc <main+0x1e4>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b05      	cmp	r3, #5
 8002e58:	f200 80a9 	bhi.w	8002fae <main+0x1c6>
 8002e5c:	a201      	add	r2, pc, #4	; (adr r2, 8002e64 <main+0x7c>)
 8002e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e62:	bf00      	nop
 8002e64:	08002faf 	.word	0x08002faf
 8002e68:	08002e7d 	.word	0x08002e7d
 8002e6c:	08002f09 	.word	0x08002f09
 8002e70:	08002f49 	.word	0x08002f49
 8002e74:	08002f6d 	.word	0x08002f6d
 8002e78:	08002faf 	.word	0x08002faf
	  case EMERGENCY_FIRE:
		  	break;
	  case WAIT_USER_FIST_CALL:
			break;
	  case RUN_TO_TAKE_USER:
			  if(target_level > current_level){
 8002e7c:	4b52      	ldr	r3, [pc, #328]	; (8002fc8 <main+0x1e0>)
 8002e7e:	781a      	ldrb	r2, [r3, #0]
 8002e80:	4b4f      	ldr	r3, [pc, #316]	; (8002fc0 <main+0x1d8>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d90a      	bls.n	8002e9e <main+0xb6>
				  show_display(LED_UP, target_level/10);
 8002e88:	4b4f      	ldr	r3, [pc, #316]	; (8002fc8 <main+0x1e0>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	4a4d      	ldr	r2, [pc, #308]	; (8002fc4 <main+0x1dc>)
 8002e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e92:	08db      	lsrs	r3, r3, #3
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	4619      	mov	r1, r3
 8002e98:	2001      	movs	r0, #1
 8002e9a:	f000 fcb7 	bl	800380c <show_display>
			  }
			  if(target_level< current_level){
 8002e9e:	4b4a      	ldr	r3, [pc, #296]	; (8002fc8 <main+0x1e0>)
 8002ea0:	781a      	ldrb	r2, [r3, #0]
 8002ea2:	4b47      	ldr	r3, [pc, #284]	; (8002fc0 <main+0x1d8>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d20a      	bcs.n	8002ec0 <main+0xd8>
				  show_display(LED_DWN, target_level/10);
 8002eaa:	4b47      	ldr	r3, [pc, #284]	; (8002fc8 <main+0x1e0>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	4a45      	ldr	r2, [pc, #276]	; (8002fc4 <main+0x1dc>)
 8002eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb4:	08db      	lsrs	r3, r3, #3
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	4619      	mov	r1, r3
 8002eba:	2000      	movs	r0, #0
 8002ebc:	f000 fca6 	bl	800380c <show_display>
			  }
			elevator_process_force(STEP_MOTOR_SPEED_NOR);
 8002ec0:	f640 2028 	movw	r0, #2600	; 0xa28
 8002ec4:	f000 fc20 	bl	8003708 <elevator_process_force>
			if((current_level == target_level) && (!is_fire)){
 8002ec8:	4b3d      	ldr	r3, [pc, #244]	; (8002fc0 <main+0x1d8>)
 8002eca:	781a      	ldrb	r2, [r3, #0]
 8002ecc:	4b3e      	ldr	r3, [pc, #248]	; (8002fc8 <main+0x1e0>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d16e      	bne.n	8002fb2 <main+0x1ca>
 8002ed4:	4b3e      	ldr	r3, [pc, #248]	; (8002fd0 <main+0x1e8>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d16a      	bne.n	8002fb2 <main+0x1ca>
				status_cabin = WAIT_USER_ODER_CALL;
 8002edc:	4b3b      	ldr	r3, [pc, #236]	; (8002fcc <main+0x1e4>)
 8002ede:	2202      	movs	r2, #2
 8002ee0:	701a      	strb	r2, [r3, #0]
				wait_timeot = g_sys_time + WAIT_USER_ODER_TIMEOT;
 8002ee2:	4b3c      	ldr	r3, [pc, #240]	; (8002fd4 <main+0x1ec>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f503 53da 	add.w	r3, r3, #6976	; 0x1b40
 8002eea:	3318      	adds	r3, #24
 8002eec:	4a3a      	ldr	r2, [pc, #232]	; (8002fd8 <main+0x1f0>)
 8002eee:	6013      	str	r3, [r2, #0]
				  show_display(LED_WAIT, target_level/10);
 8002ef0:	4b35      	ldr	r3, [pc, #212]	; (8002fc8 <main+0x1e0>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	4a33      	ldr	r2, [pc, #204]	; (8002fc4 <main+0x1dc>)
 8002ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8002efa:	08db      	lsrs	r3, r3, #3
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	4619      	mov	r1, r3
 8002f00:	2003      	movs	r0, #3
 8002f02:	f000 fc83 	bl	800380c <show_display>
			}
			break;
 8002f06:	e054      	b.n	8002fb2 <main+0x1ca>
	  case WAIT_USER_ODER_CALL:
			  if(wait_timeot < g_sys_time){
 8002f08:	4b33      	ldr	r3, [pc, #204]	; (8002fd8 <main+0x1f0>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	4b31      	ldr	r3, [pc, #196]	; (8002fd4 <main+0x1ec>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d250      	bcs.n	8002fb6 <main+0x1ce>
					status_cabin = WAIT_USER_FIST_CALL;
 8002f14:	4b2d      	ldr	r3, [pc, #180]	; (8002fcc <main+0x1e4>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	701a      	strb	r2, [r3, #0]
					  show_display(LED_START, target_level/10);
 8002f1a:	4b2b      	ldr	r3, [pc, #172]	; (8002fc8 <main+0x1e0>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	4a29      	ldr	r2, [pc, #164]	; (8002fc4 <main+0x1dc>)
 8002f20:	fba2 2303 	umull	r2, r3, r2, r3
 8002f24:	08db      	lsrs	r3, r3, #3
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	4619      	mov	r1, r3
 8002f2a:	2008      	movs	r0, #8
 8002f2c:	f000 fc6e 	bl	800380c <show_display>
					  if(target_level_next_time != 0){
 8002f30:	4b2a      	ldr	r3, [pc, #168]	; (8002fdc <main+0x1f4>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d03e      	beq.n	8002fb6 <main+0x1ce>
						  target_level = target_level_next_time;
 8002f38:	4b28      	ldr	r3, [pc, #160]	; (8002fdc <main+0x1f4>)
 8002f3a:	781a      	ldrb	r2, [r3, #0]
 8002f3c:	4b22      	ldr	r3, [pc, #136]	; (8002fc8 <main+0x1e0>)
 8002f3e:	701a      	strb	r2, [r3, #0]
						  target_level_next_time = 0;
 8002f40:	4b26      	ldr	r3, [pc, #152]	; (8002fdc <main+0x1f4>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	701a      	strb	r2, [r3, #0]
					  }
			  }
			break;
 8002f46:	e036      	b.n	8002fb6 <main+0x1ce>
	  case RUN_TO_USER_ODER:
			elevator_process_force(STEP_MOTOR_SPEED_NOR);
 8002f48:	f640 2028 	movw	r0, #2600	; 0xa28
 8002f4c:	f000 fbdc 	bl	8003708 <elevator_process_force>
			if((current_level == target_level) && (!is_fire)){
 8002f50:	4b1b      	ldr	r3, [pc, #108]	; (8002fc0 <main+0x1d8>)
 8002f52:	781a      	ldrb	r2, [r3, #0]
 8002f54:	4b1c      	ldr	r3, [pc, #112]	; (8002fc8 <main+0x1e0>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d12e      	bne.n	8002fba <main+0x1d2>
 8002f5c:	4b1c      	ldr	r3, [pc, #112]	; (8002fd0 <main+0x1e8>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d12a      	bne.n	8002fba <main+0x1d2>
				status_cabin = DONE_USER_ODER;
 8002f64:	4b19      	ldr	r3, [pc, #100]	; (8002fcc <main+0x1e4>)
 8002f66:	2204      	movs	r2, #4
 8002f68:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002f6a:	e026      	b.n	8002fba <main+0x1d2>
	  case DONE_USER_ODER:
			blink_led_delay(BLINK_DONE);
 8002f6c:	2001      	movs	r0, #1
 8002f6e:	f000 fa63 	bl	8003438 <blink_led_delay>
			  if(target_level_next_time != 0){
 8002f72:	4b1a      	ldr	r3, [pc, #104]	; (8002fdc <main+0x1f4>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00a      	beq.n	8002f90 <main+0x1a8>
				  target_level = target_level_next_time;
 8002f7a:	4b18      	ldr	r3, [pc, #96]	; (8002fdc <main+0x1f4>)
 8002f7c:	781a      	ldrb	r2, [r3, #0]
 8002f7e:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <main+0x1e0>)
 8002f80:	701a      	strb	r2, [r3, #0]
				  target_level_next_time = 0;
 8002f82:	4b16      	ldr	r3, [pc, #88]	; (8002fdc <main+0x1f4>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	701a      	strb	r2, [r3, #0]
					status_cabin = RUN_TO_TAKE_USER;
 8002f88:	4b10      	ldr	r3, [pc, #64]	; (8002fcc <main+0x1e4>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	701a      	strb	r2, [r3, #0]
			  }else{
					status_cabin = WAIT_USER_FIST_CALL;
					  show_display(LED_START, target_level/10);
			  }
			break;
 8002f8e:	e015      	b.n	8002fbc <main+0x1d4>
					status_cabin = WAIT_USER_FIST_CALL;
 8002f90:	4b0e      	ldr	r3, [pc, #56]	; (8002fcc <main+0x1e4>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	701a      	strb	r2, [r3, #0]
					  show_display(LED_START, target_level/10);
 8002f96:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <main+0x1e0>)
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	4a0a      	ldr	r2, [pc, #40]	; (8002fc4 <main+0x1dc>)
 8002f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa0:	08db      	lsrs	r3, r3, #3
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	2008      	movs	r0, #8
 8002fa8:	f000 fc30 	bl	800380c <show_display>
			break;
 8002fac:	e006      	b.n	8002fbc <main+0x1d4>
	  default:
			break;
 8002fae:	bf00      	nop
 8002fb0:	e74f      	b.n	8002e52 <main+0x6a>
			break;
 8002fb2:	bf00      	nop
 8002fb4:	e74d      	b.n	8002e52 <main+0x6a>
			break;
 8002fb6:	bf00      	nop
 8002fb8:	e74b      	b.n	8002e52 <main+0x6a>
			break;
 8002fba:	bf00      	nop
	  switch (status_cabin) {
 8002fbc:	e749      	b.n	8002e52 <main+0x6a>
 8002fbe:	bf00      	nop
 8002fc0:	20000285 	.word	0x20000285
 8002fc4:	cccccccd 	.word	0xcccccccd
 8002fc8:	20000287 	.word	0x20000287
 8002fcc:	2000027d 	.word	0x2000027d
 8002fd0:	20000284 	.word	0x20000284
 8002fd4:	200002a8 	.word	0x200002a8
 8002fd8:	20000280 	.word	0x20000280
 8002fdc:	20000286 	.word	0x20000286

08002fe0 <SysTick_Handler>:
	}
  }
}

void SysTick_Handler(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
	g_sys_time = g_sys_time + 10;
 8002fe4:	4ba5      	ldr	r3, [pc, #660]	; (800327c <SysTick_Handler+0x29c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	330a      	adds	r3, #10
 8002fea:	4aa4      	ldr	r2, [pc, #656]	; (800327c <SysTick_Handler+0x29c>)
 8002fec:	6013      	str	r3, [r2, #0]
  HAL_IncTick();
 8002fee:	f7fd fb99 	bl	8000724 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002ff2:	f7fd fce2 	bl	80009ba <HAL_SYSTICK_IRQHandler>
  linux_msg_prosess();
 8002ff6:	f000 fbbf 	bl	8003778 <linux_msg_prosess>
  	  current_level = get_current_level();
 8002ffa:	f7ff fd35 	bl	8002a68 <get_current_level>
 8002ffe:	4603      	mov	r3, r0
 8003000:	461a      	mov	r2, r3
 8003002:	4b9f      	ldr	r3, [pc, #636]	; (8003280 <SysTick_Handler+0x2a0>)
 8003004:	701a      	strb	r2, [r3, #0]
  		  user_char = get_char_user();
 8003006:	f000 fe07 	bl	8003c18 <get_char_user>
 800300a:	4603      	mov	r3, r0
 800300c:	461a      	mov	r2, r3
 800300e:	4b9d      	ldr	r3, [pc, #628]	; (8003284 <SysTick_Handler+0x2a4>)
 8003010:	701a      	strb	r2, [r3, #0]


  		  switch(status_cabin){
 8003012:	4b9d      	ldr	r3, [pc, #628]	; (8003288 <SysTick_Handler+0x2a8>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b05      	cmp	r3, #5
 8003018:	f200 8158 	bhi.w	80032cc <SysTick_Handler+0x2ec>
 800301c:	a201      	add	r2, pc, #4	; (adr r2, 8003024 <SysTick_Handler+0x44>)
 800301e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003022:	bf00      	nop
 8003024:	0800303d 	.word	0x0800303d
 8003028:	080030f9 	.word	0x080030f9
 800302c:	08003175 	.word	0x08003175
 8003030:	08003207 	.word	0x08003207
 8003034:	0800329d 	.word	0x0800329d
 8003038:	080032cd 	.word	0x080032cd
  		  case EMERGENCY_FIRE:
  			  	break;
		  case WAIT_USER_FIST_CALL:
			  if((user_char >= '1') && (user_char <= '4')){
 800303c:	4b91      	ldr	r3, [pc, #580]	; (8003284 <SysTick_Handler+0x2a4>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b30      	cmp	r3, #48	; 0x30
 8003042:	f240 8145 	bls.w	80032d0 <SysTick_Handler+0x2f0>
 8003046:	4b8f      	ldr	r3, [pc, #572]	; (8003284 <SysTick_Handler+0x2a4>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b34      	cmp	r3, #52	; 0x34
 800304c:	f200 8140 	bhi.w	80032d0 <SysTick_Handler+0x2f0>
				  while(get_char_user() != 0);
 8003050:	bf00      	nop
 8003052:	f000 fde1 	bl	8003c18 <get_char_user>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1fa      	bne.n	8003052 <SysTick_Handler+0x72>
				  target_level = (user_char - '0') * 10;
 800305c:	4b89      	ldr	r3, [pc, #548]	; (8003284 <SysTick_Handler+0x2a4>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	461a      	mov	r2, r3
 8003062:	0092      	lsls	r2, r2, #2
 8003064:	4413      	add	r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	b2db      	uxtb	r3, r3
 800306a:	3320      	adds	r3, #32
 800306c:	b2da      	uxtb	r2, r3
 800306e:	4b87      	ldr	r3, [pc, #540]	; (800328c <SysTick_Handler+0x2ac>)
 8003070:	701a      	strb	r2, [r3, #0]
				  if(target_level > current_level){
 8003072:	4b86      	ldr	r3, [pc, #536]	; (800328c <SysTick_Handler+0x2ac>)
 8003074:	781a      	ldrb	r2, [r3, #0]
 8003076:	4b82      	ldr	r3, [pc, #520]	; (8003280 <SysTick_Handler+0x2a0>)
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d90e      	bls.n	800309c <SysTick_Handler+0xbc>
					  status_cabin = RUN_TO_TAKE_USER;
 800307e:	4b82      	ldr	r3, [pc, #520]	; (8003288 <SysTick_Handler+0x2a8>)
 8003080:	2201      	movs	r2, #1
 8003082:	701a      	strb	r2, [r3, #0]
					  show_display(LED_UP, target_level/10);
 8003084:	4b81      	ldr	r3, [pc, #516]	; (800328c <SysTick_Handler+0x2ac>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	4a81      	ldr	r2, [pc, #516]	; (8003290 <SysTick_Handler+0x2b0>)
 800308a:	fba2 2303 	umull	r2, r3, r2, r3
 800308e:	08db      	lsrs	r3, r3, #3
 8003090:	b2db      	uxtb	r3, r3
 8003092:	4619      	mov	r1, r3
 8003094:	2001      	movs	r0, #1
 8003096:	f000 fbb9 	bl	800380c <show_display>
					  show_display(LED_WAIT, target_level/10);
					  status_cabin = WAIT_USER_ODER_CALL;
					  wait_timeot = g_sys_time + WAIT_USER_ODER_TIMEOT;
				  }
			  }
			  break;
 800309a:	e119      	b.n	80032d0 <SysTick_Handler+0x2f0>
				  else if(target_level< current_level){
 800309c:	4b7b      	ldr	r3, [pc, #492]	; (800328c <SysTick_Handler+0x2ac>)
 800309e:	781a      	ldrb	r2, [r3, #0]
 80030a0:	4b77      	ldr	r3, [pc, #476]	; (8003280 <SysTick_Handler+0x2a0>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d20e      	bcs.n	80030c6 <SysTick_Handler+0xe6>
					  status_cabin = RUN_TO_TAKE_USER;
 80030a8:	4b77      	ldr	r3, [pc, #476]	; (8003288 <SysTick_Handler+0x2a8>)
 80030aa:	2201      	movs	r2, #1
 80030ac:	701a      	strb	r2, [r3, #0]
					  show_display(LED_DWN, target_level/10);
 80030ae:	4b77      	ldr	r3, [pc, #476]	; (800328c <SysTick_Handler+0x2ac>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	4a77      	ldr	r2, [pc, #476]	; (8003290 <SysTick_Handler+0x2b0>)
 80030b4:	fba2 2303 	umull	r2, r3, r2, r3
 80030b8:	08db      	lsrs	r3, r3, #3
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	4619      	mov	r1, r3
 80030be:	2000      	movs	r0, #0
 80030c0:	f000 fba4 	bl	800380c <show_display>
			  break;
 80030c4:	e104      	b.n	80032d0 <SysTick_Handler+0x2f0>
					  status_cabin = RUN_TO_TAKE_USER;
 80030c6:	4b70      	ldr	r3, [pc, #448]	; (8003288 <SysTick_Handler+0x2a8>)
 80030c8:	2201      	movs	r2, #1
 80030ca:	701a      	strb	r2, [r3, #0]
					  show_display(LED_WAIT, target_level/10);
 80030cc:	4b6f      	ldr	r3, [pc, #444]	; (800328c <SysTick_Handler+0x2ac>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	4a6f      	ldr	r2, [pc, #444]	; (8003290 <SysTick_Handler+0x2b0>)
 80030d2:	fba2 2303 	umull	r2, r3, r2, r3
 80030d6:	08db      	lsrs	r3, r3, #3
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	4619      	mov	r1, r3
 80030dc:	2003      	movs	r0, #3
 80030de:	f000 fb95 	bl	800380c <show_display>
					  status_cabin = WAIT_USER_ODER_CALL;
 80030e2:	4b69      	ldr	r3, [pc, #420]	; (8003288 <SysTick_Handler+0x2a8>)
 80030e4:	2202      	movs	r2, #2
 80030e6:	701a      	strb	r2, [r3, #0]
					  wait_timeot = g_sys_time + WAIT_USER_ODER_TIMEOT;
 80030e8:	4b64      	ldr	r3, [pc, #400]	; (800327c <SysTick_Handler+0x29c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f503 53da 	add.w	r3, r3, #6976	; 0x1b40
 80030f0:	3318      	adds	r3, #24
 80030f2:	4a68      	ldr	r2, [pc, #416]	; (8003294 <SysTick_Handler+0x2b4>)
 80030f4:	6013      	str	r3, [r2, #0]
			  break;
 80030f6:	e0eb      	b.n	80032d0 <SysTick_Handler+0x2f0>
		  case RUN_TO_TAKE_USER:
			  if((user_char >= '1') && (user_char <= '4')){
 80030f8:	4b62      	ldr	r3, [pc, #392]	; (8003284 <SysTick_Handler+0x2a4>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b30      	cmp	r3, #48	; 0x30
 80030fe:	f240 80e9 	bls.w	80032d4 <SysTick_Handler+0x2f4>
 8003102:	4b60      	ldr	r3, [pc, #384]	; (8003284 <SysTick_Handler+0x2a4>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b34      	cmp	r3, #52	; 0x34
 8003108:	f200 80e4 	bhi.w	80032d4 <SysTick_Handler+0x2f4>
				  if(!target_level_next_time){
 800310c:	4b62      	ldr	r3, [pc, #392]	; (8003298 <SysTick_Handler+0x2b8>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	f040 80df 	bne.w	80032d4 <SysTick_Handler+0x2f4>
					  target_level_next_time = (user_char - '0') * 10;
 8003116:	4b5b      	ldr	r3, [pc, #364]	; (8003284 <SysTick_Handler+0x2a4>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	461a      	mov	r2, r3
 800311c:	0092      	lsls	r2, r2, #2
 800311e:	4413      	add	r3, r2
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	b2db      	uxtb	r3, r3
 8003124:	3320      	adds	r3, #32
 8003126:	b2da      	uxtb	r2, r3
 8003128:	4b5b      	ldr	r3, [pc, #364]	; (8003298 <SysTick_Handler+0x2b8>)
 800312a:	701a      	strb	r2, [r3, #0]
					  if(target_level > current_level){
 800312c:	4b57      	ldr	r3, [pc, #348]	; (800328c <SysTick_Handler+0x2ac>)
 800312e:	781a      	ldrb	r2, [r3, #0]
 8003130:	4b53      	ldr	r3, [pc, #332]	; (8003280 <SysTick_Handler+0x2a0>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d90a      	bls.n	800314e <SysTick_Handler+0x16e>
						  show_display(LED_UP, target_level/10);
 8003138:	4b54      	ldr	r3, [pc, #336]	; (800328c <SysTick_Handler+0x2ac>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	4a54      	ldr	r2, [pc, #336]	; (8003290 <SysTick_Handler+0x2b0>)
 800313e:	fba2 2303 	umull	r2, r3, r2, r3
 8003142:	08db      	lsrs	r3, r3, #3
 8003144:	b2db      	uxtb	r3, r3
 8003146:	4619      	mov	r1, r3
 8003148:	2001      	movs	r0, #1
 800314a:	f000 fb5f 	bl	800380c <show_display>
					  }
					  if(target_level< current_level){
 800314e:	4b4f      	ldr	r3, [pc, #316]	; (800328c <SysTick_Handler+0x2ac>)
 8003150:	781a      	ldrb	r2, [r3, #0]
 8003152:	4b4b      	ldr	r3, [pc, #300]	; (8003280 <SysTick_Handler+0x2a0>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	f080 80bc 	bcs.w	80032d4 <SysTick_Handler+0x2f4>
						  show_display(LED_DWN, target_level/10);
 800315c:	4b4b      	ldr	r3, [pc, #300]	; (800328c <SysTick_Handler+0x2ac>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	4a4b      	ldr	r2, [pc, #300]	; (8003290 <SysTick_Handler+0x2b0>)
 8003162:	fba2 2303 	umull	r2, r3, r2, r3
 8003166:	08db      	lsrs	r3, r3, #3
 8003168:	b2db      	uxtb	r3, r3
 800316a:	4619      	mov	r1, r3
 800316c:	2000      	movs	r0, #0
 800316e:	f000 fb4d 	bl	800380c <show_display>
					  }
				  }
			  }
			  break;
 8003172:	e0af      	b.n	80032d4 <SysTick_Handler+0x2f4>
		  case WAIT_USER_ODER_CALL:

			  if((user_char >= '1') && (user_char <= '4')){
 8003174:	4b43      	ldr	r3, [pc, #268]	; (8003284 <SysTick_Handler+0x2a4>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b30      	cmp	r3, #48	; 0x30
 800317a:	f240 80ad 	bls.w	80032d8 <SysTick_Handler+0x2f8>
 800317e:	4b41      	ldr	r3, [pc, #260]	; (8003284 <SysTick_Handler+0x2a4>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b34      	cmp	r3, #52	; 0x34
 8003184:	f200 80a8 	bhi.w	80032d8 <SysTick_Handler+0x2f8>
				  while(get_char_user() != 0);
 8003188:	bf00      	nop
 800318a:	f000 fd45 	bl	8003c18 <get_char_user>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1fa      	bne.n	800318a <SysTick_Handler+0x1aa>
				  target_level = (user_char - '0') * 10;
 8003194:	4b3b      	ldr	r3, [pc, #236]	; (8003284 <SysTick_Handler+0x2a4>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	461a      	mov	r2, r3
 800319a:	0092      	lsls	r2, r2, #2
 800319c:	4413      	add	r3, r2
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	3320      	adds	r3, #32
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	4b39      	ldr	r3, [pc, #228]	; (800328c <SysTick_Handler+0x2ac>)
 80031a8:	701a      	strb	r2, [r3, #0]

				  if(target_level > current_level){
 80031aa:	4b38      	ldr	r3, [pc, #224]	; (800328c <SysTick_Handler+0x2ac>)
 80031ac:	781a      	ldrb	r2, [r3, #0]
 80031ae:	4b34      	ldr	r3, [pc, #208]	; (8003280 <SysTick_Handler+0x2a0>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d90e      	bls.n	80031d4 <SysTick_Handler+0x1f4>
					  status_cabin = RUN_TO_USER_ODER;
 80031b6:	4b34      	ldr	r3, [pc, #208]	; (8003288 <SysTick_Handler+0x2a8>)
 80031b8:	2203      	movs	r2, #3
 80031ba:	701a      	strb	r2, [r3, #0]
					  show_display(LED_UP, target_level/10);
 80031bc:	4b33      	ldr	r3, [pc, #204]	; (800328c <SysTick_Handler+0x2ac>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	4a33      	ldr	r2, [pc, #204]	; (8003290 <SysTick_Handler+0x2b0>)
 80031c2:	fba2 2303 	umull	r2, r3, r2, r3
 80031c6:	08db      	lsrs	r3, r3, #3
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	4619      	mov	r1, r3
 80031cc:	2001      	movs	r0, #1
 80031ce:	f000 fb1d 	bl	800380c <show_display>
					  show_display(LED_DWN, target_level/10);
				  }else{
					  status_cabin = DONE_USER_ODER;
				  }
			  }
			  break;
 80031d2:	e081      	b.n	80032d8 <SysTick_Handler+0x2f8>
				  else if(target_level< current_level){
 80031d4:	4b2d      	ldr	r3, [pc, #180]	; (800328c <SysTick_Handler+0x2ac>)
 80031d6:	781a      	ldrb	r2, [r3, #0]
 80031d8:	4b29      	ldr	r3, [pc, #164]	; (8003280 <SysTick_Handler+0x2a0>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d20e      	bcs.n	80031fe <SysTick_Handler+0x21e>
					  status_cabin = RUN_TO_USER_ODER;
 80031e0:	4b29      	ldr	r3, [pc, #164]	; (8003288 <SysTick_Handler+0x2a8>)
 80031e2:	2203      	movs	r2, #3
 80031e4:	701a      	strb	r2, [r3, #0]
					  show_display(LED_DWN, target_level/10);
 80031e6:	4b29      	ldr	r3, [pc, #164]	; (800328c <SysTick_Handler+0x2ac>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	4a29      	ldr	r2, [pc, #164]	; (8003290 <SysTick_Handler+0x2b0>)
 80031ec:	fba2 2303 	umull	r2, r3, r2, r3
 80031f0:	08db      	lsrs	r3, r3, #3
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	4619      	mov	r1, r3
 80031f6:	2000      	movs	r0, #0
 80031f8:	f000 fb08 	bl	800380c <show_display>
			  break;
 80031fc:	e06c      	b.n	80032d8 <SysTick_Handler+0x2f8>
					  status_cabin = DONE_USER_ODER;
 80031fe:	4b22      	ldr	r3, [pc, #136]	; (8003288 <SysTick_Handler+0x2a8>)
 8003200:	2204      	movs	r2, #4
 8003202:	701a      	strb	r2, [r3, #0]
			  break;
 8003204:	e068      	b.n	80032d8 <SysTick_Handler+0x2f8>
		  case RUN_TO_USER_ODER:
			  if((user_char >= '1') && (user_char <= '4')){
 8003206:	4b1f      	ldr	r3, [pc, #124]	; (8003284 <SysTick_Handler+0x2a4>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b30      	cmp	r3, #48	; 0x30
 800320c:	d966      	bls.n	80032dc <SysTick_Handler+0x2fc>
 800320e:	4b1d      	ldr	r3, [pc, #116]	; (8003284 <SysTick_Handler+0x2a4>)
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b34      	cmp	r3, #52	; 0x34
 8003214:	d862      	bhi.n	80032dc <SysTick_Handler+0x2fc>
				  if(!target_level_next_time){
 8003216:	4b20      	ldr	r3, [pc, #128]	; (8003298 <SysTick_Handler+0x2b8>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d15e      	bne.n	80032dc <SysTick_Handler+0x2fc>
					  target_level_next_time = (user_char - '0') * 10;
 800321e:	4b19      	ldr	r3, [pc, #100]	; (8003284 <SysTick_Handler+0x2a4>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	461a      	mov	r2, r3
 8003224:	0092      	lsls	r2, r2, #2
 8003226:	4413      	add	r3, r2
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	b2db      	uxtb	r3, r3
 800322c:	3320      	adds	r3, #32
 800322e:	b2da      	uxtb	r2, r3
 8003230:	4b19      	ldr	r3, [pc, #100]	; (8003298 <SysTick_Handler+0x2b8>)
 8003232:	701a      	strb	r2, [r3, #0]
					  if(target_level > current_level){
 8003234:	4b15      	ldr	r3, [pc, #84]	; (800328c <SysTick_Handler+0x2ac>)
 8003236:	781a      	ldrb	r2, [r3, #0]
 8003238:	4b11      	ldr	r3, [pc, #68]	; (8003280 <SysTick_Handler+0x2a0>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	429a      	cmp	r2, r3
 800323e:	d90a      	bls.n	8003256 <SysTick_Handler+0x276>
						  show_display(LED_UP, target_level/10);
 8003240:	4b12      	ldr	r3, [pc, #72]	; (800328c <SysTick_Handler+0x2ac>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	4a12      	ldr	r2, [pc, #72]	; (8003290 <SysTick_Handler+0x2b0>)
 8003246:	fba2 2303 	umull	r2, r3, r2, r3
 800324a:	08db      	lsrs	r3, r3, #3
 800324c:	b2db      	uxtb	r3, r3
 800324e:	4619      	mov	r1, r3
 8003250:	2001      	movs	r0, #1
 8003252:	f000 fadb 	bl	800380c <show_display>
					  }
					  if(target_level< current_level){
 8003256:	4b0d      	ldr	r3, [pc, #52]	; (800328c <SysTick_Handler+0x2ac>)
 8003258:	781a      	ldrb	r2, [r3, #0]
 800325a:	4b09      	ldr	r3, [pc, #36]	; (8003280 <SysTick_Handler+0x2a0>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d23c      	bcs.n	80032dc <SysTick_Handler+0x2fc>
						  show_display(LED_DWN, target_level/10);
 8003262:	4b0a      	ldr	r3, [pc, #40]	; (800328c <SysTick_Handler+0x2ac>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	4a0a      	ldr	r2, [pc, #40]	; (8003290 <SysTick_Handler+0x2b0>)
 8003268:	fba2 2303 	umull	r2, r3, r2, r3
 800326c:	08db      	lsrs	r3, r3, #3
 800326e:	b2db      	uxtb	r3, r3
 8003270:	4619      	mov	r1, r3
 8003272:	2000      	movs	r0, #0
 8003274:	f000 faca 	bl	800380c <show_display>
					  }
				  }
			  }
			  break;
 8003278:	e030      	b.n	80032dc <SysTick_Handler+0x2fc>
 800327a:	bf00      	nop
 800327c:	200002a8 	.word	0x200002a8
 8003280:	20000285 	.word	0x20000285
 8003284:	2000027c 	.word	0x2000027c
 8003288:	2000027d 	.word	0x2000027d
 800328c:	20000287 	.word	0x20000287
 8003290:	cccccccd 	.word	0xcccccccd
 8003294:	20000280 	.word	0x20000280
 8003298:	20000286 	.word	0x20000286
		  case DONE_USER_ODER:
			  if((user_char >= '1') && (user_char <= '4')){
 800329c:	4b1b      	ldr	r3, [pc, #108]	; (800330c <SysTick_Handler+0x32c>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b30      	cmp	r3, #48	; 0x30
 80032a2:	d91d      	bls.n	80032e0 <SysTick_Handler+0x300>
 80032a4:	4b19      	ldr	r3, [pc, #100]	; (800330c <SysTick_Handler+0x32c>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b34      	cmp	r3, #52	; 0x34
 80032aa:	d819      	bhi.n	80032e0 <SysTick_Handler+0x300>
				  if(!target_level_next_time){
 80032ac:	4b18      	ldr	r3, [pc, #96]	; (8003310 <SysTick_Handler+0x330>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d115      	bne.n	80032e0 <SysTick_Handler+0x300>
					  target_level_next_time = (user_char - '0') * 10;
 80032b4:	4b15      	ldr	r3, [pc, #84]	; (800330c <SysTick_Handler+0x32c>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	461a      	mov	r2, r3
 80032ba:	0092      	lsls	r2, r2, #2
 80032bc:	4413      	add	r3, r2
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	3320      	adds	r3, #32
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	4b12      	ldr	r3, [pc, #72]	; (8003310 <SysTick_Handler+0x330>)
 80032c8:	701a      	strb	r2, [r3, #0]
				  }
			  }
			  break;
 80032ca:	e009      	b.n	80032e0 <SysTick_Handler+0x300>
		  default:
			  break;
 80032cc:	bf00      	nop
 80032ce:	e008      	b.n	80032e2 <SysTick_Handler+0x302>
			  break;
 80032d0:	bf00      	nop
 80032d2:	e006      	b.n	80032e2 <SysTick_Handler+0x302>
			  break;
 80032d4:	bf00      	nop
 80032d6:	e004      	b.n	80032e2 <SysTick_Handler+0x302>
			  break;
 80032d8:	bf00      	nop
 80032da:	e002      	b.n	80032e2 <SysTick_Handler+0x302>
			  break;
 80032dc:	bf00      	nop
 80032de:	e000      	b.n	80032e2 <SysTick_Handler+0x302>
			  break;
 80032e0:	bf00      	nop
		  }

  		  if((g_sys_time % 500) == 0){
 80032e2:	4b0c      	ldr	r3, [pc, #48]	; (8003314 <SysTick_Handler+0x334>)
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <SysTick_Handler+0x338>)
 80032e8:	fba3 1302 	umull	r1, r3, r3, r2
 80032ec:	095b      	lsrs	r3, r3, #5
 80032ee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80032f2:	fb01 f303 	mul.w	r3, r1, r3
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d105      	bne.n	8003308 <SysTick_Handler+0x328>
  			send_msg_to_linux(LINUX_CMD_CURRENT_LEVEL, current_level);
 80032fc:	4b07      	ldr	r3, [pc, #28]	; (800331c <SysTick_Handler+0x33c>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	4619      	mov	r1, r3
 8003302:	2043      	movs	r0, #67	; 0x43
 8003304:	f000 f878 	bl	80033f8 <send_msg_to_linux>
  		  }

}
 8003308:	bf00      	nop
 800330a:	bd80      	pop	{r7, pc}
 800330c:	2000027c 	.word	0x2000027c
 8003310:	20000286 	.word	0x20000286
 8003314:	200002a8 	.word	0x200002a8
 8003318:	10624dd3 	.word	0x10624dd3
 800331c:	20000285 	.word	0x20000285

08003320 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 8003324:	4810      	ldr	r0, [pc, #64]	; (8003368 <USART2_IRQHandler+0x48>)
 8003326:	f7fe fc3f 	bl	8001ba8 <HAL_UART_IRQHandler>
	HAL_UART_Receive_IT(&huart2, &buff_rx, 1);
 800332a:	2201      	movs	r2, #1
 800332c:	490f      	ldr	r1, [pc, #60]	; (800336c <USART2_IRQHandler+0x4c>)
 800332e:	480e      	ldr	r0, [pc, #56]	; (8003368 <USART2_IRQHandler+0x48>)
 8003330:	f7fe fc15 	bl	8001b5e <HAL_UART_Receive_IT>
	ring_buffer[front_index] = buff_rx;
 8003334:	4b0e      	ldr	r3, [pc, #56]	; (8003370 <USART2_IRQHandler+0x50>)
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	b29b      	uxth	r3, r3
 800333a:	461a      	mov	r2, r3
 800333c:	4b0b      	ldr	r3, [pc, #44]	; (800336c <USART2_IRQHandler+0x4c>)
 800333e:	7819      	ldrb	r1, [r3, #0]
 8003340:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <USART2_IRQHandler+0x54>)
 8003342:	5499      	strb	r1, [r3, r2]
	front_index++;
 8003344:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <USART2_IRQHandler+0x50>)
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	b29b      	uxth	r3, r3
 800334a:	3301      	adds	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	4b08      	ldr	r3, [pc, #32]	; (8003370 <USART2_IRQHandler+0x50>)
 8003350:	801a      	strh	r2, [r3, #0]
	if(front_index >= 1024){
 8003352:	4b07      	ldr	r3, [pc, #28]	; (8003370 <USART2_IRQHandler+0x50>)
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	b29b      	uxth	r3, r3
 8003358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800335c:	d302      	bcc.n	8003364 <USART2_IRQHandler+0x44>
		front_index = 0;
 800335e:	4b04      	ldr	r3, [pc, #16]	; (8003370 <USART2_IRQHandler+0x50>)
 8003360:	2200      	movs	r2, #0
 8003362:	801a      	strh	r2, [r3, #0]
	}
}
 8003364:	bf00      	nop
 8003366:	bd80      	pop	{r7, pc}
 8003368:	2000009c 	.word	0x2000009c
 800336c:	200002ac 	.word	0x200002ac
 8003370:	200006b0 	.word	0x200006b0
 8003374:	200002b0 	.word	0x200002b0

08003378 <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart4);
 800337c:	4819      	ldr	r0, [pc, #100]	; (80033e4 <UART4_IRQHandler+0x6c>)
 800337e:	f7fe fc13 	bl	8001ba8 <HAL_UART_IRQHandler>
  HAL_UART_Receive_IT(&huart4, &buff_rx_mqtt, 1);
 8003382:	2201      	movs	r2, #1
 8003384:	4918      	ldr	r1, [pc, #96]	; (80033e8 <UART4_IRQHandler+0x70>)
 8003386:	4817      	ldr	r0, [pc, #92]	; (80033e4 <UART4_IRQHandler+0x6c>)
 8003388:	f7fe fbe9 	bl	8001b5e <HAL_UART_Receive_IT>
	if(buff_rx_mqtt == '*'){
 800338c:	4b16      	ldr	r3, [pc, #88]	; (80033e8 <UART4_IRQHandler+0x70>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b2a      	cmp	r3, #42	; 0x2a
 8003392:	d103      	bne.n	800339c <UART4_IRQHandler+0x24>
		mqtt_index = 0;
 8003394:	4b15      	ldr	r3, [pc, #84]	; (80033ec <UART4_IRQHandler+0x74>)
 8003396:	2200      	movs	r2, #0
 8003398:	701a      	strb	r2, [r3, #0]
		mqtt_index++;
		if(mqtt_index >= 32){
			mqtt_index = 0;
		}
	}
}
 800339a:	e021      	b.n	80033e0 <UART4_IRQHandler+0x68>
	} else if(buff_rx_mqtt == ';'){
 800339c:	4b12      	ldr	r3, [pc, #72]	; (80033e8 <UART4_IRQHandler+0x70>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b3b      	cmp	r3, #59	; 0x3b
 80033a2:	d109      	bne.n	80033b8 <UART4_IRQHandler+0x40>
		buff_mqtt_slave[mqtt_index] = '\0';
 80033a4:	4b11      	ldr	r3, [pc, #68]	; (80033ec <UART4_IRQHandler+0x74>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	461a      	mov	r2, r3
 80033aa:	4b11      	ldr	r3, [pc, #68]	; (80033f0 <UART4_IRQHandler+0x78>)
 80033ac:	2100      	movs	r1, #0
 80033ae:	5499      	strb	r1, [r3, r2]
		is_new_linux_msg = 1;
 80033b0:	4b10      	ldr	r3, [pc, #64]	; (80033f4 <UART4_IRQHandler+0x7c>)
 80033b2:	2201      	movs	r2, #1
 80033b4:	701a      	strb	r2, [r3, #0]
}
 80033b6:	e013      	b.n	80033e0 <UART4_IRQHandler+0x68>
		buff_mqtt_slave[mqtt_index] = buff_rx_mqtt;
 80033b8:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <UART4_IRQHandler+0x74>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	461a      	mov	r2, r3
 80033be:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <UART4_IRQHandler+0x70>)
 80033c0:	7819      	ldrb	r1, [r3, #0]
 80033c2:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <UART4_IRQHandler+0x78>)
 80033c4:	5499      	strb	r1, [r3, r2]
		mqtt_index++;
 80033c6:	4b09      	ldr	r3, [pc, #36]	; (80033ec <UART4_IRQHandler+0x74>)
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	3301      	adds	r3, #1
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	4b07      	ldr	r3, [pc, #28]	; (80033ec <UART4_IRQHandler+0x74>)
 80033d0:	701a      	strb	r2, [r3, #0]
		if(mqtt_index >= 32){
 80033d2:	4b06      	ldr	r3, [pc, #24]	; (80033ec <UART4_IRQHandler+0x74>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b1f      	cmp	r3, #31
 80033d8:	d902      	bls.n	80033e0 <UART4_IRQHandler+0x68>
			mqtt_index = 0;
 80033da:	4b04      	ldr	r3, [pc, #16]	; (80033ec <UART4_IRQHandler+0x74>)
 80033dc:	2200      	movs	r2, #0
 80033de:	701a      	strb	r2, [r3, #0]
}
 80033e0:	bf00      	nop
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	20000054 	.word	0x20000054
 80033e8:	200002ad 	.word	0x200002ad
 80033ec:	2000027e 	.word	0x2000027e
 80033f0:	20000288 	.word	0x20000288
 80033f4:	2000027f 	.word	0x2000027f

080033f8 <send_msg_to_linux>:

void send_msg_to_linux(uint8_t _cmd, uint8_t _value){
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	460a      	mov	r2, r1
 8003402:	71fb      	strb	r3, [r7, #7]
 8003404:	4613      	mov	r3, r2
 8003406:	71bb      	strb	r3, [r7, #6]
	uint8_t msg_buff[16];
	msg_buff[0] = '*';
 8003408:	232a      	movs	r3, #42	; 0x2a
 800340a:	723b      	strb	r3, [r7, #8]
	msg_buff[1] = _cmd;
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	727b      	strb	r3, [r7, #9]
	msg_buff[2] = _value;
 8003410:	79bb      	ldrb	r3, [r7, #6]
 8003412:	72bb      	strb	r3, [r7, #10]
	msg_buff[3] = ';';
 8003414:	233b      	movs	r3, #59	; 0x3b
 8003416:	72fb      	strb	r3, [r7, #11]
	msg_buff[4] = '\n';
 8003418:	230a      	movs	r3, #10
 800341a:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart4, msg_buff, 5, 1);
 800341c:	f107 0108 	add.w	r1, r7, #8
 8003420:	2301      	movs	r3, #1
 8003422:	2205      	movs	r2, #5
 8003424:	4803      	ldr	r0, [pc, #12]	; (8003434 <send_msg_to_linux+0x3c>)
 8003426:	f7fe fb17 	bl	8001a58 <HAL_UART_Transmit>
}
 800342a:	bf00      	nop
 800342c:	3718      	adds	r7, #24
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	20000054 	.word	0x20000054

08003438 <blink_led_delay>:

void blink_led_delay(uint8_t type){
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af02      	add	r7, sp, #8
 800343e:	4603      	mov	r3, r0
 8003440:	71fb      	strb	r3, [r7, #7]
    TM1637_SetBrightness(3);
 8003442:	2003      	movs	r0, #3
 8003444:	f7ff fa12 	bl	800286c <TM1637_SetBrightness>

    switch (type) {
 8003448:	79fb      	ldrb	r3, [r7, #7]
 800344a:	2b01      	cmp	r3, #1
 800344c:	f000 80bf 	beq.w	80035ce <blink_led_delay+0x196>
 8003450:	2b02      	cmp	r3, #2
 8003452:	f040 80fe 	bne.w	8003652 <blink_led_delay+0x21a>
		case BLINK_START:
			for(int i = 0; i < 6; i++){
 8003456:	2300      	movs	r3, #0
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	e03a      	b.n	80034d2 <blink_led_delay+0x9a>
				  show_display(LED_START1, target_level/10);
 800345c:	4b7f      	ldr	r3, [pc, #508]	; (800365c <blink_led_delay+0x224>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	4a7f      	ldr	r2, [pc, #508]	; (8003660 <blink_led_delay+0x228>)
 8003462:	fba2 2303 	umull	r2, r3, r2, r3
 8003466:	08db      	lsrs	r3, r3, #3
 8003468:	b2db      	uxtb	r3, r3
 800346a:	4619      	mov	r1, r3
 800346c:	2009      	movs	r0, #9
 800346e:	f000 f9cd 	bl	800380c <show_display>
				  HAL_Delay(70);
 8003472:	2046      	movs	r0, #70	; 0x46
 8003474:	f7fd f972 	bl	800075c <HAL_Delay>
				  show_display(LED_START2, target_level/10);
 8003478:	4b78      	ldr	r3, [pc, #480]	; (800365c <blink_led_delay+0x224>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	4a78      	ldr	r2, [pc, #480]	; (8003660 <blink_led_delay+0x228>)
 800347e:	fba2 2303 	umull	r2, r3, r2, r3
 8003482:	08db      	lsrs	r3, r3, #3
 8003484:	b2db      	uxtb	r3, r3
 8003486:	4619      	mov	r1, r3
 8003488:	200a      	movs	r0, #10
 800348a:	f000 f9bf 	bl	800380c <show_display>
				  HAL_Delay(70);
 800348e:	2046      	movs	r0, #70	; 0x46
 8003490:	f7fd f964 	bl	800075c <HAL_Delay>
				  show_display(LED_START3, target_level/10);
 8003494:	4b71      	ldr	r3, [pc, #452]	; (800365c <blink_led_delay+0x224>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	4a71      	ldr	r2, [pc, #452]	; (8003660 <blink_led_delay+0x228>)
 800349a:	fba2 2303 	umull	r2, r3, r2, r3
 800349e:	08db      	lsrs	r3, r3, #3
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	4619      	mov	r1, r3
 80034a4:	200b      	movs	r0, #11
 80034a6:	f000 f9b1 	bl	800380c <show_display>
				  HAL_Delay(70);
 80034aa:	2046      	movs	r0, #70	; 0x46
 80034ac:	f7fd f956 	bl	800075c <HAL_Delay>
				  show_display(LED_START4, target_level/10);
 80034b0:	4b6a      	ldr	r3, [pc, #424]	; (800365c <blink_led_delay+0x224>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	4a6a      	ldr	r2, [pc, #424]	; (8003660 <blink_led_delay+0x228>)
 80034b6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ba:	08db      	lsrs	r3, r3, #3
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	4619      	mov	r1, r3
 80034c0:	200c      	movs	r0, #12
 80034c2:	f000 f9a3 	bl	800380c <show_display>
				  HAL_Delay(70);
 80034c6:	2046      	movs	r0, #70	; 0x46
 80034c8:	f7fd f948 	bl	800075c <HAL_Delay>
			for(int i = 0; i < 6; i++){
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	3301      	adds	r3, #1
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2b05      	cmp	r3, #5
 80034d6:	ddc1      	ble.n	800345c <blink_led_delay+0x24>
			}
			TM1637_Display_4_char(0, 0, 0, 0, 1);
 80034d8:	2301      	movs	r3, #1
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	2300      	movs	r3, #0
 80034de:	2200      	movs	r2, #0
 80034e0:	2100      	movs	r1, #0
 80034e2:	2000      	movs	r0, #0
 80034e4:	f7ff f96e 	bl	80027c4 <TM1637_Display_4_char>
			HAL_Delay(200);
 80034e8:	20c8      	movs	r0, #200	; 0xc8
 80034ea:	f7fd f937 	bl	800075c <HAL_Delay>
			TM1637_Display_4_char(20, 20, 20, 20, 0);
 80034ee:	2300      	movs	r3, #0
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	2314      	movs	r3, #20
 80034f4:	2214      	movs	r2, #20
 80034f6:	2114      	movs	r1, #20
 80034f8:	2014      	movs	r0, #20
 80034fa:	f7ff f963 	bl	80027c4 <TM1637_Display_4_char>
			HAL_Delay(200);
 80034fe:	20c8      	movs	r0, #200	; 0xc8
 8003500:	f7fd f92c 	bl	800075c <HAL_Delay>
			TM1637_Display_4_char(0, 0, 0, 0, 1);
 8003504:	2301      	movs	r3, #1
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	2300      	movs	r3, #0
 800350a:	2200      	movs	r2, #0
 800350c:	2100      	movs	r1, #0
 800350e:	2000      	movs	r0, #0
 8003510:	f7ff f958 	bl	80027c4 <TM1637_Display_4_char>
			HAL_Delay(200);
 8003514:	20c8      	movs	r0, #200	; 0xc8
 8003516:	f7fd f921 	bl	800075c <HAL_Delay>
			TM1637_Display_4_char(20, 20, 20, 20, 0);
 800351a:	2300      	movs	r3, #0
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	2314      	movs	r3, #20
 8003520:	2214      	movs	r2, #20
 8003522:	2114      	movs	r1, #20
 8003524:	2014      	movs	r0, #20
 8003526:	f7ff f94d 	bl	80027c4 <TM1637_Display_4_char>
			HAL_Delay(200);
 800352a:	20c8      	movs	r0, #200	; 0xc8
 800352c:	f7fd f916 	bl	800075c <HAL_Delay>
			TM1637_Display_4_char(0, 0, 0, 0, 1);
 8003530:	2301      	movs	r3, #1
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	2300      	movs	r3, #0
 8003536:	2200      	movs	r2, #0
 8003538:	2100      	movs	r1, #0
 800353a:	2000      	movs	r0, #0
 800353c:	f7ff f942 	bl	80027c4 <TM1637_Display_4_char>
			HAL_Delay(200);
 8003540:	20c8      	movs	r0, #200	; 0xc8
 8003542:	f7fd f90b 	bl	800075c <HAL_Delay>
			TM1637_Display_4_char(20, 20, 20, 20, 0);
 8003546:	2300      	movs	r3, #0
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	2314      	movs	r3, #20
 800354c:	2214      	movs	r2, #20
 800354e:	2114      	movs	r1, #20
 8003550:	2014      	movs	r0, #20
 8003552:	f7ff f937 	bl	80027c4 <TM1637_Display_4_char>
			HAL_Delay(200);
 8003556:	20c8      	movs	r0, #200	; 0xc8
 8003558:	f7fd f900 	bl	800075c <HAL_Delay>
			TM1637_Display_4_char(0, 0, 0, 0, 1);
 800355c:	2301      	movs	r3, #1
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	2300      	movs	r3, #0
 8003562:	2200      	movs	r2, #0
 8003564:	2100      	movs	r1, #0
 8003566:	2000      	movs	r0, #0
 8003568:	f7ff f92c 	bl	80027c4 <TM1637_Display_4_char>
			HAL_Delay(200);
 800356c:	20c8      	movs	r0, #200	; 0xc8
 800356e:	f7fd f8f5 	bl	800075c <HAL_Delay>
			TM1637_Display_4_char(20, 20, 20, 20, 0);
 8003572:	2300      	movs	r3, #0
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	2314      	movs	r3, #20
 8003578:	2214      	movs	r2, #20
 800357a:	2114      	movs	r1, #20
 800357c:	2014      	movs	r0, #20
 800357e:	f7ff f921 	bl	80027c4 <TM1637_Display_4_char>
			HAL_Delay(200);
 8003582:	20c8      	movs	r0, #200	; 0xc8
 8003584:	f7fd f8ea 	bl	800075c <HAL_Delay>
			TM1637_Display_4_char(0, 0, 0, 0, 1);
 8003588:	2301      	movs	r3, #1
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	2300      	movs	r3, #0
 800358e:	2200      	movs	r2, #0
 8003590:	2100      	movs	r1, #0
 8003592:	2000      	movs	r0, #0
 8003594:	f7ff f916 	bl	80027c4 <TM1637_Display_4_char>
			HAL_Delay(200);
 8003598:	20c8      	movs	r0, #200	; 0xc8
 800359a:	f7fd f8df 	bl	800075c <HAL_Delay>
			TM1637_Display_4_char(20, 20, 20, 20, 0);
 800359e:	2300      	movs	r3, #0
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	2314      	movs	r3, #20
 80035a4:	2214      	movs	r2, #20
 80035a6:	2114      	movs	r1, #20
 80035a8:	2014      	movs	r0, #20
 80035aa:	f7ff f90b 	bl	80027c4 <TM1637_Display_4_char>
			HAL_Delay(700);
 80035ae:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80035b2:	f7fd f8d3 	bl	800075c <HAL_Delay>
			show_display(LED_START, target_level/10);
 80035b6:	4b29      	ldr	r3, [pc, #164]	; (800365c <blink_led_delay+0x224>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	4a29      	ldr	r2, [pc, #164]	; (8003660 <blink_led_delay+0x228>)
 80035bc:	fba2 2303 	umull	r2, r3, r2, r3
 80035c0:	08db      	lsrs	r3, r3, #3
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	4619      	mov	r1, r3
 80035c6:	2008      	movs	r0, #8
 80035c8:	f000 f920 	bl	800380c <show_display>
			break;
 80035cc:	e042      	b.n	8003654 <blink_led_delay+0x21c>
		case BLINK_DONE:
			for(int i = 0; i < 15; i++){
 80035ce:	2300      	movs	r3, #0
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	e03a      	b.n	800364a <blink_led_delay+0x212>
				  show_display(LED_DONE1, target_level/10);
 80035d4:	4b21      	ldr	r3, [pc, #132]	; (800365c <blink_led_delay+0x224>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	4a21      	ldr	r2, [pc, #132]	; (8003660 <blink_led_delay+0x228>)
 80035da:	fba2 2303 	umull	r2, r3, r2, r3
 80035de:	08db      	lsrs	r3, r3, #3
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	4619      	mov	r1, r3
 80035e4:	2004      	movs	r0, #4
 80035e6:	f000 f911 	bl	800380c <show_display>
				  HAL_Delay(70);
 80035ea:	2046      	movs	r0, #70	; 0x46
 80035ec:	f7fd f8b6 	bl	800075c <HAL_Delay>
				  show_display(LED_DONE2, target_level/10);
 80035f0:	4b1a      	ldr	r3, [pc, #104]	; (800365c <blink_led_delay+0x224>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	4a1a      	ldr	r2, [pc, #104]	; (8003660 <blink_led_delay+0x228>)
 80035f6:	fba2 2303 	umull	r2, r3, r2, r3
 80035fa:	08db      	lsrs	r3, r3, #3
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	4619      	mov	r1, r3
 8003600:	2005      	movs	r0, #5
 8003602:	f000 f903 	bl	800380c <show_display>
				  HAL_Delay(70);
 8003606:	2046      	movs	r0, #70	; 0x46
 8003608:	f7fd f8a8 	bl	800075c <HAL_Delay>
				  show_display(LED_DONE3, target_level/10);
 800360c:	4b13      	ldr	r3, [pc, #76]	; (800365c <blink_led_delay+0x224>)
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	4a13      	ldr	r2, [pc, #76]	; (8003660 <blink_led_delay+0x228>)
 8003612:	fba2 2303 	umull	r2, r3, r2, r3
 8003616:	08db      	lsrs	r3, r3, #3
 8003618:	b2db      	uxtb	r3, r3
 800361a:	4619      	mov	r1, r3
 800361c:	2006      	movs	r0, #6
 800361e:	f000 f8f5 	bl	800380c <show_display>
				  HAL_Delay(70);
 8003622:	2046      	movs	r0, #70	; 0x46
 8003624:	f7fd f89a 	bl	800075c <HAL_Delay>
				  show_display(LED_DONE4, target_level/10);
 8003628:	4b0c      	ldr	r3, [pc, #48]	; (800365c <blink_led_delay+0x224>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	4a0c      	ldr	r2, [pc, #48]	; (8003660 <blink_led_delay+0x228>)
 800362e:	fba2 2303 	umull	r2, r3, r2, r3
 8003632:	08db      	lsrs	r3, r3, #3
 8003634:	b2db      	uxtb	r3, r3
 8003636:	4619      	mov	r1, r3
 8003638:	2007      	movs	r0, #7
 800363a:	f000 f8e7 	bl	800380c <show_display>
				  HAL_Delay(70);
 800363e:	2046      	movs	r0, #70	; 0x46
 8003640:	f7fd f88c 	bl	800075c <HAL_Delay>
			for(int i = 0; i < 15; i++){
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	3301      	adds	r3, #1
 8003648:	60bb      	str	r3, [r7, #8]
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	2b0e      	cmp	r3, #14
 800364e:	ddc1      	ble.n	80035d4 <blink_led_delay+0x19c>
			}
			break;
 8003650:	e000      	b.n	8003654 <blink_led_delay+0x21c>
		default:
			break;
 8003652:	bf00      	nop
	}


}
 8003654:	bf00      	nop
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	20000287 	.word	0x20000287
 8003660:	cccccccd 	.word	0xcccccccd

08003664 <modbus_sever_init>:

void modbus_sever_init(void){
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
	  platform_conf.transport = NMBS_TRANSPORT_RTU;
 800366a:	4b1c      	ldr	r3, [pc, #112]	; (80036dc <modbus_sever_init+0x78>)
 800366c:	2201      	movs	r2, #1
 800366e:	701a      	strb	r2, [r3, #0]
	  platform_conf.read = read_serial;
 8003670:	4b1a      	ldr	r3, [pc, #104]	; (80036dc <modbus_sever_init+0x78>)
 8003672:	4a1b      	ldr	r2, [pc, #108]	; (80036e0 <modbus_sever_init+0x7c>)
 8003674:	605a      	str	r2, [r3, #4]
	  platform_conf.write = write_serial;
 8003676:	4b19      	ldr	r3, [pc, #100]	; (80036dc <modbus_sever_init+0x78>)
 8003678:	4a1a      	ldr	r2, [pc, #104]	; (80036e4 <modbus_sever_init+0x80>)
 800367a:	609a      	str	r2, [r3, #8]
	  platform_conf.arg = NULL;
 800367c:	4b17      	ldr	r3, [pc, #92]	; (80036dc <modbus_sever_init+0x78>)
 800367e:	2200      	movs	r2, #0
 8003680:	60da      	str	r2, [r3, #12]

	  callbacks.read_coils = handle_read_coils;
 8003682:	4b19      	ldr	r3, [pc, #100]	; (80036e8 <modbus_sever_init+0x84>)
 8003684:	4a19      	ldr	r2, [pc, #100]	; (80036ec <modbus_sever_init+0x88>)
 8003686:	601a      	str	r2, [r3, #0]
	  callbacks.write_multiple_coils = handle_write_multiple_coils;
 8003688:	4b17      	ldr	r3, [pc, #92]	; (80036e8 <modbus_sever_init+0x84>)
 800368a:	4a19      	ldr	r2, [pc, #100]	; (80036f0 <modbus_sever_init+0x8c>)
 800368c:	619a      	str	r2, [r3, #24]
	  callbacks.read_holding_registers = handler_read_holding_registers;
 800368e:	4b16      	ldr	r3, [pc, #88]	; (80036e8 <modbus_sever_init+0x84>)
 8003690:	4a18      	ldr	r2, [pc, #96]	; (80036f4 <modbus_sever_init+0x90>)
 8003692:	609a      	str	r2, [r3, #8]
	  callbacks.write_multiple_registers = handle_write_multiple_registers;
 8003694:	4b14      	ldr	r3, [pc, #80]	; (80036e8 <modbus_sever_init+0x84>)
 8003696:	4a18      	ldr	r2, [pc, #96]	; (80036f8 <modbus_sever_init+0x94>)
 8003698:	61da      	str	r2, [r3, #28]
	  callbacks.write_single_register = handle_write_single_registers;
 800369a:	4b13      	ldr	r3, [pc, #76]	; (80036e8 <modbus_sever_init+0x84>)
 800369c:	4a17      	ldr	r2, [pc, #92]	; (80036fc <modbus_sever_init+0x98>)
 800369e:	615a      	str	r2, [r3, #20]
	  callbacks.read_input_registers = handler_read_input_registers;
 80036a0:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <modbus_sever_init+0x84>)
 80036a2:	4a17      	ldr	r2, [pc, #92]	; (8003700 <modbus_sever_init+0x9c>)
 80036a4:	60da      	str	r2, [r3, #12]
	  nmbs_error err = nmbs_server_create(&nmbs, RTU_SERVER_ADDRESS, &platform_conf, &callbacks);
 80036a6:	4b10      	ldr	r3, [pc, #64]	; (80036e8 <modbus_sever_init+0x84>)
 80036a8:	4a0c      	ldr	r2, [pc, #48]	; (80036dc <modbus_sever_init+0x78>)
 80036aa:	2105      	movs	r1, #5
 80036ac:	4815      	ldr	r0, [pc, #84]	; (8003704 <modbus_sever_init+0xa0>)
 80036ae:	f000 fdb5 	bl	800421c <nmbs_server_create>
 80036b2:	4603      	mov	r3, r0
 80036b4:	71fb      	strb	r3, [r7, #7]

	  if (err != NMBS_ERROR_NONE) {
 80036b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <modbus_sever_init+0x5e>
	    onError();
 80036be:	f000 fbb5 	bl	8003e2c <onError>
	  }
	  nmbs_set_read_timeout(&nmbs, 5);
 80036c2:	2105      	movs	r1, #5
 80036c4:	480f      	ldr	r0, [pc, #60]	; (8003704 <modbus_sever_init+0xa0>)
 80036c6:	f000 fd8d 	bl	80041e4 <nmbs_set_read_timeout>
	  nmbs_set_byte_timeout(&nmbs, 50);
 80036ca:	2132      	movs	r1, #50	; 0x32
 80036cc:	480d      	ldr	r0, [pc, #52]	; (8003704 <modbus_sever_init+0xa0>)
 80036ce:	f000 fd97 	bl	8004200 <nmbs_set_byte_timeout>
}
 80036d2:	bf00      	nop
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	20000240 	.word	0x20000240
 80036e0:	08003d1d 	.word	0x08003d1d
 80036e4:	08003e01 	.word	0x08003e01
 80036e8:	20000250 	.word	0x20000250
 80036ec:	08003e39 	.word	0x08003e39
 80036f0:	08003f21 	.word	0x08003f21
 80036f4:	08004005 	.word	0x08004005
 80036f8:	08004065 	.word	0x08004065
 80036fc:	080040c5 	.word	0x080040c5
 8003700:	080040fd 	.word	0x080040fd
 8003704:	200000ec 	.word	0x200000ec

08003708 <elevator_process_force>:

void elevator_process_force(uint32_t _speed){
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
	  while((target_level != current_level)){
 8003710:	e01f      	b.n	8003752 <elevator_process_force+0x4a>
		  if(is_fire){
 8003712:	4b16      	ldr	r3, [pc, #88]	; (800376c <elevator_process_force+0x64>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d122      	bne.n	8003760 <elevator_process_force+0x58>
			  return;
		  }
		  if(target_level > current_level){
 800371a:	4b15      	ldr	r3, [pc, #84]	; (8003770 <elevator_process_force+0x68>)
 800371c:	781a      	ldrb	r2, [r3, #0]
 800371e:	4b15      	ldr	r3, [pc, #84]	; (8003774 <elevator_process_force+0x6c>)
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d904      	bls.n	8003730 <elevator_process_force+0x28>
			  lkv_stepmotor_process(STEP_DIR_DOWN, _speed, 1);
 8003726:	2201      	movs	r2, #1
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	2001      	movs	r0, #1
 800372c:	f000 ff2c 	bl	8004588 <lkv_stepmotor_process>
		  }
		  if(target_level < current_level){
 8003730:	4b0f      	ldr	r3, [pc, #60]	; (8003770 <elevator_process_force+0x68>)
 8003732:	781a      	ldrb	r2, [r3, #0]
 8003734:	4b0f      	ldr	r3, [pc, #60]	; (8003774 <elevator_process_force+0x6c>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	429a      	cmp	r2, r3
 800373a:	d204      	bcs.n	8003746 <elevator_process_force+0x3e>
			  lkv_stepmotor_process(STEP_DIR_UP, _speed, 1);
 800373c:	2201      	movs	r2, #1
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	2000      	movs	r0, #0
 8003742:	f000 ff21 	bl	8004588 <lkv_stepmotor_process>
		  }
		  if(target_level == current_level){
 8003746:	4b0a      	ldr	r3, [pc, #40]	; (8003770 <elevator_process_force+0x68>)
 8003748:	781a      	ldrb	r2, [r3, #0]
 800374a:	4b0a      	ldr	r3, [pc, #40]	; (8003774 <elevator_process_force+0x6c>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d008      	beq.n	8003764 <elevator_process_force+0x5c>
	  while((target_level != current_level)){
 8003752:	4b07      	ldr	r3, [pc, #28]	; (8003770 <elevator_process_force+0x68>)
 8003754:	781a      	ldrb	r2, [r3, #0]
 8003756:	4b07      	ldr	r3, [pc, #28]	; (8003774 <elevator_process_force+0x6c>)
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d1d9      	bne.n	8003712 <elevator_process_force+0xa>
 800375e:	e002      	b.n	8003766 <elevator_process_force+0x5e>
			  return;
 8003760:	bf00      	nop
 8003762:	e000      	b.n	8003766 <elevator_process_force+0x5e>
			  return;
 8003764:	bf00      	nop
		  }
	  }
}
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	20000284 	.word	0x20000284
 8003770:	20000287 	.word	0x20000287
 8003774:	20000285 	.word	0x20000285

08003778 <linux_msg_prosess>:
			  return;
		  }
	  }
}

void linux_msg_prosess(void){
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
	  if(is_new_linux_msg){
 800377c:	4b1e      	ldr	r3, [pc, #120]	; (80037f8 <linux_msg_prosess+0x80>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d036      	beq.n	80037f2 <linux_msg_prosess+0x7a>
		  if(buff_mqtt_slave[0] == LINUX_CMD_CHANGE_LEVEL){
 8003784:	4b1d      	ldr	r3, [pc, #116]	; (80037fc <linux_msg_prosess+0x84>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b4c      	cmp	r3, #76	; 0x4c
 800378a:	d113      	bne.n	80037b4 <linux_msg_prosess+0x3c>
			  if((buff_mqtt_slave[1] >= 1) && (buff_mqtt_slave[1] <= 4)){
 800378c:	4b1b      	ldr	r3, [pc, #108]	; (80037fc <linux_msg_prosess+0x84>)
 800378e:	785b      	ldrb	r3, [r3, #1]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00f      	beq.n	80037b4 <linux_msg_prosess+0x3c>
 8003794:	4b19      	ldr	r3, [pc, #100]	; (80037fc <linux_msg_prosess+0x84>)
 8003796:	785b      	ldrb	r3, [r3, #1]
 8003798:	2b04      	cmp	r3, #4
 800379a:	d80b      	bhi.n	80037b4 <linux_msg_prosess+0x3c>
				  target_level = buff_mqtt_slave[1] * 10;
 800379c:	4b17      	ldr	r3, [pc, #92]	; (80037fc <linux_msg_prosess+0x84>)
 800379e:	785b      	ldrb	r3, [r3, #1]
 80037a0:	461a      	mov	r2, r3
 80037a2:	0092      	lsls	r2, r2, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	4b15      	ldr	r3, [pc, #84]	; (8003800 <linux_msg_prosess+0x88>)
 80037ac:	701a      	strb	r2, [r3, #0]
				  status_cabin = RUN_TO_USER_ODER;
 80037ae:	4b15      	ldr	r3, [pc, #84]	; (8003804 <linux_msg_prosess+0x8c>)
 80037b0:	2203      	movs	r2, #3
 80037b2:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  if(buff_mqtt_slave[0] == LINUX_CMD_FIRE_LEVEL){
 80037b4:	4b11      	ldr	r3, [pc, #68]	; (80037fc <linux_msg_prosess+0x84>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2b46      	cmp	r3, #70	; 0x46
 80037ba:	d112      	bne.n	80037e2 <linux_msg_prosess+0x6a>
			  is_fire = buff_mqtt_slave[1];
 80037bc:	4b0f      	ldr	r3, [pc, #60]	; (80037fc <linux_msg_prosess+0x84>)
 80037be:	785a      	ldrb	r2, [r3, #1]
 80037c0:	4b11      	ldr	r3, [pc, #68]	; (8003808 <linux_msg_prosess+0x90>)
 80037c2:	701a      	strb	r2, [r3, #0]
			  if(is_fire){
 80037c4:	4b10      	ldr	r3, [pc, #64]	; (8003808 <linux_msg_prosess+0x90>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <linux_msg_prosess+0x5c>
				  status_cabin = EMERGENCY_FIRE;
 80037cc:	4b0d      	ldr	r3, [pc, #52]	; (8003804 <linux_msg_prosess+0x8c>)
 80037ce:	2205      	movs	r2, #5
 80037d0:	701a      	strb	r2, [r3, #0]
 80037d2:	e006      	b.n	80037e2 <linux_msg_prosess+0x6a>
			  }else{
				  if(status_cabin == EMERGENCY_FIRE){
 80037d4:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <linux_msg_prosess+0x8c>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	2b05      	cmp	r3, #5
 80037da:	d102      	bne.n	80037e2 <linux_msg_prosess+0x6a>
					  status_cabin = WAIT_USER_FIST_CALL;
 80037dc:	4b09      	ldr	r3, [pc, #36]	; (8003804 <linux_msg_prosess+0x8c>)
 80037de:	2200      	movs	r2, #0
 80037e0:	701a      	strb	r2, [r3, #0]
				  }
			  }
		  }
		  is_new_linux_msg = 0;
 80037e2:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <linux_msg_prosess+0x80>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	701a      	strb	r2, [r3, #0]
		  memset(buff_mqtt_slave,0,32);
 80037e8:	2220      	movs	r2, #32
 80037ea:	2100      	movs	r1, #0
 80037ec:	4803      	ldr	r0, [pc, #12]	; (80037fc <linux_msg_prosess+0x84>)
 80037ee:	f000 ff01 	bl	80045f4 <memset>
	  }
}
 80037f2:	bf00      	nop
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	2000027f 	.word	0x2000027f
 80037fc:	20000288 	.word	0x20000288
 8003800:	20000287 	.word	0x20000287
 8003804:	2000027d 	.word	0x2000027d
 8003808:	20000284 	.word	0x20000284

0800380c <show_display>:

void show_display(uint8_t _dir, uint8_t _level ){
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af02      	add	r7, sp, #8
 8003812:	4603      	mov	r3, r0
 8003814:	460a      	mov	r2, r1
 8003816:	71fb      	strb	r3, [r7, #7]
 8003818:	4613      	mov	r3, r2
 800381a:	71bb      	strb	r3, [r7, #6]
	uint8_t special_char = 19;
 800381c:	2313      	movs	r3, #19
 800381e:	73fb      	strb	r3, [r7, #15]
	if(!target_level_next_time){
 8003820:	4b4f      	ldr	r3, [pc, #316]	; (8003960 <show_display+0x154>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <show_display+0x20>
		special_char = 20;
 8003828:	2314      	movs	r3, #20
 800382a:	73fb      	strb	r3, [r7, #15]
	}

	switch (_dir) {
 800382c:	79fb      	ldrb	r3, [r7, #7]
 800382e:	2b0c      	cmp	r3, #12
 8003830:	f200 8090 	bhi.w	8003954 <show_display+0x148>
 8003834:	a201      	add	r2, pc, #4	; (adr r2, 800383c <show_display+0x30>)
 8003836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383a:	bf00      	nop
 800383c:	08003871 	.word	0x08003871
 8003840:	08003883 	.word	0x08003883
 8003844:	08003955 	.word	0x08003955
 8003848:	08003895 	.word	0x08003895
 800384c:	080038a7 	.word	0x080038a7
 8003850:	080038b9 	.word	0x080038b9
 8003854:	080038cb 	.word	0x080038cb
 8003858:	080038dd 	.word	0x080038dd
 800385c:	080038ef 	.word	0x080038ef
 8003860:	0800390d 	.word	0x0800390d
 8003864:	0800391f 	.word	0x0800391f
 8003868:	08003931 	.word	0x08003931
 800386c:	08003943 	.word	0x08003943
		case LED_DWN:
			TM1637_Display_4_char(16, 13, special_char, _level, 1);
 8003870:	79bb      	ldrb	r3, [r7, #6]
 8003872:	7bfa      	ldrb	r2, [r7, #15]
 8003874:	2101      	movs	r1, #1
 8003876:	9100      	str	r1, [sp, #0]
 8003878:	210d      	movs	r1, #13
 800387a:	2010      	movs	r0, #16
 800387c:	f7fe ffa2 	bl	80027c4 <TM1637_Display_4_char>
			break;
 8003880:	e069      	b.n	8003956 <show_display+0x14a>
		case LED_UP:
			TM1637_Display_4_char(18, 17, special_char, _level, 1);
 8003882:	79bb      	ldrb	r3, [r7, #6]
 8003884:	7bfa      	ldrb	r2, [r7, #15]
 8003886:	2101      	movs	r1, #1
 8003888:	9100      	str	r1, [sp, #0]
 800388a:	2111      	movs	r1, #17
 800388c:	2012      	movs	r0, #18
 800388e:	f7fe ff99 	bl	80027c4 <TM1637_Display_4_char>
			break;
 8003892:	e060      	b.n	8003956 <show_display+0x14a>
		case LED_WAIT:
			TM1637_Display_4_char(22, 22, special_char, _level, 1);
 8003894:	79bb      	ldrb	r3, [r7, #6]
 8003896:	7bfa      	ldrb	r2, [r7, #15]
 8003898:	2101      	movs	r1, #1
 800389a:	9100      	str	r1, [sp, #0]
 800389c:	2116      	movs	r1, #22
 800389e:	2016      	movs	r0, #22
 80038a0:	f7fe ff90 	bl	80027c4 <TM1637_Display_4_char>
			break;
 80038a4:	e057      	b.n	8003956 <show_display+0x14a>
		case LED_DONE1:
			TM1637_Display_4_char(24, 23, special_char, _level, 1);
 80038a6:	79bb      	ldrb	r3, [r7, #6]
 80038a8:	7bfa      	ldrb	r2, [r7, #15]
 80038aa:	2101      	movs	r1, #1
 80038ac:	9100      	str	r1, [sp, #0]
 80038ae:	2117      	movs	r1, #23
 80038b0:	2018      	movs	r0, #24
 80038b2:	f7fe ff87 	bl	80027c4 <TM1637_Display_4_char>
			break;
 80038b6:	e04e      	b.n	8003956 <show_display+0x14a>
		case LED_DONE2:
			TM1637_Display_4_char(26, 25, special_char, _level, 1);
 80038b8:	79bb      	ldrb	r3, [r7, #6]
 80038ba:	7bfa      	ldrb	r2, [r7, #15]
 80038bc:	2101      	movs	r1, #1
 80038be:	9100      	str	r1, [sp, #0]
 80038c0:	2119      	movs	r1, #25
 80038c2:	201a      	movs	r0, #26
 80038c4:	f7fe ff7e 	bl	80027c4 <TM1637_Display_4_char>
			break;
 80038c8:	e045      	b.n	8003956 <show_display+0x14a>
		case LED_DONE3:
			TM1637_Display_4_char(28, 27, special_char, _level, 1);
 80038ca:	79bb      	ldrb	r3, [r7, #6]
 80038cc:	7bfa      	ldrb	r2, [r7, #15]
 80038ce:	2101      	movs	r1, #1
 80038d0:	9100      	str	r1, [sp, #0]
 80038d2:	211b      	movs	r1, #27
 80038d4:	201c      	movs	r0, #28
 80038d6:	f7fe ff75 	bl	80027c4 <TM1637_Display_4_char>
			break;
 80038da:	e03c      	b.n	8003956 <show_display+0x14a>
		case LED_DONE4:
			TM1637_Display_4_char(30, 29, special_char, _level, 1);
 80038dc:	79bb      	ldrb	r3, [r7, #6]
 80038de:	7bfa      	ldrb	r2, [r7, #15]
 80038e0:	2101      	movs	r1, #1
 80038e2:	9100      	str	r1, [sp, #0]
 80038e4:	211d      	movs	r1, #29
 80038e6:	201e      	movs	r0, #30
 80038e8:	f7fe ff6c 	bl	80027c4 <TM1637_Display_4_char>
			break;
 80038ec:	e033      	b.n	8003956 <show_display+0x14a>
		case LED_START:
			TM1637_Display_4_char(19, 19, 20, current_level/10, 1);
 80038ee:	4b1d      	ldr	r3, [pc, #116]	; (8003964 <show_display+0x158>)
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	4a1d      	ldr	r2, [pc, #116]	; (8003968 <show_display+0x15c>)
 80038f4:	fba2 2303 	umull	r2, r3, r2, r3
 80038f8:	08db      	lsrs	r3, r3, #3
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2201      	movs	r2, #1
 80038fe:	9200      	str	r2, [sp, #0]
 8003900:	2214      	movs	r2, #20
 8003902:	2113      	movs	r1, #19
 8003904:	2013      	movs	r0, #19
 8003906:	f7fe ff5d 	bl	80027c4 <TM1637_Display_4_char>
			break;
 800390a:	e024      	b.n	8003956 <show_display+0x14a>
		case LED_START1:
			TM1637_Display_4_char(24, 23, 24, 23, 0);
 800390c:	2300      	movs	r3, #0
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	2317      	movs	r3, #23
 8003912:	2218      	movs	r2, #24
 8003914:	2117      	movs	r1, #23
 8003916:	2018      	movs	r0, #24
 8003918:	f7fe ff54 	bl	80027c4 <TM1637_Display_4_char>
			break;
 800391c:	e01b      	b.n	8003956 <show_display+0x14a>
		case LED_START2:
			TM1637_Display_4_char(26, 25, 26, 25, 0);
 800391e:	2300      	movs	r3, #0
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	2319      	movs	r3, #25
 8003924:	221a      	movs	r2, #26
 8003926:	2119      	movs	r1, #25
 8003928:	201a      	movs	r0, #26
 800392a:	f7fe ff4b 	bl	80027c4 <TM1637_Display_4_char>
			break;
 800392e:	e012      	b.n	8003956 <show_display+0x14a>
		case LED_START3:
			TM1637_Display_4_char(28, 27, 28, 27, 0);
 8003930:	2300      	movs	r3, #0
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	231b      	movs	r3, #27
 8003936:	221c      	movs	r2, #28
 8003938:	211b      	movs	r1, #27
 800393a:	201c      	movs	r0, #28
 800393c:	f7fe ff42 	bl	80027c4 <TM1637_Display_4_char>
			break;
 8003940:	e009      	b.n	8003956 <show_display+0x14a>
		case LED_START4:
			TM1637_Display_4_char(30, 29, 30, 29, 0);
 8003942:	2300      	movs	r3, #0
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	231d      	movs	r3, #29
 8003948:	221e      	movs	r2, #30
 800394a:	211d      	movs	r1, #29
 800394c:	201e      	movs	r0, #30
 800394e:	f7fe ff39 	bl	80027c4 <TM1637_Display_4_char>
			break;
 8003952:	e000      	b.n	8003956 <show_display+0x14a>
		default:
			break;
 8003954:	bf00      	nop
	}
}
 8003956:	bf00      	nop
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	20000286 	.word	0x20000286
 8003964:	20000285 	.word	0x20000285
 8003968:	cccccccd 	.word	0xcccccccd

0800396c <matrix_init>:
 */


#include "../../User/matric_button/lkv_matrix_button.h"

void matrix_init(void){
 800396c:	b580      	push	{r7, lr}
 800396e:	b088      	sub	sp, #32
 8003970:	af00      	add	r7, sp, #0
	 __HAL_RCC_GPIOC_CLK_ENABLE();
 8003972:	4b3b      	ldr	r3, [pc, #236]	; (8003a60 <matrix_init+0xf4>)
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	4a3a      	ldr	r2, [pc, #232]	; (8003a60 <matrix_init+0xf4>)
 8003978:	f043 0304 	orr.w	r3, r3, #4
 800397c:	61d3      	str	r3, [r2, #28]
 800397e:	4b38      	ldr	r3, [pc, #224]	; (8003a60 <matrix_init+0xf4>)
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	60bb      	str	r3, [r7, #8]
 8003988:	68bb      	ldr	r3, [r7, #8]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 800398a:	4b35      	ldr	r3, [pc, #212]	; (8003a60 <matrix_init+0xf4>)
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	4a34      	ldr	r2, [pc, #208]	; (8003a60 <matrix_init+0xf4>)
 8003990:	f043 0301 	orr.w	r3, r3, #1
 8003994:	61d3      	str	r3, [r2, #28]
 8003996:	4b32      	ldr	r3, [pc, #200]	; (8003a60 <matrix_init+0xf4>)
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	607b      	str	r3, [r7, #4]
 80039a0:	687b      	ldr	r3, [r7, #4]
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 80039a2:	4b2f      	ldr	r3, [pc, #188]	; (8003a60 <matrix_init+0xf4>)
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	4a2e      	ldr	r2, [pc, #184]	; (8003a60 <matrix_init+0xf4>)
 80039a8:	f043 0302 	orr.w	r3, r3, #2
 80039ac:	61d3      	str	r3, [r2, #28]
 80039ae:	4b2c      	ldr	r3, [pc, #176]	; (8003a60 <matrix_init+0xf4>)
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	603b      	str	r3, [r7, #0]
 80039b8:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ba:	f107 030c 	add.w	r3, r7, #12
 80039be:	2200      	movs	r2, #0
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	605a      	str	r2, [r3, #4]
 80039c4:	609a      	str	r2, [r3, #8]
 80039c6:	60da      	str	r2, [r3, #12]
 80039c8:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039ca:	2300      	movs	r3, #0
 80039cc:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80039ce:	2302      	movs	r3, #2
 80039d0:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039d2:	2302      	movs	r3, #2
 80039d4:	61bb      	str	r3, [r7, #24]

	  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80039d6:	2340      	movs	r3, #64	; 0x40
 80039d8:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039da:	f107 030c 	add.w	r3, r7, #12
 80039de:	4619      	mov	r1, r3
 80039e0:	4820      	ldr	r0, [pc, #128]	; (8003a64 <matrix_init+0xf8>)
 80039e2:	f7fd f875 	bl	8000ad0 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80039e6:	2380      	movs	r3, #128	; 0x80
 80039e8:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ea:	f107 030c 	add.w	r3, r7, #12
 80039ee:	4619      	mov	r1, r3
 80039f0:	481c      	ldr	r0, [pc, #112]	; (8003a64 <matrix_init+0xf8>)
 80039f2:	f7fd f86d 	bl	8000ad0 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80039f6:	2340      	movs	r3, #64	; 0x40
 80039f8:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039fa:	f107 030c 	add.w	r3, r7, #12
 80039fe:	4619      	mov	r1, r3
 8003a00:	4819      	ldr	r0, [pc, #100]	; (8003a68 <matrix_init+0xfc>)
 8003a02:	f7fd f865 	bl	8000ad0 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003a06:	2380      	movs	r3, #128	; 0x80
 8003a08:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a0a:	f107 030c 	add.w	r3, r7, #12
 8003a0e:	4619      	mov	r1, r3
 8003a10:	4816      	ldr	r0, [pc, #88]	; (8003a6c <matrix_init+0x100>)
 8003a12:	f7fd f85d 	bl	8000ad0 <HAL_GPIO_Init>


	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a16:	2301      	movs	r3, #1
 8003a18:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a1e:	2302      	movs	r3, #2
 8003a20:	61bb      	str	r3, [r7, #24]


	  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003a22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a26:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a28:	f107 030c 	add.w	r3, r7, #12
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	480d      	ldr	r0, [pc, #52]	; (8003a64 <matrix_init+0xf8>)
 8003a30:	f7fd f84e 	bl	8000ad0 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003a34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a38:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a3a:	f107 030c 	add.w	r3, r7, #12
 8003a3e:	4619      	mov	r1, r3
 8003a40:	4808      	ldr	r0, [pc, #32]	; (8003a64 <matrix_init+0xf8>)
 8003a42:	f7fd f845 	bl	8000ad0 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003a46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a4a:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a4c:	f107 030c 	add.w	r3, r7, #12
 8003a50:	4619      	mov	r1, r3
 8003a52:	4805      	ldr	r0, [pc, #20]	; (8003a68 <matrix_init+0xfc>)
 8003a54:	f7fd f83c 	bl	8000ad0 <HAL_GPIO_Init>

}
 8003a58:	bf00      	nop
 8003a5a:	3720      	adds	r7, #32
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40023800 	.word	0x40023800
 8003a64:	40020000 	.word	0x40020000
 8003a68:	40020400 	.word	0x40020400
 8003a6c:	40020800 	.word	0x40020800

08003a70 <get_row>:


uint8_t get_row(void){
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 1 ){
 8003a74:	2140      	movs	r1, #64	; 0x40
 8003a76:	4821      	ldr	r0, [pc, #132]	; (8003afc <get_row+0x8c>)
 8003a78:	f7fd f9ba 	bl	8000df0 <HAL_GPIO_ReadPin>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d108      	bne.n	8003a94 <get_row+0x24>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 1) return 1;
 8003a82:	2140      	movs	r1, #64	; 0x40
 8003a84:	481d      	ldr	r0, [pc, #116]	; (8003afc <get_row+0x8c>)
 8003a86:	f7fd f9b3 	bl	8000df0 <HAL_GPIO_ReadPin>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d131      	bne.n	8003af4 <get_row+0x84>
 8003a90:	2301      	movs	r3, #1
 8003a92:	e030      	b.n	8003af6 <get_row+0x86>
	}
	else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 1 ){
 8003a94:	2180      	movs	r1, #128	; 0x80
 8003a96:	4819      	ldr	r0, [pc, #100]	; (8003afc <get_row+0x8c>)
 8003a98:	f7fd f9aa 	bl	8000df0 <HAL_GPIO_ReadPin>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d108      	bne.n	8003ab4 <get_row+0x44>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 1) return 2;
 8003aa2:	2180      	movs	r1, #128	; 0x80
 8003aa4:	4815      	ldr	r0, [pc, #84]	; (8003afc <get_row+0x8c>)
 8003aa6:	f7fd f9a3 	bl	8000df0 <HAL_GPIO_ReadPin>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d121      	bne.n	8003af4 <get_row+0x84>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e020      	b.n	8003af6 <get_row+0x86>
	}
	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 1 ){
 8003ab4:	2140      	movs	r1, #64	; 0x40
 8003ab6:	4812      	ldr	r0, [pc, #72]	; (8003b00 <get_row+0x90>)
 8003ab8:	f7fd f99a 	bl	8000df0 <HAL_GPIO_ReadPin>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d108      	bne.n	8003ad4 <get_row+0x64>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 1) return 3;
 8003ac2:	2140      	movs	r1, #64	; 0x40
 8003ac4:	480e      	ldr	r0, [pc, #56]	; (8003b00 <get_row+0x90>)
 8003ac6:	f7fd f993 	bl	8000df0 <HAL_GPIO_ReadPin>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d111      	bne.n	8003af4 <get_row+0x84>
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e010      	b.n	8003af6 <get_row+0x86>
	}
	else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == 1 ){
 8003ad4:	2180      	movs	r1, #128	; 0x80
 8003ad6:	480b      	ldr	r0, [pc, #44]	; (8003b04 <get_row+0x94>)
 8003ad8:	f7fd f98a 	bl	8000df0 <HAL_GPIO_ReadPin>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d108      	bne.n	8003af4 <get_row+0x84>
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == 1) return 4;
 8003ae2:	2180      	movs	r1, #128	; 0x80
 8003ae4:	4807      	ldr	r0, [pc, #28]	; (8003b04 <get_row+0x94>)
 8003ae6:	f7fd f983 	bl	8000df0 <HAL_GPIO_ReadPin>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d101      	bne.n	8003af4 <get_row+0x84>
 8003af0:	2304      	movs	r3, #4
 8003af2:	e000      	b.n	8003af6 <get_row+0x86>
	}


	return 0;
 8003af4:	2300      	movs	r3, #0

}
 8003af6:	4618      	mov	r0, r3
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40020000 	.word	0x40020000
 8003b00:	40020400 	.word	0x40020400
 8003b04:	40020800 	.word	0x40020800

08003b08 <set_colum>:

void set_colum(uint8_t id){
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	4603      	mov	r3, r0
 8003b10:	71fb      	strb	r3, [r7, #7]
	switch(id){
 8003b12:	79fb      	ldrb	r3, [r7, #7]
 8003b14:	2b03      	cmp	r3, #3
 8003b16:	d050      	beq.n	8003bba <set_colum+0xb2>
 8003b18:	2b03      	cmp	r3, #3
 8003b1a:	dc73      	bgt.n	8003c04 <set_colum+0xfc>
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d002      	beq.n	8003b26 <set_colum+0x1e>
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d025      	beq.n	8003b70 <set_colum+0x68>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
		for(int i = 0; i < 50; i++);
		break;

	default:
		break;
 8003b24:	e06e      	b.n	8003c04 <set_colum+0xfc>
		for(int i = 0; i < 50; i++);
 8003b26:	2300      	movs	r3, #0
 8003b28:	61fb      	str	r3, [r7, #28]
 8003b2a:	e002      	b.n	8003b32 <set_colum+0x2a>
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	61fb      	str	r3, [r7, #28]
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	2b31      	cmp	r3, #49	; 0x31
 8003b36:	ddf9      	ble.n	8003b2c <set_colum+0x24>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  1);
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b3e:	4834      	ldr	r0, [pc, #208]	; (8003c10 <set_colum+0x108>)
 8003b40:	f7fd f96d 	bl	8000e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  0);
 8003b44:	2200      	movs	r2, #0
 8003b46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b4a:	4831      	ldr	r0, [pc, #196]	; (8003c10 <set_colum+0x108>)
 8003b4c:	f7fd f967 	bl	8000e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8003b50:	2200      	movs	r2, #0
 8003b52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b56:	482f      	ldr	r0, [pc, #188]	; (8003c14 <set_colum+0x10c>)
 8003b58:	f7fd f961 	bl	8000e1e <HAL_GPIO_WritePin>
		for(int i = 0; i < 50; i++);
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61bb      	str	r3, [r7, #24]
 8003b60:	e002      	b.n	8003b68 <set_colum+0x60>
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	3301      	adds	r3, #1
 8003b66:	61bb      	str	r3, [r7, #24]
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	2b31      	cmp	r3, #49	; 0x31
 8003b6c:	ddf9      	ble.n	8003b62 <set_colum+0x5a>
		break;
 8003b6e:	e04a      	b.n	8003c06 <set_colum+0xfe>
		for(int i = 0; i < 50; i++);
 8003b70:	2300      	movs	r3, #0
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	e002      	b.n	8003b7c <set_colum+0x74>
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	617b      	str	r3, [r7, #20]
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	2b31      	cmp	r3, #49	; 0x31
 8003b80:	ddf9      	ble.n	8003b76 <set_colum+0x6e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  0);
 8003b82:	2200      	movs	r2, #0
 8003b84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b88:	4821      	ldr	r0, [pc, #132]	; (8003c10 <set_colum+0x108>)
 8003b8a:	f7fd f948 	bl	8000e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  1);
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b94:	481e      	ldr	r0, [pc, #120]	; (8003c10 <set_colum+0x108>)
 8003b96:	f7fd f942 	bl	8000e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ba0:	481c      	ldr	r0, [pc, #112]	; (8003c14 <set_colum+0x10c>)
 8003ba2:	f7fd f93c 	bl	8000e1e <HAL_GPIO_WritePin>
		for(int i = 0; i < 50; i++);
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	e002      	b.n	8003bb2 <set_colum+0xaa>
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	613b      	str	r3, [r7, #16]
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	2b31      	cmp	r3, #49	; 0x31
 8003bb6:	ddf9      	ble.n	8003bac <set_colum+0xa4>
		break;
 8003bb8:	e025      	b.n	8003c06 <set_colum+0xfe>
		for(int i = 0; i < 50; i++);
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	e002      	b.n	8003bc6 <set_colum+0xbe>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	60fb      	str	r3, [r7, #12]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2b31      	cmp	r3, #49	; 0x31
 8003bca:	ddf9      	ble.n	8003bc0 <set_colum+0xb8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  0);
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003bd2:	480f      	ldr	r0, [pc, #60]	; (8003c10 <set_colum+0x108>)
 8003bd4:	f7fd f923 	bl	8000e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  0);
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bde:	480c      	ldr	r0, [pc, #48]	; (8003c10 <set_colum+0x108>)
 8003be0:	f7fd f91d 	bl	8000e1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8003be4:	2201      	movs	r2, #1
 8003be6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003bea:	480a      	ldr	r0, [pc, #40]	; (8003c14 <set_colum+0x10c>)
 8003bec:	f7fd f917 	bl	8000e1e <HAL_GPIO_WritePin>
		for(int i = 0; i < 50; i++);
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	60bb      	str	r3, [r7, #8]
 8003bf4:	e002      	b.n	8003bfc <set_colum+0xf4>
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	60bb      	str	r3, [r7, #8]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	2b31      	cmp	r3, #49	; 0x31
 8003c00:	ddf9      	ble.n	8003bf6 <set_colum+0xee>
		break;
 8003c02:	e000      	b.n	8003c06 <set_colum+0xfe>
		break;
 8003c04:	bf00      	nop
	}
}
 8003c06:	bf00      	nop
 8003c08:	3720      	adds	r7, #32
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40020000 	.word	0x40020000
 8003c14:	40020400 	.word	0x40020400

08003c18 <get_char_user>:

	 return num;
}


 uint8_t get_char_user(void){
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0

	 uint8_t num = 0;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	71fb      	strb	r3, [r7, #7]

	        set_colum(1);
 8003c22:	2001      	movs	r0, #1
 8003c24:	f7ff ff70 	bl	8003b08 <set_colum>
	 			 if(get_row() == 1){
 8003c28:	f7ff ff22 	bl	8003a70 <get_row>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d103      	bne.n	8003c3a <get_char_user+0x22>
	 				 num = '1';
 8003c32:	2331      	movs	r3, #49	; 0x31
 8003c34:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 8003c36:	79fb      	ldrb	r3, [r7, #7]
 8003c38:	e06c      	b.n	8003d14 <get_char_user+0xfc>
	 			 }
	 			 if(get_row() == 2){
 8003c3a:	f7ff ff19 	bl	8003a70 <get_row>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d103      	bne.n	8003c4c <get_char_user+0x34>
	 				 num = '4';
 8003c44:	2334      	movs	r3, #52	; 0x34
 8003c46:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 8003c48:	79fb      	ldrb	r3, [r7, #7]
 8003c4a:	e063      	b.n	8003d14 <get_char_user+0xfc>
	 			 }
	 			 if(get_row() == 3){
 8003c4c:	f7ff ff10 	bl	8003a70 <get_row>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	d103      	bne.n	8003c5e <get_char_user+0x46>
	 				 num = '7';
 8003c56:	2337      	movs	r3, #55	; 0x37
 8003c58:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 8003c5a:	79fb      	ldrb	r3, [r7, #7]
 8003c5c:	e05a      	b.n	8003d14 <get_char_user+0xfc>
	 			 }


	 		 set_colum(2);
 8003c5e:	2002      	movs	r0, #2
 8003c60:	f7ff ff52 	bl	8003b08 <set_colum>
	 			 if(get_row() == 1){
 8003c64:	f7ff ff04 	bl	8003a70 <get_row>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d103      	bne.n	8003c76 <get_char_user+0x5e>
	 				 num = '2';
 8003c6e:	2332      	movs	r3, #50	; 0x32
 8003c70:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 8003c72:	79fb      	ldrb	r3, [r7, #7]
 8003c74:	e04e      	b.n	8003d14 <get_char_user+0xfc>
	 			 }
	 			 if(get_row() == 2){
 8003c76:	f7ff fefb 	bl	8003a70 <get_row>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d103      	bne.n	8003c88 <get_char_user+0x70>
	 				 num = '5';
 8003c80:	2335      	movs	r3, #53	; 0x35
 8003c82:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 8003c84:	79fb      	ldrb	r3, [r7, #7]
 8003c86:	e045      	b.n	8003d14 <get_char_user+0xfc>
	 			 }
	 			 if(get_row() == 3){
 8003c88:	f7ff fef2 	bl	8003a70 <get_row>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b03      	cmp	r3, #3
 8003c90:	d103      	bne.n	8003c9a <get_char_user+0x82>
	 				 num = '8';
 8003c92:	2338      	movs	r3, #56	; 0x38
 8003c94:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 8003c96:	79fb      	ldrb	r3, [r7, #7]
 8003c98:	e03c      	b.n	8003d14 <get_char_user+0xfc>
	 			 }


	 		 set_colum(3);
 8003c9a:	2003      	movs	r0, #3
 8003c9c:	f7ff ff34 	bl	8003b08 <set_colum>
	 			 if(get_row() == 1){
 8003ca0:	f7ff fee6 	bl	8003a70 <get_row>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d103      	bne.n	8003cb2 <get_char_user+0x9a>
	 				 num = '3';
 8003caa:	2333      	movs	r3, #51	; 0x33
 8003cac:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 8003cae:	79fb      	ldrb	r3, [r7, #7]
 8003cb0:	e030      	b.n	8003d14 <get_char_user+0xfc>
	 			 }
	 			 if(get_row() == 2){
 8003cb2:	f7ff fedd 	bl	8003a70 <get_row>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d103      	bne.n	8003cc4 <get_char_user+0xac>
	 				 num = '6';
 8003cbc:	2336      	movs	r3, #54	; 0x36
 8003cbe:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 8003cc0:	79fb      	ldrb	r3, [r7, #7]
 8003cc2:	e027      	b.n	8003d14 <get_char_user+0xfc>
	 			 }
	 			 if(get_row() == 3){
 8003cc4:	f7ff fed4 	bl	8003a70 <get_row>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	d103      	bne.n	8003cd6 <get_char_user+0xbe>
	 				 num = '9';
 8003cce:	2339      	movs	r3, #57	; 0x39
 8003cd0:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 8003cd2:	79fb      	ldrb	r3, [r7, #7]
 8003cd4:	e01e      	b.n	8003d14 <get_char_user+0xfc>
	 			 }


	 		 set_colum(4);
 8003cd6:	2004      	movs	r0, #4
 8003cd8:	f7ff ff16 	bl	8003b08 <set_colum>
	 			 if(get_row() == 1){
 8003cdc:	f7ff fec8 	bl	8003a70 <get_row>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d103      	bne.n	8003cee <get_char_user+0xd6>
	 				 num = 'A';
 8003ce6:	2341      	movs	r3, #65	; 0x41
 8003ce8:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 8003cea:	79fb      	ldrb	r3, [r7, #7]
 8003cec:	e012      	b.n	8003d14 <get_char_user+0xfc>
	 			 }
	 			 if(get_row() == 2){
 8003cee:	f7ff febf 	bl	8003a70 <get_row>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d103      	bne.n	8003d00 <get_char_user+0xe8>
	 				 num = 'B';
 8003cf8:	2342      	movs	r3, #66	; 0x42
 8003cfa:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 8003cfc:	79fb      	ldrb	r3, [r7, #7]
 8003cfe:	e009      	b.n	8003d14 <get_char_user+0xfc>
	 			 }
	 			 if(get_row() == 3){
 8003d00:	f7ff feb6 	bl	8003a70 <get_row>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b03      	cmp	r3, #3
 8003d08:	d103      	bne.n	8003d12 <get_char_user+0xfa>
	 				 num = '0';
 8003d0a:	2330      	movs	r3, #48	; 0x30
 8003d0c:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 8003d0e:	79fb      	ldrb	r3, [r7, #7]
 8003d10:	e000      	b.n	8003d14 <get_char_user+0xfc>
	 			 }


	 		return 0;
 8003d12:	2300      	movs	r3, #0

 }
 8003d14:	4618      	mov	r0, r3
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <read_serial>:
uint16_t server_holding_registers[HOLD_REGS_ADDR_MAX] = {0,1,2,3,4,5,6,7,8,9};
uint16_t server_input_registers[INPUT_REGS_ADDR_MAX] = {01,11,21,31,41,51,61,71,81,91};



int32_t read_serial(uint8_t* buf, uint16_t count, int32_t byte_timeout_ms, void* arg) {
 8003d1c:	b480      	push	{r7}
 8003d1e:	b089      	sub	sp, #36	; 0x24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	607a      	str	r2, [r7, #4]
 8003d26:	603b      	str	r3, [r7, #0]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	817b      	strh	r3, [r7, #10]
	uint32_t timeout = g_sys_time + byte_timeout_ms;
 8003d2c:	4b30      	ldr	r3, [pc, #192]	; (8003df0 <read_serial+0xd4>)
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4413      	add	r3, r2
 8003d34:	617b      	str	r3, [r7, #20]
	while(g_sys_time < timeout){
 8003d36:	e04e      	b.n	8003dd6 <read_serial+0xba>
		uint32_t gap_ = 0;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	61fb      	str	r3, [r7, #28]
		if(front_index > rear_index){
 8003d3c:	4b2d      	ldr	r3, [pc, #180]	; (8003df4 <read_serial+0xd8>)
 8003d3e:	881b      	ldrh	r3, [r3, #0]
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	4b2d      	ldr	r3, [pc, #180]	; (8003df8 <read_serial+0xdc>)
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d908      	bls.n	8003d5e <read_serial+0x42>
			gap_ = front_index - rear_index;
 8003d4c:	4b29      	ldr	r3, [pc, #164]	; (8003df4 <read_serial+0xd8>)
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	461a      	mov	r2, r3
 8003d54:	4b28      	ldr	r3, [pc, #160]	; (8003df8 <read_serial+0xdc>)
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	61fb      	str	r3, [r7, #28]
		}
		if(front_index < rear_index){
 8003d5e:	4b25      	ldr	r3, [pc, #148]	; (8003df4 <read_serial+0xd8>)
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	4b24      	ldr	r3, [pc, #144]	; (8003df8 <read_serial+0xdc>)
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d209      	bcs.n	8003d82 <read_serial+0x66>
			gap_ = 1024 + front_index - rear_index;
 8003d6e:	4b21      	ldr	r3, [pc, #132]	; (8003df4 <read_serial+0xd8>)
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d78:	4a1f      	ldr	r2, [pc, #124]	; (8003df8 <read_serial+0xdc>)
 8003d7a:	8812      	ldrh	r2, [r2, #0]
 8003d7c:	b292      	uxth	r2, r2
 8003d7e:	1a9b      	subs	r3, r3, r2
 8003d80:	61fb      	str	r3, [r7, #28]
		}
		if(gap_ >= count){
 8003d82:	897b      	ldrh	r3, [r7, #10]
 8003d84:	69fa      	ldr	r2, [r7, #28]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d325      	bcc.n	8003dd6 <read_serial+0xba>
			for(int i = 0; i < count; i++){
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	61bb      	str	r3, [r7, #24]
 8003d8e:	e01c      	b.n	8003dca <read_serial+0xae>
				*(buf + i) = ring_buffer[rear_index];
 8003d90:	4b19      	ldr	r3, [pc, #100]	; (8003df8 <read_serial+0xdc>)
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	4619      	mov	r1, r3
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	4a17      	ldr	r2, [pc, #92]	; (8003dfc <read_serial+0xe0>)
 8003da0:	5c52      	ldrb	r2, [r2, r1]
 8003da2:	701a      	strb	r2, [r3, #0]
				rear_index++;
 8003da4:	4b14      	ldr	r3, [pc, #80]	; (8003df8 <read_serial+0xdc>)
 8003da6:	881b      	ldrh	r3, [r3, #0]
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	3301      	adds	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	4b12      	ldr	r3, [pc, #72]	; (8003df8 <read_serial+0xdc>)
 8003db0:	801a      	strh	r2, [r3, #0]
				if(rear_index >= 1024){
 8003db2:	4b11      	ldr	r3, [pc, #68]	; (8003df8 <read_serial+0xdc>)
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dbc:	d302      	bcc.n	8003dc4 <read_serial+0xa8>
					rear_index = 0;
 8003dbe:	4b0e      	ldr	r3, [pc, #56]	; (8003df8 <read_serial+0xdc>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	801a      	strh	r2, [r3, #0]
			for(int i = 0; i < count; i++){
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	61bb      	str	r3, [r7, #24]
 8003dca:	897b      	ldrh	r3, [r7, #10]
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	dbde      	blt.n	8003d90 <read_serial+0x74>
				}
			}
			return count;
 8003dd2:	897b      	ldrh	r3, [r7, #10]
 8003dd4:	e006      	b.n	8003de4 <read_serial+0xc8>
	while(g_sys_time < timeout){
 8003dd6:	4b06      	ldr	r3, [pc, #24]	; (8003df0 <read_serial+0xd4>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d8ab      	bhi.n	8003d38 <read_serial+0x1c>
		}
	}
	return -1;
 8003de0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3724      	adds	r7, #36	; 0x24
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bc80      	pop	{r7}
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	200002a8 	.word	0x200002a8
 8003df4:	200006b0 	.word	0x200006b0
 8003df8:	200006b2 	.word	0x200006b2
 8003dfc:	200002b0 	.word	0x200002b0

08003e00 <write_serial>:


int32_t write_serial(const uint8_t* buf, uint16_t count, int32_t byte_timeout_ms, void* arg) {
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	607a      	str	r2, [r7, #4]
 8003e0a:	603b      	str	r3, [r7, #0]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	817b      	strh	r3, [r7, #10]
	HAL_UART_Transmit(&huart2, buf, count, byte_timeout_ms);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	897a      	ldrh	r2, [r7, #10]
 8003e14:	68f9      	ldr	r1, [r7, #12]
 8003e16:	4804      	ldr	r0, [pc, #16]	; (8003e28 <write_serial+0x28>)
 8003e18:	f7fd fe1e 	bl	8001a58 <HAL_UART_Transmit>
  return count;
 8003e1c:	897b      	ldrh	r3, [r7, #10]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	2000009c 	.word	0x2000009c

08003e2c <onError>:


void onError(void) {
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0

	return;
 8003e30:	bf00      	nop
}
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bc80      	pop	{r7}
 8003e36:	4770      	bx	lr

08003e38 <handle_read_coils>:


nmbs_error handle_read_coils(uint16_t address, uint16_t quantity, nmbs_bitfield coils_out, uint8_t unit_id, void *arg) {
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60ba      	str	r2, [r7, #8]
 8003e40:	461a      	mov	r2, r3
 8003e42:	4603      	mov	r3, r0
 8003e44:	81fb      	strh	r3, [r7, #14]
 8003e46:	460b      	mov	r3, r1
 8003e48:	81bb      	strh	r3, [r7, #12]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	71fb      	strb	r3, [r7, #7]
  if (address + quantity > COILS_ADDR_MAX + 1)
 8003e4e:	89fa      	ldrh	r2, [r7, #14]
 8003e50:	89bb      	ldrh	r3, [r7, #12]
 8003e52:	4413      	add	r3, r2
 8003e54:	2b10      	cmp	r3, #16
 8003e56:	dd01      	ble.n	8003e5c <handle_read_coils+0x24>
    return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e05a      	b.n	8003f12 <handle_read_coils+0xda>

  // Read our coils values into coils_out
  for (int i = 0; i < quantity; i++) {
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	617b      	str	r3, [r7, #20]
 8003e60:	e052      	b.n	8003f08 <handle_read_coils+0xd0>
    bool value = nmbs_bitfield_read(server_coils, address + i);
 8003e62:	89fa      	ldrh	r2, [r7, #14]
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	4413      	add	r3, r2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	da00      	bge.n	8003e6e <handle_read_coils+0x36>
 8003e6c:	3307      	adds	r3, #7
 8003e6e:	10db      	asrs	r3, r3, #3
 8003e70:	461a      	mov	r2, r3
 8003e72:	4b2a      	ldr	r3, [pc, #168]	; (8003f1c <handle_read_coils+0xe4>)
 8003e74:	5c9b      	ldrb	r3, [r3, r2]
 8003e76:	4619      	mov	r1, r3
 8003e78:	89fa      	ldrh	r2, [r7, #14]
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	fa41 f303 	asr.w	r3, r1, r3
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	bf14      	ite	ne
 8003e8e:	2301      	movne	r3, #1
 8003e90:	2300      	moveq	r3, #0
 8003e92:	74fb      	strb	r3, [r7, #19]
    nmbs_bitfield_write(coils_out, i, value);
 8003e94:	7cfb      	ldrb	r3, [r7, #19]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d014      	beq.n	8003ec4 <handle_read_coils+0x8c>
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	da00      	bge.n	8003ea2 <handle_read_coils+0x6a>
 8003ea0:	3307      	adds	r3, #7
 8003ea2:	10db      	asrs	r3, r3, #3
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	b25a      	sxtb	r2, r3
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eba:	b25b      	sxtb	r3, r3
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	b25b      	sxtb	r3, r3
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	e015      	b.n	8003ef0 <handle_read_coils+0xb8>
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	da00      	bge.n	8003ecc <handle_read_coils+0x94>
 8003eca:	3307      	adds	r3, #7
 8003ecc:	10db      	asrs	r3, r3, #3
 8003ece:	461a      	mov	r2, r3
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	b25a      	sxtb	r2, r3
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f003 0307 	and.w	r3, r3, #7
 8003ede:	2101      	movs	r1, #1
 8003ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee4:	b25b      	sxtb	r3, r3
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	b25b      	sxtb	r3, r3
 8003eea:	4013      	ands	r3, r2
 8003eec:	b25b      	sxtb	r3, r3
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	da00      	bge.n	8003ef8 <handle_read_coils+0xc0>
 8003ef6:	3307      	adds	r3, #7
 8003ef8:	10db      	asrs	r3, r3, #3
 8003efa:	4619      	mov	r1, r3
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	440b      	add	r3, r1
 8003f00:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < quantity; i++) {
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	3301      	adds	r3, #1
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	89bb      	ldrh	r3, [r7, #12]
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	dba8      	blt.n	8003e62 <handle_read_coils+0x2a>
  }

  return NMBS_ERROR_NONE;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	371c      	adds	r7, #28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bc80      	pop	{r7}
 8003f1a:	4770      	bx	lr
 8003f1c:	200006b4 	.word	0x200006b4

08003f20 <handle_write_multiple_coils>:


nmbs_error handle_write_multiple_coils(uint16_t address, uint16_t quantity, const nmbs_bitfield coils, uint8_t unit_id, void *arg) {
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60ba      	str	r2, [r7, #8]
 8003f28:	461a      	mov	r2, r3
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	81fb      	strh	r3, [r7, #14]
 8003f2e:	460b      	mov	r3, r1
 8003f30:	81bb      	strh	r3, [r7, #12]
 8003f32:	4613      	mov	r3, r2
 8003f34:	71fb      	strb	r3, [r7, #7]
  if (address + quantity > COILS_ADDR_MAX + 1)
 8003f36:	89fa      	ldrh	r2, [r7, #14]
 8003f38:	89bb      	ldrh	r3, [r7, #12]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	2b10      	cmp	r3, #16
 8003f3e:	dd01      	ble.n	8003f44 <handle_write_multiple_coils+0x24>
    return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 8003f40:	2302      	movs	r3, #2
 8003f42:	e058      	b.n	8003ff6 <handle_write_multiple_coils+0xd6>

  // Write coils values to our server_coils
  for (int i = 0; i < quantity; i++) {
 8003f44:	2300      	movs	r3, #0
 8003f46:	617b      	str	r3, [r7, #20]
 8003f48:	e050      	b.n	8003fec <handle_write_multiple_coils+0xcc>
    nmbs_bitfield_write(server_coils, address + i, nmbs_bitfield_read(coils, i));
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	da00      	bge.n	8003f52 <handle_write_multiple_coils+0x32>
 8003f50:	3307      	adds	r3, #7
 8003f52:	10db      	asrs	r3, r3, #3
 8003f54:	461a      	mov	r2, r3
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	4413      	add	r3, r2
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f003 0307 	and.w	r3, r3, #7
 8003f64:	fa42 f303 	asr.w	r3, r2, r3
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d017      	beq.n	8003fa0 <handle_write_multiple_coils+0x80>
 8003f70:	89fa      	ldrh	r2, [r7, #14]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	4413      	add	r3, r2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	da00      	bge.n	8003f7c <handle_write_multiple_coils+0x5c>
 8003f7a:	3307      	adds	r3, #7
 8003f7c:	10db      	asrs	r3, r3, #3
 8003f7e:	461a      	mov	r2, r3
 8003f80:	4b1f      	ldr	r3, [pc, #124]	; (8004000 <handle_write_multiple_coils+0xe0>)
 8003f82:	5c9b      	ldrb	r3, [r3, r2]
 8003f84:	b25a      	sxtb	r2, r3
 8003f86:	89f9      	ldrh	r1, [r7, #14]
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	440b      	add	r3, r1
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	2101      	movs	r1, #1
 8003f92:	fa01 f303 	lsl.w	r3, r1, r3
 8003f96:	b25b      	sxtb	r3, r3
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	b25b      	sxtb	r3, r3
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	e018      	b.n	8003fd2 <handle_write_multiple_coils+0xb2>
 8003fa0:	89fa      	ldrh	r2, [r7, #14]
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	da00      	bge.n	8003fac <handle_write_multiple_coils+0x8c>
 8003faa:	3307      	adds	r3, #7
 8003fac:	10db      	asrs	r3, r3, #3
 8003fae:	461a      	mov	r2, r3
 8003fb0:	4b13      	ldr	r3, [pc, #76]	; (8004000 <handle_write_multiple_coils+0xe0>)
 8003fb2:	5c9b      	ldrb	r3, [r3, r2]
 8003fb4:	b25a      	sxtb	r2, r3
 8003fb6:	89f9      	ldrh	r1, [r7, #14]
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	440b      	add	r3, r1
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc6:	b25b      	sxtb	r3, r3
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	b25b      	sxtb	r3, r3
 8003fcc:	4013      	ands	r3, r2
 8003fce:	b25b      	sxtb	r3, r3
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	89f9      	ldrh	r1, [r7, #14]
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	440b      	add	r3, r1
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	da00      	bge.n	8003fde <handle_write_multiple_coils+0xbe>
 8003fdc:	3307      	adds	r3, #7
 8003fde:	10db      	asrs	r3, r3, #3
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4b07      	ldr	r3, [pc, #28]	; (8004000 <handle_write_multiple_coils+0xe0>)
 8003fe4:	545a      	strb	r2, [r3, r1]
  for (int i = 0; i < quantity; i++) {
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	89bb      	ldrh	r3, [r7, #12]
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	dbaa      	blt.n	8003f4a <handle_write_multiple_coils+0x2a>
  }

  return NMBS_ERROR_NONE;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	371c      	adds	r7, #28
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bc80      	pop	{r7}
 8003ffe:	4770      	bx	lr
 8004000:	200006b4 	.word	0x200006b4

08004004 <handler_read_holding_registers>:


nmbs_error handler_read_holding_registers(uint16_t address, uint16_t quantity, uint16_t* registers_out, uint8_t unit_id, void *arg) {
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	60ba      	str	r2, [r7, #8]
 800400c:	461a      	mov	r2, r3
 800400e:	4603      	mov	r3, r0
 8004010:	81fb      	strh	r3, [r7, #14]
 8004012:	460b      	mov	r3, r1
 8004014:	81bb      	strh	r3, [r7, #12]
 8004016:	4613      	mov	r3, r2
 8004018:	71fb      	strb	r3, [r7, #7]
  if (address + quantity > HOLD_REGS_ADDR_MAX + 1)
 800401a:	89fa      	ldrh	r2, [r7, #14]
 800401c:	89bb      	ldrh	r3, [r7, #12]
 800401e:	4413      	add	r3, r2
 8004020:	2b0b      	cmp	r3, #11
 8004022:	dd01      	ble.n	8004028 <handler_read_holding_registers+0x24>
    return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 8004024:	2302      	movs	r3, #2
 8004026:	e015      	b.n	8004054 <handler_read_holding_registers+0x50>

  // Read our registers values into registers_out
  for (int i = 0; i < quantity; i++)
 8004028:	2300      	movs	r3, #0
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	e00d      	b.n	800404a <handler_read_holding_registers+0x46>
    registers_out[i] = server_holding_registers[address + i];
 800402e:	89fa      	ldrh	r2, [r7, #14]
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	441a      	add	r2, r3
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	68b9      	ldr	r1, [r7, #8]
 800403a:	440b      	add	r3, r1
 800403c:	4908      	ldr	r1, [pc, #32]	; (8004060 <handler_read_holding_registers+0x5c>)
 800403e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004042:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < quantity; i++)
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	3301      	adds	r3, #1
 8004048:	617b      	str	r3, [r7, #20]
 800404a:	89bb      	ldrh	r3, [r7, #12]
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	429a      	cmp	r2, r3
 8004050:	dbed      	blt.n	800402e <handler_read_holding_registers+0x2a>

  return NMBS_ERROR_NONE;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	371c      	adds	r7, #28
 8004058:	46bd      	mov	sp, r7
 800405a:	bc80      	pop	{r7}
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	2000000c 	.word	0x2000000c

08004064 <handle_write_multiple_registers>:


nmbs_error handle_write_multiple_registers(uint16_t address, uint16_t quantity, const uint16_t* registers, uint8_t unit_id, void *arg) {
 8004064:	b480      	push	{r7}
 8004066:	b087      	sub	sp, #28
 8004068:	af00      	add	r7, sp, #0
 800406a:	60ba      	str	r2, [r7, #8]
 800406c:	461a      	mov	r2, r3
 800406e:	4603      	mov	r3, r0
 8004070:	81fb      	strh	r3, [r7, #14]
 8004072:	460b      	mov	r3, r1
 8004074:	81bb      	strh	r3, [r7, #12]
 8004076:	4613      	mov	r3, r2
 8004078:	71fb      	strb	r3, [r7, #7]
  if (address + quantity > HOLD_REGS_ADDR_MAX + 1)
 800407a:	89fa      	ldrh	r2, [r7, #14]
 800407c:	89bb      	ldrh	r3, [r7, #12]
 800407e:	4413      	add	r3, r2
 8004080:	2b0b      	cmp	r3, #11
 8004082:	dd01      	ble.n	8004088 <handle_write_multiple_registers+0x24>
    return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 8004084:	2302      	movs	r3, #2
 8004086:	e015      	b.n	80040b4 <handle_write_multiple_registers+0x50>

  // Write registers values to our server_holding_registers
  for (int i = 0; i < quantity; i++)
 8004088:	2300      	movs	r3, #0
 800408a:	617b      	str	r3, [r7, #20]
 800408c:	e00d      	b.n	80040aa <handle_write_multiple_registers+0x46>
	  server_holding_registers[address + i] = registers[i];
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	441a      	add	r2, r3
 8004096:	89f9      	ldrh	r1, [r7, #14]
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	440b      	add	r3, r1
 800409c:	8811      	ldrh	r1, [r2, #0]
 800409e:	4a08      	ldr	r2, [pc, #32]	; (80040c0 <handle_write_multiple_registers+0x5c>)
 80040a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < quantity; i++)
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	3301      	adds	r3, #1
 80040a8:	617b      	str	r3, [r7, #20]
 80040aa:	89bb      	ldrh	r3, [r7, #12]
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	dbed      	blt.n	800408e <handle_write_multiple_registers+0x2a>

  return NMBS_ERROR_NONE;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	371c      	adds	r7, #28
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bc80      	pop	{r7}
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	2000000c 	.word	0x2000000c

080040c4 <handle_write_single_registers>:

nmbs_error handle_write_single_registers(uint16_t address, uint16_t value, uint8_t unit_id, void *arg) {
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	607b      	str	r3, [r7, #4]
 80040cc:	4603      	mov	r3, r0
 80040ce:	81fb      	strh	r3, [r7, #14]
 80040d0:	460b      	mov	r3, r1
 80040d2:	81bb      	strh	r3, [r7, #12]
 80040d4:	4613      	mov	r3, r2
 80040d6:	72fb      	strb	r3, [r7, #11]
  if (address > HOLD_REGS_ADDR_MAX + 1)
 80040d8:	89fb      	ldrh	r3, [r7, #14]
 80040da:	2b0b      	cmp	r3, #11
 80040dc:	d901      	bls.n	80040e2 <handle_write_single_registers+0x1e>
    return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 80040de:	2302      	movs	r3, #2
 80040e0:	e005      	b.n	80040ee <handle_write_single_registers+0x2a>

  // Write register value to our server_holding_register

	  server_holding_registers[address] = value;
 80040e2:	89fb      	ldrh	r3, [r7, #14]
 80040e4:	4904      	ldr	r1, [pc, #16]	; (80040f8 <handle_write_single_registers+0x34>)
 80040e6:	89ba      	ldrh	r2, [r7, #12]
 80040e8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  return NMBS_ERROR_NONE;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bc80      	pop	{r7}
 80040f6:	4770      	bx	lr
 80040f8:	2000000c 	.word	0x2000000c

080040fc <handler_read_input_registers>:


nmbs_error handler_read_input_registers(uint16_t address, uint16_t quantity, uint16_t* registers_out, uint8_t unit_id, void *arg) {
 80040fc:	b480      	push	{r7}
 80040fe:	b087      	sub	sp, #28
 8004100:	af00      	add	r7, sp, #0
 8004102:	60ba      	str	r2, [r7, #8]
 8004104:	461a      	mov	r2, r3
 8004106:	4603      	mov	r3, r0
 8004108:	81fb      	strh	r3, [r7, #14]
 800410a:	460b      	mov	r3, r1
 800410c:	81bb      	strh	r3, [r7, #12]
 800410e:	4613      	mov	r3, r2
 8004110:	71fb      	strb	r3, [r7, #7]
  if (address + quantity > INPUT_REGS_ADDR_MAX + 1)
 8004112:	89fa      	ldrh	r2, [r7, #14]
 8004114:	89bb      	ldrh	r3, [r7, #12]
 8004116:	4413      	add	r3, r2
 8004118:	2b0b      	cmp	r3, #11
 800411a:	dd01      	ble.n	8004120 <handler_read_input_registers+0x24>
    return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 800411c:	2302      	movs	r3, #2
 800411e:	e015      	b.n	800414c <handler_read_input_registers+0x50>

  // Read our registers values into registers_out
  for (int i = 0; i < quantity; i++)
 8004120:	2300      	movs	r3, #0
 8004122:	617b      	str	r3, [r7, #20]
 8004124:	e00d      	b.n	8004142 <handler_read_input_registers+0x46>
    registers_out[i] = server_input_registers[address + i];
 8004126:	89fa      	ldrh	r2, [r7, #14]
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	441a      	add	r2, r3
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	68b9      	ldr	r1, [r7, #8]
 8004132:	440b      	add	r3, r1
 8004134:	4908      	ldr	r1, [pc, #32]	; (8004158 <handler_read_input_registers+0x5c>)
 8004136:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800413a:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < quantity; i++)
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	3301      	adds	r3, #1
 8004140:	617b      	str	r3, [r7, #20]
 8004142:	89bb      	ldrh	r3, [r7, #12]
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	429a      	cmp	r2, r3
 8004148:	dbed      	blt.n	8004126 <handler_read_input_registers+0x2a>

  return NMBS_ERROR_NONE;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	371c      	adds	r7, #28
 8004150:	46bd      	mov	sp, r7
 8004152:	bc80      	pop	{r7}
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	20000020 	.word	0x20000020

0800415c <nmbs_create>:
        nmbs->msg.broadcast = true;
}
#endif


nmbs_error nmbs_create(nmbs_t* nmbs, const nmbs_platform_conf* platform_conf) {
 800415c:	b590      	push	{r4, r7, lr}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
    if (!nmbs)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d102      	bne.n	8004172 <nmbs_create+0x16>
        return NMBS_ERROR_INVALID_ARGUMENT;
 800416c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004170:	e034      	b.n	80041dc <nmbs_create+0x80>

    memset(nmbs, 0, sizeof(nmbs_t));
 8004172:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8004176:	2100      	movs	r1, #0
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 fa3b 	bl	80045f4 <memset>

    nmbs->byte_timeout_ms = -1;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004184:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    nmbs->read_timeout_ms = -1;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800418e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

    if (!platform_conf)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d102      	bne.n	800419e <nmbs_create+0x42>
        return NMBS_ERROR_INVALID_ARGUMENT;
 8004198:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800419c:	e01e      	b.n	80041dc <nmbs_create+0x80>

    if (platform_conf->transport != NMBS_TRANSPORT_RTU && platform_conf->transport != NMBS_TRANSPORT_TCP)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d006      	beq.n	80041b4 <nmbs_create+0x58>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d002      	beq.n	80041b4 <nmbs_create+0x58>
        return NMBS_ERROR_INVALID_ARGUMENT;
 80041ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041b2:	e013      	b.n	80041dc <nmbs_create+0x80>

    if (!platform_conf->read || !platform_conf->write)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <nmbs_create+0x68>
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d102      	bne.n	80041ca <nmbs_create+0x6e>
        return NMBS_ERROR_INVALID_ARGUMENT;
 80041c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041c8:	e008      	b.n	80041dc <nmbs_create+0x80>

    nmbs->platform = *platform_conf;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80041d2:	4613      	mov	r3, r2
 80041d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    return NMBS_ERROR_NONE;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd90      	pop	{r4, r7, pc}

080041e4 <nmbs_set_read_timeout>:


void nmbs_set_read_timeout(nmbs_t* nmbs, int32_t timeout_ms) {
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
    nmbs->read_timeout_ms = timeout_ms;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bc80      	pop	{r7}
 80041fe:	4770      	bx	lr

08004200 <nmbs_set_byte_timeout>:


void nmbs_set_byte_timeout(nmbs_t* nmbs, int32_t timeout_ms) {
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
    nmbs->byte_timeout_ms = timeout_ms;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr

0800421c <nmbs_server_create>:
    return err;
}


nmbs_error nmbs_server_create(nmbs_t* nmbs, uint8_t address_rtu, const nmbs_platform_conf* platform_conf,
                              const nmbs_callbacks* callbacks) {
 800421c:	b5b0      	push	{r4, r5, r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	607a      	str	r2, [r7, #4]
 8004226:	603b      	str	r3, [r7, #0]
 8004228:	460b      	mov	r3, r1
 800422a:	72fb      	strb	r3, [r7, #11]
    if (platform_conf->transport == NMBS_TRANSPORT_RTU && address_rtu == 0)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d105      	bne.n	8004240 <nmbs_server_create+0x24>
 8004234:	7afb      	ldrb	r3, [r7, #11]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d102      	bne.n	8004240 <nmbs_server_create+0x24>
        return NMBS_ERROR_INVALID_ARGUMENT;
 800423a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800423e:	e01e      	b.n	800427e <nmbs_server_create+0x62>

    nmbs_error ret = nmbs_create(nmbs, platform_conf);
 8004240:	6879      	ldr	r1, [r7, #4]
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f7ff ff8a 	bl	800415c <nmbs_create>
 8004248:	4603      	mov	r3, r0
 800424a:	75fb      	strb	r3, [r7, #23]
    if (ret != NMBS_ERROR_NONE)
 800424c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d002      	beq.n	800425a <nmbs_server_create+0x3e>
        return ret;
 8004254:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004258:	e011      	b.n	800427e <nmbs_server_create+0x62>

    nmbs->address_rtu = address_rtu;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	7afa      	ldrb	r2, [r7, #11]
 800425e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
    nmbs->callbacks = *callbacks;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 800426a:	4615      	mov	r5, r2
 800426c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800426e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004274:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004278:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    return NMBS_ERROR_NONE;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3718      	adds	r7, #24
 8004282:	46bd      	mov	sp, r7
 8004284:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004288 <lkv_stepmotor_coil_setval>:

#define DRIVER_PIN_4_PORT    GPIOB
#define DRIVER_PIN_4         GPIO_PIN_4


void lkv_stepmotor_coil_setval(uint8_t _valin1, uint8_t _valin2, uint8_t _valin3, uint8_t _valin4){
 8004288:	b590      	push	{r4, r7, lr}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	4604      	mov	r4, r0
 8004290:	4608      	mov	r0, r1
 8004292:	4611      	mov	r1, r2
 8004294:	461a      	mov	r2, r3
 8004296:	4623      	mov	r3, r4
 8004298:	71fb      	strb	r3, [r7, #7]
 800429a:	4603      	mov	r3, r0
 800429c:	71bb      	strb	r3, [r7, #6]
 800429e:	460b      	mov	r3, r1
 80042a0:	717b      	strb	r3, [r7, #5]
 80042a2:	4613      	mov	r3, r2
 80042a4:	713b      	strb	r3, [r7, #4]
	HAL_GPIO_WritePin(DRIVER_PIN_1_PORT, DRIVER_PIN_1, _valin1);
 80042a6:	79fb      	ldrb	r3, [r7, #7]
 80042a8:	461a      	mov	r2, r3
 80042aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80042ae:	480c      	ldr	r0, [pc, #48]	; (80042e0 <lkv_stepmotor_coil_setval+0x58>)
 80042b0:	f7fc fdb5 	bl	8000e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRIVER_PIN_2_PORT, DRIVER_PIN_2, _valin2);
 80042b4:	79bb      	ldrb	r3, [r7, #6]
 80042b6:	461a      	mov	r2, r3
 80042b8:	2108      	movs	r1, #8
 80042ba:	480a      	ldr	r0, [pc, #40]	; (80042e4 <lkv_stepmotor_coil_setval+0x5c>)
 80042bc:	f7fc fdaf 	bl	8000e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRIVER_PIN_3_PORT, DRIVER_PIN_3, _valin3);
 80042c0:	797b      	ldrb	r3, [r7, #5]
 80042c2:	461a      	mov	r2, r3
 80042c4:	2120      	movs	r1, #32
 80042c6:	4807      	ldr	r0, [pc, #28]	; (80042e4 <lkv_stepmotor_coil_setval+0x5c>)
 80042c8:	f7fc fda9 	bl	8000e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRIVER_PIN_4_PORT, DRIVER_PIN_4, _valin4);
 80042cc:	793b      	ldrb	r3, [r7, #4]
 80042ce:	461a      	mov	r2, r3
 80042d0:	2110      	movs	r1, #16
 80042d2:	4804      	ldr	r0, [pc, #16]	; (80042e4 <lkv_stepmotor_coil_setval+0x5c>)
 80042d4:	f7fc fda3 	bl	8000e1e <HAL_GPIO_WritePin>
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd90      	pop	{r4, r7, pc}
 80042e0:	40020000 	.word	0x40020000
 80042e4:	40020400 	.word	0x40020400

080042e8 <lkv_stepmotor_run_up>:


void lkv_stepmotor_run_up(uint32_t _speed){
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08a      	sub	sp, #40	; 0x28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
	lkv_stepmotor_coil_setval(1,0,0,0);
 80042f0:	2300      	movs	r3, #0
 80042f2:	2200      	movs	r2, #0
 80042f4:	2100      	movs	r1, #0
 80042f6:	2001      	movs	r0, #1
 80042f8:	f7ff ffc6 	bl	8004288 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 80042fc:	2300      	movs	r3, #0
 80042fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004300:	e002      	b.n	8004308 <lkv_stepmotor_run_up+0x20>
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	3301      	adds	r3, #1
 8004306:	627b      	str	r3, [r7, #36]	; 0x24
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	429a      	cmp	r2, r3
 800430e:	d8f8      	bhi.n	8004302 <lkv_stepmotor_run_up+0x1a>
	lkv_stepmotor_coil_setval(1,1,0,0);
 8004310:	2300      	movs	r3, #0
 8004312:	2200      	movs	r2, #0
 8004314:	2101      	movs	r1, #1
 8004316:	2001      	movs	r0, #1
 8004318:	f7ff ffb6 	bl	8004288 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 800431c:	2300      	movs	r3, #0
 800431e:	623b      	str	r3, [r7, #32]
 8004320:	e002      	b.n	8004328 <lkv_stepmotor_run_up+0x40>
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	3301      	adds	r3, #1
 8004326:	623b      	str	r3, [r7, #32]
 8004328:	6a3b      	ldr	r3, [r7, #32]
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	429a      	cmp	r2, r3
 800432e:	d8f8      	bhi.n	8004322 <lkv_stepmotor_run_up+0x3a>
	lkv_stepmotor_coil_setval(0,1,0,0);
 8004330:	2300      	movs	r3, #0
 8004332:	2200      	movs	r2, #0
 8004334:	2101      	movs	r1, #1
 8004336:	2000      	movs	r0, #0
 8004338:	f7ff ffa6 	bl	8004288 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 800433c:	2300      	movs	r3, #0
 800433e:	61fb      	str	r3, [r7, #28]
 8004340:	e002      	b.n	8004348 <lkv_stepmotor_run_up+0x60>
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	3301      	adds	r3, #1
 8004346:	61fb      	str	r3, [r7, #28]
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	429a      	cmp	r2, r3
 800434e:	d8f8      	bhi.n	8004342 <lkv_stepmotor_run_up+0x5a>
	lkv_stepmotor_coil_setval(0,1,1,0);
 8004350:	2300      	movs	r3, #0
 8004352:	2201      	movs	r2, #1
 8004354:	2101      	movs	r1, #1
 8004356:	2000      	movs	r0, #0
 8004358:	f7ff ff96 	bl	8004288 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 800435c:	2300      	movs	r3, #0
 800435e:	61bb      	str	r3, [r7, #24]
 8004360:	e002      	b.n	8004368 <lkv_stepmotor_run_up+0x80>
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	3301      	adds	r3, #1
 8004366:	61bb      	str	r3, [r7, #24]
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	429a      	cmp	r2, r3
 800436e:	d8f8      	bhi.n	8004362 <lkv_stepmotor_run_up+0x7a>
	lkv_stepmotor_coil_setval(0,0,1,0);
 8004370:	2300      	movs	r3, #0
 8004372:	2201      	movs	r2, #1
 8004374:	2100      	movs	r1, #0
 8004376:	2000      	movs	r0, #0
 8004378:	f7ff ff86 	bl	8004288 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 800437c:	2300      	movs	r3, #0
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	e002      	b.n	8004388 <lkv_stepmotor_run_up+0xa0>
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	3301      	adds	r3, #1
 8004386:	617b      	str	r3, [r7, #20]
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	429a      	cmp	r2, r3
 800438e:	d8f8      	bhi.n	8004382 <lkv_stepmotor_run_up+0x9a>
	lkv_stepmotor_coil_setval(0,0,1,1);
 8004390:	2301      	movs	r3, #1
 8004392:	2201      	movs	r2, #1
 8004394:	2100      	movs	r1, #0
 8004396:	2000      	movs	r0, #0
 8004398:	f7ff ff76 	bl	8004288 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 800439c:	2300      	movs	r3, #0
 800439e:	613b      	str	r3, [r7, #16]
 80043a0:	e002      	b.n	80043a8 <lkv_stepmotor_run_up+0xc0>
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	3301      	adds	r3, #1
 80043a6:	613b      	str	r3, [r7, #16]
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d8f8      	bhi.n	80043a2 <lkv_stepmotor_run_up+0xba>
	lkv_stepmotor_coil_setval(0,0,0,1);
 80043b0:	2301      	movs	r3, #1
 80043b2:	2200      	movs	r2, #0
 80043b4:	2100      	movs	r1, #0
 80043b6:	2000      	movs	r0, #0
 80043b8:	f7ff ff66 	bl	8004288 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 80043bc:	2300      	movs	r3, #0
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	e002      	b.n	80043c8 <lkv_stepmotor_run_up+0xe0>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	3301      	adds	r3, #1
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d8f8      	bhi.n	80043c2 <lkv_stepmotor_run_up+0xda>
	lkv_stepmotor_coil_setval(1,0,0,1);
 80043d0:	2301      	movs	r3, #1
 80043d2:	2200      	movs	r2, #0
 80043d4:	2100      	movs	r1, #0
 80043d6:	2001      	movs	r0, #1
 80043d8:	f7ff ff56 	bl	8004288 <lkv_stepmotor_coil_setval>
}
 80043dc:	bf00      	nop
 80043de:	3728      	adds	r7, #40	; 0x28
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <lkv_stepmotor_run_down>:


void lkv_stepmotor_run_down(uint32_t _speed){
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08a      	sub	sp, #40	; 0x28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
	lkv_stepmotor_coil_setval(0,0,0,1);
 80043ec:	2301      	movs	r3, #1
 80043ee:	2200      	movs	r2, #0
 80043f0:	2100      	movs	r1, #0
 80043f2:	2000      	movs	r0, #0
 80043f4:	f7ff ff48 	bl	8004288 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 80043f8:	2300      	movs	r3, #0
 80043fa:	627b      	str	r3, [r7, #36]	; 0x24
 80043fc:	e002      	b.n	8004404 <lkv_stepmotor_run_down+0x20>
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	3301      	adds	r3, #1
 8004402:	627b      	str	r3, [r7, #36]	; 0x24
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	429a      	cmp	r2, r3
 800440a:	d8f8      	bhi.n	80043fe <lkv_stepmotor_run_down+0x1a>
	lkv_stepmotor_coil_setval(0,0,1,1);
 800440c:	2301      	movs	r3, #1
 800440e:	2201      	movs	r2, #1
 8004410:	2100      	movs	r1, #0
 8004412:	2000      	movs	r0, #0
 8004414:	f7ff ff38 	bl	8004288 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 8004418:	2300      	movs	r3, #0
 800441a:	623b      	str	r3, [r7, #32]
 800441c:	e002      	b.n	8004424 <lkv_stepmotor_run_down+0x40>
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	3301      	adds	r3, #1
 8004422:	623b      	str	r3, [r7, #32]
 8004424:	6a3b      	ldr	r3, [r7, #32]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	429a      	cmp	r2, r3
 800442a:	d8f8      	bhi.n	800441e <lkv_stepmotor_run_down+0x3a>
	lkv_stepmotor_coil_setval(0,0,1,0);
 800442c:	2300      	movs	r3, #0
 800442e:	2201      	movs	r2, #1
 8004430:	2100      	movs	r1, #0
 8004432:	2000      	movs	r0, #0
 8004434:	f7ff ff28 	bl	8004288 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 8004438:	2300      	movs	r3, #0
 800443a:	61fb      	str	r3, [r7, #28]
 800443c:	e002      	b.n	8004444 <lkv_stepmotor_run_down+0x60>
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	3301      	adds	r3, #1
 8004442:	61fb      	str	r3, [r7, #28]
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	429a      	cmp	r2, r3
 800444a:	d8f8      	bhi.n	800443e <lkv_stepmotor_run_down+0x5a>
	lkv_stepmotor_coil_setval(0,1,1,0);
 800444c:	2300      	movs	r3, #0
 800444e:	2201      	movs	r2, #1
 8004450:	2101      	movs	r1, #1
 8004452:	2000      	movs	r0, #0
 8004454:	f7ff ff18 	bl	8004288 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 8004458:	2300      	movs	r3, #0
 800445a:	61bb      	str	r3, [r7, #24]
 800445c:	e002      	b.n	8004464 <lkv_stepmotor_run_down+0x80>
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	3301      	adds	r3, #1
 8004462:	61bb      	str	r3, [r7, #24]
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	429a      	cmp	r2, r3
 800446a:	d8f8      	bhi.n	800445e <lkv_stepmotor_run_down+0x7a>
	lkv_stepmotor_coil_setval(0,1,0,0);
 800446c:	2300      	movs	r3, #0
 800446e:	2200      	movs	r2, #0
 8004470:	2101      	movs	r1, #1
 8004472:	2000      	movs	r0, #0
 8004474:	f7ff ff08 	bl	8004288 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 8004478:	2300      	movs	r3, #0
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	e002      	b.n	8004484 <lkv_stepmotor_run_down+0xa0>
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	3301      	adds	r3, #1
 8004482:	617b      	str	r3, [r7, #20]
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	429a      	cmp	r2, r3
 800448a:	d8f8      	bhi.n	800447e <lkv_stepmotor_run_down+0x9a>
	lkv_stepmotor_coil_setval(1,1,0,0);
 800448c:	2300      	movs	r3, #0
 800448e:	2200      	movs	r2, #0
 8004490:	2101      	movs	r1, #1
 8004492:	2001      	movs	r0, #1
 8004494:	f7ff fef8 	bl	8004288 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 8004498:	2300      	movs	r3, #0
 800449a:	613b      	str	r3, [r7, #16]
 800449c:	e002      	b.n	80044a4 <lkv_stepmotor_run_down+0xc0>
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	3301      	adds	r3, #1
 80044a2:	613b      	str	r3, [r7, #16]
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d8f8      	bhi.n	800449e <lkv_stepmotor_run_down+0xba>
	lkv_stepmotor_coil_setval(1,0,0,0);
 80044ac:	2300      	movs	r3, #0
 80044ae:	2200      	movs	r2, #0
 80044b0:	2100      	movs	r1, #0
 80044b2:	2001      	movs	r0, #1
 80044b4:	f7ff fee8 	bl	8004288 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 80044b8:	2300      	movs	r3, #0
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	e002      	b.n	80044c4 <lkv_stepmotor_run_down+0xe0>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	3301      	adds	r3, #1
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d8f8      	bhi.n	80044be <lkv_stepmotor_run_down+0xda>
	lkv_stepmotor_coil_setval(1,0,0,1);
 80044cc:	2301      	movs	r3, #1
 80044ce:	2200      	movs	r2, #0
 80044d0:	2100      	movs	r1, #0
 80044d2:	2001      	movs	r0, #1
 80044d4:	f7ff fed8 	bl	8004288 <lkv_stepmotor_coil_setval>
}
 80044d8:	bf00      	nop
 80044da:	3728      	adds	r7, #40	; 0x28
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <lkv_stepmotor_gpio_init>:




void lkv_stepmotor_gpio_init(void){
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b088      	sub	sp, #32
 80044e4:	af00      	add	r7, sp, #0

	/* enable GPIO LCD PORTs clock */

	 __HAL_RCC_GPIOA_CLK_ENABLE();
 80044e6:	4b25      	ldr	r3, [pc, #148]	; (800457c <lkv_stepmotor_gpio_init+0x9c>)
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	4a24      	ldr	r2, [pc, #144]	; (800457c <lkv_stepmotor_gpio_init+0x9c>)
 80044ec:	f043 0301 	orr.w	r3, r3, #1
 80044f0:	61d3      	str	r3, [r2, #28]
 80044f2:	4b22      	ldr	r3, [pc, #136]	; (800457c <lkv_stepmotor_gpio_init+0x9c>)
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	60bb      	str	r3, [r7, #8]
 80044fc:	68bb      	ldr	r3, [r7, #8]
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 80044fe:	4b1f      	ldr	r3, [pc, #124]	; (800457c <lkv_stepmotor_gpio_init+0x9c>)
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	4a1e      	ldr	r2, [pc, #120]	; (800457c <lkv_stepmotor_gpio_init+0x9c>)
 8004504:	f043 0302 	orr.w	r3, r3, #2
 8004508:	61d3      	str	r3, [r2, #28]
 800450a:	4b1c      	ldr	r3, [pc, #112]	; (800457c <lkv_stepmotor_gpio_init+0x9c>)
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	607b      	str	r3, [r7, #4]
 8004514:	687b      	ldr	r3, [r7, #4]

	/* enable GPIO LCD PINs */

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004516:	f107 030c 	add.w	r3, r7, #12
 800451a:	2200      	movs	r2, #0
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	605a      	str	r2, [r3, #4]
 8004520:	609a      	str	r2, [r3, #8]
 8004522:	60da      	str	r2, [r3, #12]
 8004524:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004526:	2301      	movs	r3, #1
 8004528:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452a:	2300      	movs	r3, #0
 800452c:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800452e:	2302      	movs	r3, #2
 8004530:	61bb      	str	r3, [r7, #24]

	  GPIO_InitStruct.Pin = DRIVER_PIN_1;
 8004532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004536:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(DRIVER_PIN_1_PORT, &GPIO_InitStruct);
 8004538:	f107 030c 	add.w	r3, r7, #12
 800453c:	4619      	mov	r1, r3
 800453e:	4810      	ldr	r0, [pc, #64]	; (8004580 <lkv_stepmotor_gpio_init+0xa0>)
 8004540:	f7fc fac6 	bl	8000ad0 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = DRIVER_PIN_2;
 8004544:	2308      	movs	r3, #8
 8004546:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(DRIVER_PIN_2_PORT, &GPIO_InitStruct);
 8004548:	f107 030c 	add.w	r3, r7, #12
 800454c:	4619      	mov	r1, r3
 800454e:	480d      	ldr	r0, [pc, #52]	; (8004584 <lkv_stepmotor_gpio_init+0xa4>)
 8004550:	f7fc fabe 	bl	8000ad0 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = DRIVER_PIN_3;
 8004554:	2320      	movs	r3, #32
 8004556:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(DRIVER_PIN_3_PORT, &GPIO_InitStruct);
 8004558:	f107 030c 	add.w	r3, r7, #12
 800455c:	4619      	mov	r1, r3
 800455e:	4809      	ldr	r0, [pc, #36]	; (8004584 <lkv_stepmotor_gpio_init+0xa4>)
 8004560:	f7fc fab6 	bl	8000ad0 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = DRIVER_PIN_4;
 8004564:	2310      	movs	r3, #16
 8004566:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(DRIVER_PIN_4_PORT, &GPIO_InitStruct);
 8004568:	f107 030c 	add.w	r3, r7, #12
 800456c:	4619      	mov	r1, r3
 800456e:	4805      	ldr	r0, [pc, #20]	; (8004584 <lkv_stepmotor_gpio_init+0xa4>)
 8004570:	f7fc faae 	bl	8000ad0 <HAL_GPIO_Init>

}
 8004574:	bf00      	nop
 8004576:	3720      	adds	r7, #32
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40023800 	.word	0x40023800
 8004580:	40020000 	.word	0x40020000
 8004584:	40020400 	.word	0x40020400

08004588 <lkv_stepmotor_process>:




void lkv_stepmotor_process(uint8_t _direction, uint32_t _speed, uint32_t _number_step){
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	4603      	mov	r3, r0
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
 8004594:	73fb      	strb	r3, [r7, #15]

	if(_direction == STEP_DIR_DOWN){
 8004596:	7bfb      	ldrb	r3, [r7, #15]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d10d      	bne.n	80045b8 <lkv_stepmotor_process+0x30>

		for(int i = 0; i < _number_step; i++){
 800459c:	2300      	movs	r3, #0
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	e005      	b.n	80045ae <lkv_stepmotor_process+0x26>
			lkv_stepmotor_run_down(_speed);
 80045a2:	68b8      	ldr	r0, [r7, #8]
 80045a4:	f7ff ff1e 	bl	80043e4 <lkv_stepmotor_run_down>
		for(int i = 0; i < _number_step; i++){
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	3301      	adds	r3, #1
 80045ac:	617b      	str	r3, [r7, #20]
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d8f5      	bhi.n	80045a2 <lkv_stepmotor_process+0x1a>
		}

		return;
 80045b6:	e01a      	b.n	80045ee <lkv_stepmotor_process+0x66>
	}

	if(_direction == STEP_DIR_UP){
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10d      	bne.n	80045da <lkv_stepmotor_process+0x52>
		for(int i = 0; i < _number_step; i++){
 80045be:	2300      	movs	r3, #0
 80045c0:	613b      	str	r3, [r7, #16]
 80045c2:	e005      	b.n	80045d0 <lkv_stepmotor_process+0x48>
			lkv_stepmotor_run_up(_speed);
 80045c4:	68b8      	ldr	r0, [r7, #8]
 80045c6:	f7ff fe8f 	bl	80042e8 <lkv_stepmotor_run_up>
		for(int i = 0; i < _number_step; i++){
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	3301      	adds	r3, #1
 80045ce:	613b      	str	r3, [r7, #16]
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d8f5      	bhi.n	80045c4 <lkv_stepmotor_process+0x3c>
		}
		return;
 80045d8:	e009      	b.n	80045ee <lkv_stepmotor_process+0x66>
	}

	if(_direction == STEP_STOP){
 80045da:	7bfb      	ldrb	r3, [r7, #15]
 80045dc:	2b03      	cmp	r3, #3
 80045de:	d105      	bne.n	80045ec <lkv_stepmotor_process+0x64>
		lkv_stepmotor_coil_setval(0,0,0,0);
 80045e0:	2300      	movs	r3, #0
 80045e2:	2200      	movs	r2, #0
 80045e4:	2100      	movs	r1, #0
 80045e6:	2000      	movs	r0, #0
 80045e8:	f7ff fe4e 	bl	8004288 <lkv_stepmotor_coil_setval>
	}


return;
 80045ec:	bf00      	nop
}
 80045ee:	3718      	adds	r7, #24
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <memset>:
 80045f4:	4603      	mov	r3, r0
 80045f6:	4402      	add	r2, r0
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d100      	bne.n	80045fe <memset+0xa>
 80045fc:	4770      	bx	lr
 80045fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004602:	e7f9      	b.n	80045f8 <memset+0x4>

08004604 <__libc_init_array>:
 8004604:	b570      	push	{r4, r5, r6, lr}
 8004606:	2600      	movs	r6, #0
 8004608:	4d0c      	ldr	r5, [pc, #48]	; (800463c <__libc_init_array+0x38>)
 800460a:	4c0d      	ldr	r4, [pc, #52]	; (8004640 <__libc_init_array+0x3c>)
 800460c:	1b64      	subs	r4, r4, r5
 800460e:	10a4      	asrs	r4, r4, #2
 8004610:	42a6      	cmp	r6, r4
 8004612:	d109      	bne.n	8004628 <__libc_init_array+0x24>
 8004614:	f000 f81a 	bl	800464c <_init>
 8004618:	2600      	movs	r6, #0
 800461a:	4d0a      	ldr	r5, [pc, #40]	; (8004644 <__libc_init_array+0x40>)
 800461c:	4c0a      	ldr	r4, [pc, #40]	; (8004648 <__libc_init_array+0x44>)
 800461e:	1b64      	subs	r4, r4, r5
 8004620:	10a4      	asrs	r4, r4, #2
 8004622:	42a6      	cmp	r6, r4
 8004624:	d105      	bne.n	8004632 <__libc_init_array+0x2e>
 8004626:	bd70      	pop	{r4, r5, r6, pc}
 8004628:	f855 3b04 	ldr.w	r3, [r5], #4
 800462c:	4798      	blx	r3
 800462e:	3601      	adds	r6, #1
 8004630:	e7ee      	b.n	8004610 <__libc_init_array+0xc>
 8004632:	f855 3b04 	ldr.w	r3, [r5], #4
 8004636:	4798      	blx	r3
 8004638:	3601      	adds	r6, #1
 800463a:	e7f2      	b.n	8004622 <__libc_init_array+0x1e>
 800463c:	080046b0 	.word	0x080046b0
 8004640:	080046b0 	.word	0x080046b0
 8004644:	080046b0 	.word	0x080046b0
 8004648:	080046b4 	.word	0x080046b4

0800464c <_init>:
 800464c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800464e:	bf00      	nop
 8004650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004652:	bc08      	pop	{r3}
 8004654:	469e      	mov	lr, r3
 8004656:	4770      	bx	lr

08004658 <_fini>:
 8004658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465a:	bf00      	nop
 800465c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800465e:	bc08      	pop	{r3}
 8004660:	469e      	mov	lr, r3
 8004662:	4770      	bx	lr
