
Project_bms_elevator_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cf8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08006e88  08006e88  00016e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f48  08006f48  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  08006f48  08006f48  00016f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f50  08006f50  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f50  08006f50  00016f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f54  08006f54  00016f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08006f58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b4  2**0
                  CONTENTS
 10 .bss          000008c8  200000b4  200000b4  000200b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000097c  2000097c  000200b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000e7a3  00000000  00000000  00020127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002668  00000000  00000000  0002e8ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ce0  00000000  00000000  00030f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009e6  00000000  00000000  00031c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020d98  00000000  00000000  000325fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000eff3  00000000  00000000  00053396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c5be0  00000000  00000000  00062389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003a30  00000000  00000000  00127f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0012b99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b4 	.word	0x200000b4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006e70 	.word	0x08006e70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b8 	.word	0x200000b8
 80001cc:	08006e70 	.word	0x08006e70

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	4b10      	ldr	r3, [pc, #64]	; (80005b8 <HAL_MspInit+0x4c>)
 8000578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800057a:	4a0f      	ldr	r2, [pc, #60]	; (80005b8 <HAL_MspInit+0x4c>)
 800057c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000580:	6453      	str	r3, [r2, #68]	; 0x44
 8000582:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <HAL_MspInit+0x4c>)
 8000584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	603b      	str	r3, [r7, #0]
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <HAL_MspInit+0x4c>)
 8000594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000596:	4a08      	ldr	r2, [pc, #32]	; (80005b8 <HAL_MspInit+0x4c>)
 8000598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059c:	6413      	str	r3, [r2, #64]	; 0x40
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <HAL_MspInit+0x4c>)
 80005a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a6:	603b      	str	r3, [r7, #0]
 80005a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	40023800 	.word	0x40023800

080005bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08a      	sub	sp, #40	; 0x28
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a19      	ldr	r2, [pc, #100]	; (8000640 <HAL_SPI_MspInit+0x84>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d12b      	bne.n	8000636 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]
 80005e2:	4b18      	ldr	r3, [pc, #96]	; (8000644 <HAL_SPI_MspInit+0x88>)
 80005e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005e6:	4a17      	ldr	r2, [pc, #92]	; (8000644 <HAL_SPI_MspInit+0x88>)
 80005e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005ec:	6453      	str	r3, [r2, #68]	; 0x44
 80005ee:	4b15      	ldr	r3, [pc, #84]	; (8000644 <HAL_SPI_MspInit+0x88>)
 80005f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005f6:	613b      	str	r3, [r7, #16]
 80005f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <HAL_SPI_MspInit+0x88>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a10      	ldr	r2, [pc, #64]	; (8000644 <HAL_SPI_MspInit+0x88>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <HAL_SPI_MspInit+0x88>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0302 	and.w	r3, r3, #2
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000616:	2328      	movs	r3, #40	; 0x28
 8000618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800061a:	2302      	movs	r3, #2
 800061c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000622:	2303      	movs	r3, #3
 8000624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000626:	2305      	movs	r3, #5
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	4619      	mov	r1, r3
 8000630:	4805      	ldr	r0, [pc, #20]	; (8000648 <HAL_SPI_MspInit+0x8c>)
 8000632:	f000 fb67 	bl	8000d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000636:	bf00      	nop
 8000638:	3728      	adds	r7, #40	; 0x28
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40013000 	.word	0x40013000
 8000644:	40023800 	.word	0x40023800
 8000648:	40020400 	.word	0x40020400

0800064c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08c      	sub	sp, #48	; 0x30
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a3a      	ldr	r2, [pc, #232]	; (8000754 <HAL_UART_MspInit+0x108>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d134      	bne.n	80006d8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	61bb      	str	r3, [r7, #24]
 8000672:	4b39      	ldr	r3, [pc, #228]	; (8000758 <HAL_UART_MspInit+0x10c>)
 8000674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000676:	4a38      	ldr	r2, [pc, #224]	; (8000758 <HAL_UART_MspInit+0x10c>)
 8000678:	f043 0310 	orr.w	r3, r3, #16
 800067c:	6453      	str	r3, [r2, #68]	; 0x44
 800067e:	4b36      	ldr	r3, [pc, #216]	; (8000758 <HAL_UART_MspInit+0x10c>)
 8000680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000682:	f003 0310 	and.w	r3, r3, #16
 8000686:	61bb      	str	r3, [r7, #24]
 8000688:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
 800068e:	4b32      	ldr	r3, [pc, #200]	; (8000758 <HAL_UART_MspInit+0x10c>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a31      	ldr	r2, [pc, #196]	; (8000758 <HAL_UART_MspInit+0x10c>)
 8000694:	f043 0302 	orr.w	r3, r3, #2
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b2f      	ldr	r3, [pc, #188]	; (8000758 <HAL_UART_MspInit+0x10c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0302 	and.w	r3, r3, #2
 80006a2:	617b      	str	r3, [r7, #20]
 80006a4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006a6:	23c0      	movs	r3, #192	; 0xc0
 80006a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006aa:	2302      	movs	r3, #2
 80006ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b2:	2303      	movs	r3, #3
 80006b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80006b6:	2307      	movs	r3, #7
 80006b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	4619      	mov	r1, r3
 80006c0:	4826      	ldr	r0, [pc, #152]	; (800075c <HAL_UART_MspInit+0x110>)
 80006c2:	f000 fb1f 	bl	8000d04 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 2);
 80006c6:	2202      	movs	r2, #2
 80006c8:	2100      	movs	r1, #0
 80006ca:	2025      	movs	r0, #37	; 0x25
 80006cc:	f000 fa51 	bl	8000b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006d0:	2025      	movs	r0, #37	; 0x25
 80006d2:	f000 fa6a 	bl	8000baa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80006d6:	e039      	b.n	800074c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a20      	ldr	r2, [pc, #128]	; (8000760 <HAL_UART_MspInit+0x114>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d134      	bne.n	800074c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <HAL_UART_MspInit+0x10c>)
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	4a1b      	ldr	r2, [pc, #108]	; (8000758 <HAL_UART_MspInit+0x10c>)
 80006ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006f0:	6413      	str	r3, [r2, #64]	; 0x40
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <HAL_UART_MspInit+0x10c>)
 80006f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	4b15      	ldr	r3, [pc, #84]	; (8000758 <HAL_UART_MspInit+0x10c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a14      	ldr	r2, [pc, #80]	; (8000758 <HAL_UART_MspInit+0x10c>)
 8000708:	f043 0302 	orr.w	r3, r3, #2
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b12      	ldr	r3, [pc, #72]	; (8000758 <HAL_UART_MspInit+0x10c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0302 	and.w	r3, r3, #2
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800071a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800071e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000728:	2303      	movs	r3, #3
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800072c:	2307      	movs	r3, #7
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	4619      	mov	r1, r3
 8000736:	4809      	ldr	r0, [pc, #36]	; (800075c <HAL_UART_MspInit+0x110>)
 8000738:	f000 fae4 	bl	8000d04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 1);
 800073c:	2201      	movs	r2, #1
 800073e:	2100      	movs	r1, #0
 8000740:	2027      	movs	r0, #39	; 0x27
 8000742:	f000 fa16 	bl	8000b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000746:	2027      	movs	r0, #39	; 0x27
 8000748:	f000 fa2f 	bl	8000baa <HAL_NVIC_EnableIRQ>
}
 800074c:	bf00      	nop
 800074e:	3730      	adds	r7, #48	; 0x30
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40011000 	.word	0x40011000
 8000758:	40023800 	.word	0x40023800
 800075c:	40020400 	.word	0x40020400
 8000760:	40004800 	.word	0x40004800

08000764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000768:	e7fe      	b.n	8000768 <NMI_Handler+0x4>

0800076a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076e:	e7fe      	b.n	800076e <HardFault_Handler+0x4>

08000770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <MemManage_Handler+0x4>

08000776 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800077a:	e7fe      	b.n	800077a <BusFault_Handler+0x4>

0800077c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <UsageFault_Handler+0x4>

08000782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr

0800079e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007b4:	4a14      	ldr	r2, [pc, #80]	; (8000808 <_sbrk+0x5c>)
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <_sbrk+0x60>)
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007c0:	4b13      	ldr	r3, [pc, #76]	; (8000810 <_sbrk+0x64>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d102      	bne.n	80007ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <_sbrk+0x64>)
 80007ca:	4a12      	ldr	r2, [pc, #72]	; (8000814 <_sbrk+0x68>)
 80007cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <_sbrk+0x64>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4413      	add	r3, r2
 80007d6:	693a      	ldr	r2, [r7, #16]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d207      	bcs.n	80007ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007dc:	f005 ff88 	bl	80066f0 <__errno>
 80007e0:	4603      	mov	r3, r0
 80007e2:	220c      	movs	r2, #12
 80007e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007ea:	e009      	b.n	8000800 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <_sbrk+0x64>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007f2:	4b07      	ldr	r3, [pc, #28]	; (8000810 <_sbrk+0x64>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4413      	add	r3, r2
 80007fa:	4a05      	ldr	r2, [pc, #20]	; (8000810 <_sbrk+0x64>)
 80007fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007fe:	68fb      	ldr	r3, [r7, #12]
}
 8000800:	4618      	mov	r0, r3
 8000802:	3718      	adds	r7, #24
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20020000 	.word	0x20020000
 800080c:	00000400 	.word	0x00000400
 8000810:	200000d0 	.word	0x200000d0
 8000814:	20000980 	.word	0x20000980

08000818 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <SystemInit+0x20>)
 800081e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000822:	4a05      	ldr	r2, [pc, #20]	; (8000838 <SystemInit+0x20>)
 8000824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800083c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000874 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000840:	480d      	ldr	r0, [pc, #52]	; (8000878 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000842:	490e      	ldr	r1, [pc, #56]	; (800087c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000844:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000848:	e002      	b.n	8000850 <LoopCopyDataInit>

0800084a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800084c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084e:	3304      	adds	r3, #4

08000850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000854:	d3f9      	bcc.n	800084a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000856:	4a0b      	ldr	r2, [pc, #44]	; (8000884 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000858:	4c0b      	ldr	r4, [pc, #44]	; (8000888 <LoopFillZerobss+0x26>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800085c:	e001      	b.n	8000862 <LoopFillZerobss>

0800085e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000860:	3204      	adds	r2, #4

08000862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000864:	d3fb      	bcc.n	800085e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000866:	f7ff ffd7 	bl	8000818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800086a:	f005 ff47 	bl	80066fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800086e:	f002 fe47 	bl	8003500 <main>
  bx  lr    
 8000872:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000874:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800087c:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8000880:	08006f58 	.word	0x08006f58
  ldr r2, =_sbss
 8000884:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8000888:	2000097c 	.word	0x2000097c

0800088c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800088c:	e7fe      	b.n	800088c <ADC_IRQHandler>
	...

08000890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000894:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <HAL_Init+0x40>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a0d      	ldr	r2, [pc, #52]	; (80008d0 <HAL_Init+0x40>)
 800089a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800089e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008a0:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <HAL_Init+0x40>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <HAL_Init+0x40>)
 80008a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <HAL_Init+0x40>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a07      	ldr	r2, [pc, #28]	; (80008d0 <HAL_Init+0x40>)
 80008b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b8:	2003      	movs	r0, #3
 80008ba:	f000 f94f 	bl	8000b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008be:	200f      	movs	r0, #15
 80008c0:	f000 f808 	bl	80008d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c4:	f7ff fe52 	bl	800056c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023c00 	.word	0x40023c00

080008d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <HAL_InitTick+0x54>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <HAL_InitTick+0x58>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 f967 	bl	8000bc6 <HAL_SYSTICK_Config>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	e00e      	b.n	8000920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b0f      	cmp	r3, #15
 8000906:	d80a      	bhi.n	800091e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000908:	2200      	movs	r2, #0
 800090a:	6879      	ldr	r1, [r7, #4]
 800090c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000910:	f000 f92f 	bl	8000b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000914:	4a06      	ldr	r2, [pc, #24]	; (8000930 <HAL_InitTick+0x5c>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800091a:	2300      	movs	r3, #0
 800091c:	e000      	b.n	8000920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
}
 8000920:	4618      	mov	r0, r3
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000000 	.word	0x20000000
 800092c:	20000008 	.word	0x20000008
 8000930:	20000004 	.word	0x20000004

08000934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_IncTick+0x20>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	461a      	mov	r2, r3
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HAL_IncTick+0x24>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4413      	add	r3, r2
 8000944:	4a04      	ldr	r2, [pc, #16]	; (8000958 <HAL_IncTick+0x24>)
 8000946:	6013      	str	r3, [r2, #0]
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	20000008 	.word	0x20000008
 8000958:	200000d4 	.word	0x200000d4

0800095c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  return uwTick;
 8000960:	4b03      	ldr	r3, [pc, #12]	; (8000970 <HAL_GetTick+0x14>)
 8000962:	681b      	ldr	r3, [r3, #0]
}
 8000964:	4618      	mov	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	200000d4 	.word	0x200000d4

08000974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800097c:	f7ff ffee 	bl	800095c <HAL_GetTick>
 8000980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800098c:	d005      	beq.n	800099a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <HAL_Delay+0x44>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	461a      	mov	r2, r3
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	4413      	add	r3, r2
 8000998:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800099a:	bf00      	nop
 800099c:	f7ff ffde 	bl	800095c <HAL_GetTick>
 80009a0:	4602      	mov	r2, r0
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d8f7      	bhi.n	800099c <HAL_Delay+0x28>
  {
  }
}
 80009ac:	bf00      	nop
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000008 	.word	0x20000008

080009bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009d8:	4013      	ands	r3, r2
 80009da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ee:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	60d3      	str	r3, [r2, #12]
}
 80009f4:	bf00      	nop
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a08:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <__NVIC_GetPriorityGrouping+0x18>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	0a1b      	lsrs	r3, r3, #8
 8000a0e:	f003 0307 	and.w	r3, r3, #7
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	db0b      	blt.n	8000a4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	f003 021f 	and.w	r2, r3, #31
 8000a38:	4907      	ldr	r1, [pc, #28]	; (8000a58 <__NVIC_EnableIRQ+0x38>)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	095b      	lsrs	r3, r3, #5
 8000a40:	2001      	movs	r0, #1
 8000a42:	fa00 f202 	lsl.w	r2, r0, r2
 8000a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000e100 	.word	0xe000e100

08000a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	6039      	str	r1, [r7, #0]
 8000a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	db0a      	blt.n	8000a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	490c      	ldr	r1, [pc, #48]	; (8000aa8 <__NVIC_SetPriority+0x4c>)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	0112      	lsls	r2, r2, #4
 8000a7c:	b2d2      	uxtb	r2, r2
 8000a7e:	440b      	add	r3, r1
 8000a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a84:	e00a      	b.n	8000a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	4908      	ldr	r1, [pc, #32]	; (8000aac <__NVIC_SetPriority+0x50>)
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	f003 030f 	and.w	r3, r3, #15
 8000a92:	3b04      	subs	r3, #4
 8000a94:	0112      	lsls	r2, r2, #4
 8000a96:	b2d2      	uxtb	r2, r2
 8000a98:	440b      	add	r3, r1
 8000a9a:	761a      	strb	r2, [r3, #24]
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000e100 	.word	0xe000e100
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b089      	sub	sp, #36	; 0x24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	f1c3 0307 	rsb	r3, r3, #7
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	bf28      	it	cs
 8000ace:	2304      	movcs	r3, #4
 8000ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	2b06      	cmp	r3, #6
 8000ad8:	d902      	bls.n	8000ae0 <NVIC_EncodePriority+0x30>
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3b03      	subs	r3, #3
 8000ade:	e000      	b.n	8000ae2 <NVIC_EncodePriority+0x32>
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	43da      	mvns	r2, r3
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	401a      	ands	r2, r3
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	fa01 f303 	lsl.w	r3, r1, r3
 8000b02:	43d9      	mvns	r1, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	4313      	orrs	r3, r2
         );
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3724      	adds	r7, #36	; 0x24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
	...

08000b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b28:	d301      	bcc.n	8000b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e00f      	b.n	8000b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <SysTick_Config+0x40>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b36:	210f      	movs	r1, #15
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b3c:	f7ff ff8e 	bl	8000a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <SysTick_Config+0x40>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b46:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <SysTick_Config+0x40>)
 8000b48:	2207      	movs	r2, #7
 8000b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	e000e010 	.word	0xe000e010

08000b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f7ff ff29 	bl	80009bc <__NVIC_SetPriorityGrouping>
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b086      	sub	sp, #24
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	4603      	mov	r3, r0
 8000b7a:	60b9      	str	r1, [r7, #8]
 8000b7c:	607a      	str	r2, [r7, #4]
 8000b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b84:	f7ff ff3e 	bl	8000a04 <__NVIC_GetPriorityGrouping>
 8000b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	68b9      	ldr	r1, [r7, #8]
 8000b8e:	6978      	ldr	r0, [r7, #20]
 8000b90:	f7ff ff8e 	bl	8000ab0 <NVIC_EncodePriority>
 8000b94:	4602      	mov	r2, r0
 8000b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ff5d 	bl	8000a5c <__NVIC_SetPriority>
}
 8000ba2:	bf00      	nop
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff31 	bl	8000a20 <__NVIC_EnableIRQ>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff ffa2 	bl	8000b18 <SysTick_Config>
 8000bd4:	4603      	mov	r3, r0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b084      	sub	sp, #16
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000bec:	f7ff feb6 	bl	800095c <HAL_GetTick>
 8000bf0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d008      	beq.n	8000c10 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2280      	movs	r2, #128	; 0x80
 8000c02:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2200      	movs	r2, #0
 8000c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e052      	b.n	8000cb6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f022 0216 	bic.w	r2, r2, #22
 8000c1e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	695a      	ldr	r2, [r3, #20]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c2e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d103      	bne.n	8000c40 <HAL_DMA_Abort+0x62>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d007      	beq.n	8000c50 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f022 0208 	bic.w	r2, r2, #8
 8000c4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f022 0201 	bic.w	r2, r2, #1
 8000c5e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c60:	e013      	b.n	8000c8a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c62:	f7ff fe7b 	bl	800095c <HAL_GetTick>
 8000c66:	4602      	mov	r2, r0
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	1ad3      	subs	r3, r2, r3
 8000c6c:	2b05      	cmp	r3, #5
 8000c6e:	d90c      	bls.n	8000c8a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2220      	movs	r2, #32
 8000c74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2203      	movs	r2, #3
 8000c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000c86:	2303      	movs	r3, #3
 8000c88:	e015      	b.n	8000cb6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d1e4      	bne.n	8000c62 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c9c:	223f      	movs	r2, #63	; 0x3f
 8000c9e:	409a      	lsls	r2, r3
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d004      	beq.n	8000cdc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2280      	movs	r2, #128	; 0x80
 8000cd6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e00c      	b.n	8000cf6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2205      	movs	r2, #5
 8000ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f022 0201 	bic.w	r2, r2, #1
 8000cf2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
	...

08000d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
 8000d1e:	e16b      	b.n	8000ff8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d20:	2201      	movs	r2, #1
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	f040 815a 	bne.w	8000ff2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 0303 	and.w	r3, r3, #3
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d005      	beq.n	8000d56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d130      	bne.n	8000db8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	2203      	movs	r2, #3
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	68da      	ldr	r2, [r3, #12]
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	091b      	lsrs	r3, r3, #4
 8000da2:	f003 0201 	and.w	r2, r3, #1
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	d017      	beq.n	8000df4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	2203      	movs	r2, #3
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d123      	bne.n	8000e48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	08da      	lsrs	r2, r3, #3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3208      	adds	r2, #8
 8000e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	f003 0307 	and.w	r3, r3, #7
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	220f      	movs	r2, #15
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	691a      	ldr	r2, [r3, #16]
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	08da      	lsrs	r2, r3, #3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3208      	adds	r2, #8
 8000e42:	69b9      	ldr	r1, [r7, #24]
 8000e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	2203      	movs	r2, #3
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0203 	and.w	r2, r3, #3
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f000 80b4 	beq.w	8000ff2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	4b60      	ldr	r3, [pc, #384]	; (8001010 <HAL_GPIO_Init+0x30c>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	4a5f      	ldr	r2, [pc, #380]	; (8001010 <HAL_GPIO_Init+0x30c>)
 8000e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e98:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9a:	4b5d      	ldr	r3, [pc, #372]	; (8001010 <HAL_GPIO_Init+0x30c>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ea6:	4a5b      	ldr	r2, [pc, #364]	; (8001014 <HAL_GPIO_Init+0x310>)
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	089b      	lsrs	r3, r3, #2
 8000eac:	3302      	adds	r3, #2
 8000eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f003 0303 	and.w	r3, r3, #3
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	220f      	movs	r2, #15
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a52      	ldr	r2, [pc, #328]	; (8001018 <HAL_GPIO_Init+0x314>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d02b      	beq.n	8000f2a <HAL_GPIO_Init+0x226>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a51      	ldr	r2, [pc, #324]	; (800101c <HAL_GPIO_Init+0x318>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d025      	beq.n	8000f26 <HAL_GPIO_Init+0x222>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a50      	ldr	r2, [pc, #320]	; (8001020 <HAL_GPIO_Init+0x31c>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d01f      	beq.n	8000f22 <HAL_GPIO_Init+0x21e>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a4f      	ldr	r2, [pc, #316]	; (8001024 <HAL_GPIO_Init+0x320>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d019      	beq.n	8000f1e <HAL_GPIO_Init+0x21a>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a4e      	ldr	r2, [pc, #312]	; (8001028 <HAL_GPIO_Init+0x324>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d013      	beq.n	8000f1a <HAL_GPIO_Init+0x216>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a4d      	ldr	r2, [pc, #308]	; (800102c <HAL_GPIO_Init+0x328>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d00d      	beq.n	8000f16 <HAL_GPIO_Init+0x212>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a4c      	ldr	r2, [pc, #304]	; (8001030 <HAL_GPIO_Init+0x32c>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d007      	beq.n	8000f12 <HAL_GPIO_Init+0x20e>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a4b      	ldr	r2, [pc, #300]	; (8001034 <HAL_GPIO_Init+0x330>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d101      	bne.n	8000f0e <HAL_GPIO_Init+0x20a>
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	e00e      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f0e:	2308      	movs	r3, #8
 8000f10:	e00c      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f12:	2306      	movs	r3, #6
 8000f14:	e00a      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f16:	2305      	movs	r3, #5
 8000f18:	e008      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	e006      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e004      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f22:	2302      	movs	r3, #2
 8000f24:	e002      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f26:	2301      	movs	r3, #1
 8000f28:	e000      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	69fa      	ldr	r2, [r7, #28]
 8000f2e:	f002 0203 	and.w	r2, r2, #3
 8000f32:	0092      	lsls	r2, r2, #2
 8000f34:	4093      	lsls	r3, r2
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f3c:	4935      	ldr	r1, [pc, #212]	; (8001014 <HAL_GPIO_Init+0x310>)
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	089b      	lsrs	r3, r3, #2
 8000f42:	3302      	adds	r3, #2
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f4a:	4b3b      	ldr	r3, [pc, #236]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f6e:	4a32      	ldr	r2, [pc, #200]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f74:	4b30      	ldr	r3, [pc, #192]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f98:	4a27      	ldr	r2, [pc, #156]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f9e:	4b26      	ldr	r3, [pc, #152]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fc2:	4a1d      	ldr	r2, [pc, #116]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fec:	4a12      	ldr	r2, [pc, #72]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	61fb      	str	r3, [r7, #28]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	2b0f      	cmp	r3, #15
 8000ffc:	f67f ae90 	bls.w	8000d20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3724      	adds	r7, #36	; 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800
 8001014:	40013800 	.word	0x40013800
 8001018:	40020000 	.word	0x40020000
 800101c:	40020400 	.word	0x40020400
 8001020:	40020800 	.word	0x40020800
 8001024:	40020c00 	.word	0x40020c00
 8001028:	40021000 	.word	0x40021000
 800102c:	40021400 	.word	0x40021400
 8001030:	40021800 	.word	0x40021800
 8001034:	40021c00 	.word	0x40021c00
 8001038:	40013c00 	.word	0x40013c00

0800103c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	807b      	strh	r3, [r7, #2]
 8001048:	4613      	mov	r3, r2
 800104a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800104c:	787b      	ldrb	r3, [r7, #1]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001052:	887a      	ldrh	r2, [r7, #2]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001058:	e003      	b.n	8001062 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800105a:	887b      	ldrh	r3, [r7, #2]
 800105c:	041a      	lsls	r2, r3, #16
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	619a      	str	r2, [r3, #24]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800107c:	695a      	ldr	r2, [r3, #20]
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	4013      	ands	r3, r2
 8001082:	2b00      	cmp	r3, #0
 8001084:	d006      	beq.n	8001094 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001086:	4a05      	ldr	r2, [pc, #20]	; (800109c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001088:	88fb      	ldrh	r3, [r7, #6]
 800108a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800108c:	88fb      	ldrh	r3, [r7, #6]
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f806 	bl	80010a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40013c00 	.word	0x40013c00

080010a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d101      	bne.n	80010ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e267      	b.n	800159a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d075      	beq.n	80011c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010d6:	4b88      	ldr	r3, [pc, #544]	; (80012f8 <HAL_RCC_OscConfig+0x240>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f003 030c 	and.w	r3, r3, #12
 80010de:	2b04      	cmp	r3, #4
 80010e0:	d00c      	beq.n	80010fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010e2:	4b85      	ldr	r3, [pc, #532]	; (80012f8 <HAL_RCC_OscConfig+0x240>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010ea:	2b08      	cmp	r3, #8
 80010ec:	d112      	bne.n	8001114 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ee:	4b82      	ldr	r3, [pc, #520]	; (80012f8 <HAL_RCC_OscConfig+0x240>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010fa:	d10b      	bne.n	8001114 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010fc:	4b7e      	ldr	r3, [pc, #504]	; (80012f8 <HAL_RCC_OscConfig+0x240>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d05b      	beq.n	80011c0 <HAL_RCC_OscConfig+0x108>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d157      	bne.n	80011c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e242      	b.n	800159a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800111c:	d106      	bne.n	800112c <HAL_RCC_OscConfig+0x74>
 800111e:	4b76      	ldr	r3, [pc, #472]	; (80012f8 <HAL_RCC_OscConfig+0x240>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a75      	ldr	r2, [pc, #468]	; (80012f8 <HAL_RCC_OscConfig+0x240>)
 8001124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	e01d      	b.n	8001168 <HAL_RCC_OscConfig+0xb0>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001134:	d10c      	bne.n	8001150 <HAL_RCC_OscConfig+0x98>
 8001136:	4b70      	ldr	r3, [pc, #448]	; (80012f8 <HAL_RCC_OscConfig+0x240>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a6f      	ldr	r2, [pc, #444]	; (80012f8 <HAL_RCC_OscConfig+0x240>)
 800113c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	4b6d      	ldr	r3, [pc, #436]	; (80012f8 <HAL_RCC_OscConfig+0x240>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a6c      	ldr	r2, [pc, #432]	; (80012f8 <HAL_RCC_OscConfig+0x240>)
 8001148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	e00b      	b.n	8001168 <HAL_RCC_OscConfig+0xb0>
 8001150:	4b69      	ldr	r3, [pc, #420]	; (80012f8 <HAL_RCC_OscConfig+0x240>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a68      	ldr	r2, [pc, #416]	; (80012f8 <HAL_RCC_OscConfig+0x240>)
 8001156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	4b66      	ldr	r3, [pc, #408]	; (80012f8 <HAL_RCC_OscConfig+0x240>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a65      	ldr	r2, [pc, #404]	; (80012f8 <HAL_RCC_OscConfig+0x240>)
 8001162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d013      	beq.n	8001198 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001170:	f7ff fbf4 	bl	800095c <HAL_GetTick>
 8001174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001176:	e008      	b.n	800118a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001178:	f7ff fbf0 	bl	800095c <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b64      	cmp	r3, #100	; 0x64
 8001184:	d901      	bls.n	800118a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e207      	b.n	800159a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118a:	4b5b      	ldr	r3, [pc, #364]	; (80012f8 <HAL_RCC_OscConfig+0x240>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d0f0      	beq.n	8001178 <HAL_RCC_OscConfig+0xc0>
 8001196:	e014      	b.n	80011c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001198:	f7ff fbe0 	bl	800095c <HAL_GetTick>
 800119c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800119e:	e008      	b.n	80011b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011a0:	f7ff fbdc 	bl	800095c <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b64      	cmp	r3, #100	; 0x64
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e1f3      	b.n	800159a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011b2:	4b51      	ldr	r3, [pc, #324]	; (80012f8 <HAL_RCC_OscConfig+0x240>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f0      	bne.n	80011a0 <HAL_RCC_OscConfig+0xe8>
 80011be:	e000      	b.n	80011c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d063      	beq.n	8001296 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ce:	4b4a      	ldr	r3, [pc, #296]	; (80012f8 <HAL_RCC_OscConfig+0x240>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 030c 	and.w	r3, r3, #12
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d00b      	beq.n	80011f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011da:	4b47      	ldr	r3, [pc, #284]	; (80012f8 <HAL_RCC_OscConfig+0x240>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011e2:	2b08      	cmp	r3, #8
 80011e4:	d11c      	bne.n	8001220 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011e6:	4b44      	ldr	r3, [pc, #272]	; (80012f8 <HAL_RCC_OscConfig+0x240>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d116      	bne.n	8001220 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011f2:	4b41      	ldr	r3, [pc, #260]	; (80012f8 <HAL_RCC_OscConfig+0x240>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d005      	beq.n	800120a <HAL_RCC_OscConfig+0x152>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d001      	beq.n	800120a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e1c7      	b.n	800159a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120a:	4b3b      	ldr	r3, [pc, #236]	; (80012f8 <HAL_RCC_OscConfig+0x240>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	4937      	ldr	r1, [pc, #220]	; (80012f8 <HAL_RCC_OscConfig+0x240>)
 800121a:	4313      	orrs	r3, r2
 800121c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800121e:	e03a      	b.n	8001296 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d020      	beq.n	800126a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001228:	4b34      	ldr	r3, [pc, #208]	; (80012fc <HAL_RCC_OscConfig+0x244>)
 800122a:	2201      	movs	r2, #1
 800122c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800122e:	f7ff fb95 	bl	800095c <HAL_GetTick>
 8001232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001234:	e008      	b.n	8001248 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001236:	f7ff fb91 	bl	800095c <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e1a8      	b.n	800159a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001248:	4b2b      	ldr	r3, [pc, #172]	; (80012f8 <HAL_RCC_OscConfig+0x240>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0f0      	beq.n	8001236 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001254:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <HAL_RCC_OscConfig+0x240>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	4925      	ldr	r1, [pc, #148]	; (80012f8 <HAL_RCC_OscConfig+0x240>)
 8001264:	4313      	orrs	r3, r2
 8001266:	600b      	str	r3, [r1, #0]
 8001268:	e015      	b.n	8001296 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800126a:	4b24      	ldr	r3, [pc, #144]	; (80012fc <HAL_RCC_OscConfig+0x244>)
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001270:	f7ff fb74 	bl	800095c <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001278:	f7ff fb70 	bl	800095c <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e187      	b.n	800159a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800128a:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <HAL_RCC_OscConfig+0x240>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1f0      	bne.n	8001278 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d036      	beq.n	8001310 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d016      	beq.n	80012d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <HAL_RCC_OscConfig+0x248>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012b0:	f7ff fb54 	bl	800095c <HAL_GetTick>
 80012b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012b8:	f7ff fb50 	bl	800095c <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e167      	b.n	800159a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ca:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <HAL_RCC_OscConfig+0x240>)
 80012cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0f0      	beq.n	80012b8 <HAL_RCC_OscConfig+0x200>
 80012d6:	e01b      	b.n	8001310 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <HAL_RCC_OscConfig+0x248>)
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012de:	f7ff fb3d 	bl	800095c <HAL_GetTick>
 80012e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e4:	e00e      	b.n	8001304 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012e6:	f7ff fb39 	bl	800095c <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d907      	bls.n	8001304 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e150      	b.n	800159a <HAL_RCC_OscConfig+0x4e2>
 80012f8:	40023800 	.word	0x40023800
 80012fc:	42470000 	.word	0x42470000
 8001300:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001304:	4b88      	ldr	r3, [pc, #544]	; (8001528 <HAL_RCC_OscConfig+0x470>)
 8001306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1ea      	bne.n	80012e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	2b00      	cmp	r3, #0
 800131a:	f000 8097 	beq.w	800144c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800131e:	2300      	movs	r3, #0
 8001320:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001322:	4b81      	ldr	r3, [pc, #516]	; (8001528 <HAL_RCC_OscConfig+0x470>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d10f      	bne.n	800134e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	4b7d      	ldr	r3, [pc, #500]	; (8001528 <HAL_RCC_OscConfig+0x470>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	4a7c      	ldr	r2, [pc, #496]	; (8001528 <HAL_RCC_OscConfig+0x470>)
 8001338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800133c:	6413      	str	r3, [r2, #64]	; 0x40
 800133e:	4b7a      	ldr	r3, [pc, #488]	; (8001528 <HAL_RCC_OscConfig+0x470>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800134a:	2301      	movs	r3, #1
 800134c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800134e:	4b77      	ldr	r3, [pc, #476]	; (800152c <HAL_RCC_OscConfig+0x474>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001356:	2b00      	cmp	r3, #0
 8001358:	d118      	bne.n	800138c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800135a:	4b74      	ldr	r3, [pc, #464]	; (800152c <HAL_RCC_OscConfig+0x474>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a73      	ldr	r2, [pc, #460]	; (800152c <HAL_RCC_OscConfig+0x474>)
 8001360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001366:	f7ff faf9 	bl	800095c <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800136e:	f7ff faf5 	bl	800095c <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e10c      	b.n	800159a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001380:	4b6a      	ldr	r3, [pc, #424]	; (800152c <HAL_RCC_OscConfig+0x474>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0f0      	beq.n	800136e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d106      	bne.n	80013a2 <HAL_RCC_OscConfig+0x2ea>
 8001394:	4b64      	ldr	r3, [pc, #400]	; (8001528 <HAL_RCC_OscConfig+0x470>)
 8001396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001398:	4a63      	ldr	r2, [pc, #396]	; (8001528 <HAL_RCC_OscConfig+0x470>)
 800139a:	f043 0301 	orr.w	r3, r3, #1
 800139e:	6713      	str	r3, [r2, #112]	; 0x70
 80013a0:	e01c      	b.n	80013dc <HAL_RCC_OscConfig+0x324>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	2b05      	cmp	r3, #5
 80013a8:	d10c      	bne.n	80013c4 <HAL_RCC_OscConfig+0x30c>
 80013aa:	4b5f      	ldr	r3, [pc, #380]	; (8001528 <HAL_RCC_OscConfig+0x470>)
 80013ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ae:	4a5e      	ldr	r2, [pc, #376]	; (8001528 <HAL_RCC_OscConfig+0x470>)
 80013b0:	f043 0304 	orr.w	r3, r3, #4
 80013b4:	6713      	str	r3, [r2, #112]	; 0x70
 80013b6:	4b5c      	ldr	r3, [pc, #368]	; (8001528 <HAL_RCC_OscConfig+0x470>)
 80013b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ba:	4a5b      	ldr	r2, [pc, #364]	; (8001528 <HAL_RCC_OscConfig+0x470>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6713      	str	r3, [r2, #112]	; 0x70
 80013c2:	e00b      	b.n	80013dc <HAL_RCC_OscConfig+0x324>
 80013c4:	4b58      	ldr	r3, [pc, #352]	; (8001528 <HAL_RCC_OscConfig+0x470>)
 80013c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c8:	4a57      	ldr	r2, [pc, #348]	; (8001528 <HAL_RCC_OscConfig+0x470>)
 80013ca:	f023 0301 	bic.w	r3, r3, #1
 80013ce:	6713      	str	r3, [r2, #112]	; 0x70
 80013d0:	4b55      	ldr	r3, [pc, #340]	; (8001528 <HAL_RCC_OscConfig+0x470>)
 80013d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d4:	4a54      	ldr	r2, [pc, #336]	; (8001528 <HAL_RCC_OscConfig+0x470>)
 80013d6:	f023 0304 	bic.w	r3, r3, #4
 80013da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d015      	beq.n	8001410 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e4:	f7ff faba 	bl	800095c <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ea:	e00a      	b.n	8001402 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ec:	f7ff fab6 	bl	800095c <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e0cb      	b.n	800159a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001402:	4b49      	ldr	r3, [pc, #292]	; (8001528 <HAL_RCC_OscConfig+0x470>)
 8001404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0ee      	beq.n	80013ec <HAL_RCC_OscConfig+0x334>
 800140e:	e014      	b.n	800143a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001410:	f7ff faa4 	bl	800095c <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001416:	e00a      	b.n	800142e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001418:	f7ff faa0 	bl	800095c <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	f241 3288 	movw	r2, #5000	; 0x1388
 8001426:	4293      	cmp	r3, r2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e0b5      	b.n	800159a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800142e:	4b3e      	ldr	r3, [pc, #248]	; (8001528 <HAL_RCC_OscConfig+0x470>)
 8001430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1ee      	bne.n	8001418 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800143a:	7dfb      	ldrb	r3, [r7, #23]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d105      	bne.n	800144c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001440:	4b39      	ldr	r3, [pc, #228]	; (8001528 <HAL_RCC_OscConfig+0x470>)
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	4a38      	ldr	r2, [pc, #224]	; (8001528 <HAL_RCC_OscConfig+0x470>)
 8001446:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800144a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	2b00      	cmp	r3, #0
 8001452:	f000 80a1 	beq.w	8001598 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001456:	4b34      	ldr	r3, [pc, #208]	; (8001528 <HAL_RCC_OscConfig+0x470>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 030c 	and.w	r3, r3, #12
 800145e:	2b08      	cmp	r3, #8
 8001460:	d05c      	beq.n	800151c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	2b02      	cmp	r3, #2
 8001468:	d141      	bne.n	80014ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800146a:	4b31      	ldr	r3, [pc, #196]	; (8001530 <HAL_RCC_OscConfig+0x478>)
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001470:	f7ff fa74 	bl	800095c <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001478:	f7ff fa70 	bl	800095c <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e087      	b.n	800159a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800148a:	4b27      	ldr	r3, [pc, #156]	; (8001528 <HAL_RCC_OscConfig+0x470>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f0      	bne.n	8001478 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69da      	ldr	r2, [r3, #28]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a1b      	ldr	r3, [r3, #32]
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	019b      	lsls	r3, r3, #6
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ac:	085b      	lsrs	r3, r3, #1
 80014ae:	3b01      	subs	r3, #1
 80014b0:	041b      	lsls	r3, r3, #16
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b8:	061b      	lsls	r3, r3, #24
 80014ba:	491b      	ldr	r1, [pc, #108]	; (8001528 <HAL_RCC_OscConfig+0x470>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014c0:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <HAL_RCC_OscConfig+0x478>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c6:	f7ff fa49 	bl	800095c <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ce:	f7ff fa45 	bl	800095c <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e05c      	b.n	800159a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <HAL_RCC_OscConfig+0x470>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0f0      	beq.n	80014ce <HAL_RCC_OscConfig+0x416>
 80014ec:	e054      	b.n	8001598 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <HAL_RCC_OscConfig+0x478>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f4:	f7ff fa32 	bl	800095c <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014fc:	f7ff fa2e 	bl	800095c <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e045      	b.n	800159a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_RCC_OscConfig+0x470>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f0      	bne.n	80014fc <HAL_RCC_OscConfig+0x444>
 800151a:	e03d      	b.n	8001598 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d107      	bne.n	8001534 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e038      	b.n	800159a <HAL_RCC_OscConfig+0x4e2>
 8001528:	40023800 	.word	0x40023800
 800152c:	40007000 	.word	0x40007000
 8001530:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001534:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <HAL_RCC_OscConfig+0x4ec>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d028      	beq.n	8001594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800154c:	429a      	cmp	r2, r3
 800154e:	d121      	bne.n	8001594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800155a:	429a      	cmp	r2, r3
 800155c:	d11a      	bne.n	8001594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001564:	4013      	ands	r3, r2
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800156a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800156c:	4293      	cmp	r3, r2
 800156e:	d111      	bne.n	8001594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157a:	085b      	lsrs	r3, r3, #1
 800157c:	3b01      	subs	r3, #1
 800157e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001580:	429a      	cmp	r2, r3
 8001582:	d107      	bne.n	8001594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001590:	429a      	cmp	r2, r3
 8001592:	d001      	beq.n	8001598 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e000      	b.n	800159a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40023800 	.word	0x40023800

080015a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e0cc      	b.n	8001756 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015bc:	4b68      	ldr	r3, [pc, #416]	; (8001760 <HAL_RCC_ClockConfig+0x1b8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0307 	and.w	r3, r3, #7
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d90c      	bls.n	80015e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ca:	4b65      	ldr	r3, [pc, #404]	; (8001760 <HAL_RCC_ClockConfig+0x1b8>)
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d2:	4b63      	ldr	r3, [pc, #396]	; (8001760 <HAL_RCC_ClockConfig+0x1b8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d001      	beq.n	80015e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e0b8      	b.n	8001756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d020      	beq.n	8001632 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d005      	beq.n	8001608 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015fc:	4b59      	ldr	r3, [pc, #356]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	4a58      	ldr	r2, [pc, #352]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001606:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	2b00      	cmp	r3, #0
 8001612:	d005      	beq.n	8001620 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001614:	4b53      	ldr	r3, [pc, #332]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	4a52      	ldr	r2, [pc, #328]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 800161a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800161e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001620:	4b50      	ldr	r3, [pc, #320]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	494d      	ldr	r1, [pc, #308]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 800162e:	4313      	orrs	r3, r2
 8001630:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d044      	beq.n	80016c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d107      	bne.n	8001656 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001646:	4b47      	ldr	r3, [pc, #284]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d119      	bne.n	8001686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e07f      	b.n	8001756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b02      	cmp	r3, #2
 800165c:	d003      	beq.n	8001666 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001662:	2b03      	cmp	r3, #3
 8001664:	d107      	bne.n	8001676 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001666:	4b3f      	ldr	r3, [pc, #252]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d109      	bne.n	8001686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e06f      	b.n	8001756 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001676:	4b3b      	ldr	r3, [pc, #236]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e067      	b.n	8001756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001686:	4b37      	ldr	r3, [pc, #220]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f023 0203 	bic.w	r2, r3, #3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	4934      	ldr	r1, [pc, #208]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 8001694:	4313      	orrs	r3, r2
 8001696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001698:	f7ff f960 	bl	800095c <HAL_GetTick>
 800169c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169e:	e00a      	b.n	80016b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a0:	f7ff f95c 	bl	800095c <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e04f      	b.n	8001756 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b6:	4b2b      	ldr	r3, [pc, #172]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 020c 	and.w	r2, r3, #12
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d1eb      	bne.n	80016a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016c8:	4b25      	ldr	r3, [pc, #148]	; (8001760 <HAL_RCC_ClockConfig+0x1b8>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0307 	and.w	r3, r3, #7
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d20c      	bcs.n	80016f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d6:	4b22      	ldr	r3, [pc, #136]	; (8001760 <HAL_RCC_ClockConfig+0x1b8>)
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016de:	4b20      	ldr	r3, [pc, #128]	; (8001760 <HAL_RCC_ClockConfig+0x1b8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d001      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e032      	b.n	8001756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d008      	beq.n	800170e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016fc:	4b19      	ldr	r3, [pc, #100]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	4916      	ldr	r1, [pc, #88]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	4313      	orrs	r3, r2
 800170c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	2b00      	cmp	r3, #0
 8001718:	d009      	beq.n	800172e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800171a:	4b12      	ldr	r3, [pc, #72]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	490e      	ldr	r1, [pc, #56]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	4313      	orrs	r3, r2
 800172c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800172e:	f000 f821 	bl	8001774 <HAL_RCC_GetSysClockFreq>
 8001732:	4602      	mov	r2, r0
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	091b      	lsrs	r3, r3, #4
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	490a      	ldr	r1, [pc, #40]	; (8001768 <HAL_RCC_ClockConfig+0x1c0>)
 8001740:	5ccb      	ldrb	r3, [r1, r3]
 8001742:	fa22 f303 	lsr.w	r3, r2, r3
 8001746:	4a09      	ldr	r2, [pc, #36]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 8001748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <HAL_RCC_ClockConfig+0x1c8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff f8c0 	bl	80008d4 <HAL_InitTick>

  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40023c00 	.word	0x40023c00
 8001764:	40023800 	.word	0x40023800
 8001768:	08006efc 	.word	0x08006efc
 800176c:	20000000 	.word	0x20000000
 8001770:	20000004 	.word	0x20000004

08001774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001778:	b094      	sub	sp, #80	; 0x50
 800177a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	647b      	str	r3, [r7, #68]	; 0x44
 8001780:	2300      	movs	r3, #0
 8001782:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001784:	2300      	movs	r3, #0
 8001786:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001788:	2300      	movs	r3, #0
 800178a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800178c:	4b79      	ldr	r3, [pc, #484]	; (8001974 <HAL_RCC_GetSysClockFreq+0x200>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 030c 	and.w	r3, r3, #12
 8001794:	2b08      	cmp	r3, #8
 8001796:	d00d      	beq.n	80017b4 <HAL_RCC_GetSysClockFreq+0x40>
 8001798:	2b08      	cmp	r3, #8
 800179a:	f200 80e1 	bhi.w	8001960 <HAL_RCC_GetSysClockFreq+0x1ec>
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d002      	beq.n	80017a8 <HAL_RCC_GetSysClockFreq+0x34>
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	d003      	beq.n	80017ae <HAL_RCC_GetSysClockFreq+0x3a>
 80017a6:	e0db      	b.n	8001960 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017a8:	4b73      	ldr	r3, [pc, #460]	; (8001978 <HAL_RCC_GetSysClockFreq+0x204>)
 80017aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80017ac:	e0db      	b.n	8001966 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017ae:	4b73      	ldr	r3, [pc, #460]	; (800197c <HAL_RCC_GetSysClockFreq+0x208>)
 80017b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017b2:	e0d8      	b.n	8001966 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017b4:	4b6f      	ldr	r3, [pc, #444]	; (8001974 <HAL_RCC_GetSysClockFreq+0x200>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017be:	4b6d      	ldr	r3, [pc, #436]	; (8001974 <HAL_RCC_GetSysClockFreq+0x200>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d063      	beq.n	8001892 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ca:	4b6a      	ldr	r3, [pc, #424]	; (8001974 <HAL_RCC_GetSysClockFreq+0x200>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	099b      	lsrs	r3, r3, #6
 80017d0:	2200      	movs	r2, #0
 80017d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80017d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80017d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017dc:	633b      	str	r3, [r7, #48]	; 0x30
 80017de:	2300      	movs	r3, #0
 80017e0:	637b      	str	r3, [r7, #52]	; 0x34
 80017e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80017e6:	4622      	mov	r2, r4
 80017e8:	462b      	mov	r3, r5
 80017ea:	f04f 0000 	mov.w	r0, #0
 80017ee:	f04f 0100 	mov.w	r1, #0
 80017f2:	0159      	lsls	r1, r3, #5
 80017f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017f8:	0150      	lsls	r0, r2, #5
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4621      	mov	r1, r4
 8001800:	1a51      	subs	r1, r2, r1
 8001802:	6139      	str	r1, [r7, #16]
 8001804:	4629      	mov	r1, r5
 8001806:	eb63 0301 	sbc.w	r3, r3, r1
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	f04f 0300 	mov.w	r3, #0
 8001814:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001818:	4659      	mov	r1, fp
 800181a:	018b      	lsls	r3, r1, #6
 800181c:	4651      	mov	r1, sl
 800181e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001822:	4651      	mov	r1, sl
 8001824:	018a      	lsls	r2, r1, #6
 8001826:	4651      	mov	r1, sl
 8001828:	ebb2 0801 	subs.w	r8, r2, r1
 800182c:	4659      	mov	r1, fp
 800182e:	eb63 0901 	sbc.w	r9, r3, r1
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	f04f 0300 	mov.w	r3, #0
 800183a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800183e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001842:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001846:	4690      	mov	r8, r2
 8001848:	4699      	mov	r9, r3
 800184a:	4623      	mov	r3, r4
 800184c:	eb18 0303 	adds.w	r3, r8, r3
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	462b      	mov	r3, r5
 8001854:	eb49 0303 	adc.w	r3, r9, r3
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001866:	4629      	mov	r1, r5
 8001868:	024b      	lsls	r3, r1, #9
 800186a:	4621      	mov	r1, r4
 800186c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001870:	4621      	mov	r1, r4
 8001872:	024a      	lsls	r2, r1, #9
 8001874:	4610      	mov	r0, r2
 8001876:	4619      	mov	r1, r3
 8001878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800187a:	2200      	movs	r2, #0
 800187c:	62bb      	str	r3, [r7, #40]	; 0x28
 800187e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001880:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001884:	f7fe fcf4 	bl	8000270 <__aeabi_uldivmod>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4613      	mov	r3, r2
 800188e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001890:	e058      	b.n	8001944 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001892:	4b38      	ldr	r3, [pc, #224]	; (8001974 <HAL_RCC_GetSysClockFreq+0x200>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	099b      	lsrs	r3, r3, #6
 8001898:	2200      	movs	r2, #0
 800189a:	4618      	mov	r0, r3
 800189c:	4611      	mov	r1, r2
 800189e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018a2:	623b      	str	r3, [r7, #32]
 80018a4:	2300      	movs	r3, #0
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
 80018a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018ac:	4642      	mov	r2, r8
 80018ae:	464b      	mov	r3, r9
 80018b0:	f04f 0000 	mov.w	r0, #0
 80018b4:	f04f 0100 	mov.w	r1, #0
 80018b8:	0159      	lsls	r1, r3, #5
 80018ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018be:	0150      	lsls	r0, r2, #5
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4641      	mov	r1, r8
 80018c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80018ca:	4649      	mov	r1, r9
 80018cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018e4:	ebb2 040a 	subs.w	r4, r2, sl
 80018e8:	eb63 050b 	sbc.w	r5, r3, fp
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	f04f 0300 	mov.w	r3, #0
 80018f4:	00eb      	lsls	r3, r5, #3
 80018f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018fa:	00e2      	lsls	r2, r4, #3
 80018fc:	4614      	mov	r4, r2
 80018fe:	461d      	mov	r5, r3
 8001900:	4643      	mov	r3, r8
 8001902:	18e3      	adds	r3, r4, r3
 8001904:	603b      	str	r3, [r7, #0]
 8001906:	464b      	mov	r3, r9
 8001908:	eb45 0303 	adc.w	r3, r5, r3
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	f04f 0300 	mov.w	r3, #0
 8001916:	e9d7 4500 	ldrd	r4, r5, [r7]
 800191a:	4629      	mov	r1, r5
 800191c:	028b      	lsls	r3, r1, #10
 800191e:	4621      	mov	r1, r4
 8001920:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001924:	4621      	mov	r1, r4
 8001926:	028a      	lsls	r2, r1, #10
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800192e:	2200      	movs	r2, #0
 8001930:	61bb      	str	r3, [r7, #24]
 8001932:	61fa      	str	r2, [r7, #28]
 8001934:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001938:	f7fe fc9a 	bl	8000270 <__aeabi_uldivmod>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4613      	mov	r3, r2
 8001942:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HAL_RCC_GetSysClockFreq+0x200>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	0c1b      	lsrs	r3, r3, #16
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	3301      	adds	r3, #1
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001954:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001958:	fbb2 f3f3 	udiv	r3, r2, r3
 800195c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800195e:	e002      	b.n	8001966 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <HAL_RCC_GetSysClockFreq+0x204>)
 8001962:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001964:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001968:	4618      	mov	r0, r3
 800196a:	3750      	adds	r7, #80	; 0x50
 800196c:	46bd      	mov	sp, r7
 800196e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001972:	bf00      	nop
 8001974:	40023800 	.word	0x40023800
 8001978:	00f42400 	.word	0x00f42400
 800197c:	007a1200 	.word	0x007a1200

08001980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001984:	4b03      	ldr	r3, [pc, #12]	; (8001994 <HAL_RCC_GetHCLKFreq+0x14>)
 8001986:	681b      	ldr	r3, [r3, #0]
}
 8001988:	4618      	mov	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20000000 	.word	0x20000000

08001998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800199c:	f7ff fff0 	bl	8001980 <HAL_RCC_GetHCLKFreq>
 80019a0:	4602      	mov	r2, r0
 80019a2:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	0a9b      	lsrs	r3, r3, #10
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	4903      	ldr	r1, [pc, #12]	; (80019bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ae:	5ccb      	ldrb	r3, [r1, r3]
 80019b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40023800 	.word	0x40023800
 80019bc:	08006f0c 	.word	0x08006f0c

080019c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019c4:	f7ff ffdc 	bl	8001980 <HAL_RCC_GetHCLKFreq>
 80019c8:	4602      	mov	r2, r0
 80019ca:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	0b5b      	lsrs	r3, r3, #13
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	4903      	ldr	r1, [pc, #12]	; (80019e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019d6:	5ccb      	ldrb	r3, [r1, r3]
 80019d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019dc:	4618      	mov	r0, r3
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40023800 	.word	0x40023800
 80019e4:	08006f0c 	.word	0x08006f0c

080019e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e07b      	b.n	8001af2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d108      	bne.n	8001a14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a0a:	d009      	beq.n	8001a20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	61da      	str	r2, [r3, #28]
 8001a12:	e005      	b.n	8001a20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d106      	bne.n	8001a40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7fe fdbe 	bl	80005bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2202      	movs	r2, #2
 8001a44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aa4:	ea42 0103 	orr.w	r1, r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	0c1b      	lsrs	r3, r3, #16
 8001abe:	f003 0104 	and.w	r1, r3, #4
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	f003 0210 	and.w	r2, r3, #16
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	69da      	ldr	r2, [r3, #28]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ae0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e03f      	b.n	8001b8c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d106      	bne.n	8001b26 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7fe fd93 	bl	800064c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2224      	movs	r2, #36	; 0x24
 8001b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68da      	ldr	r2, [r3, #12]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b3c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 fde8 	bl	8002714 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	691a      	ldr	r2, [r3, #16]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b52:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	695a      	ldr	r2, [r3, #20]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b62:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68da      	ldr	r2, [r3, #12]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b72:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2220      	movs	r2, #32
 8001b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2220      	movs	r2, #32
 8001b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	; 0x28
 8001b98:	af02      	add	r7, sp, #8
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	603b      	str	r3, [r7, #0]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b20      	cmp	r3, #32
 8001bb2:	d17c      	bne.n	8001cae <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d002      	beq.n	8001bc0 <HAL_UART_Transmit+0x2c>
 8001bba:	88fb      	ldrh	r3, [r7, #6]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e075      	b.n	8001cb0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d101      	bne.n	8001bd2 <HAL_UART_Transmit+0x3e>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e06e      	b.n	8001cb0 <HAL_UART_Transmit+0x11c>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2221      	movs	r2, #33	; 0x21
 8001be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001be8:	f7fe feb8 	bl	800095c <HAL_GetTick>
 8001bec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	88fa      	ldrh	r2, [r7, #6]
 8001bf2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	88fa      	ldrh	r2, [r7, #6]
 8001bf8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c02:	d108      	bne.n	8001c16 <HAL_UART_Transmit+0x82>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d104      	bne.n	8001c16 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	61bb      	str	r3, [r7, #24]
 8001c14:	e003      	b.n	8001c1e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001c26:	e02a      	b.n	8001c7e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2180      	movs	r1, #128	; 0x80
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 fb28 	bl	8002288 <UART_WaitOnFlagUntilTimeout>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e036      	b.n	8001cb0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d10b      	bne.n	8001c60 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c56:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	3302      	adds	r3, #2
 8001c5c:	61bb      	str	r3, [r7, #24]
 8001c5e:	e007      	b.n	8001c70 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	781a      	ldrb	r2, [r3, #0]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	3b01      	subs	r3, #1
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1cf      	bne.n	8001c28 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2140      	movs	r1, #64	; 0x40
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f000 faf8 	bl	8002288 <UART_WaitOnFlagUntilTimeout>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e006      	b.n	8001cb0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	e000      	b.n	8001cb0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001cae:	2302      	movs	r3, #2
  }
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3720      	adds	r7, #32
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b20      	cmp	r3, #32
 8001cd0:	d11d      	bne.n	8001d0e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d002      	beq.n	8001cde <HAL_UART_Receive_IT+0x26>
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e016      	b.n	8001d10 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d101      	bne.n	8001cf0 <HAL_UART_Receive_IT+0x38>
 8001cec:	2302      	movs	r3, #2
 8001cee:	e00f      	b.n	8001d10 <HAL_UART_Receive_IT+0x58>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001cfe:	88fb      	ldrh	r3, [r7, #6]
 8001d00:	461a      	mov	r2, r3
 8001d02:	68b9      	ldr	r1, [r7, #8]
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f000 fb2d 	bl	8002364 <UART_Start_Receive_IT>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	e000      	b.n	8001d10 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001d0e:	2302      	movs	r3, #2
  }
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b0ba      	sub	sp, #232	; 0xe8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001d56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10f      	bne.n	8001d7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d62:	f003 0320 	and.w	r3, r3, #32
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d009      	beq.n	8001d7e <HAL_UART_IRQHandler+0x66>
 8001d6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d6e:	f003 0320 	and.w	r3, r3, #32
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 fc11 	bl	800259e <UART_Receive_IT>
      return;
 8001d7c:	e256      	b.n	800222c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001d7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 80de 	beq.w	8001f44 <HAL_UART_IRQHandler+0x22c>
 8001d88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d106      	bne.n	8001da2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d98:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 80d1 	beq.w	8001f44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00b      	beq.n	8001dc6 <HAL_UART_IRQHandler+0xae>
 8001dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d005      	beq.n	8001dc6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f043 0201 	orr.w	r2, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dca:	f003 0304 	and.w	r3, r3, #4
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00b      	beq.n	8001dea <HAL_UART_IRQHandler+0xd2>
 8001dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d005      	beq.n	8001dea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	f043 0202 	orr.w	r2, r3, #2
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00b      	beq.n	8001e0e <HAL_UART_IRQHandler+0xf6>
 8001df6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d005      	beq.n	8001e0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f043 0204 	orr.w	r2, r3, #4
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d011      	beq.n	8001e3e <HAL_UART_IRQHandler+0x126>
 8001e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e1e:	f003 0320 	and.w	r3, r3, #32
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d105      	bne.n	8001e32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001e26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d005      	beq.n	8001e3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f043 0208 	orr.w	r2, r3, #8
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 81ed 	beq.w	8002222 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e4c:	f003 0320 	and.w	r3, r3, #32
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d008      	beq.n	8001e66 <HAL_UART_IRQHandler+0x14e>
 8001e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e58:	f003 0320 	and.w	r3, r3, #32
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d002      	beq.n	8001e66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 fb9c 	bl	800259e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e70:	2b40      	cmp	r3, #64	; 0x40
 8001e72:	bf0c      	ite	eq
 8001e74:	2301      	moveq	r3, #1
 8001e76:	2300      	movne	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d103      	bne.n	8001e92 <HAL_UART_IRQHandler+0x17a>
 8001e8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d04f      	beq.n	8001f32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 faa4 	bl	80023e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea2:	2b40      	cmp	r3, #64	; 0x40
 8001ea4:	d141      	bne.n	8001f2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	3314      	adds	r3, #20
 8001eac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001eb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001eb4:	e853 3f00 	ldrex	r3, [r3]
 8001eb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001ebc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ec4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	3314      	adds	r3, #20
 8001ece:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001ed2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001ed6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001ede:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001ee2:	e841 2300 	strex	r3, r2, [r1]
 8001ee6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001eea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1d9      	bne.n	8001ea6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d013      	beq.n	8001f22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001efe:	4a7d      	ldr	r2, [pc, #500]	; (80020f4 <HAL_UART_IRQHandler+0x3dc>)
 8001f00:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe fed9 	bl	8000cbe <HAL_DMA_Abort_IT>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d016      	beq.n	8001f40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f20:	e00e      	b.n	8001f40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f99a 	bl	800225c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f28:	e00a      	b.n	8001f40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f996 	bl	800225c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f30:	e006      	b.n	8001f40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f992 	bl	800225c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001f3e:	e170      	b.n	8002222 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f40:	bf00      	nop
    return;
 8001f42:	e16e      	b.n	8002222 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	f040 814a 	bne.w	80021e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 8143 	beq.w	80021e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f60:	f003 0310 	and.w	r3, r3, #16
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 813c 	beq.w	80021e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8a:	2b40      	cmp	r3, #64	; 0x40
 8001f8c:	f040 80b4 	bne.w	80020f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001f9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 8140 	beq.w	8002226 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001faa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	f080 8139 	bcs.w	8002226 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001fba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fc6:	f000 8088 	beq.w	80020da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	330c      	adds	r3, #12
 8001fd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fd8:	e853 3f00 	ldrex	r3, [r3]
 8001fdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001fe0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fe8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	330c      	adds	r3, #12
 8001ff2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001ff6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001ffa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ffe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002002:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002006:	e841 2300 	strex	r3, r2, [r1]
 800200a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800200e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1d9      	bne.n	8001fca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	3314      	adds	r3, #20
 800201c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800201e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002020:	e853 3f00 	ldrex	r3, [r3]
 8002024:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002026:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002028:	f023 0301 	bic.w	r3, r3, #1
 800202c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	3314      	adds	r3, #20
 8002036:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800203a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800203e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002040:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002042:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002046:	e841 2300 	strex	r3, r2, [r1]
 800204a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800204c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1e1      	bne.n	8002016 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	3314      	adds	r3, #20
 8002058:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800205a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800205c:	e853 3f00 	ldrex	r3, [r3]
 8002060:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002068:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	3314      	adds	r3, #20
 8002072:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002076:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002078:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800207a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800207c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800207e:	e841 2300 	strex	r3, r2, [r1]
 8002082:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002084:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1e3      	bne.n	8002052 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2220      	movs	r2, #32
 800208e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	330c      	adds	r3, #12
 800209e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020a2:	e853 3f00 	ldrex	r3, [r3]
 80020a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80020a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020aa:	f023 0310 	bic.w	r3, r3, #16
 80020ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	330c      	adds	r3, #12
 80020b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80020bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80020be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80020c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020c4:	e841 2300 	strex	r3, r2, [r1]
 80020c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80020ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1e3      	bne.n	8002098 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe fd82 	bl	8000bde <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	4619      	mov	r1, r3
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f8c0 	bl	8002270 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80020f0:	e099      	b.n	8002226 <HAL_UART_IRQHandler+0x50e>
 80020f2:	bf00      	nop
 80020f4:	080024a7 	.word	0x080024a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002100:	b29b      	uxth	r3, r3
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800210c:	b29b      	uxth	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 808b 	beq.w	800222a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002114:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 8086 	beq.w	800222a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	330c      	adds	r3, #12
 8002124:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002128:	e853 3f00 	ldrex	r3, [r3]
 800212c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800212e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002130:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002134:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	330c      	adds	r3, #12
 800213e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002142:	647a      	str	r2, [r7, #68]	; 0x44
 8002144:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002146:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002148:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800214a:	e841 2300 	strex	r3, r2, [r1]
 800214e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1e3      	bne.n	800211e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	3314      	adds	r3, #20
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	e853 3f00 	ldrex	r3, [r3]
 8002164:	623b      	str	r3, [r7, #32]
   return(result);
 8002166:	6a3b      	ldr	r3, [r7, #32]
 8002168:	f023 0301 	bic.w	r3, r3, #1
 800216c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	3314      	adds	r3, #20
 8002176:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800217a:	633a      	str	r2, [r7, #48]	; 0x30
 800217c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800217e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002182:	e841 2300 	strex	r3, r2, [r1]
 8002186:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1e3      	bne.n	8002156 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2220      	movs	r2, #32
 8002192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	330c      	adds	r3, #12
 80021a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	e853 3f00 	ldrex	r3, [r3]
 80021aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f023 0310 	bic.w	r3, r3, #16
 80021b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	330c      	adds	r3, #12
 80021bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80021c0:	61fa      	str	r2, [r7, #28]
 80021c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021c4:	69b9      	ldr	r1, [r7, #24]
 80021c6:	69fa      	ldr	r2, [r7, #28]
 80021c8:	e841 2300 	strex	r3, r2, [r1]
 80021cc:	617b      	str	r3, [r7, #20]
   return(result);
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1e3      	bne.n	800219c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80021d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80021d8:	4619      	mov	r1, r3
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f848 	bl	8002270 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80021e0:	e023      	b.n	800222a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80021e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d009      	beq.n	8002202 <HAL_UART_IRQHandler+0x4ea>
 80021ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f967 	bl	80024ce <UART_Transmit_IT>
    return;
 8002200:	e014      	b.n	800222c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00e      	beq.n	800222c <HAL_UART_IRQHandler+0x514>
 800220e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002216:	2b00      	cmp	r3, #0
 8002218:	d008      	beq.n	800222c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f9a7 	bl	800256e <UART_EndTransmit_IT>
    return;
 8002220:	e004      	b.n	800222c <HAL_UART_IRQHandler+0x514>
    return;
 8002222:	bf00      	nop
 8002224:	e002      	b.n	800222c <HAL_UART_IRQHandler+0x514>
      return;
 8002226:	bf00      	nop
 8002228:	e000      	b.n	800222c <HAL_UART_IRQHandler+0x514>
      return;
 800222a:	bf00      	nop
  }
}
 800222c:	37e8      	adds	r7, #232	; 0xe8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop

08002234 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b090      	sub	sp, #64	; 0x40
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	603b      	str	r3, [r7, #0]
 8002294:	4613      	mov	r3, r2
 8002296:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002298:	e050      	b.n	800233c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800229a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800229c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022a0:	d04c      	beq.n	800233c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d007      	beq.n	80022b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80022a8:	f7fe fb58 	bl	800095c <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d241      	bcs.n	800233c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	330c      	adds	r3, #12
 80022be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c2:	e853 3f00 	ldrex	r3, [r3]
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80022ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	330c      	adds	r3, #12
 80022d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022d8:	637a      	str	r2, [r7, #52]	; 0x34
 80022da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022e0:	e841 2300 	strex	r3, r2, [r1]
 80022e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80022e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1e5      	bne.n	80022b8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	3314      	adds	r3, #20
 80022f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	e853 3f00 	ldrex	r3, [r3]
 80022fa:	613b      	str	r3, [r7, #16]
   return(result);
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	f023 0301 	bic.w	r3, r3, #1
 8002302:	63bb      	str	r3, [r7, #56]	; 0x38
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	3314      	adds	r3, #20
 800230a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800230c:	623a      	str	r2, [r7, #32]
 800230e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002310:	69f9      	ldr	r1, [r7, #28]
 8002312:	6a3a      	ldr	r2, [r7, #32]
 8002314:	e841 2300 	strex	r3, r2, [r1]
 8002318:	61bb      	str	r3, [r7, #24]
   return(result);
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1e5      	bne.n	80022ec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2220      	movs	r2, #32
 800232c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e00f      	b.n	800235c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	4013      	ands	r3, r2
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	429a      	cmp	r2, r3
 800234a:	bf0c      	ite	eq
 800234c:	2301      	moveq	r3, #1
 800234e:	2300      	movne	r3, #0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	461a      	mov	r2, r3
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	429a      	cmp	r2, r3
 8002358:	d09f      	beq.n	800229a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3740      	adds	r7, #64	; 0x40
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	4613      	mov	r3, r2
 8002370:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	88fa      	ldrh	r2, [r7, #6]
 800237c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	88fa      	ldrh	r2, [r7, #6]
 8002382:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2222      	movs	r2, #34	; 0x22
 800238e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d007      	beq.n	80023b2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68da      	ldr	r2, [r3, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023b0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695a      	ldr	r2, [r3, #20]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f042 0201 	orr.w	r2, r2, #1
 80023c0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f042 0220 	orr.w	r2, r2, #32
 80023d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b095      	sub	sp, #84	; 0x54
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	330c      	adds	r3, #12
 80023ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f2:	e853 3f00 	ldrex	r3, [r3]
 80023f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80023f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80023fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	330c      	adds	r3, #12
 8002406:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002408:	643a      	str	r2, [r7, #64]	; 0x40
 800240a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800240c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800240e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002410:	e841 2300 	strex	r3, r2, [r1]
 8002414:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1e5      	bne.n	80023e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	3314      	adds	r3, #20
 8002422:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	e853 3f00 	ldrex	r3, [r3]
 800242a:	61fb      	str	r3, [r7, #28]
   return(result);
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f023 0301 	bic.w	r3, r3, #1
 8002432:	64bb      	str	r3, [r7, #72]	; 0x48
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	3314      	adds	r3, #20
 800243a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800243c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800243e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002440:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002442:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002444:	e841 2300 	strex	r3, r2, [r1]
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1e5      	bne.n	800241c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	2b01      	cmp	r3, #1
 8002456:	d119      	bne.n	800248c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	330c      	adds	r3, #12
 800245e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	e853 3f00 	ldrex	r3, [r3]
 8002466:	60bb      	str	r3, [r7, #8]
   return(result);
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f023 0310 	bic.w	r3, r3, #16
 800246e:	647b      	str	r3, [r7, #68]	; 0x44
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	330c      	adds	r3, #12
 8002476:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002478:	61ba      	str	r2, [r7, #24]
 800247a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800247c:	6979      	ldr	r1, [r7, #20]
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	e841 2300 	strex	r3, r2, [r1]
 8002484:	613b      	str	r3, [r7, #16]
   return(result);
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1e5      	bne.n	8002458 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2220      	movs	r2, #32
 8002490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	631a      	str	r2, [r3, #48]	; 0x30
}
 800249a:	bf00      	nop
 800249c:	3754      	adds	r7, #84	; 0x54
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b084      	sub	sp, #16
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f7ff fecb 	bl	800225c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80024c6:	bf00      	nop
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b085      	sub	sp, #20
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b21      	cmp	r3, #33	; 0x21
 80024e0:	d13e      	bne.n	8002560 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ea:	d114      	bne.n	8002516 <UART_Transmit_IT+0x48>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d110      	bne.n	8002516 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002508:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	1c9a      	adds	r2, r3, #2
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	621a      	str	r2, [r3, #32]
 8002514:	e008      	b.n	8002528 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	1c59      	adds	r1, r3, #1
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6211      	str	r1, [r2, #32]
 8002520:	781a      	ldrb	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800252c:	b29b      	uxth	r3, r3
 800252e:	3b01      	subs	r3, #1
 8002530:	b29b      	uxth	r3, r3
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	4619      	mov	r1, r3
 8002536:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10f      	bne.n	800255c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800254a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800255a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800255c:	2300      	movs	r3, #0
 800255e:	e000      	b.n	8002562 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002560:	2302      	movs	r3, #2
  }
}
 8002562:	4618      	mov	r0, r3
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002584:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2220      	movs	r2, #32
 800258a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7ff fe50 	bl	8002234 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b08c      	sub	sp, #48	; 0x30
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b22      	cmp	r3, #34	; 0x22
 80025b0:	f040 80ab 	bne.w	800270a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025bc:	d117      	bne.n	80025ee <UART_Receive_IT+0x50>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d113      	bne.n	80025ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025dc:	b29a      	uxth	r2, r3
 80025de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e6:	1c9a      	adds	r2, r3, #2
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	629a      	str	r2, [r3, #40]	; 0x28
 80025ec:	e026      	b.n	800263c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002600:	d007      	beq.n	8002612 <UART_Receive_IT+0x74>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10a      	bne.n	8002620 <UART_Receive_IT+0x82>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d106      	bne.n	8002620 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	b2da      	uxtb	r2, r3
 800261a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261c:	701a      	strb	r2, [r3, #0]
 800261e:	e008      	b.n	8002632 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	b2db      	uxtb	r3, r3
 8002628:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800262c:	b2da      	uxtb	r2, r3
 800262e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002630:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002636:	1c5a      	adds	r2, r3, #1
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002640:	b29b      	uxth	r3, r3
 8002642:	3b01      	subs	r3, #1
 8002644:	b29b      	uxth	r3, r3
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	4619      	mov	r1, r3
 800264a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800264c:	2b00      	cmp	r3, #0
 800264e:	d15a      	bne.n	8002706 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68da      	ldr	r2, [r3, #12]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0220 	bic.w	r2, r2, #32
 800265e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800266e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	695a      	ldr	r2, [r3, #20]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0201 	bic.w	r2, r2, #1
 800267e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2220      	movs	r2, #32
 8002684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	2b01      	cmp	r3, #1
 800268e:	d135      	bne.n	80026fc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	330c      	adds	r3, #12
 800269c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	e853 3f00 	ldrex	r3, [r3]
 80026a4:	613b      	str	r3, [r7, #16]
   return(result);
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	f023 0310 	bic.w	r3, r3, #16
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	330c      	adds	r3, #12
 80026b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b6:	623a      	str	r2, [r7, #32]
 80026b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ba:	69f9      	ldr	r1, [r7, #28]
 80026bc:	6a3a      	ldr	r2, [r7, #32]
 80026be:	e841 2300 	strex	r3, r2, [r1]
 80026c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1e5      	bne.n	8002696 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0310 	and.w	r3, r3, #16
 80026d4:	2b10      	cmp	r3, #16
 80026d6:	d10a      	bne.n	80026ee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026f2:	4619      	mov	r1, r3
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7ff fdbb 	bl	8002270 <HAL_UARTEx_RxEventCallback>
 80026fa:	e002      	b.n	8002702 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff fda3 	bl	8002248 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	e002      	b.n	800270c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	e000      	b.n	800270c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800270a:	2302      	movs	r3, #2
  }
}
 800270c:	4618      	mov	r0, r3
 800270e:	3730      	adds	r7, #48	; 0x30
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002718:	b0c0      	sub	sp, #256	; 0x100
 800271a:	af00      	add	r7, sp, #0
 800271c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800272c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002730:	68d9      	ldr	r1, [r3, #12]
 8002732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	ea40 0301 	orr.w	r3, r0, r1
 800273c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800273e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	431a      	orrs	r2, r3
 800274c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	431a      	orrs	r2, r3
 8002754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	4313      	orrs	r3, r2
 800275c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800276c:	f021 010c 	bic.w	r1, r1, #12
 8002770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800277a:	430b      	orrs	r3, r1
 800277c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800277e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800278a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800278e:	6999      	ldr	r1, [r3, #24]
 8002790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	ea40 0301 	orr.w	r3, r0, r1
 800279a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800279c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	4b8f      	ldr	r3, [pc, #572]	; (80029e0 <UART_SetConfig+0x2cc>)
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d005      	beq.n	80027b4 <UART_SetConfig+0xa0>
 80027a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	4b8d      	ldr	r3, [pc, #564]	; (80029e4 <UART_SetConfig+0x2d0>)
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d104      	bne.n	80027be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027b4:	f7ff f904 	bl	80019c0 <HAL_RCC_GetPCLK2Freq>
 80027b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80027bc:	e003      	b.n	80027c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80027be:	f7ff f8eb 	bl	8001998 <HAL_RCC_GetPCLK1Freq>
 80027c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027d0:	f040 810c 	bne.w	80029ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027d8:	2200      	movs	r2, #0
 80027da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80027de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80027e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80027e6:	4622      	mov	r2, r4
 80027e8:	462b      	mov	r3, r5
 80027ea:	1891      	adds	r1, r2, r2
 80027ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80027ee:	415b      	adcs	r3, r3
 80027f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80027f6:	4621      	mov	r1, r4
 80027f8:	eb12 0801 	adds.w	r8, r2, r1
 80027fc:	4629      	mov	r1, r5
 80027fe:	eb43 0901 	adc.w	r9, r3, r1
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800280e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002812:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002816:	4690      	mov	r8, r2
 8002818:	4699      	mov	r9, r3
 800281a:	4623      	mov	r3, r4
 800281c:	eb18 0303 	adds.w	r3, r8, r3
 8002820:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002824:	462b      	mov	r3, r5
 8002826:	eb49 0303 	adc.w	r3, r9, r3
 800282a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800282e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800283a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800283e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002842:	460b      	mov	r3, r1
 8002844:	18db      	adds	r3, r3, r3
 8002846:	653b      	str	r3, [r7, #80]	; 0x50
 8002848:	4613      	mov	r3, r2
 800284a:	eb42 0303 	adc.w	r3, r2, r3
 800284e:	657b      	str	r3, [r7, #84]	; 0x54
 8002850:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002854:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002858:	f7fd fd0a 	bl	8000270 <__aeabi_uldivmod>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	4b61      	ldr	r3, [pc, #388]	; (80029e8 <UART_SetConfig+0x2d4>)
 8002862:	fba3 2302 	umull	r2, r3, r3, r2
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	011c      	lsls	r4, r3, #4
 800286a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800286e:	2200      	movs	r2, #0
 8002870:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002874:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002878:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800287c:	4642      	mov	r2, r8
 800287e:	464b      	mov	r3, r9
 8002880:	1891      	adds	r1, r2, r2
 8002882:	64b9      	str	r1, [r7, #72]	; 0x48
 8002884:	415b      	adcs	r3, r3
 8002886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002888:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800288c:	4641      	mov	r1, r8
 800288e:	eb12 0a01 	adds.w	sl, r2, r1
 8002892:	4649      	mov	r1, r9
 8002894:	eb43 0b01 	adc.w	fp, r3, r1
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028ac:	4692      	mov	sl, r2
 80028ae:	469b      	mov	fp, r3
 80028b0:	4643      	mov	r3, r8
 80028b2:	eb1a 0303 	adds.w	r3, sl, r3
 80028b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028ba:	464b      	mov	r3, r9
 80028bc:	eb4b 0303 	adc.w	r3, fp, r3
 80028c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80028c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80028d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80028d8:	460b      	mov	r3, r1
 80028da:	18db      	adds	r3, r3, r3
 80028dc:	643b      	str	r3, [r7, #64]	; 0x40
 80028de:	4613      	mov	r3, r2
 80028e0:	eb42 0303 	adc.w	r3, r2, r3
 80028e4:	647b      	str	r3, [r7, #68]	; 0x44
 80028e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80028ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80028ee:	f7fd fcbf 	bl	8000270 <__aeabi_uldivmod>
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	4611      	mov	r1, r2
 80028f8:	4b3b      	ldr	r3, [pc, #236]	; (80029e8 <UART_SetConfig+0x2d4>)
 80028fa:	fba3 2301 	umull	r2, r3, r3, r1
 80028fe:	095b      	lsrs	r3, r3, #5
 8002900:	2264      	movs	r2, #100	; 0x64
 8002902:	fb02 f303 	mul.w	r3, r2, r3
 8002906:	1acb      	subs	r3, r1, r3
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800290e:	4b36      	ldr	r3, [pc, #216]	; (80029e8 <UART_SetConfig+0x2d4>)
 8002910:	fba3 2302 	umull	r2, r3, r3, r2
 8002914:	095b      	lsrs	r3, r3, #5
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800291c:	441c      	add	r4, r3
 800291e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002922:	2200      	movs	r2, #0
 8002924:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002928:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800292c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002930:	4642      	mov	r2, r8
 8002932:	464b      	mov	r3, r9
 8002934:	1891      	adds	r1, r2, r2
 8002936:	63b9      	str	r1, [r7, #56]	; 0x38
 8002938:	415b      	adcs	r3, r3
 800293a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800293c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002940:	4641      	mov	r1, r8
 8002942:	1851      	adds	r1, r2, r1
 8002944:	6339      	str	r1, [r7, #48]	; 0x30
 8002946:	4649      	mov	r1, r9
 8002948:	414b      	adcs	r3, r1
 800294a:	637b      	str	r3, [r7, #52]	; 0x34
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	f04f 0300 	mov.w	r3, #0
 8002954:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002958:	4659      	mov	r1, fp
 800295a:	00cb      	lsls	r3, r1, #3
 800295c:	4651      	mov	r1, sl
 800295e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002962:	4651      	mov	r1, sl
 8002964:	00ca      	lsls	r2, r1, #3
 8002966:	4610      	mov	r0, r2
 8002968:	4619      	mov	r1, r3
 800296a:	4603      	mov	r3, r0
 800296c:	4642      	mov	r2, r8
 800296e:	189b      	adds	r3, r3, r2
 8002970:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002974:	464b      	mov	r3, r9
 8002976:	460a      	mov	r2, r1
 8002978:	eb42 0303 	adc.w	r3, r2, r3
 800297c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800298c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002990:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002994:	460b      	mov	r3, r1
 8002996:	18db      	adds	r3, r3, r3
 8002998:	62bb      	str	r3, [r7, #40]	; 0x28
 800299a:	4613      	mov	r3, r2
 800299c:	eb42 0303 	adc.w	r3, r2, r3
 80029a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80029aa:	f7fd fc61 	bl	8000270 <__aeabi_uldivmod>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	4b0d      	ldr	r3, [pc, #52]	; (80029e8 <UART_SetConfig+0x2d4>)
 80029b4:	fba3 1302 	umull	r1, r3, r3, r2
 80029b8:	095b      	lsrs	r3, r3, #5
 80029ba:	2164      	movs	r1, #100	; 0x64
 80029bc:	fb01 f303 	mul.w	r3, r1, r3
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	3332      	adds	r3, #50	; 0x32
 80029c6:	4a08      	ldr	r2, [pc, #32]	; (80029e8 <UART_SetConfig+0x2d4>)
 80029c8:	fba2 2303 	umull	r2, r3, r2, r3
 80029cc:	095b      	lsrs	r3, r3, #5
 80029ce:	f003 0207 	and.w	r2, r3, #7
 80029d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4422      	add	r2, r4
 80029da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80029dc:	e106      	b.n	8002bec <UART_SetConfig+0x4d8>
 80029de:	bf00      	nop
 80029e0:	40011000 	.word	0x40011000
 80029e4:	40011400 	.word	0x40011400
 80029e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029f0:	2200      	movs	r2, #0
 80029f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80029f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80029fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80029fe:	4642      	mov	r2, r8
 8002a00:	464b      	mov	r3, r9
 8002a02:	1891      	adds	r1, r2, r2
 8002a04:	6239      	str	r1, [r7, #32]
 8002a06:	415b      	adcs	r3, r3
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
 8002a0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a0e:	4641      	mov	r1, r8
 8002a10:	1854      	adds	r4, r2, r1
 8002a12:	4649      	mov	r1, r9
 8002a14:	eb43 0501 	adc.w	r5, r3, r1
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	f04f 0300 	mov.w	r3, #0
 8002a20:	00eb      	lsls	r3, r5, #3
 8002a22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a26:	00e2      	lsls	r2, r4, #3
 8002a28:	4614      	mov	r4, r2
 8002a2a:	461d      	mov	r5, r3
 8002a2c:	4643      	mov	r3, r8
 8002a2e:	18e3      	adds	r3, r4, r3
 8002a30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a34:	464b      	mov	r3, r9
 8002a36:	eb45 0303 	adc.w	r3, r5, r3
 8002a3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002a5a:	4629      	mov	r1, r5
 8002a5c:	008b      	lsls	r3, r1, #2
 8002a5e:	4621      	mov	r1, r4
 8002a60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a64:	4621      	mov	r1, r4
 8002a66:	008a      	lsls	r2, r1, #2
 8002a68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002a6c:	f7fd fc00 	bl	8000270 <__aeabi_uldivmod>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4b60      	ldr	r3, [pc, #384]	; (8002bf8 <UART_SetConfig+0x4e4>)
 8002a76:	fba3 2302 	umull	r2, r3, r3, r2
 8002a7a:	095b      	lsrs	r3, r3, #5
 8002a7c:	011c      	lsls	r4, r3, #4
 8002a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a82:	2200      	movs	r2, #0
 8002a84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a88:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002a8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002a90:	4642      	mov	r2, r8
 8002a92:	464b      	mov	r3, r9
 8002a94:	1891      	adds	r1, r2, r2
 8002a96:	61b9      	str	r1, [r7, #24]
 8002a98:	415b      	adcs	r3, r3
 8002a9a:	61fb      	str	r3, [r7, #28]
 8002a9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002aa0:	4641      	mov	r1, r8
 8002aa2:	1851      	adds	r1, r2, r1
 8002aa4:	6139      	str	r1, [r7, #16]
 8002aa6:	4649      	mov	r1, r9
 8002aa8:	414b      	adcs	r3, r1
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ab8:	4659      	mov	r1, fp
 8002aba:	00cb      	lsls	r3, r1, #3
 8002abc:	4651      	mov	r1, sl
 8002abe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ac2:	4651      	mov	r1, sl
 8002ac4:	00ca      	lsls	r2, r1, #3
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4603      	mov	r3, r0
 8002acc:	4642      	mov	r2, r8
 8002ace:	189b      	adds	r3, r3, r2
 8002ad0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ad4:	464b      	mov	r3, r9
 8002ad6:	460a      	mov	r2, r1
 8002ad8:	eb42 0303 	adc.w	r3, r2, r3
 8002adc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002aea:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002af8:	4649      	mov	r1, r9
 8002afa:	008b      	lsls	r3, r1, #2
 8002afc:	4641      	mov	r1, r8
 8002afe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b02:	4641      	mov	r1, r8
 8002b04:	008a      	lsls	r2, r1, #2
 8002b06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002b0a:	f7fd fbb1 	bl	8000270 <__aeabi_uldivmod>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4611      	mov	r1, r2
 8002b14:	4b38      	ldr	r3, [pc, #224]	; (8002bf8 <UART_SetConfig+0x4e4>)
 8002b16:	fba3 2301 	umull	r2, r3, r3, r1
 8002b1a:	095b      	lsrs	r3, r3, #5
 8002b1c:	2264      	movs	r2, #100	; 0x64
 8002b1e:	fb02 f303 	mul.w	r3, r2, r3
 8002b22:	1acb      	subs	r3, r1, r3
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	3332      	adds	r3, #50	; 0x32
 8002b28:	4a33      	ldr	r2, [pc, #204]	; (8002bf8 <UART_SetConfig+0x4e4>)
 8002b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2e:	095b      	lsrs	r3, r3, #5
 8002b30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b34:	441c      	add	r4, r3
 8002b36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	673b      	str	r3, [r7, #112]	; 0x70
 8002b3e:	677a      	str	r2, [r7, #116]	; 0x74
 8002b40:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002b44:	4642      	mov	r2, r8
 8002b46:	464b      	mov	r3, r9
 8002b48:	1891      	adds	r1, r2, r2
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	415b      	adcs	r3, r3
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b54:	4641      	mov	r1, r8
 8002b56:	1851      	adds	r1, r2, r1
 8002b58:	6039      	str	r1, [r7, #0]
 8002b5a:	4649      	mov	r1, r9
 8002b5c:	414b      	adcs	r3, r1
 8002b5e:	607b      	str	r3, [r7, #4]
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b6c:	4659      	mov	r1, fp
 8002b6e:	00cb      	lsls	r3, r1, #3
 8002b70:	4651      	mov	r1, sl
 8002b72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b76:	4651      	mov	r1, sl
 8002b78:	00ca      	lsls	r2, r1, #3
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4603      	mov	r3, r0
 8002b80:	4642      	mov	r2, r8
 8002b82:	189b      	adds	r3, r3, r2
 8002b84:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b86:	464b      	mov	r3, r9
 8002b88:	460a      	mov	r2, r1
 8002b8a:	eb42 0303 	adc.w	r3, r2, r3
 8002b8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	663b      	str	r3, [r7, #96]	; 0x60
 8002b9a:	667a      	str	r2, [r7, #100]	; 0x64
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002ba8:	4649      	mov	r1, r9
 8002baa:	008b      	lsls	r3, r1, #2
 8002bac:	4641      	mov	r1, r8
 8002bae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bb2:	4641      	mov	r1, r8
 8002bb4:	008a      	lsls	r2, r1, #2
 8002bb6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002bba:	f7fd fb59 	bl	8000270 <__aeabi_uldivmod>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	4b0d      	ldr	r3, [pc, #52]	; (8002bf8 <UART_SetConfig+0x4e4>)
 8002bc4:	fba3 1302 	umull	r1, r3, r3, r2
 8002bc8:	095b      	lsrs	r3, r3, #5
 8002bca:	2164      	movs	r1, #100	; 0x64
 8002bcc:	fb01 f303 	mul.w	r3, r1, r3
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	3332      	adds	r3, #50	; 0x32
 8002bd6:	4a08      	ldr	r2, [pc, #32]	; (8002bf8 <UART_SetConfig+0x4e4>)
 8002bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bdc:	095b      	lsrs	r3, r3, #5
 8002bde:	f003 020f 	and.w	r2, r3, #15
 8002be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4422      	add	r2, r4
 8002bea:	609a      	str	r2, [r3, #8]
}
 8002bec:	bf00      	nop
 8002bee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bf8:	51eb851f 	.word	0x51eb851f

08002bfc <lkv_lcd_init>:
static void lkv_lcd_enable(void);
static void lkv_ldc_delay(uint32_t time);
void lkv_lcd_retur_nhome(void);


void lkv_lcd_init(void){
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af00      	add	r7, sp, #0

	/* enable GPIO LCD PORTs clock */

	 __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	60bb      	str	r3, [r7, #8]
 8002c06:	4b47      	ldr	r3, [pc, #284]	; (8002d24 <lkv_lcd_init+0x128>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	4a46      	ldr	r2, [pc, #280]	; (8002d24 <lkv_lcd_init+0x128>)
 8002c0c:	f043 0304 	orr.w	r3, r3, #4
 8002c10:	6313      	str	r3, [r2, #48]	; 0x30
 8002c12:	4b44      	ldr	r3, [pc, #272]	; (8002d24 <lkv_lcd_init+0x128>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	60bb      	str	r3, [r7, #8]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	607b      	str	r3, [r7, #4]
 8002c22:	4b40      	ldr	r3, [pc, #256]	; (8002d24 <lkv_lcd_init+0x128>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	4a3f      	ldr	r2, [pc, #252]	; (8002d24 <lkv_lcd_init+0x128>)
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2e:	4b3d      	ldr	r3, [pc, #244]	; (8002d24 <lkv_lcd_init+0x128>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	607b      	str	r3, [r7, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]

	/* enable GPIO LCD PINs */

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c3a:	f107 030c 	add.w	r3, r7, #12
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	605a      	str	r2, [r3, #4]
 8002c44:	609a      	str	r2, [r3, #8]
 8002c46:	60da      	str	r2, [r3, #12]
 8002c48:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c52:	2302      	movs	r3, #2
 8002c54:	61bb      	str	r3, [r7, #24]

	  GPIO_InitStruct.Pin = LCD_PIN_RS;
 8002c56:	2301      	movs	r3, #1
 8002c58:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(LCD_PIN_RS_PORT, &GPIO_InitStruct);
 8002c5a:	f107 030c 	add.w	r3, r7, #12
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4831      	ldr	r0, [pc, #196]	; (8002d28 <lkv_lcd_init+0x12c>)
 8002c62:	f7fe f84f 	bl	8000d04 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = LCD_PIN_RW;
 8002c66:	2304      	movs	r3, #4
 8002c68:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(LCD_PIN_RW_PORT, &GPIO_InitStruct);
 8002c6a:	f107 030c 	add.w	r3, r7, #12
 8002c6e:	4619      	mov	r1, r3
 8002c70:	482d      	ldr	r0, [pc, #180]	; (8002d28 <lkv_lcd_init+0x12c>)
 8002c72:	f7fe f847 	bl	8000d04 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = LCD_PIN_EN;
 8002c76:	2301      	movs	r3, #1
 8002c78:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(LCD_PIN_EN_PORT, &GPIO_InitStruct);
 8002c7a:	f107 030c 	add.w	r3, r7, #12
 8002c7e:	4619      	mov	r1, r3
 8002c80:	482a      	ldr	r0, [pc, #168]	; (8002d2c <lkv_lcd_init+0x130>)
 8002c82:	f7fe f83f 	bl	8000d04 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = LCD_PIN_D4;
 8002c86:	2302      	movs	r3, #2
 8002c88:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(LCD_PIN_D4_PORT, &GPIO_InitStruct);
 8002c8a:	f107 030c 	add.w	r3, r7, #12
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4825      	ldr	r0, [pc, #148]	; (8002d28 <lkv_lcd_init+0x12c>)
 8002c92:	f7fe f837 	bl	8000d04 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = LCD_PIN_D5;
 8002c96:	2308      	movs	r3, #8
 8002c98:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(LCD_PIN_D5_PORT, &GPIO_InitStruct);
 8002c9a:	f107 030c 	add.w	r3, r7, #12
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4821      	ldr	r0, [pc, #132]	; (8002d28 <lkv_lcd_init+0x12c>)
 8002ca2:	f7fe f82f 	bl	8000d04 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = LCD_PIN_D6;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(LCD_PIN_D6_PORT, &GPIO_InitStruct);
 8002caa:	f107 030c 	add.w	r3, r7, #12
 8002cae:	4619      	mov	r1, r3
 8002cb0:	481e      	ldr	r0, [pc, #120]	; (8002d2c <lkv_lcd_init+0x130>)
 8002cb2:	f7fe f827 	bl	8000d04 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = LCD_PIN_D7;
 8002cb6:	2308      	movs	r3, #8
 8002cb8:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(LCD_PIN_D7_PORT, &GPIO_InitStruct);
 8002cba:	f107 030c 	add.w	r3, r7, #12
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	481a      	ldr	r0, [pc, #104]	; (8002d2c <lkv_lcd_init+0x130>)
 8002cc2:	f7fe f81f 	bl	8000d04 <HAL_GPIO_Init>



	/* LCD Init (datasheet) */
	/*step 1 wait more than 40 ms */
	HAL_Delay(60);
 8002cc6:	203c      	movs	r0, #60	; 0x3c
 8002cc8:	f7fd fe54 	bl	8000974 <HAL_Delay>

	/*step 2 write 0 0 0 0 1 1 to RS RW D7 D6 D5 D4 */
	HAL_GPIO_WritePin(LCD_PIN_RS_PORT, LCD_PIN_RS, 0);
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2101      	movs	r1, #1
 8002cd0:	4815      	ldr	r0, [pc, #84]	; (8002d28 <lkv_lcd_init+0x12c>)
 8002cd2:	f7fe f9b3 	bl	800103c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PIN_RW_PORT, LCD_PIN_RW, 0);
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	2104      	movs	r1, #4
 8002cda:	4813      	ldr	r0, [pc, #76]	; (8002d28 <lkv_lcd_init+0x12c>)
 8002cdc:	f7fe f9ae 	bl	800103c <HAL_GPIO_WritePin>
	lkv_lcd_write_data(0x3);
 8002ce0:	2003      	movs	r0, #3
 8002ce2:	f000 f861 	bl	8002da8 <lkv_lcd_write_data>

	/*step 3 wait more than 4.1 ms */
	HAL_Delay(6);
 8002ce6:	2006      	movs	r0, #6
 8002ce8:	f7fd fe44 	bl	8000974 <HAL_Delay>

	/*step 5 write 0 0 0 0 1 1 to RS RW D7 D6 D5 D4 again */
	lkv_lcd_write_data(0x3);
 8002cec:	2003      	movs	r0, #3
 8002cee:	f000 f85b 	bl	8002da8 <lkv_lcd_write_data>

	/*step 6 wait more than 100 us */
	lkv_ldc_delay(150);
 8002cf2:	2096      	movs	r0, #150	; 0x96
 8002cf4:	f000 f91b 	bl	8002f2e <lkv_ldc_delay>

	/*step 7 write 0 0 0 0 1 1 to RS RW D7 D6 D5 D4 again */
	lkv_lcd_write_data(0x3);
 8002cf8:	2003      	movs	r0, #3
 8002cfa:	f000 f855 	bl	8002da8 <lkv_lcd_write_data>

	/*step 8 write 0 0 0 0 1 0 to RS RW D7 D6 D5 D4  */
	lkv_lcd_write_data(0x2);
 8002cfe:	2002      	movs	r0, #2
 8002d00:	f000 f852 	bl	8002da8 <lkv_lcd_write_data>

	/*step 9 Function set -> Display off -> Display clear (wait 2ms) -> Entry mode set  */
	lkv_lcd_send_cmd(LCD_CMD_FUNCTION_SET);
 8002d04:	2028      	movs	r0, #40	; 0x28
 8002d06:	f000 f889 	bl	8002e1c <lkv_lcd_send_cmd>
	lkv_lcd_send_cmd(LCD_CMD_DISPLY_ONOFF_CONTROL);
 8002d0a:	200e      	movs	r0, #14
 8002d0c:	f000 f886 	bl	8002e1c <lkv_lcd_send_cmd>
	lkv_lcd_display_clear();
 8002d10:	f000 f8dd 	bl	8002ece <lkv_lcd_display_clear>
	lkv_lcd_send_cmd(LCD_CMD_ENTRY_MODE_SET);
 8002d14:	2006      	movs	r0, #6
 8002d16:	f000 f881 	bl	8002e1c <lkv_lcd_send_cmd>
}
 8002d1a:	bf00      	nop
 8002d1c:	3720      	adds	r7, #32
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40023800 	.word	0x40023800
 8002d28:	40020800 	.word	0x40020800
 8002d2c:	40020000 	.word	0x40020000

08002d30 <lkv_lcd_process>:

int8_t lkv_lcd_process(uint8_t _clear,uint8_t _row, uint8_t _colum,char* _msg){
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	603b      	str	r3, [r7, #0]
 8002d38:	4603      	mov	r3, r0
 8002d3a:	71fb      	strb	r3, [r7, #7]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	71bb      	strb	r3, [r7, #6]
 8002d40:	4613      	mov	r3, r2
 8002d42:	717b      	strb	r3, [r7, #5]
	if((_row < 1) || (_colum < 1)){
 8002d44:	79bb      	ldrb	r3, [r7, #6]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d002      	beq.n	8002d50 <lkv_lcd_process+0x20>
 8002d4a:	797b      	ldrb	r3, [r7, #5]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d102      	bne.n	8002d56 <lkv_lcd_process+0x26>
		return -1;
 8002d50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d54:	e00e      	b.n	8002d74 <lkv_lcd_process+0x44>
	}

	if(_clear == CLEAR_DIS){
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d101      	bne.n	8002d60 <lkv_lcd_process+0x30>
		lkv_lcd_display_clear();
 8002d5c:	f000 f8b7 	bl	8002ece <lkv_lcd_display_clear>
	}

	lkv_lcd_set_cursor(_row,_colum);
 8002d60:	797a      	ldrb	r2, [r7, #5]
 8002d62:	79bb      	ldrb	r3, [r7, #6]
 8002d64:	4611      	mov	r1, r2
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 f8bb 	bl	8002ee2 <lkv_lcd_set_cursor>
	lkv_lcd_sends_tring(_msg);
 8002d6c:	6838      	ldr	r0, [r7, #0]
 8002d6e:	f000 f899 	bl	8002ea4 <lkv_lcd_sends_tring>

	return 0;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <lkv_lcd_enable>:




void lkv_lcd_enable(void){
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_PIN_EN_PORT, LCD_PIN_EN, 1);
 8002d80:	2201      	movs	r2, #1
 8002d82:	2101      	movs	r1, #1
 8002d84:	4807      	ldr	r0, [pc, #28]	; (8002da4 <lkv_lcd_enable+0x28>)
 8002d86:	f7fe f959 	bl	800103c <HAL_GPIO_WritePin>
	lkv_ldc_delay(10); /* thoi gian de ghi cau lenh */
 8002d8a:	200a      	movs	r0, #10
 8002d8c:	f000 f8cf 	bl	8002f2e <lkv_ldc_delay>
	HAL_GPIO_WritePin(LCD_PIN_EN_PORT, LCD_PIN_EN, 0);
 8002d90:	2200      	movs	r2, #0
 8002d92:	2101      	movs	r1, #1
 8002d94:	4803      	ldr	r0, [pc, #12]	; (8002da4 <lkv_lcd_enable+0x28>)
 8002d96:	f7fe f951 	bl	800103c <HAL_GPIO_WritePin>
	lkv_ldc_delay(100); /* thoi gian de ghi cau lenh + 37 us thuc thi lenh*/
 8002d9a:	2064      	movs	r0, #100	; 0x64
 8002d9c:	f000 f8c7 	bl	8002f2e <lkv_ldc_delay>
}
 8002da0:	bf00      	nop
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40020000 	.word	0x40020000

08002da8 <lkv_lcd_write_data>:


void lkv_lcd_write_data(uint8_t data){
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_PIN_D4_PORT, LCD_PIN_D4, 1 & (data >> 0));
 8002db2:	79fb      	ldrb	r3, [r7, #7]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	461a      	mov	r2, r3
 8002dbc:	2102      	movs	r1, #2
 8002dbe:	4815      	ldr	r0, [pc, #84]	; (8002e14 <lkv_lcd_write_data+0x6c>)
 8002dc0:	f7fe f93c 	bl	800103c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PIN_D5_PORT, LCD_PIN_D5, 1 & (data >> 1));
 8002dc4:	79fb      	ldrb	r3, [r7, #7]
 8002dc6:	085b      	lsrs	r3, r3, #1
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	2108      	movs	r1, #8
 8002dd4:	480f      	ldr	r0, [pc, #60]	; (8002e14 <lkv_lcd_write_data+0x6c>)
 8002dd6:	f7fe f931 	bl	800103c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PIN_D6_PORT, LCD_PIN_D6, 1 & (data >> 2));
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	089b      	lsrs	r3, r3, #2
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	461a      	mov	r2, r3
 8002de8:	2102      	movs	r1, #2
 8002dea:	480b      	ldr	r0, [pc, #44]	; (8002e18 <lkv_lcd_write_data+0x70>)
 8002dec:	f7fe f926 	bl	800103c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PIN_D7_PORT, LCD_PIN_D7, 1 & (data >> 3));
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	08db      	lsrs	r3, r3, #3
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	2108      	movs	r1, #8
 8002e00:	4805      	ldr	r0, [pc, #20]	; (8002e18 <lkv_lcd_write_data+0x70>)
 8002e02:	f7fe f91b 	bl	800103c <HAL_GPIO_WritePin>
    lkv_lcd_enable();
 8002e06:	f7ff ffb9 	bl	8002d7c <lkv_lcd_enable>
}
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40020800 	.word	0x40020800
 8002e18:	40020000 	.word	0x40020000

08002e1c <lkv_lcd_send_cmd>:



void lkv_lcd_send_cmd(uint8_t cmd){
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	4603      	mov	r3, r0
 8002e24:	71fb      	strb	r3, [r7, #7]
	/* RS = 0 to chose command register */
	HAL_GPIO_WritePin(LCD_PIN_RS_PORT, LCD_PIN_RS, 0);
 8002e26:	2200      	movs	r2, #0
 8002e28:	2101      	movs	r1, #1
 8002e2a:	480c      	ldr	r0, [pc, #48]	; (8002e5c <lkv_lcd_send_cmd+0x40>)
 8002e2c:	f7fe f906 	bl	800103c <HAL_GPIO_WritePin>
	/* RW = 0 to chose Write mode */
	HAL_GPIO_WritePin(LCD_PIN_RW_PORT, LCD_PIN_RW, 0);
 8002e30:	2200      	movs	r2, #0
 8002e32:	2104      	movs	r1, #4
 8002e34:	4809      	ldr	r0, [pc, #36]	; (8002e5c <lkv_lcd_send_cmd+0x40>)
 8002e36:	f7fe f901 	bl	800103c <HAL_GPIO_WritePin>

	/* Send 4 high bits first */
	lkv_lcd_write_data(cmd >> 4);
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff ffb1 	bl	8002da8 <lkv_lcd_write_data>

	/* Send 4 high bits first */
	lkv_lcd_write_data(cmd & 0x0F);
 8002e46:	79fb      	ldrb	r3, [r7, #7]
 8002e48:	f003 030f 	and.w	r3, r3, #15
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff ffaa 	bl	8002da8 <lkv_lcd_write_data>
}
 8002e54:	bf00      	nop
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40020800 	.word	0x40020800

08002e60 <lkv_lcd_send_char>:

void lkv_lcd_send_char(uint8_t Data){
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	71fb      	strb	r3, [r7, #7]
	/* RS = 1 to chose Data register */
	HAL_GPIO_WritePin(LCD_PIN_RS_PORT, LCD_PIN_RS, 1);
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	480c      	ldr	r0, [pc, #48]	; (8002ea0 <lkv_lcd_send_char+0x40>)
 8002e70:	f7fe f8e4 	bl	800103c <HAL_GPIO_WritePin>

	/* RW = 0 to chose Write mode */
	HAL_GPIO_WritePin(LCD_PIN_RW_PORT, LCD_PIN_RW, 0);
 8002e74:	2200      	movs	r2, #0
 8002e76:	2104      	movs	r1, #4
 8002e78:	4809      	ldr	r0, [pc, #36]	; (8002ea0 <lkv_lcd_send_char+0x40>)
 8002e7a:	f7fe f8df 	bl	800103c <HAL_GPIO_WritePin>

	/* Send 4 high bits first */
	lkv_lcd_write_data(Data >> 4);
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	091b      	lsrs	r3, r3, #4
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff ff8f 	bl	8002da8 <lkv_lcd_write_data>

	/* Send 4 high bits first */
	lkv_lcd_write_data(Data & 0x0F);
 8002e8a:	79fb      	ldrb	r3, [r7, #7]
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff ff88 	bl	8002da8 <lkv_lcd_write_data>

}
 8002e98:	bf00      	nop
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40020800 	.word	0x40020800

08002ea4 <lkv_lcd_sends_tring>:


void lkv_lcd_sends_tring(char *msg){
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
	do{
		lkv_lcd_send_char((uint8_t)*msg);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff ffd5 	bl	8002e60 <lkv_lcd_send_char>
		msg++;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	607b      	str	r3, [r7, #4]
	}
	while( *msg != '\0' );
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1f3      	bne.n	8002eac <lkv_lcd_sends_tring+0x8>
}
 8002ec4:	bf00      	nop
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <lkv_lcd_display_clear>:


void lkv_lcd_display_clear(void){
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	af00      	add	r7, sp, #0
	lkv_lcd_send_cmd(LCD_CMD_DISPLAY_CLEAR);
 8002ed2:	2001      	movs	r0, #1
 8002ed4:	f7ff ffa2 	bl	8002e1c <lkv_lcd_send_cmd>
	HAL_Delay(2);
 8002ed8:	2002      	movs	r0, #2
 8002eda:	f7fd fd4b 	bl	8000974 <HAL_Delay>
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <lkv_lcd_set_cursor>:
void lkv_lcd_retur_nhome(void){
	lkv_lcd_write_data(LCD_CMD_RETURN_HOME);
	HAL_Delay(2);
}

void lkv_lcd_set_cursor(uint8_t row, uint8_t column){
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b082      	sub	sp, #8
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	4603      	mov	r3, r0
 8002eea:	460a      	mov	r2, r1
 8002eec:	71fb      	strb	r3, [r7, #7]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	71bb      	strb	r3, [r7, #6]
	column--;
 8002ef2:	79bb      	ldrb	r3, [r7, #6]
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	71bb      	strb	r3, [r7, #6]
	if(row == 1){
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d108      	bne.n	8002f10 <lkv_lcd_set_cursor+0x2e>
		lkv_lcd_send_cmd( (column |= 0x80) );
 8002efe:	79bb      	ldrb	r3, [r7, #6]
 8002f00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f04:	71bb      	strb	r3, [r7, #6]
 8002f06:	79bb      	ldrb	r3, [r7, #6]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff ff87 	bl	8002e1c <lkv_lcd_send_cmd>
	}else if(row == 2){
		lkv_lcd_send_cmd( (column |= 0xC0) );
	}
}
 8002f0e:	e00a      	b.n	8002f26 <lkv_lcd_set_cursor+0x44>
	}else if(row == 2){
 8002f10:	79fb      	ldrb	r3, [r7, #7]
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d107      	bne.n	8002f26 <lkv_lcd_set_cursor+0x44>
		lkv_lcd_send_cmd( (column |= 0xC0) );
 8002f16:	79bb      	ldrb	r3, [r7, #6]
 8002f18:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002f1c:	71bb      	strb	r3, [r7, #6]
 8002f1e:	79bb      	ldrb	r3, [r7, #6]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff ff7b 	bl	8002e1c <lkv_lcd_send_cmd>
}
 8002f26:	bf00      	nop
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <lkv_ldc_delay>:

		return FloatToStringXXXXX(value);
	}
}

void lkv_ldc_delay(uint32_t time){
 8002f2e:	b480      	push	{r7}
 8002f30:	b085      	sub	sp, #20
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < time*10 ; i++);
 8002f36:	2300      	movs	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	e002      	b.n	8002f42 <lkv_ldc_delay+0x14>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d8f3      	bhi.n	8002f3c <lkv_ldc_delay+0xe>
}
 8002f54:	bf00      	nop
 8002f56:	bf00      	nop
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
	...

08002f64 <board_init>:
static void MX_USART3_UART_Init(void);
static void MX_USART1_UART_Init(void);
void MX_SPI1_Init(void);


void board_init(void){
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
	  HAL_Init();
 8002f68:	f7fd fc92 	bl	8000890 <HAL_Init>
	  SystemClock_Config();
 8002f6c:	f000 f81a 	bl	8002fa4 <SystemClock_Config>
	  MX_GPIO_Init();
 8002f70:	f000 f90c 	bl	800318c <MX_GPIO_Init>
	  MX_USART3_UART_Init();
 8002f74:	f000 f8e0 	bl	8003138 <MX_USART3_UART_Init>
	  MX_SPI1_Init();
 8002f78:	f000 f87c 	bl	8003074 <MX_SPI1_Init>
	  MX_USART1_UART_Init();
 8002f7c:	f000 f8b2 	bl	80030e4 <MX_USART1_UART_Init>
	  HAL_UART_Receive_IT(&huart3, &buff_rx, 1);
 8002f80:	2201      	movs	r2, #1
 8002f82:	4905      	ldr	r1, [pc, #20]	; (8002f98 <board_init+0x34>)
 8002f84:	4805      	ldr	r0, [pc, #20]	; (8002f9c <board_init+0x38>)
 8002f86:	f7fe fe97 	bl	8001cb8 <HAL_UART_Receive_IT>
	  HAL_UART_Receive_IT(&huart1, &buff_rx, 1);
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	4902      	ldr	r1, [pc, #8]	; (8002f98 <board_init+0x34>)
 8002f8e:	4804      	ldr	r0, [pc, #16]	; (8002fa0 <board_init+0x3c>)
 8002f90:	f7fe fe92 	bl	8001cb8 <HAL_UART_Receive_IT>

}
 8002f94:	bf00      	nop
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	200001bc 	.word	0x200001bc
 8002f9c:	20000178 	.word	0x20000178
 8002fa0:	20000134 	.word	0x20000134

08002fa4 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b094      	sub	sp, #80	; 0x50
 8002fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002faa:	f107 0320 	add.w	r3, r7, #32
 8002fae:	2230      	movs	r2, #48	; 0x30
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f003 fb84 	bl	80066c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fb8:	f107 030c 	add.w	r3, r7, #12
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	60da      	str	r2, [r3, #12]
 8002fc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	4b27      	ldr	r3, [pc, #156]	; (800306c <SystemClock_Config+0xc8>)
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	4a26      	ldr	r2, [pc, #152]	; (800306c <SystemClock_Config+0xc8>)
 8002fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8002fd8:	4b24      	ldr	r3, [pc, #144]	; (800306c <SystemClock_Config+0xc8>)
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	607b      	str	r3, [r7, #4]
 8002fe8:	4b21      	ldr	r3, [pc, #132]	; (8003070 <SystemClock_Config+0xcc>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a20      	ldr	r2, [pc, #128]	; (8003070 <SystemClock_Config+0xcc>)
 8002fee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ff2:	6013      	str	r3, [r2, #0]
 8002ff4:	4b1e      	ldr	r3, [pc, #120]	; (8003070 <SystemClock_Config+0xcc>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ffc:	607b      	str	r3, [r7, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003000:	2302      	movs	r3, #2
 8003002:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003004:	2301      	movs	r3, #1
 8003006:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003008:	2310      	movs	r3, #16
 800300a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800300c:	2302      	movs	r3, #2
 800300e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003010:	2300      	movs	r3, #0
 8003012:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003014:	2308      	movs	r3, #8
 8003016:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003018:	2348      	movs	r3, #72	; 0x48
 800301a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800301c:	2302      	movs	r3, #2
 800301e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003020:	2304      	movs	r3, #4
 8003022:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003024:	f107 0320 	add.w	r3, r7, #32
 8003028:	4618      	mov	r0, r3
 800302a:	f7fe f845 	bl	80010b8 <HAL_RCC_OscConfig>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003034:	f000 f9a6 	bl	8003384 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003038:	230f      	movs	r3, #15
 800303a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800303c:	2302      	movs	r3, #2
 800303e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003040:	2300      	movs	r3, #0
 8003042:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003048:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800304a:	2300      	movs	r3, #0
 800304c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800304e:	f107 030c 	add.w	r3, r7, #12
 8003052:	2102      	movs	r1, #2
 8003054:	4618      	mov	r0, r3
 8003056:	f7fe faa7 	bl	80015a8 <HAL_RCC_ClockConfig>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003060:	f000 f990 	bl	8003384 <Error_Handler>
  }
}
 8003064:	bf00      	nop
 8003066:	3750      	adds	r7, #80	; 0x50
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40023800 	.word	0x40023800
 8003070:	40007000 	.word	0x40007000

08003074 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_SPI1_Init(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003078:	4b18      	ldr	r3, [pc, #96]	; (80030dc <MX_SPI1_Init+0x68>)
 800307a:	4a19      	ldr	r2, [pc, #100]	; (80030e0 <MX_SPI1_Init+0x6c>)
 800307c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800307e:	4b17      	ldr	r3, [pc, #92]	; (80030dc <MX_SPI1_Init+0x68>)
 8003080:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003084:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8003086:	4b15      	ldr	r3, [pc, #84]	; (80030dc <MX_SPI1_Init+0x68>)
 8003088:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800308c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800308e:	4b13      	ldr	r3, [pc, #76]	; (80030dc <MX_SPI1_Init+0x68>)
 8003090:	2200      	movs	r2, #0
 8003092:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003094:	4b11      	ldr	r3, [pc, #68]	; (80030dc <MX_SPI1_Init+0x68>)
 8003096:	2200      	movs	r2, #0
 8003098:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800309a:	4b10      	ldr	r3, [pc, #64]	; (80030dc <MX_SPI1_Init+0x68>)
 800309c:	2200      	movs	r2, #0
 800309e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80030a0:	4b0e      	ldr	r3, [pc, #56]	; (80030dc <MX_SPI1_Init+0x68>)
 80030a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030a8:	4b0c      	ldr	r3, [pc, #48]	; (80030dc <MX_SPI1_Init+0x68>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030ae:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <MX_SPI1_Init+0x68>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80030b4:	4b09      	ldr	r3, [pc, #36]	; (80030dc <MX_SPI1_Init+0x68>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030ba:	4b08      	ldr	r3, [pc, #32]	; (80030dc <MX_SPI1_Init+0x68>)
 80030bc:	2200      	movs	r2, #0
 80030be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80030c0:	4b06      	ldr	r3, [pc, #24]	; (80030dc <MX_SPI1_Init+0x68>)
 80030c2:	220a      	movs	r2, #10
 80030c4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80030c6:	4805      	ldr	r0, [pc, #20]	; (80030dc <MX_SPI1_Init+0x68>)
 80030c8:	f7fe fc8e 	bl	80019e8 <HAL_SPI_Init>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80030d2:	f000 f957 	bl	8003384 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80030d6:	bf00      	nop
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	200000dc 	.word	0x200000dc
 80030e0:	40013000 	.word	0x40013000

080030e4 <MX_USART1_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
 static void MX_USART1_UART_Init(void)
 {
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
   /* USER CODE END USART1_Init 0 */

   /* USER CODE BEGIN USART1_Init 1 */

   /* USER CODE END USART1_Init 1 */
   huart1.Instance = USART1;
 80030e8:	4b11      	ldr	r3, [pc, #68]	; (8003130 <MX_USART1_UART_Init+0x4c>)
 80030ea:	4a12      	ldr	r2, [pc, #72]	; (8003134 <MX_USART1_UART_Init+0x50>)
 80030ec:	601a      	str	r2, [r3, #0]
   huart1.Init.BaudRate = 115200;
 80030ee:	4b10      	ldr	r3, [pc, #64]	; (8003130 <MX_USART1_UART_Init+0x4c>)
 80030f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030f4:	605a      	str	r2, [r3, #4]
   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030f6:	4b0e      	ldr	r3, [pc, #56]	; (8003130 <MX_USART1_UART_Init+0x4c>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	609a      	str	r2, [r3, #8]
   huart1.Init.StopBits = UART_STOPBITS_1;
 80030fc:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <MX_USART1_UART_Init+0x4c>)
 80030fe:	2200      	movs	r2, #0
 8003100:	60da      	str	r2, [r3, #12]
   huart1.Init.Parity = UART_PARITY_NONE;
 8003102:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <MX_USART1_UART_Init+0x4c>)
 8003104:	2200      	movs	r2, #0
 8003106:	611a      	str	r2, [r3, #16]
   huart1.Init.Mode = UART_MODE_TX_RX;
 8003108:	4b09      	ldr	r3, [pc, #36]	; (8003130 <MX_USART1_UART_Init+0x4c>)
 800310a:	220c      	movs	r2, #12
 800310c:	615a      	str	r2, [r3, #20]
   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800310e:	4b08      	ldr	r3, [pc, #32]	; (8003130 <MX_USART1_UART_Init+0x4c>)
 8003110:	2200      	movs	r2, #0
 8003112:	619a      	str	r2, [r3, #24]
   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003114:	4b06      	ldr	r3, [pc, #24]	; (8003130 <MX_USART1_UART_Init+0x4c>)
 8003116:	2200      	movs	r2, #0
 8003118:	61da      	str	r2, [r3, #28]
   if (HAL_UART_Init(&huart1) != HAL_OK)
 800311a:	4805      	ldr	r0, [pc, #20]	; (8003130 <MX_USART1_UART_Init+0x4c>)
 800311c:	f7fe fced 	bl	8001afa <HAL_UART_Init>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <MX_USART1_UART_Init+0x46>
   {
     Error_Handler();
 8003126:	f000 f92d 	bl	8003384 <Error_Handler>
   }
   /* USER CODE BEGIN USART1_Init 2 */

   /* USER CODE END USART1_Init 2 */

 }
 800312a:	bf00      	nop
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	20000134 	.word	0x20000134
 8003134:	40011000 	.word	0x40011000

08003138 <MX_USART3_UART_Init>:
   * @brief USART3 Initialization Function
   * @param None
   * @retval None
   */
 static void MX_USART3_UART_Init(void)
 {
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
   /* USER CODE END USART3_Init 0 */

   /* USER CODE BEGIN USART3_Init 1 */

   /* USER CODE END USART3_Init 1 */
   huart3.Instance = USART3;
 800313c:	4b11      	ldr	r3, [pc, #68]	; (8003184 <MX_USART3_UART_Init+0x4c>)
 800313e:	4a12      	ldr	r2, [pc, #72]	; (8003188 <MX_USART3_UART_Init+0x50>)
 8003140:	601a      	str	r2, [r3, #0]
   huart3.Init.BaudRate = 38400;
 8003142:	4b10      	ldr	r3, [pc, #64]	; (8003184 <MX_USART3_UART_Init+0x4c>)
 8003144:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8003148:	605a      	str	r2, [r3, #4]
   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800314a:	4b0e      	ldr	r3, [pc, #56]	; (8003184 <MX_USART3_UART_Init+0x4c>)
 800314c:	2200      	movs	r2, #0
 800314e:	609a      	str	r2, [r3, #8]
   huart3.Init.StopBits = UART_STOPBITS_1;
 8003150:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <MX_USART3_UART_Init+0x4c>)
 8003152:	2200      	movs	r2, #0
 8003154:	60da      	str	r2, [r3, #12]
   huart3.Init.Parity = UART_PARITY_NONE;
 8003156:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <MX_USART3_UART_Init+0x4c>)
 8003158:	2200      	movs	r2, #0
 800315a:	611a      	str	r2, [r3, #16]
   huart3.Init.Mode = UART_MODE_TX_RX;
 800315c:	4b09      	ldr	r3, [pc, #36]	; (8003184 <MX_USART3_UART_Init+0x4c>)
 800315e:	220c      	movs	r2, #12
 8003160:	615a      	str	r2, [r3, #20]
   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003162:	4b08      	ldr	r3, [pc, #32]	; (8003184 <MX_USART3_UART_Init+0x4c>)
 8003164:	2200      	movs	r2, #0
 8003166:	619a      	str	r2, [r3, #24]
   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003168:	4b06      	ldr	r3, [pc, #24]	; (8003184 <MX_USART3_UART_Init+0x4c>)
 800316a:	2200      	movs	r2, #0
 800316c:	61da      	str	r2, [r3, #28]
   if (HAL_UART_Init(&huart3) != HAL_OK)
 800316e:	4805      	ldr	r0, [pc, #20]	; (8003184 <MX_USART3_UART_Init+0x4c>)
 8003170:	f7fe fcc3 	bl	8001afa <HAL_UART_Init>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <MX_USART3_UART_Init+0x46>
   {
     Error_Handler();
 800317a:	f000 f903 	bl	8003384 <Error_Handler>
   }
   /* USER CODE BEGIN USART3_Init 2 */

   /* USER CODE END USART3_Init 2 */

 }
 800317e:	bf00      	nop
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	20000178 	.word	0x20000178
 8003188:	40004800 	.word	0x40004800

0800318c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
 void MX_GPIO_Init(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08c      	sub	sp, #48	; 0x30
 8003190:	af00      	add	r7, sp, #0


  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003192:	f107 031c 	add.w	r3, r7, #28
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	605a      	str	r2, [r3, #4]
 800319c:	609a      	str	r2, [r3, #8]
 800319e:	60da      	str	r2, [r3, #12]
 80031a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 80031a2:	2200      	movs	r2, #0
 80031a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031a8:	4870      	ldr	r0, [pc, #448]	; (800336c <MX_GPIO_Init+0x1e0>)
 80031aa:	f7fd ff47 	bl	800103c <HAL_GPIO_WritePin>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	61bb      	str	r3, [r7, #24]
 80031b2:	4b6f      	ldr	r3, [pc, #444]	; (8003370 <MX_GPIO_Init+0x1e4>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	4a6e      	ldr	r2, [pc, #440]	; (8003370 <MX_GPIO_Init+0x1e4>)
 80031b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031bc:	6313      	str	r3, [r2, #48]	; 0x30
 80031be:	4b6c      	ldr	r3, [pc, #432]	; (8003370 <MX_GPIO_Init+0x1e4>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c6:	61bb      	str	r3, [r7, #24]
 80031c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	617b      	str	r3, [r7, #20]
 80031ce:	4b68      	ldr	r3, [pc, #416]	; (8003370 <MX_GPIO_Init+0x1e4>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	4a67      	ldr	r2, [pc, #412]	; (8003370 <MX_GPIO_Init+0x1e4>)
 80031d4:	f043 0301 	orr.w	r3, r3, #1
 80031d8:	6313      	str	r3, [r2, #48]	; 0x30
 80031da:	4b65      	ldr	r3, [pc, #404]	; (8003370 <MX_GPIO_Init+0x1e4>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	4b61      	ldr	r3, [pc, #388]	; (8003370 <MX_GPIO_Init+0x1e4>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	4a60      	ldr	r2, [pc, #384]	; (8003370 <MX_GPIO_Init+0x1e4>)
 80031f0:	f043 0302 	orr.w	r3, r3, #2
 80031f4:	6313      	str	r3, [r2, #48]	; 0x30
 80031f6:	4b5e      	ldr	r3, [pc, #376]	; (8003370 <MX_GPIO_Init+0x1e4>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	613b      	str	r3, [r7, #16]
 8003200:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003202:	2300      	movs	r3, #0
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	4b5a      	ldr	r3, [pc, #360]	; (8003370 <MX_GPIO_Init+0x1e4>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	4a59      	ldr	r2, [pc, #356]	; (8003370 <MX_GPIO_Init+0x1e4>)
 800320c:	f043 0310 	orr.w	r3, r3, #16
 8003210:	6313      	str	r3, [r2, #48]	; 0x30
 8003212:	4b57      	ldr	r3, [pc, #348]	; (8003370 <MX_GPIO_Init+0x1e4>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	f003 0310 	and.w	r3, r3, #16
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800321e:	2300      	movs	r3, #0
 8003220:	60bb      	str	r3, [r7, #8]
 8003222:	4b53      	ldr	r3, [pc, #332]	; (8003370 <MX_GPIO_Init+0x1e4>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	4a52      	ldr	r2, [pc, #328]	; (8003370 <MX_GPIO_Init+0x1e4>)
 8003228:	f043 0304 	orr.w	r3, r3, #4
 800322c:	6313      	str	r3, [r2, #48]	; 0x30
 800322e:	4b50      	ldr	r3, [pc, #320]	; (8003370 <MX_GPIO_Init+0x1e4>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	60bb      	str	r3, [r7, #8]
 8003238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	607b      	str	r3, [r7, #4]
 800323e:	4b4c      	ldr	r3, [pc, #304]	; (8003370 <MX_GPIO_Init+0x1e4>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	4a4b      	ldr	r2, [pc, #300]	; (8003370 <MX_GPIO_Init+0x1e4>)
 8003244:	f043 0308 	orr.w	r3, r3, #8
 8003248:	6313      	str	r3, [r2, #48]	; 0x30
 800324a:	4b49      	ldr	r3, [pc, #292]	; (8003370 <MX_GPIO_Init+0x1e4>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	607b      	str	r3, [r7, #4]
 8003254:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8003256:	2200      	movs	r2, #0
 8003258:	f240 51fe 	movw	r1, #1534	; 0x5fe
 800325c:	4845      	ldr	r0, [pc, #276]	; (8003374 <MX_GPIO_Init+0x1e8>)
 800325e:	f7fd feed 	bl	800103c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8003262:	2200      	movs	r2, #0
 8003264:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003268:	4840      	ldr	r0, [pc, #256]	; (800336c <MX_GPIO_Init+0x1e0>)
 800326a:	f7fd fee7 	bl	800103c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 800326e:	2200      	movs	r2, #0
 8003270:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003274:	4840      	ldr	r0, [pc, #256]	; (8003378 <MX_GPIO_Init+0x1ec>)
 8003276:	f7fd fee1 	bl	800103c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800327a:	2200      	movs	r2, #0
 800327c:	21d0      	movs	r1, #208	; 0xd0
 800327e:	483f      	ldr	r0, [pc, #252]	; (800337c <MX_GPIO_Init+0x1f0>)
 8003280:	f7fd fedc 	bl	800103c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 PA8
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8003284:	f240 53fe 	movw	r3, #1534	; 0x5fe
 8003288:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800328a:	2301      	movs	r3, #1
 800328c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328e:	2300      	movs	r3, #0
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003292:	2300      	movs	r3, #0
 8003294:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003296:	f107 031c 	add.w	r3, r7, #28
 800329a:	4619      	mov	r1, r3
 800329c:	4835      	ldr	r0, [pc, #212]	; (8003374 <MX_GPIO_Init+0x1e8>)
 800329e:	f7fd fd31 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80032a2:	2301      	movs	r3, #1
 80032a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80032a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80032aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80032ac:	2302      	movs	r3, #2
 80032ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032b0:	f107 031c 	add.w	r3, r7, #28
 80032b4:	4619      	mov	r1, r3
 80032b6:	4831      	ldr	r0, [pc, #196]	; (800337c <MX_GPIO_Init+0x1f0>)
 80032b8:	f7fd fd24 	bl	8000d04 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 80032bc:	2200      	movs	r2, #0
 80032be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032c2:	482a      	ldr	r0, [pc, #168]	; (800336c <MX_GPIO_Init+0x1e0>)
 80032c4:	f7fd feba 	bl	800103c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80032c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032ce:	2301      	movs	r3, #1
 80032d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d2:	2300      	movs	r3, #0
 80032d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d6:	2300      	movs	r3, #0
 80032d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032da:	f107 031c 	add.w	r3, r7, #28
 80032de:	4619      	mov	r1, r3
 80032e0:	4822      	ldr	r0, [pc, #136]	; (800336c <MX_GPIO_Init+0x1e0>)
 80032e2:	f7fd fd0f 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 80032e6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80032ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032ec:	2301      	movs	r3, #1
 80032ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f4:	2300      	movs	r3, #0
 80032f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032f8:	f107 031c 	add.w	r3, r7, #28
 80032fc:	4619      	mov	r1, r3
 80032fe:	481e      	ldr	r0, [pc, #120]	; (8003378 <MX_GPIO_Init+0x1ec>)
 8003300:	f7fd fd00 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8003304:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800330a:	2300      	movs	r3, #0
 800330c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800330e:	2302      	movs	r3, #2
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003312:	f107 031c 	add.w	r3, r7, #28
 8003316:	4619      	mov	r1, r3
 8003318:	4817      	ldr	r0, [pc, #92]	; (8003378 <MX_GPIO_Init+0x1ec>)
 800331a:	f7fd fcf3 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800331e:	2302      	movs	r3, #2
 8003320:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003322:	2300      	movs	r3, #0
 8003324:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003326:	2302      	movs	r3, #2
 8003328:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800332a:	f107 031c 	add.w	r3, r7, #28
 800332e:	4619      	mov	r1, r3
 8003330:	4813      	ldr	r0, [pc, #76]	; (8003380 <MX_GPIO_Init+0x1f4>)
 8003332:	f7fd fce7 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8003336:	23d0      	movs	r3, #208	; 0xd0
 8003338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800333a:	2301      	movs	r3, #1
 800333c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333e:	2300      	movs	r3, #0
 8003340:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003342:	2300      	movs	r3, #0
 8003344:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003346:	f107 031c 	add.w	r3, r7, #28
 800334a:	4619      	mov	r1, r3
 800334c:	480b      	ldr	r0, [pc, #44]	; (800337c <MX_GPIO_Init+0x1f0>)
 800334e:	f7fd fcd9 	bl	8000d04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003352:	2200      	movs	r2, #0
 8003354:	2100      	movs	r1, #0
 8003356:	2006      	movs	r0, #6
 8003358:	f7fd fc0b 	bl	8000b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800335c:	2006      	movs	r0, #6
 800335e:	f7fd fc24 	bl	8000baa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003362:	bf00      	nop
 8003364:	3730      	adds	r7, #48	; 0x30
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40021000 	.word	0x40021000
 8003370:	40023800 	.word	0x40023800
 8003374:	40020000 	.word	0x40020000
 8003378:	40020800 	.word	0x40020800
 800337c:	40020400 	.word	0x40020400
 8003380:	40020c00 	.word	0x40020c00

08003384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003388:	b672      	cpsid	i
}
 800338a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800338c:	e7fe      	b.n	800338c <Error_Handler+0x8>
	...

08003390 <lkv_logger_init>:
static lkv_logger_t g_logger = {
        .m_level = LOG_LEVEL_TRACE,
        .m_output_fn = NULL
};

int32_t lkv_logger_init(lkv_logger_output_fn_t _fn, LOG_LEVEL _level){
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	70fb      	strb	r3, [r7, #3]
    g_logger.m_level= _level;
 800339c:	4a06      	ldr	r2, [pc, #24]	; (80033b8 <lkv_logger_init+0x28>)
 800339e:	78fb      	ldrb	r3, [r7, #3]
 80033a0:	7013      	strb	r3, [r2, #0]
    g_logger.m_output_fn = _fn;
 80033a2:	4a05      	ldr	r2, [pc, #20]	; (80033b8 <lkv_logger_init+0x28>)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6053      	str	r3, [r2, #4]

    return 0;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	20000034 	.word	0x20000034

080033bc <lkv_logger_show>:

LOG_LEVEL lkv_logger_get_level(){
    return g_logger.m_level;
}

void lkv_logger_show(LOG_LEVEL _level, const char* _tag, const char* _log, ...){
 80033bc:	b40c      	push	{r2, r3}
 80033be:	b580      	push	{r7, lr}
 80033c0:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 80033c4:	af02      	add	r7, sp, #8
 80033c6:	4602      	mov	r2, r0
 80033c8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80033cc:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80033d0:	6019      	str	r1, [r3, #0]
 80033d2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80033d6:	f2a3 4311 	subw	r3, r3, #1041	; 0x411
 80033da:	701a      	strb	r2, [r3, #0]
    int len = 0;
 80033dc:	2300      	movs	r3, #0
 80033de:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
    char buf[LOG_BUFFER_SIZE + 2] = {0};
 80033e2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80033e6:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	3304      	adds	r3, #4
 80033f0:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80033f4:	2100      	movs	r1, #0
 80033f6:	4618      	mov	r0, r3
 80033f8:	f003 f962 	bl	80066c0 <memset>
    va_list args;

    if(_level > g_logger.m_level || !g_logger.m_output_fn){
 80033fc:	4b37      	ldr	r3, [pc, #220]	; (80034dc <lkv_logger_show+0x120>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 8003404:	f2a2 4211 	subw	r2, r2, #1041	; 0x411
 8003408:	7812      	ldrb	r2, [r2, #0]
 800340a:	429a      	cmp	r2, r3
 800340c:	d85d      	bhi.n	80034ca <lkv_logger_show+0x10e>
 800340e:	4b33      	ldr	r3, [pc, #204]	; (80034dc <lkv_logger_show+0x120>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d059      	beq.n	80034ca <lkv_logger_show+0x10e>
        return;
    }

    va_start(args, _log);
 8003416:	f207 4224 	addw	r2, r7, #1060	; 0x424
 800341a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800341e:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8003422:	601a      	str	r2, [r3, #0]

    len = snprintf(buf, LOG_BUFFER_SIZE, "%s#%s: %s: ",log_level_colors[_level], log_level_names[_level], _tag);
 8003424:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8003428:	f2a3 4311 	subw	r3, r3, #1041	; 0x411
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	4a2c      	ldr	r2, [pc, #176]	; (80034e0 <lkv_logger_show+0x124>)
 8003430:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003434:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8003438:	f2a3 4311 	subw	r3, r3, #1041	; 0x411
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	4a29      	ldr	r2, [pc, #164]	; (80034e4 <lkv_logger_show+0x128>)
 8003440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003444:	f107 0010 	add.w	r0, r7, #16
 8003448:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800344c:	f5a2 6283 	sub.w	r2, r2, #1048	; 0x418
 8003450:	6812      	ldr	r2, [r2, #0]
 8003452:	9201      	str	r2, [sp, #4]
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	460b      	mov	r3, r1
 8003458:	4a23      	ldr	r2, [pc, #140]	; (80034e8 <lkv_logger_show+0x12c>)
 800345a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800345e:	f003 f8b1 	bl	80065c4 <sniprintf>
 8003462:	f8c7 0414 	str.w	r0, [r7, #1044]	; 0x414
    len += vsnprintf(buf + len, LOG_BUFFER_SIZE - len, _log, args);
 8003466:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800346a:	f107 0210 	add.w	r2, r7, #16
 800346e:	18d0      	adds	r0, r2, r3
 8003470:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8003474:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8003478:	4619      	mov	r1, r3
 800347a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800347e:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 8003488:	f003 f8fc 	bl	8006684 <vsniprintf>
 800348c:	4602      	mov	r2, r0
 800348e:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8003492:	4413      	add	r3, r2
 8003494:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
    va_end(args);

    if(len > LOG_BUFFER_SIZE){
 8003498:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800349c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a0:	dd03      	ble.n	80034aa <lkv_logger_show+0xee>
        len = LOG_BUFFER_SIZE;
 80034a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034a6:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
    }
    buf[len] = '\0';
 80034aa:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80034ae:	f5a3 6281 	sub.w	r2, r3, #1032	; 0x408
 80034b2:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80034b6:	4413      	add	r3, r2
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]

    g_logger.m_output_fn(buf);
 80034bc:	4b07      	ldr	r3, [pc, #28]	; (80034dc <lkv_logger_show+0x120>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f107 0210 	add.w	r2, r7, #16
 80034c4:	4610      	mov	r0, r2
 80034c6:	4798      	blx	r3
 80034c8:	e000      	b.n	80034cc <lkv_logger_show+0x110>
        return;
 80034ca:	bf00      	nop
}
 80034cc:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 80034d0:	46bd      	mov	sp, r7
 80034d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034d6:	b002      	add	sp, #8
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	20000034 	.word	0x20000034
 80034e0:	2000000c 	.word	0x2000000c
 80034e4:	20000020 	.word	0x20000020
 80034e8:	08006ed8 	.word	0x08006ed8

080034ec <lkv_bsp_log_output>:
    PB7       -> USART1_RX


 */

void lkv_bsp_log_output(const char* data){
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
//	HAL_UART_Transmit(&huart1, (uint8_t*)data, strlen(data), 100);
//	HAL_UART_Transmit(&huart1, (uint8_t*)'\n', 1, 100);
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <main>:


int main(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b090      	sub	sp, #64	; 0x40
 8003504:	af00      	add	r7, sp, #0

	  board_init();
 8003506:	f7ff fd2d 	bl	8002f64 <board_init>
	  lkv_stepmotor_gpio_init();
 800350a:	f002 ff47 	bl	800639c <lkv_stepmotor_gpio_init>
	  lkv_lcd_init();
 800350e:	f7ff fb75 	bl	8002bfc <lkv_lcd_init>

	  mqtt_index = 0;
 8003512:	4b2d      	ldr	r3, [pc, #180]	; (80035c8 <main+0xc8>)
 8003514:	2200      	movs	r2, #0
 8003516:	701a      	strb	r2, [r3, #0]

	  nmbs_platform_conf platform_conf;
	  platform_conf.transport = NMBS_TRANSPORT_RTU;
 8003518:	2301      	movs	r3, #1
 800351a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	  platform_conf.read = read_serial;
 800351e:	4b2b      	ldr	r3, [pc, #172]	; (80035cc <main+0xcc>)
 8003520:	633b      	str	r3, [r7, #48]	; 0x30
	  platform_conf.write = write_serial;
 8003522:	4b2b      	ldr	r3, [pc, #172]	; (80035d0 <main+0xd0>)
 8003524:	637b      	str	r3, [r7, #52]	; 0x34
	  platform_conf.arg = NULL;
 8003526:	2300      	movs	r3, #0
 8003528:	63bb      	str	r3, [r7, #56]	; 0x38

	  nmbs_callbacks callbacks = {0};
 800352a:	463b      	mov	r3, r7
 800352c:	222c      	movs	r2, #44	; 0x2c
 800352e:	2100      	movs	r1, #0
 8003530:	4618      	mov	r0, r3
 8003532:	f003 f8c5 	bl	80066c0 <memset>
	  callbacks.read_coils = handle_read_coils;
 8003536:	4b27      	ldr	r3, [pc, #156]	; (80035d4 <main+0xd4>)
 8003538:	603b      	str	r3, [r7, #0]
	  callbacks.write_multiple_coils = handle_write_multiple_coils;
 800353a:	4b27      	ldr	r3, [pc, #156]	; (80035d8 <main+0xd8>)
 800353c:	61bb      	str	r3, [r7, #24]
	  callbacks.read_holding_registers = handler_read_holding_registers;
 800353e:	4b27      	ldr	r3, [pc, #156]	; (80035dc <main+0xdc>)
 8003540:	60bb      	str	r3, [r7, #8]
	  callbacks.write_multiple_registers = handle_write_multiple_registers;
 8003542:	4b27      	ldr	r3, [pc, #156]	; (80035e0 <main+0xe0>)
 8003544:	61fb      	str	r3, [r7, #28]
	  callbacks.write_single_register = handle_write_single_registers;
 8003546:	4b27      	ldr	r3, [pc, #156]	; (80035e4 <main+0xe4>)
 8003548:	617b      	str	r3, [r7, #20]
	  callbacks.read_input_registers = handler_read_input_registers;
 800354a:	4b27      	ldr	r3, [pc, #156]	; (80035e8 <main+0xe8>)
 800354c:	60fb      	str	r3, [r7, #12]
	  // Create the modbus server
	  nmbs_error err = nmbs_server_create(&nmbs, RTU_SERVER_ADDRESS, &platform_conf, &callbacks);
 800354e:	463b      	mov	r3, r7
 8003550:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003554:	2105      	movs	r1, #5
 8003556:	4825      	ldr	r0, [pc, #148]	; (80035ec <main+0xec>)
 8003558:	f002 fe92 	bl	8006280 <nmbs_server_create>
 800355c:	4603      	mov	r3, r0
 800355e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  if (err != NMBS_ERROR_NONE) {
 8003562:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <main+0x6e>
	    onError();
 800356a:	f000 f95b 	bl	8003824 <onError>
	  }
	  nmbs_set_read_timeout(&nmbs, 50);
 800356e:	2132      	movs	r1, #50	; 0x32
 8003570:	481e      	ldr	r0, [pc, #120]	; (80035ec <main+0xec>)
 8003572:	f000 fc90 	bl	8003e96 <nmbs_set_read_timeout>
	  nmbs_set_byte_timeout(&nmbs, 50);
 8003576:	2132      	movs	r1, #50	; 0x32
 8003578:	481c      	ldr	r0, [pc, #112]	; (80035ec <main+0xec>)
 800357a:	f000 fc9b 	bl	8003eb4 <nmbs_set_byte_timeout>

	  lkv_logger_init(lkv_bsp_log_output, LOG_LEVEL_DEBUG);
 800357e:	2103      	movs	r1, #3
 8003580:	481b      	ldr	r0, [pc, #108]	; (80035f0 <main+0xf0>)
 8003582:	f7ff ff05 	bl	8003390 <lkv_logger_init>

	  LOG_INF(TAG, "Start run");
 8003586:	4a1b      	ldr	r2, [pc, #108]	; (80035f4 <main+0xf4>)
 8003588:	491b      	ldr	r1, [pc, #108]	; (80035f8 <main+0xf8>)
 800358a:	2002      	movs	r0, #2
 800358c:	f7ff ff16 	bl	80033bc <lkv_logger_show>



  while (1)
  {
	  nmbs_server_poll(&nmbs);
 8003590:	4816      	ldr	r0, [pc, #88]	; (80035ec <main+0xec>)
 8003592:	f002 feaa 	bl	80062ea <nmbs_server_poll>
	  if(is_new_linux_msg){
 8003596:	4b19      	ldr	r3, [pc, #100]	; (80035fc <main+0xfc>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f8      	beq.n	8003590 <main+0x90>

		  if(buff_mqtt_slave[0] == 'T'){
 800359e:	4b18      	ldr	r3, [pc, #96]	; (8003600 <main+0x100>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b54      	cmp	r3, #84	; 0x54
 80035a4:	d10b      	bne.n	80035be <main+0xbe>
			  HAL_UART_Transmit(&huart1, (uint8_t*)"OK\n", strlen("OK\n"), 100);
 80035a6:	2364      	movs	r3, #100	; 0x64
 80035a8:	2203      	movs	r2, #3
 80035aa:	4916      	ldr	r1, [pc, #88]	; (8003604 <main+0x104>)
 80035ac:	4816      	ldr	r0, [pc, #88]	; (8003608 <main+0x108>)
 80035ae:	f7fe faf1 	bl	8001b94 <HAL_UART_Transmit>
			  lkv_lcd_process(CLEAR_DIS, 1, 1,(char*)(buff_mqtt_slave+1));
 80035b2:	4b16      	ldr	r3, [pc, #88]	; (800360c <main+0x10c>)
 80035b4:	2201      	movs	r2, #1
 80035b6:	2101      	movs	r1, #1
 80035b8:	2001      	movs	r0, #1
 80035ba:	f7ff fbb9 	bl	8002d30 <lkv_lcd_process>
		  }

		  is_new_linux_msg = 0;
 80035be:	4b0f      	ldr	r3, [pc, #60]	; (80035fc <main+0xfc>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	701a      	strb	r2, [r3, #0]
	  nmbs_server_poll(&nmbs);
 80035c4:	e7e4      	b.n	8003590 <main+0x90>
 80035c6:	bf00      	nop
 80035c8:	200001be 	.word	0x200001be
 80035cc:	08003715 	.word	0x08003715
 80035d0:	080037f9 	.word	0x080037f9
 80035d4:	08003835 	.word	0x08003835
 80035d8:	08003921 	.word	0x08003921
 80035dc:	08003a09 	.word	0x08003a09
 80035e0:	08003a69 	.word	0x08003a69
 80035e4:	08003ac9 	.word	0x08003ac9
 80035e8:	08003b05 	.word	0x08003b05
 80035ec:	200005e4 	.word	0x200005e4
 80035f0:	080034ed 	.word	0x080034ed
 80035f4:	08006ee4 	.word	0x08006ee4
 80035f8:	08006ef0 	.word	0x08006ef0
 80035fc:	200001bf 	.word	0x200001bf
 8003600:	200005c4 	.word	0x200005c4
 8003604:	08006ef8 	.word	0x08006ef8
 8003608:	20000134 	.word	0x20000134
 800360c:	200005c5 	.word	0x200005c5

08003610 <SysTick_Handler>:
  }
}


void SysTick_Handler(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
	g_sys_time++;
 8003614:	4b04      	ldr	r3, [pc, #16]	; (8003628 <SysTick_Handler+0x18>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	3301      	adds	r3, #1
 800361a:	4a03      	ldr	r2, [pc, #12]	; (8003628 <SysTick_Handler+0x18>)
 800361c:	6013      	str	r3, [r2, #0]
  HAL_IncTick();
 800361e:	f7fd f989 	bl	8000934 <HAL_IncTick>
//  if(g_sys_time % 5000 == 0){
//	  HAL_UART_Transmit(&huart1, (uint8_t*)"*D2L6C2;\n", strlen("*D2L6C2;\n"), 100);
//  }


}
 8003622:	bf00      	nop
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	200000d8 	.word	0x200000d8

0800362c <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003630:	2001      	movs	r0, #1
 8003632:	f7fd fd1d 	bl	8001070 <HAL_GPIO_EXTI_IRQHandler>
}
 8003636:	bf00      	nop
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <USART3_IRQHandler>:


void USART3_IRQHandler(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart3);
 8003640:	4810      	ldr	r0, [pc, #64]	; (8003684 <USART3_IRQHandler+0x48>)
 8003642:	f7fe fb69 	bl	8001d18 <HAL_UART_IRQHandler>
	HAL_UART_Receive_IT(&huart3, &buff_rx, 1);
 8003646:	2201      	movs	r2, #1
 8003648:	490f      	ldr	r1, [pc, #60]	; (8003688 <USART3_IRQHandler+0x4c>)
 800364a:	480e      	ldr	r0, [pc, #56]	; (8003684 <USART3_IRQHandler+0x48>)
 800364c:	f7fe fb34 	bl	8001cb8 <HAL_UART_Receive_IT>
	ring_buffer[front_index] = buff_rx;
 8003650:	4b0e      	ldr	r3, [pc, #56]	; (800368c <USART3_IRQHandler+0x50>)
 8003652:	881b      	ldrh	r3, [r3, #0]
 8003654:	b29b      	uxth	r3, r3
 8003656:	461a      	mov	r2, r3
 8003658:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <USART3_IRQHandler+0x4c>)
 800365a:	7819      	ldrb	r1, [r3, #0]
 800365c:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <USART3_IRQHandler+0x54>)
 800365e:	5499      	strb	r1, [r3, r2]
	front_index++;
 8003660:	4b0a      	ldr	r3, [pc, #40]	; (800368c <USART3_IRQHandler+0x50>)
 8003662:	881b      	ldrh	r3, [r3, #0]
 8003664:	b29b      	uxth	r3, r3
 8003666:	3301      	adds	r3, #1
 8003668:	b29a      	uxth	r2, r3
 800366a:	4b08      	ldr	r3, [pc, #32]	; (800368c <USART3_IRQHandler+0x50>)
 800366c:	801a      	strh	r2, [r3, #0]
	if(front_index >= 1024){
 800366e:	4b07      	ldr	r3, [pc, #28]	; (800368c <USART3_IRQHandler+0x50>)
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	b29b      	uxth	r3, r3
 8003674:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003678:	d302      	bcc.n	8003680 <USART3_IRQHandler+0x44>
		front_index = 0;
 800367a:	4b04      	ldr	r3, [pc, #16]	; (800368c <USART3_IRQHandler+0x50>)
 800367c:	2200      	movs	r2, #0
 800367e:	801a      	strh	r2, [r3, #0]
	}
}
 8003680:	bf00      	nop
 8003682:	bd80      	pop	{r7, pc}
 8003684:	20000178 	.word	0x20000178
 8003688:	200001bc 	.word	0x200001bc
 800368c:	200005c0 	.word	0x200005c0
 8003690:	200001c0 	.word	0x200001c0

08003694 <USART1_IRQHandler>:



void USART1_IRQHandler(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 8003698:	4819      	ldr	r0, [pc, #100]	; (8003700 <USART1_IRQHandler+0x6c>)
 800369a:	f7fe fb3d 	bl	8001d18 <HAL_UART_IRQHandler>
	HAL_UART_Receive_IT(&huart1, &buff_rx_mqtt, 1);
 800369e:	2201      	movs	r2, #1
 80036a0:	4918      	ldr	r1, [pc, #96]	; (8003704 <USART1_IRQHandler+0x70>)
 80036a2:	4817      	ldr	r0, [pc, #92]	; (8003700 <USART1_IRQHandler+0x6c>)
 80036a4:	f7fe fb08 	bl	8001cb8 <HAL_UART_Receive_IT>

	if(buff_rx_mqtt == '*'){
 80036a8:	4b16      	ldr	r3, [pc, #88]	; (8003704 <USART1_IRQHandler+0x70>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b2a      	cmp	r3, #42	; 0x2a
 80036ae:	d103      	bne.n	80036b8 <USART1_IRQHandler+0x24>
		mqtt_index = 0;
 80036b0:	4b15      	ldr	r3, [pc, #84]	; (8003708 <USART1_IRQHandler+0x74>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	701a      	strb	r2, [r3, #0]
		mqtt_index++;
		if(mqtt_index >= 32){
			mqtt_index = 0;
		}
	}
}
 80036b6:	e021      	b.n	80036fc <USART1_IRQHandler+0x68>
	} else if(buff_rx_mqtt == ';'){
 80036b8:	4b12      	ldr	r3, [pc, #72]	; (8003704 <USART1_IRQHandler+0x70>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b3b      	cmp	r3, #59	; 0x3b
 80036be:	d109      	bne.n	80036d4 <USART1_IRQHandler+0x40>
		buff_mqtt_slave[mqtt_index] = '\0';
 80036c0:	4b11      	ldr	r3, [pc, #68]	; (8003708 <USART1_IRQHandler+0x74>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	461a      	mov	r2, r3
 80036c6:	4b11      	ldr	r3, [pc, #68]	; (800370c <USART1_IRQHandler+0x78>)
 80036c8:	2100      	movs	r1, #0
 80036ca:	5499      	strb	r1, [r3, r2]
		is_new_linux_msg = 1;
 80036cc:	4b10      	ldr	r3, [pc, #64]	; (8003710 <USART1_IRQHandler+0x7c>)
 80036ce:	2201      	movs	r2, #1
 80036d0:	701a      	strb	r2, [r3, #0]
}
 80036d2:	e013      	b.n	80036fc <USART1_IRQHandler+0x68>
		buff_mqtt_slave[mqtt_index] = buff_rx_mqtt;
 80036d4:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <USART1_IRQHandler+0x74>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	461a      	mov	r2, r3
 80036da:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <USART1_IRQHandler+0x70>)
 80036dc:	7819      	ldrb	r1, [r3, #0]
 80036de:	4b0b      	ldr	r3, [pc, #44]	; (800370c <USART1_IRQHandler+0x78>)
 80036e0:	5499      	strb	r1, [r3, r2]
		mqtt_index++;
 80036e2:	4b09      	ldr	r3, [pc, #36]	; (8003708 <USART1_IRQHandler+0x74>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	3301      	adds	r3, #1
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	4b07      	ldr	r3, [pc, #28]	; (8003708 <USART1_IRQHandler+0x74>)
 80036ec:	701a      	strb	r2, [r3, #0]
		if(mqtt_index >= 32){
 80036ee:	4b06      	ldr	r3, [pc, #24]	; (8003708 <USART1_IRQHandler+0x74>)
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2b1f      	cmp	r3, #31
 80036f4:	d902      	bls.n	80036fc <USART1_IRQHandler+0x68>
			mqtt_index = 0;
 80036f6:	4b04      	ldr	r3, [pc, #16]	; (8003708 <USART1_IRQHandler+0x74>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	701a      	strb	r2, [r3, #0]
}
 80036fc:	bf00      	nop
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	20000134 	.word	0x20000134
 8003704:	200001bd 	.word	0x200001bd
 8003708:	200001be 	.word	0x200001be
 800370c:	200005c4 	.word	0x200005c4
 8003710:	200001bf 	.word	0x200001bf

08003714 <read_serial>:
uint16_t server_holding_registers[HOLD_REGS_ADDR_MAX] = {0,1,2,3,4,5,6,7,8,9};
uint16_t server_input_registers[INPUT_REGS_ADDR_MAX] = {01,11,21,31,41,51,61,71,81,91};



int32_t read_serial(uint8_t* buf, uint16_t count, int32_t byte_timeout_ms, void* arg) {
 8003714:	b480      	push	{r7}
 8003716:	b089      	sub	sp, #36	; 0x24
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	607a      	str	r2, [r7, #4]
 800371e:	603b      	str	r3, [r7, #0]
 8003720:	460b      	mov	r3, r1
 8003722:	817b      	strh	r3, [r7, #10]
	uint32_t timeout = g_sys_time + byte_timeout_ms;
 8003724:	4b30      	ldr	r3, [pc, #192]	; (80037e8 <read_serial+0xd4>)
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4413      	add	r3, r2
 800372c:	617b      	str	r3, [r7, #20]
	while(g_sys_time < timeout){
 800372e:	e04e      	b.n	80037ce <read_serial+0xba>
		uint32_t gap_ = 0;
 8003730:	2300      	movs	r3, #0
 8003732:	61fb      	str	r3, [r7, #28]
		if(front_index > rear_index){
 8003734:	4b2d      	ldr	r3, [pc, #180]	; (80037ec <read_serial+0xd8>)
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	b29a      	uxth	r2, r3
 800373a:	4b2d      	ldr	r3, [pc, #180]	; (80037f0 <read_serial+0xdc>)
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	b29b      	uxth	r3, r3
 8003740:	429a      	cmp	r2, r3
 8003742:	d908      	bls.n	8003756 <read_serial+0x42>
			gap_ = front_index - rear_index;
 8003744:	4b29      	ldr	r3, [pc, #164]	; (80037ec <read_serial+0xd8>)
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	b29b      	uxth	r3, r3
 800374a:	461a      	mov	r2, r3
 800374c:	4b28      	ldr	r3, [pc, #160]	; (80037f0 <read_serial+0xdc>)
 800374e:	881b      	ldrh	r3, [r3, #0]
 8003750:	b29b      	uxth	r3, r3
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	61fb      	str	r3, [r7, #28]
		}
		if(front_index < rear_index){
 8003756:	4b25      	ldr	r3, [pc, #148]	; (80037ec <read_serial+0xd8>)
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	b29a      	uxth	r2, r3
 800375c:	4b24      	ldr	r3, [pc, #144]	; (80037f0 <read_serial+0xdc>)
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	b29b      	uxth	r3, r3
 8003762:	429a      	cmp	r2, r3
 8003764:	d209      	bcs.n	800377a <read_serial+0x66>
			gap_ = 1024 + front_index - rear_index;
 8003766:	4b21      	ldr	r3, [pc, #132]	; (80037ec <read_serial+0xd8>)
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	b29b      	uxth	r3, r3
 800376c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003770:	4a1f      	ldr	r2, [pc, #124]	; (80037f0 <read_serial+0xdc>)
 8003772:	8812      	ldrh	r2, [r2, #0]
 8003774:	b292      	uxth	r2, r2
 8003776:	1a9b      	subs	r3, r3, r2
 8003778:	61fb      	str	r3, [r7, #28]
		}
		if(gap_ >= count){
 800377a:	897b      	ldrh	r3, [r7, #10]
 800377c:	69fa      	ldr	r2, [r7, #28]
 800377e:	429a      	cmp	r2, r3
 8003780:	d325      	bcc.n	80037ce <read_serial+0xba>
			for(int i = 0; i < count; i++){
 8003782:	2300      	movs	r3, #0
 8003784:	61bb      	str	r3, [r7, #24]
 8003786:	e01c      	b.n	80037c2 <read_serial+0xae>
				*(buf + i) = ring_buffer[rear_index];
 8003788:	4b19      	ldr	r3, [pc, #100]	; (80037f0 <read_serial+0xdc>)
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	b29b      	uxth	r3, r3
 800378e:	4619      	mov	r1, r3
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	4413      	add	r3, r2
 8003796:	4a17      	ldr	r2, [pc, #92]	; (80037f4 <read_serial+0xe0>)
 8003798:	5c52      	ldrb	r2, [r2, r1]
 800379a:	701a      	strb	r2, [r3, #0]
				rear_index++;
 800379c:	4b14      	ldr	r3, [pc, #80]	; (80037f0 <read_serial+0xdc>)
 800379e:	881b      	ldrh	r3, [r3, #0]
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	3301      	adds	r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	4b12      	ldr	r3, [pc, #72]	; (80037f0 <read_serial+0xdc>)
 80037a8:	801a      	strh	r2, [r3, #0]
				if(rear_index >= 1024){
 80037aa:	4b11      	ldr	r3, [pc, #68]	; (80037f0 <read_serial+0xdc>)
 80037ac:	881b      	ldrh	r3, [r3, #0]
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b4:	d302      	bcc.n	80037bc <read_serial+0xa8>
					rear_index = 0;
 80037b6:	4b0e      	ldr	r3, [pc, #56]	; (80037f0 <read_serial+0xdc>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	801a      	strh	r2, [r3, #0]
			for(int i = 0; i < count; i++){
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	3301      	adds	r3, #1
 80037c0:	61bb      	str	r3, [r7, #24]
 80037c2:	897b      	ldrh	r3, [r7, #10]
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	dbde      	blt.n	8003788 <read_serial+0x74>
				}
			}
			return count;
 80037ca:	897b      	ldrh	r3, [r7, #10]
 80037cc:	e006      	b.n	80037dc <read_serial+0xc8>
	while(g_sys_time < timeout){
 80037ce:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <read_serial+0xd4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d8ab      	bhi.n	8003730 <read_serial+0x1c>
		}
	}
	return -1;
 80037d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3724      	adds	r7, #36	; 0x24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	200000d8 	.word	0x200000d8
 80037ec:	200005c0 	.word	0x200005c0
 80037f0:	200005c2 	.word	0x200005c2
 80037f4:	200001c0 	.word	0x200001c0

080037f8 <write_serial>:


int32_t write_serial(const uint8_t* buf, uint16_t count, int32_t byte_timeout_ms, void* arg) {
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	607a      	str	r2, [r7, #4]
 8003802:	603b      	str	r3, [r7, #0]
 8003804:	460b      	mov	r3, r1
 8003806:	817b      	strh	r3, [r7, #10]
	HAL_UART_Transmit(&huart3, buf, count, byte_timeout_ms);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	897a      	ldrh	r2, [r7, #10]
 800380c:	68f9      	ldr	r1, [r7, #12]
 800380e:	4804      	ldr	r0, [pc, #16]	; (8003820 <write_serial+0x28>)
 8003810:	f7fe f9c0 	bl	8001b94 <HAL_UART_Transmit>
  return count;
 8003814:	897b      	ldrh	r3, [r7, #10]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	20000178 	.word	0x20000178

08003824 <onError>:


void onError(void) {
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0

	return;
 8003828:	bf00      	nop
}
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
	...

08003834 <handle_read_coils>:


nmbs_error handle_read_coils(uint16_t address, uint16_t quantity, nmbs_bitfield coils_out, uint8_t unit_id, void *arg) {
 8003834:	b480      	push	{r7}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	60ba      	str	r2, [r7, #8]
 800383c:	461a      	mov	r2, r3
 800383e:	4603      	mov	r3, r0
 8003840:	81fb      	strh	r3, [r7, #14]
 8003842:	460b      	mov	r3, r1
 8003844:	81bb      	strh	r3, [r7, #12]
 8003846:	4613      	mov	r3, r2
 8003848:	71fb      	strb	r3, [r7, #7]
  if (address + quantity > COILS_ADDR_MAX + 1)
 800384a:	89fa      	ldrh	r2, [r7, #14]
 800384c:	89bb      	ldrh	r3, [r7, #12]
 800384e:	4413      	add	r3, r2
 8003850:	2b10      	cmp	r3, #16
 8003852:	dd01      	ble.n	8003858 <handle_read_coils+0x24>
    return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 8003854:	2302      	movs	r3, #2
 8003856:	e05a      	b.n	800390e <handle_read_coils+0xda>

  // Read our coils values into coils_out
  for (int i = 0; i < quantity; i++) {
 8003858:	2300      	movs	r3, #0
 800385a:	617b      	str	r3, [r7, #20]
 800385c:	e052      	b.n	8003904 <handle_read_coils+0xd0>
    bool value = nmbs_bitfield_read(server_coils, address + i);
 800385e:	89fa      	ldrh	r2, [r7, #14]
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	4413      	add	r3, r2
 8003864:	2b00      	cmp	r3, #0
 8003866:	da00      	bge.n	800386a <handle_read_coils+0x36>
 8003868:	3307      	adds	r3, #7
 800386a:	10db      	asrs	r3, r3, #3
 800386c:	461a      	mov	r2, r3
 800386e:	4b2b      	ldr	r3, [pc, #172]	; (800391c <handle_read_coils+0xe8>)
 8003870:	5c9b      	ldrb	r3, [r3, r2]
 8003872:	4619      	mov	r1, r3
 8003874:	89fa      	ldrh	r2, [r7, #14]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	4413      	add	r3, r2
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	fa41 f303 	asr.w	r3, r1, r3
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	bf14      	ite	ne
 800388a:	2301      	movne	r3, #1
 800388c:	2300      	moveq	r3, #0
 800388e:	74fb      	strb	r3, [r7, #19]
    nmbs_bitfield_write(coils_out, i, value);
 8003890:	7cfb      	ldrb	r3, [r7, #19]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d014      	beq.n	80038c0 <handle_read_coils+0x8c>
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2b00      	cmp	r3, #0
 800389a:	da00      	bge.n	800389e <handle_read_coils+0x6a>
 800389c:	3307      	adds	r3, #7
 800389e:	10db      	asrs	r3, r3, #3
 80038a0:	461a      	mov	r2, r3
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	4413      	add	r3, r2
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	b25a      	sxtb	r2, r3
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	2101      	movs	r1, #1
 80038b2:	fa01 f303 	lsl.w	r3, r1, r3
 80038b6:	b25b      	sxtb	r3, r3
 80038b8:	4313      	orrs	r3, r2
 80038ba:	b25b      	sxtb	r3, r3
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	e015      	b.n	80038ec <handle_read_coils+0xb8>
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	da00      	bge.n	80038c8 <handle_read_coils+0x94>
 80038c6:	3307      	adds	r3, #7
 80038c8:	10db      	asrs	r3, r3, #3
 80038ca:	461a      	mov	r2, r3
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	4413      	add	r3, r2
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	b25a      	sxtb	r2, r3
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	2101      	movs	r1, #1
 80038dc:	fa01 f303 	lsl.w	r3, r1, r3
 80038e0:	b25b      	sxtb	r3, r3
 80038e2:	43db      	mvns	r3, r3
 80038e4:	b25b      	sxtb	r3, r3
 80038e6:	4013      	ands	r3, r2
 80038e8:	b25b      	sxtb	r3, r3
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	da00      	bge.n	80038f4 <handle_read_coils+0xc0>
 80038f2:	3307      	adds	r3, #7
 80038f4:	10db      	asrs	r3, r3, #3
 80038f6:	4619      	mov	r1, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	440b      	add	r3, r1
 80038fc:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < quantity; i++) {
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	3301      	adds	r3, #1
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	89bb      	ldrh	r3, [r7, #12]
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	429a      	cmp	r2, r3
 800390a:	dba8      	blt.n	800385e <handle_read_coils+0x2a>
  }

  return NMBS_ERROR_NONE;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	371c      	adds	r7, #28
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	20000738 	.word	0x20000738

08003920 <handle_write_multiple_coils>:


nmbs_error handle_write_multiple_coils(uint16_t address, uint16_t quantity, const nmbs_bitfield coils, uint8_t unit_id, void *arg) {
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	60ba      	str	r2, [r7, #8]
 8003928:	461a      	mov	r2, r3
 800392a:	4603      	mov	r3, r0
 800392c:	81fb      	strh	r3, [r7, #14]
 800392e:	460b      	mov	r3, r1
 8003930:	81bb      	strh	r3, [r7, #12]
 8003932:	4613      	mov	r3, r2
 8003934:	71fb      	strb	r3, [r7, #7]
  if (address + quantity > COILS_ADDR_MAX + 1)
 8003936:	89fa      	ldrh	r2, [r7, #14]
 8003938:	89bb      	ldrh	r3, [r7, #12]
 800393a:	4413      	add	r3, r2
 800393c:	2b10      	cmp	r3, #16
 800393e:	dd01      	ble.n	8003944 <handle_write_multiple_coils+0x24>
    return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 8003940:	2302      	movs	r3, #2
 8003942:	e058      	b.n	80039f6 <handle_write_multiple_coils+0xd6>

  // Write coils values to our server_coils
  for (int i = 0; i < quantity; i++) {
 8003944:	2300      	movs	r3, #0
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	e050      	b.n	80039ec <handle_write_multiple_coils+0xcc>
    nmbs_bitfield_write(server_coils, address + i, nmbs_bitfield_read(coils, i));
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	2b00      	cmp	r3, #0
 800394e:	da00      	bge.n	8003952 <handle_write_multiple_coils+0x32>
 8003950:	3307      	adds	r3, #7
 8003952:	10db      	asrs	r3, r3, #3
 8003954:	461a      	mov	r2, r3
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	4413      	add	r3, r2
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	461a      	mov	r2, r3
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	fa42 f303 	asr.w	r3, r2, r3
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b00      	cmp	r3, #0
 800396e:	d017      	beq.n	80039a0 <handle_write_multiple_coils+0x80>
 8003970:	89fa      	ldrh	r2, [r7, #14]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	4413      	add	r3, r2
 8003976:	2b00      	cmp	r3, #0
 8003978:	da00      	bge.n	800397c <handle_write_multiple_coils+0x5c>
 800397a:	3307      	adds	r3, #7
 800397c:	10db      	asrs	r3, r3, #3
 800397e:	461a      	mov	r2, r3
 8003980:	4b20      	ldr	r3, [pc, #128]	; (8003a04 <handle_write_multiple_coils+0xe4>)
 8003982:	5c9b      	ldrb	r3, [r3, r2]
 8003984:	b25a      	sxtb	r2, r3
 8003986:	89f9      	ldrh	r1, [r7, #14]
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	440b      	add	r3, r1
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	2101      	movs	r1, #1
 8003992:	fa01 f303 	lsl.w	r3, r1, r3
 8003996:	b25b      	sxtb	r3, r3
 8003998:	4313      	orrs	r3, r2
 800399a:	b25b      	sxtb	r3, r3
 800399c:	b2da      	uxtb	r2, r3
 800399e:	e018      	b.n	80039d2 <handle_write_multiple_coils+0xb2>
 80039a0:	89fa      	ldrh	r2, [r7, #14]
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	4413      	add	r3, r2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	da00      	bge.n	80039ac <handle_write_multiple_coils+0x8c>
 80039aa:	3307      	adds	r3, #7
 80039ac:	10db      	asrs	r3, r3, #3
 80039ae:	461a      	mov	r2, r3
 80039b0:	4b14      	ldr	r3, [pc, #80]	; (8003a04 <handle_write_multiple_coils+0xe4>)
 80039b2:	5c9b      	ldrb	r3, [r3, r2]
 80039b4:	b25a      	sxtb	r2, r3
 80039b6:	89f9      	ldrh	r1, [r7, #14]
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	440b      	add	r3, r1
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	2101      	movs	r1, #1
 80039c2:	fa01 f303 	lsl.w	r3, r1, r3
 80039c6:	b25b      	sxtb	r3, r3
 80039c8:	43db      	mvns	r3, r3
 80039ca:	b25b      	sxtb	r3, r3
 80039cc:	4013      	ands	r3, r2
 80039ce:	b25b      	sxtb	r3, r3
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	89f9      	ldrh	r1, [r7, #14]
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	440b      	add	r3, r1
 80039d8:	2b00      	cmp	r3, #0
 80039da:	da00      	bge.n	80039de <handle_write_multiple_coils+0xbe>
 80039dc:	3307      	adds	r3, #7
 80039de:	10db      	asrs	r3, r3, #3
 80039e0:	4619      	mov	r1, r3
 80039e2:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <handle_write_multiple_coils+0xe4>)
 80039e4:	545a      	strb	r2, [r3, r1]
  for (int i = 0; i < quantity; i++) {
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	3301      	adds	r3, #1
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	89bb      	ldrh	r3, [r7, #12]
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	dbaa      	blt.n	800394a <handle_write_multiple_coils+0x2a>
  }

  return NMBS_ERROR_NONE;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	371c      	adds	r7, #28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	20000738 	.word	0x20000738

08003a08 <handler_read_holding_registers>:


nmbs_error handler_read_holding_registers(uint16_t address, uint16_t quantity, uint16_t* registers_out, uint8_t unit_id, void *arg) {
 8003a08:	b480      	push	{r7}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60ba      	str	r2, [r7, #8]
 8003a10:	461a      	mov	r2, r3
 8003a12:	4603      	mov	r3, r0
 8003a14:	81fb      	strh	r3, [r7, #14]
 8003a16:	460b      	mov	r3, r1
 8003a18:	81bb      	strh	r3, [r7, #12]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	71fb      	strb	r3, [r7, #7]
  if (address + quantity > HOLD_REGS_ADDR_MAX + 1)
 8003a1e:	89fa      	ldrh	r2, [r7, #14]
 8003a20:	89bb      	ldrh	r3, [r7, #12]
 8003a22:	4413      	add	r3, r2
 8003a24:	2b0b      	cmp	r3, #11
 8003a26:	dd01      	ble.n	8003a2c <handler_read_holding_registers+0x24>
    return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e015      	b.n	8003a58 <handler_read_holding_registers+0x50>

  // Read our registers values into registers_out
  for (int i = 0; i < quantity; i++)
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	e00d      	b.n	8003a4e <handler_read_holding_registers+0x46>
    registers_out[i] = server_holding_registers[address + i];
 8003a32:	89fa      	ldrh	r2, [r7, #14]
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	441a      	add	r2, r3
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	68b9      	ldr	r1, [r7, #8]
 8003a3e:	440b      	add	r3, r1
 8003a40:	4908      	ldr	r1, [pc, #32]	; (8003a64 <handler_read_holding_registers+0x5c>)
 8003a42:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003a46:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < quantity; i++)
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	89bb      	ldrh	r3, [r7, #12]
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	dbed      	blt.n	8003a32 <handler_read_holding_registers+0x2a>

  return NMBS_ERROR_NONE;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	371c      	adds	r7, #28
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	2000003c 	.word	0x2000003c

08003a68 <handle_write_multiple_registers>:


nmbs_error handle_write_multiple_registers(uint16_t address, uint16_t quantity, const uint16_t* registers, uint8_t unit_id, void *arg) {
 8003a68:	b480      	push	{r7}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60ba      	str	r2, [r7, #8]
 8003a70:	461a      	mov	r2, r3
 8003a72:	4603      	mov	r3, r0
 8003a74:	81fb      	strh	r3, [r7, #14]
 8003a76:	460b      	mov	r3, r1
 8003a78:	81bb      	strh	r3, [r7, #12]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	71fb      	strb	r3, [r7, #7]
  if (address + quantity > HOLD_REGS_ADDR_MAX + 1)
 8003a7e:	89fa      	ldrh	r2, [r7, #14]
 8003a80:	89bb      	ldrh	r3, [r7, #12]
 8003a82:	4413      	add	r3, r2
 8003a84:	2b0b      	cmp	r3, #11
 8003a86:	dd01      	ble.n	8003a8c <handle_write_multiple_registers+0x24>
    return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 8003a88:	2302      	movs	r3, #2
 8003a8a:	e015      	b.n	8003ab8 <handle_write_multiple_registers+0x50>

  // Write registers values to our server_holding_registers
  for (int i = 0; i < quantity; i++)
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	e00d      	b.n	8003aae <handle_write_multiple_registers+0x46>
	  server_holding_registers[address + i] = registers[i];
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	441a      	add	r2, r3
 8003a9a:	89f9      	ldrh	r1, [r7, #14]
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	440b      	add	r3, r1
 8003aa0:	8811      	ldrh	r1, [r2, #0]
 8003aa2:	4a08      	ldr	r2, [pc, #32]	; (8003ac4 <handle_write_multiple_registers+0x5c>)
 8003aa4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < quantity; i++)
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	617b      	str	r3, [r7, #20]
 8003aae:	89bb      	ldrh	r3, [r7, #12]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	dbed      	blt.n	8003a92 <handle_write_multiple_registers+0x2a>

  return NMBS_ERROR_NONE;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	371c      	adds	r7, #28
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	2000003c 	.word	0x2000003c

08003ac8 <handle_write_single_registers>:

nmbs_error handle_write_single_registers(uint16_t address, uint16_t value, uint8_t unit_id, void *arg) {
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	607b      	str	r3, [r7, #4]
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	81fb      	strh	r3, [r7, #14]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	81bb      	strh	r3, [r7, #12]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	72fb      	strb	r3, [r7, #11]
  if (address > HOLD_REGS_ADDR_MAX + 1)
 8003adc:	89fb      	ldrh	r3, [r7, #14]
 8003ade:	2b0b      	cmp	r3, #11
 8003ae0:	d901      	bls.n	8003ae6 <handle_write_single_registers+0x1e>
    return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	e005      	b.n	8003af2 <handle_write_single_registers+0x2a>

  // Write register value to our server_holding_register

	  server_holding_registers[address] = value;
 8003ae6:	89fb      	ldrh	r3, [r7, #14]
 8003ae8:	4905      	ldr	r1, [pc, #20]	; (8003b00 <handle_write_single_registers+0x38>)
 8003aea:	89ba      	ldrh	r2, [r7, #12]
 8003aec:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  return NMBS_ERROR_NONE;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	2000003c 	.word	0x2000003c

08003b04 <handler_read_input_registers>:


nmbs_error handler_read_input_registers(uint16_t address, uint16_t quantity, uint16_t* registers_out, uint8_t unit_id, void *arg) {
 8003b04:	b480      	push	{r7}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60ba      	str	r2, [r7, #8]
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	4603      	mov	r3, r0
 8003b10:	81fb      	strh	r3, [r7, #14]
 8003b12:	460b      	mov	r3, r1
 8003b14:	81bb      	strh	r3, [r7, #12]
 8003b16:	4613      	mov	r3, r2
 8003b18:	71fb      	strb	r3, [r7, #7]
  if (address + quantity > INPUT_REGS_ADDR_MAX + 1)
 8003b1a:	89fa      	ldrh	r2, [r7, #14]
 8003b1c:	89bb      	ldrh	r3, [r7, #12]
 8003b1e:	4413      	add	r3, r2
 8003b20:	2b0b      	cmp	r3, #11
 8003b22:	dd01      	ble.n	8003b28 <handler_read_input_registers+0x24>
    return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 8003b24:	2302      	movs	r3, #2
 8003b26:	e015      	b.n	8003b54 <handler_read_input_registers+0x50>

  // Read our registers values into registers_out
  for (int i = 0; i < quantity; i++)
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	e00d      	b.n	8003b4a <handler_read_input_registers+0x46>
    registers_out[i] = server_input_registers[address + i];
 8003b2e:	89fa      	ldrh	r2, [r7, #14]
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	441a      	add	r2, r3
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	68b9      	ldr	r1, [r7, #8]
 8003b3a:	440b      	add	r3, r1
 8003b3c:	4908      	ldr	r1, [pc, #32]	; (8003b60 <handler_read_input_registers+0x5c>)
 8003b3e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003b42:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < quantity; i++)
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	3301      	adds	r3, #1
 8003b48:	617b      	str	r3, [r7, #20]
 8003b4a:	89bb      	ldrh	r3, [r7, #12]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	dbed      	blt.n	8003b2e <handler_read_input_registers+0x2a>

  return NMBS_ERROR_NONE;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	371c      	adds	r7, #28
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	20000050 	.word	0x20000050

08003b64 <get_1>:
#else
#define NMBS_DEBUG_PRINT(...) (void) (0)
#endif


static uint8_t get_1(nmbs_t* nmbs) {
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
    uint8_t result = nmbs->msg.buf[nmbs->msg.buf_idx];
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8003b72:	461a      	mov	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	5c9b      	ldrb	r3, [r3, r2]
 8003b78:	73fb      	strb	r3, [r7, #15]
    nmbs->msg.buf_idx++;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8003b80:	3301      	adds	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
    return result;
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <put_1>:


static void put_1(nmbs_t* nmbs, uint8_t data) {
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	70fb      	strb	r3, [r7, #3]
    nmbs->msg.buf[nmbs->msg.buf_idx] = data;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8003baa:	4619      	mov	r1, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	78fa      	ldrb	r2, [r7, #3]
 8003bb0:	545a      	strb	r2, [r3, r1]
    nmbs->msg.buf_idx++;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8003bb8:	3301      	adds	r3, #1
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <discard_1>:


static void discard_1(nmbs_t* nmbs) {
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
    nmbs->msg.buf_idx++;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8003bdc:	3301      	adds	r3, #1
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <discard_n>:


static void discard_n(nmbs_t* nmbs, uint16_t n) {
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	807b      	strh	r3, [r7, #2]
    nmbs->msg.buf_idx += n;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 8003c04:	887b      	ldrh	r3, [r7, #2]
 8003c06:	4413      	add	r3, r2
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <get_2>:


static uint16_t get_2(nmbs_t* nmbs) {
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
    uint16_t result =
            ((uint16_t) nmbs->msg.buf[nmbs->msg.buf_idx]) << 8 | (uint16_t) nmbs->msg.buf[nmbs->msg.buf_idx + 1];
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	5c9b      	ldrb	r3, [r3, r2]
 8003c30:	021b      	lsls	r3, r3, #8
 8003c32:	b21a      	sxth	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	5ccb      	ldrb	r3, [r1, r3]
 8003c40:	b21b      	sxth	r3, r3
 8003c42:	4313      	orrs	r3, r2
 8003c44:	b21b      	sxth	r3, r3
    uint16_t result =
 8003c46:	81fb      	strh	r3, [r7, #14]
    nmbs->msg.buf_idx += 2;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8003c4e:	3302      	adds	r3, #2
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
    return result;
 8003c58:	89fb      	ldrh	r3, [r7, #14]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <put_2>:


static void put_2(nmbs_t* nmbs, uint16_t data) {
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	460b      	mov	r3, r1
 8003c70:	807b      	strh	r3, [r7, #2]
    nmbs->msg.buf[nmbs->msg.buf_idx] = (uint8_t) ((data >> 8) & 0xFFU);
 8003c72:	887b      	ldrh	r3, [r7, #2]
 8003c74:	0a1b      	lsrs	r3, r3, #8
 8003c76:	b299      	uxth	r1, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8003c7e:	461a      	mov	r2, r3
 8003c80:	b2c9      	uxtb	r1, r1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	5499      	strb	r1, [r3, r2]
    nmbs->msg.buf[nmbs->msg.buf_idx + 1] = (uint8_t) data;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	887a      	ldrh	r2, [r7, #2]
 8003c90:	b2d1      	uxtb	r1, r2
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	54d1      	strb	r1, [r2, r3]
    nmbs->msg.buf_idx += 2;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8003c9c:	3302      	adds	r3, #2
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <get_n>:


static uint8_t* get_n(nmbs_t* nmbs, uint16_t n) {
 8003cb2:	b480      	push	{r7}
 8003cb4:	b085      	sub	sp, #20
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	460b      	mov	r3, r1
 8003cbc:	807b      	strh	r3, [r7, #2]
    uint8_t* msg_buf_ptr = nmbs->msg.buf + nmbs->msg.buf_idx;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	f8b2 2104 	ldrh.w	r2, [r2, #260]	; 0x104
 8003cc6:	4413      	add	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]
    nmbs->msg.buf_idx += n;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 8003cd0:	887b      	ldrh	r3, [r7, #2]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
    return msg_buf_ptr;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <get_regs>:


static uint16_t* get_regs(nmbs_t* nmbs, uint16_t n) {
 8003cea:	b480      	push	{r7}
 8003cec:	b085      	sub	sp, #20
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	807b      	strh	r3, [r7, #2]
    uint16_t* msg_buf_ptr = (uint16_t*) (nmbs->msg.buf + nmbs->msg.buf_idx);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	f8b2 2104 	ldrh.w	r2, [r2, #260]	; 0x104
 8003cfe:	4413      	add	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]
    nmbs->msg.buf_idx += n * 2;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 8003d08:	887b      	ldrh	r3, [r7, #2]
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	4413      	add	r3, r2
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
    while (n--) {
 8003d18:	e016      	b.n	8003d48 <get_regs+0x5e>
        msg_buf_ptr[n] = (msg_buf_ptr[n] << 8) | ((msg_buf_ptr[n] >> 8) & 0xFF);
 8003d1a:	887b      	ldrh	r3, [r7, #2]
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	4413      	add	r3, r2
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	021b      	lsls	r3, r3, #8
 8003d26:	b21a      	sxth	r2, r3
 8003d28:	887b      	ldrh	r3, [r7, #2]
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	68f9      	ldr	r1, [r7, #12]
 8003d2e:	440b      	add	r3, r1
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	0a1b      	lsrs	r3, r3, #8
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	b21b      	sxth	r3, r3
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	b219      	sxth	r1, r3
 8003d3c:	887b      	ldrh	r3, [r7, #2]
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4413      	add	r3, r2
 8003d44:	b28a      	uxth	r2, r1
 8003d46:	801a      	strh	r2, [r3, #0]
    while (n--) {
 8003d48:	887b      	ldrh	r3, [r7, #2]
 8003d4a:	1e5a      	subs	r2, r3, #1
 8003d4c:	807a      	strh	r2, [r7, #2]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1e3      	bne.n	8003d1a <get_regs+0x30>
    }
    return msg_buf_ptr;
 8003d52:	68fb      	ldr	r3, [r7, #12]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <swap_regs>:
        msg_buf_ptr[n] = (data[n] << 8) | ((data[n] >> 8) & 0xFF);
    }
}


static void swap_regs(uint16_t* data, uint16_t n) {
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	807b      	strh	r3, [r7, #2]
    while (n--) {
 8003d6c:	e016      	b.n	8003d9c <swap_regs+0x3c>
        data[n] = (data[n] << 8) | ((data[n] >> 8) & 0xFF);
 8003d6e:	887b      	ldrh	r3, [r7, #2]
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	4413      	add	r3, r2
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	021b      	lsls	r3, r3, #8
 8003d7a:	b21a      	sxth	r2, r3
 8003d7c:	887b      	ldrh	r3, [r7, #2]
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	440b      	add	r3, r1
 8003d84:	881b      	ldrh	r3, [r3, #0]
 8003d86:	0a1b      	lsrs	r3, r3, #8
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	b21b      	sxth	r3, r3
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	b219      	sxth	r1, r3
 8003d90:	887b      	ldrh	r3, [r7, #2]
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	4413      	add	r3, r2
 8003d98:	b28a      	uxth	r2, r1
 8003d9a:	801a      	strh	r2, [r3, #0]
    while (n--) {
 8003d9c:	887b      	ldrh	r3, [r7, #2]
 8003d9e:	1e5a      	subs	r2, r3, #1
 8003da0:	807a      	strh	r2, [r7, #2]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1e3      	bne.n	8003d6e <swap_regs+0xe>
    }
}
 8003da6:	bf00      	nop
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <msg_buf_reset>:


static void msg_buf_reset(nmbs_t* nmbs) {
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
    nmbs->msg.buf_idx = 0;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <msg_state_reset>:


static void msg_state_reset(nmbs_t* nmbs) {
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
    msg_buf_reset(nmbs);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7ff ffeb 	bl	8003db4 <msg_buf_reset>
    nmbs->msg.unit_id = 0;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    nmbs->msg.fc = 0;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    nmbs->msg.transaction_id = 0;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
    nmbs->msg.broadcast = false;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
    nmbs->msg.ignored = false;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
}
 8003e06:	bf00      	nop
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <nmbs_create>:
        nmbs->msg.broadcast = true;
}
#endif


nmbs_error nmbs_create(nmbs_t* nmbs, const nmbs_platform_conf* platform_conf) {
 8003e0e:	b590      	push	{r4, r7, lr}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
 8003e16:	6039      	str	r1, [r7, #0]
    if (!nmbs)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d102      	bne.n	8003e24 <nmbs_create+0x16>
        return NMBS_ERROR_INVALID_ARGUMENT;
 8003e1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e22:	e034      	b.n	8003e8e <nmbs_create+0x80>

    memset(nmbs, 0, sizeof(nmbs_t));
 8003e24:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8003e28:	2100      	movs	r1, #0
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f002 fc48 	bl	80066c0 <memset>

    nmbs->byte_timeout_ms = -1;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e36:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    nmbs->read_timeout_ms = -1;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e40:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

    if (!platform_conf)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d102      	bne.n	8003e50 <nmbs_create+0x42>
        return NMBS_ERROR_INVALID_ARGUMENT;
 8003e4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e4e:	e01e      	b.n	8003e8e <nmbs_create+0x80>

    if (platform_conf->transport != NMBS_TRANSPORT_RTU && platform_conf->transport != NMBS_TRANSPORT_TCP)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d006      	beq.n	8003e66 <nmbs_create+0x58>
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d002      	beq.n	8003e66 <nmbs_create+0x58>
        return NMBS_ERROR_INVALID_ARGUMENT;
 8003e60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e64:	e013      	b.n	8003e8e <nmbs_create+0x80>

    if (!platform_conf->read || !platform_conf->write)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <nmbs_create+0x68>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d102      	bne.n	8003e7c <nmbs_create+0x6e>
        return NMBS_ERROR_INVALID_ARGUMENT;
 8003e76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e7a:	e008      	b.n	8003e8e <nmbs_create+0x80>

    nmbs->platform = *platform_conf;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8003e84:	4613      	mov	r3, r2
 8003e86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    return NMBS_ERROR_NONE;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd90      	pop	{r4, r7, pc}

08003e96 <nmbs_set_read_timeout>:


void nmbs_set_read_timeout(nmbs_t* nmbs, int32_t timeout_ms) {
 8003e96:	b480      	push	{r7}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
 8003e9e:	6039      	str	r1, [r7, #0]
    nmbs->read_timeout_ms = timeout_ms;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <nmbs_set_byte_timeout>:


void nmbs_set_byte_timeout(nmbs_t* nmbs, int32_t timeout_ms) {
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
    nmbs->byte_timeout_ms = timeout_ms;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <nmbs_crc_calc>:
void nmbs_set_platform_arg(nmbs_t* nmbs, void* arg) {
    nmbs->platform.arg = arg;
}


uint16_t nmbs_crc_calc(const uint8_t* data, uint32_t length) {
 8003ed2:	b480      	push	{r7}
 8003ed4:	b087      	sub	sp, #28
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
 8003eda:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0xFFFF;
 8003edc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ee0:	82fb      	strh	r3, [r7, #22]
    for (uint32_t i = 0; i < length; i++) {
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	613b      	str	r3, [r7, #16]
 8003ee6:	e026      	b.n	8003f36 <nmbs_crc_calc+0x64>
        crc ^= (uint16_t) data[i];
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	4413      	add	r3, r2
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	8afb      	ldrh	r3, [r7, #22]
 8003ef4:	4053      	eors	r3, r2
 8003ef6:	82fb      	strh	r3, [r7, #22]
        for (int j = 8; j != 0; j--) {
 8003ef8:	2308      	movs	r3, #8
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	e015      	b.n	8003f2a <nmbs_crc_calc+0x58>
            if ((crc & 0x0001) != 0) {
 8003efe:	8afb      	ldrh	r3, [r7, #22]
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00a      	beq.n	8003f1e <nmbs_crc_calc+0x4c>
                crc >>= 1;
 8003f08:	8afb      	ldrh	r3, [r7, #22]
 8003f0a:	085b      	lsrs	r3, r3, #1
 8003f0c:	82fb      	strh	r3, [r7, #22]
                crc ^= 0xA001;
 8003f0e:	8afb      	ldrh	r3, [r7, #22]
 8003f10:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8003f14:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	82fb      	strh	r3, [r7, #22]
 8003f1c:	e002      	b.n	8003f24 <nmbs_crc_calc+0x52>
            }
            else
                crc >>= 1;
 8003f1e:	8afb      	ldrh	r3, [r7, #22]
 8003f20:	085b      	lsrs	r3, r3, #1
 8003f22:	82fb      	strh	r3, [r7, #22]
        for (int j = 8; j != 0; j--) {
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	60fb      	str	r3, [r7, #12]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1e6      	bne.n	8003efe <nmbs_crc_calc+0x2c>
    for (uint32_t i = 0; i < length; i++) {
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	3301      	adds	r3, #1
 8003f34:	613b      	str	r3, [r7, #16]
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d3d4      	bcc.n	8003ee8 <nmbs_crc_calc+0x16>
        }
    }

    return (uint16_t) (crc << 8) | (uint16_t) (crc >> 8);
 8003f3e:	8afb      	ldrh	r3, [r7, #22]
 8003f40:	ba5b      	rev16	r3, r3
 8003f42:	b29b      	uxth	r3, r3
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	371c      	adds	r7, #28
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <recv>:


static nmbs_error recv(nmbs_t* nmbs, uint16_t count) {
 8003f50:	b590      	push	{r4, r7, lr}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	460b      	mov	r3, r1
 8003f5a:	807b      	strh	r3, [r7, #2]
    int32_t ret =
            nmbs->platform.read(nmbs->msg.buf + nmbs->msg.buf_idx, count, nmbs->byte_timeout_ms, nmbs->platform.arg);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	f8b2 2104 	ldrh.w	r2, [r2, #260]	; 0x104
 8003f6a:	1898      	adds	r0, r3, r2
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003f78:	8879      	ldrh	r1, [r7, #2]
 8003f7a:	47a0      	blx	r4
 8003f7c:	60f8      	str	r0, [r7, #12]

    if (ret == count)
 8003f7e:	887b      	ldrh	r3, [r7, #2]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d101      	bne.n	8003f8a <recv+0x3a>
        return NMBS_ERROR_NONE;
 8003f86:	2300      	movs	r3, #0
 8003f88:	e00e      	b.n	8003fa8 <recv+0x58>

    if (ret < count) {
 8003f8a:	887b      	ldrh	r3, [r7, #2]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	da08      	bge.n	8003fa4 <recv+0x54>
        if (ret < 0)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	da02      	bge.n	8003f9e <recv+0x4e>
            return NMBS_ERROR_TRANSPORT;
 8003f98:	f06f 0303 	mvn.w	r3, #3
 8003f9c:	e004      	b.n	8003fa8 <recv+0x58>

        return NMBS_ERROR_TIMEOUT;
 8003f9e:	f06f 0302 	mvn.w	r3, #2
 8003fa2:	e001      	b.n	8003fa8 <recv+0x58>
    }

    return NMBS_ERROR_TRANSPORT;
 8003fa4:	f06f 0303 	mvn.w	r3, #3
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd90      	pop	{r4, r7, pc}

08003fb0 <send>:


static nmbs_error send(nmbs_t* nmbs, uint16_t count) {
 8003fb0:	b590      	push	{r4, r7, lr}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	807b      	strh	r3, [r7, #2]
    int32_t ret = nmbs->platform.write(nmbs->msg.buf, count, nmbs->byte_timeout_ms, nmbs->platform.arg);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003fd0:	8879      	ldrh	r1, [r7, #2]
 8003fd2:	47a0      	blx	r4
 8003fd4:	60f8      	str	r0, [r7, #12]

    if (ret == count)
 8003fd6:	887b      	ldrh	r3, [r7, #2]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d101      	bne.n	8003fe2 <send+0x32>
        return NMBS_ERROR_NONE;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	e00e      	b.n	8004000 <send+0x50>

    if (ret < count) {
 8003fe2:	887b      	ldrh	r3, [r7, #2]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	da08      	bge.n	8003ffc <send+0x4c>
        if (ret < 0)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	da02      	bge.n	8003ff6 <send+0x46>
            return NMBS_ERROR_TRANSPORT;
 8003ff0:	f06f 0303 	mvn.w	r3, #3
 8003ff4:	e004      	b.n	8004000 <send+0x50>

        return NMBS_ERROR_TIMEOUT;
 8003ff6:	f06f 0302 	mvn.w	r3, #2
 8003ffa:	e001      	b.n	8004000 <send+0x50>
    }

    return NMBS_ERROR_TRANSPORT;
 8003ffc:	f06f 0303 	mvn.w	r3, #3
}
 8004000:	4618      	mov	r0, r3
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	bd90      	pop	{r4, r7, pc}

08004008 <recv_msg_footer>:


static nmbs_error recv_msg_footer(nmbs_t* nmbs) {
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
    NMBS_DEBUG_PRINT("\n");

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8004016:	2b01      	cmp	r3, #1
 8004018:	d122      	bne.n	8004060 <recv_msg_footer+0x58>
        uint16_t crc = nmbs_crc_calc(nmbs->msg.buf, nmbs->msg.buf_idx);
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8004022:	4619      	mov	r1, r3
 8004024:	4610      	mov	r0, r2
 8004026:	f7ff ff54 	bl	8003ed2 <nmbs_crc_calc>
 800402a:	4603      	mov	r3, r0
 800402c:	81fb      	strh	r3, [r7, #14]

        nmbs_error err = recv(nmbs, 2);
 800402e:	2102      	movs	r1, #2
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7ff ff8d 	bl	8003f50 <recv>
 8004036:	4603      	mov	r3, r0
 8004038:	737b      	strb	r3, [r7, #13]
        if (err != NMBS_ERROR_NONE)
 800403a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <recv_msg_footer+0x40>
            return err;
 8004042:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004046:	e00c      	b.n	8004062 <recv_msg_footer+0x5a>

        uint16_t recv_crc = get_2(nmbs);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7ff fde7 	bl	8003c1c <get_2>
 800404e:	4603      	mov	r3, r0
 8004050:	817b      	strh	r3, [r7, #10]

        if (recv_crc != crc)
 8004052:	897a      	ldrh	r2, [r7, #10]
 8004054:	89fb      	ldrh	r3, [r7, #14]
 8004056:	429a      	cmp	r2, r3
 8004058:	d002      	beq.n	8004060 <recv_msg_footer+0x58>
            return NMBS_ERROR_CRC;
 800405a:	f06f 0304 	mvn.w	r3, #4
 800405e:	e000      	b.n	8004062 <recv_msg_footer+0x5a>
    }

    return NMBS_ERROR_NONE;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <recv_msg_header>:


static nmbs_error recv_msg_header(nmbs_t* nmbs, bool* first_byte_received) {
 800406a:	b580      	push	{r7, lr}
 800406c:	b086      	sub	sp, #24
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
 8004072:	6039      	str	r1, [r7, #0]
    // We wait for the read timeout here, just for the first message byte
    int32_t old_byte_timeout = nmbs->byte_timeout_ms;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800407a:	617b      	str	r3, [r7, #20]
    nmbs->byte_timeout_ms = nmbs->read_timeout_ms;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138

    msg_state_reset(nmbs);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f7ff fea1 	bl	8003dd0 <msg_state_reset>

    *first_byte_received = false;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2200      	movs	r2, #0
 8004092:	701a      	strb	r2, [r3, #0]

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800409a:	2b01      	cmp	r3, #1
 800409c:	d131      	bne.n	8004102 <recv_msg_header+0x98>
        nmbs_error err = recv(nmbs, 1);
 800409e:	2101      	movs	r1, #1
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f7ff ff55 	bl	8003f50 <recv>
 80040a6:	4603      	mov	r3, r0
 80040a8:	737b      	strb	r3, [r7, #13]

        nmbs->byte_timeout_ms = old_byte_timeout;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138

        if (err != NMBS_ERROR_NONE)
 80040b2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <recv_msg_header+0x56>
            return err;
 80040ba:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80040be:	e07b      	b.n	80041b8 <recv_msg_header+0x14e>

        *first_byte_received = true;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	2201      	movs	r2, #1
 80040c4:	701a      	strb	r2, [r3, #0]

        nmbs->msg.unit_id = get_1(nmbs);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7ff fd4c 	bl	8003b64 <get_1>
 80040cc:	4603      	mov	r3, r0
 80040ce:	461a      	mov	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

        err = recv(nmbs, 1);
 80040d6:	2101      	movs	r1, #1
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7ff ff39 	bl	8003f50 <recv>
 80040de:	4603      	mov	r3, r0
 80040e0:	737b      	strb	r3, [r7, #13]
        if (err != NMBS_ERROR_NONE)
 80040e2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d002      	beq.n	80040f0 <recv_msg_header+0x86>
            return err;
 80040ea:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80040ee:	e063      	b.n	80041b8 <recv_msg_header+0x14e>

        nmbs->msg.fc = get_1(nmbs);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f7ff fd37 	bl	8003b64 <get_1>
 80040f6:	4603      	mov	r3, r0
 80040f8:	461a      	mov	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
 8004100:	e059      	b.n	80041b6 <recv_msg_header+0x14c>
    }
    else if (nmbs->platform.transport == NMBS_TRANSPORT_TCP) {
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8004108:	2b02      	cmp	r3, #2
 800410a:	d154      	bne.n	80041b6 <recv_msg_header+0x14c>
        nmbs_error err = recv(nmbs, 1);
 800410c:	2101      	movs	r1, #1
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7ff ff1e 	bl	8003f50 <recv>
 8004114:	4603      	mov	r3, r0
 8004116:	74fb      	strb	r3, [r7, #19]

        nmbs->byte_timeout_ms = old_byte_timeout;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138

        if (err != NMBS_ERROR_NONE)
 8004120:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d002      	beq.n	800412e <recv_msg_header+0xc4>
            return err;
 8004128:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800412c:	e044      	b.n	80041b8 <recv_msg_header+0x14e>

        *first_byte_received = true;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	2201      	movs	r2, #1
 8004132:	701a      	strb	r2, [r3, #0]

        // Advance buf_idx
        discard_1(nmbs);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7ff fd4a 	bl	8003bce <discard_1>

        err = recv(nmbs, 7);
 800413a:	2107      	movs	r1, #7
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f7ff ff07 	bl	8003f50 <recv>
 8004142:	4603      	mov	r3, r0
 8004144:	74fb      	strb	r3, [r7, #19]
        if (err != NMBS_ERROR_NONE)
 8004146:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <recv_msg_header+0xea>
            return err;
 800414e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004152:	e031      	b.n	80041b8 <recv_msg_header+0x14e>

        // Starting over
        msg_buf_reset(nmbs);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f7ff fe2d 	bl	8003db4 <msg_buf_reset>

        nmbs->msg.transaction_id = get_2(nmbs);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7ff fd5e 	bl	8003c1c <get_2>
 8004160:	4603      	mov	r3, r0
 8004162:	461a      	mov	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
        uint16_t protocol_id = get_2(nmbs);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7ff fd56 	bl	8003c1c <get_2>
 8004170:	4603      	mov	r3, r0
 8004172:	823b      	strh	r3, [r7, #16]
        uint16_t length = get_2(nmbs);    // We should actually check the length of the request against this value
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7ff fd51 	bl	8003c1c <get_2>
 800417a:	4603      	mov	r3, r0
 800417c:	81fb      	strh	r3, [r7, #14]
        nmbs->msg.unit_id = get_1(nmbs);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7ff fcf0 	bl	8003b64 <get_1>
 8004184:	4603      	mov	r3, r0
 8004186:	461a      	mov	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
        nmbs->msg.fc = get_1(nmbs);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7ff fce8 	bl	8003b64 <get_1>
 8004194:	4603      	mov	r3, r0
 8004196:	461a      	mov	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107

        if (protocol_id != 0)
 800419e:	8a3b      	ldrh	r3, [r7, #16]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d002      	beq.n	80041aa <recv_msg_header+0x140>
            return NMBS_ERROR_INVALID_TCP_MBAP;
 80041a4:	f06f 0305 	mvn.w	r3, #5
 80041a8:	e006      	b.n	80041b8 <recv_msg_header+0x14e>

        if (length > 255)
 80041aa:	89fb      	ldrh	r3, [r7, #14]
 80041ac:	2bff      	cmp	r3, #255	; 0xff
 80041ae:	d902      	bls.n	80041b6 <recv_msg_header+0x14c>
            return NMBS_ERROR_INVALID_TCP_MBAP;
 80041b0:	f06f 0305 	mvn.w	r3, #5
 80041b4:	e000      	b.n	80041b8 <recv_msg_header+0x14e>
    }

    return NMBS_ERROR_NONE;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3718      	adds	r7, #24
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <put_msg_header>:


static void put_msg_header(nmbs_t* nmbs, uint16_t data_length) {
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	460b      	mov	r3, r1
 80041ca:	807b      	strh	r3, [r7, #2]
    msg_buf_reset(nmbs);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7ff fdf1 	bl	8003db4 <msg_buf_reset>

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d107      	bne.n	80041ec <put_msg_header+0x2c>
        put_1(nmbs, nmbs->msg.unit_id);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80041e2:	4619      	mov	r1, r3
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7ff fcd7 	bl	8003b98 <put_1>
 80041ea:	e01d      	b.n	8004228 <put_msg_header+0x68>
    }
    else if (nmbs->platform.transport == NMBS_TRANSPORT_TCP) {
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d118      	bne.n	8004228 <put_msg_header+0x68>
        put_2(nmbs, nmbs->msg.transaction_id);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 80041fc:	4619      	mov	r1, r3
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7ff fd31 	bl	8003c66 <put_2>
        put_2(nmbs, 0);
 8004204:	2100      	movs	r1, #0
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7ff fd2d 	bl	8003c66 <put_2>
        put_2(nmbs, (uint16_t) (1 + 1 + data_length));
 800420c:	887b      	ldrh	r3, [r7, #2]
 800420e:	3302      	adds	r3, #2
 8004210:	b29b      	uxth	r3, r3
 8004212:	4619      	mov	r1, r3
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7ff fd26 	bl	8003c66 <put_2>
        put_1(nmbs, nmbs->msg.unit_id);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8004220:	4619      	mov	r1, r3
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7ff fcb8 	bl	8003b98 <put_1>
    }

    put_1(nmbs, nmbs->msg.fc);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 800422e:	4619      	mov	r1, r3
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f7ff fcb1 	bl	8003b98 <put_1>
}
 8004236:	bf00      	nop
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <send_msg>:


static nmbs_error send_msg(nmbs_t* nmbs) {
 800423e:	b580      	push	{r7, lr}
 8004240:	b084      	sub	sp, #16
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
    NMBS_DEBUG_PRINT("\n");

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800424c:	2b01      	cmp	r3, #1
 800424e:	d10e      	bne.n	800426e <send_msg+0x30>
        uint16_t crc = nmbs_crc_calc(nmbs->msg.buf, nmbs->msg.buf_idx);
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8004258:	4619      	mov	r1, r3
 800425a:	4610      	mov	r0, r2
 800425c:	f7ff fe39 	bl	8003ed2 <nmbs_crc_calc>
 8004260:	4603      	mov	r3, r0
 8004262:	81fb      	strh	r3, [r7, #14]
        put_2(nmbs, crc);
 8004264:	89fb      	ldrh	r3, [r7, #14]
 8004266:	4619      	mov	r1, r3
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f7ff fcfc 	bl	8003c66 <put_2>
    }

    nmbs_error err = send(nmbs, nmbs->msg.buf_idx);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8004274:	4619      	mov	r1, r3
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7ff fe9a 	bl	8003fb0 <send>
 800427c:	4603      	mov	r3, r0
 800427e:	737b      	strb	r3, [r7, #13]

    return err;
 8004280:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <recv_req_header>:


#ifndef NMBS_SERVER_DISABLED
static nmbs_error recv_req_header(nmbs_t* nmbs, bool* first_byte_received) {
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
    nmbs_error err = recv_msg_header(nmbs, first_byte_received);
 8004296:	6839      	ldr	r1, [r7, #0]
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7ff fee6 	bl	800406a <recv_msg_header>
 800429e:	4603      	mov	r3, r0
 80042a0:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 80042a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <recv_req_header+0x24>
        return err;
 80042aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042ae:	e021      	b.n	80042f4 <recv_req_header+0x68>

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d11b      	bne.n	80042f2 <recv_req_header+0x66>
        // Check if request is for us
        if (nmbs->msg.unit_id == NMBS_BROADCAST_ADDRESS)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80042c0:	2200      	movs	r2, #0
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d104      	bne.n	80042d0 <recv_req_header+0x44>
            nmbs->msg.broadcast = true;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 80042ce:	e010      	b.n	80042f2 <recv_req_header+0x66>
        else if (nmbs->msg.unit_id != nmbs->address_rtu)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80042dc:	429a      	cmp	r2, r3
 80042de:	d004      	beq.n	80042ea <recv_req_header+0x5e>
            nmbs->msg.ignored = true;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
 80042e8:	e003      	b.n	80042f2 <recv_req_header+0x66>
        else
            nmbs->msg.ignored = false;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
    }

    return NMBS_ERROR_NONE;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <put_res_header>:


static void put_res_header(nmbs_t* nmbs, uint16_t data_length) {
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	460b      	mov	r3, r1
 8004306:	807b      	strh	r3, [r7, #2]
    put_msg_header(nmbs, data_length);
 8004308:	887b      	ldrh	r3, [r7, #2]
 800430a:	4619      	mov	r1, r3
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f7ff ff57 	bl	80041c0 <put_msg_header>
    NMBS_DEBUG_PRINT("%d NMBS res -> address_rtu %d\tfc %d\t", nmbs->address_rtu, nmbs->address_rtu, nmbs->msg.fc);
}
 8004312:	bf00      	nop
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <send_exception_msg>:


static nmbs_error send_exception_msg(nmbs_t* nmbs, uint8_t exception) {
 800431a:	b580      	push	{r7, lr}
 800431c:	b082      	sub	sp, #8
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	460b      	mov	r3, r1
 8004324:	70fb      	strb	r3, [r7, #3]
    nmbs->msg.fc += 0x80;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 800432c:	3b80      	subs	r3, #128	; 0x80
 800432e:	b2da      	uxtb	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    put_msg_header(nmbs, 1);
 8004336:	2101      	movs	r1, #1
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f7ff ff41 	bl	80041c0 <put_msg_header>
    put_1(nmbs, exception);
 800433e:	78fb      	ldrb	r3, [r7, #3]
 8004340:	4619      	mov	r1, r3
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7ff fc28 	bl	8003b98 <put_1>

    NMBS_DEBUG_PRINT("%d NMBS res -> address_rtu %d\texception %d", nmbs->address_rtu, nmbs->address_rtu, exception);

    return send_msg(nmbs);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7ff ff78 	bl	800423e <send_msg>
 800434e:	4603      	mov	r3, r0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <recv_res_header>:
#endif


static nmbs_error recv_res_header(nmbs_t* nmbs) {
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
    uint16_t req_transaction_id = nmbs->msg.transaction_id;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 8004366:	81fb      	strh	r3, [r7, #14]
    uint8_t req_unit_id = nmbs->msg.unit_id;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800436e:	737b      	strb	r3, [r7, #13]
    uint8_t req_fc = nmbs->msg.fc;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8004376:	733b      	strb	r3, [r7, #12]

    bool first_byte_received;
    nmbs_error err = recv_msg_header(nmbs, &first_byte_received);
 8004378:	f107 0309 	add.w	r3, r7, #9
 800437c:	4619      	mov	r1, r3
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7ff fe73 	bl	800406a <recv_msg_header>
 8004384:	4603      	mov	r3, r0
 8004386:	72fb      	strb	r3, [r7, #11]
    if (err != NMBS_ERROR_NONE)
 8004388:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <recv_res_header+0x3e>
        return err;
 8004390:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004394:	e057      	b.n	8004446 <recv_res_header+0xee>

    if (nmbs->platform.transport == NMBS_TRANSPORT_TCP) {
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800439c:	2b02      	cmp	r3, #2
 800439e:	d108      	bne.n	80043b2 <recv_res_header+0x5a>
        if (nmbs->msg.transaction_id != req_transaction_id)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 80043a6:	89fa      	ldrh	r2, [r7, #14]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d002      	beq.n	80043b2 <recv_res_header+0x5a>
            return NMBS_ERROR_INVALID_TCP_MBAP;
 80043ac:	f06f 0305 	mvn.w	r3, #5
 80043b0:	e049      	b.n	8004446 <recv_res_header+0xee>
    }

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU && nmbs->msg.unit_id != req_unit_id)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d108      	bne.n	80043ce <recv_res_header+0x76>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80043c2:	7b7a      	ldrb	r2, [r7, #13]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d002      	beq.n	80043ce <recv_res_header+0x76>
        return NMBS_ERROR_INVALID_UNIT_ID;
 80043c8:	f06f 0306 	mvn.w	r3, #6
 80043cc:	e03b      	b.n	8004446 <recv_res_header+0xee>

    if (nmbs->msg.fc != req_fc) {
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 80043d4:	7b3a      	ldrb	r2, [r7, #12]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d034      	beq.n	8004444 <recv_res_header+0xec>
        if (nmbs->msg.fc - 0x80 == req_fc) {
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 80043e0:	f1a3 0280 	sub.w	r2, r3, #128	; 0x80
 80043e4:	7b3b      	ldrb	r3, [r7, #12]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d129      	bne.n	800443e <recv_res_header+0xe6>
            err = recv(nmbs, 1);
 80043ea:	2101      	movs	r1, #1
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7ff fdaf 	bl	8003f50 <recv>
 80043f2:	4603      	mov	r3, r0
 80043f4:	72fb      	strb	r3, [r7, #11]
            if (err != NMBS_ERROR_NONE)
 80043f6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d002      	beq.n	8004404 <recv_res_header+0xac>
                return err;
 80043fe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004402:	e020      	b.n	8004446 <recv_res_header+0xee>

            uint8_t exception = get_1(nmbs);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f7ff fbad 	bl	8003b64 <get_1>
 800440a:	4603      	mov	r3, r0
 800440c:	72bb      	strb	r3, [r7, #10]
            err = recv_msg_footer(nmbs);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7ff fdfa 	bl	8004008 <recv_msg_footer>
 8004414:	4603      	mov	r3, r0
 8004416:	72fb      	strb	r3, [r7, #11]
            if (err != NMBS_ERROR_NONE)
 8004418:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <recv_res_header+0xce>
                return err;
 8004420:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004424:	e00f      	b.n	8004446 <recv_res_header+0xee>

            if (exception < 1 || exception > 4)
 8004426:	7abb      	ldrb	r3, [r7, #10]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d002      	beq.n	8004432 <recv_res_header+0xda>
 800442c:	7abb      	ldrb	r3, [r7, #10]
 800442e:	2b04      	cmp	r3, #4
 8004430:	d902      	bls.n	8004438 <recv_res_header+0xe0>
                return NMBS_ERROR_INVALID_RESPONSE;
 8004432:	f06f 0301 	mvn.w	r3, #1
 8004436:	e006      	b.n	8004446 <recv_res_header+0xee>

            NMBS_DEBUG_PRINT("%d NMBS res <- address_rtu %d\texception %d\n", nmbs->address_rtu, nmbs->msg.unit_id,
                             exception);
            return (nmbs_error) exception;
 8004438:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800443c:	e003      	b.n	8004446 <recv_res_header+0xee>
        }

        return NMBS_ERROR_INVALID_RESPONSE;
 800443e:	f06f 0301 	mvn.w	r3, #1
 8004442:	e000      	b.n	8004446 <recv_res_header+0xee>
    }

    NMBS_DEBUG_PRINT("%d NMBS res <- address_rtu %d\tfc %d\t", nmbs->address_rtu, nmbs->msg.unit_id, nmbs->msg.fc);

    return NMBS_ERROR_NONE;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <recv_read_discrete_res>:
#endif
}
#endif


static nmbs_error recv_read_discrete_res(nmbs_t* nmbs, nmbs_bitfield values) {
 800444e:	b580      	push	{r7, lr}
 8004450:	b084      	sub	sp, #16
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	6039      	str	r1, [r7, #0]
    nmbs_error err = recv_res_header(nmbs);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7ff ff7d 	bl	8004358 <recv_res_header>
 800445e:	4603      	mov	r3, r0
 8004460:	72fb      	strb	r3, [r7, #11]
    if (err != NMBS_ERROR_NONE)
 8004462:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d002      	beq.n	8004470 <recv_read_discrete_res+0x22>
        return err;
 800446a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800446e:	e044      	b.n	80044fa <recv_read_discrete_res+0xac>

    err = recv(nmbs, 1);
 8004470:	2101      	movs	r1, #1
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7ff fd6c 	bl	8003f50 <recv>
 8004478:	4603      	mov	r3, r0
 800447a:	72fb      	strb	r3, [r7, #11]
    if (err != NMBS_ERROR_NONE)
 800447c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d002      	beq.n	800448a <recv_read_discrete_res+0x3c>
        return err;
 8004484:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004488:	e037      	b.n	80044fa <recv_read_discrete_res+0xac>

    uint8_t coils_bytes = get_1(nmbs);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7ff fb6a 	bl	8003b64 <get_1>
 8004490:	4603      	mov	r3, r0
 8004492:	72bb      	strb	r3, [r7, #10]
    NMBS_DEBUG_PRINT("b %d\t", coils_bytes);

    err = recv(nmbs, coils_bytes);
 8004494:	7abb      	ldrb	r3, [r7, #10]
 8004496:	b29b      	uxth	r3, r3
 8004498:	4619      	mov	r1, r3
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7ff fd58 	bl	8003f50 <recv>
 80044a0:	4603      	mov	r3, r0
 80044a2:	72fb      	strb	r3, [r7, #11]
    if (err != NMBS_ERROR_NONE)
 80044a4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d002      	beq.n	80044b2 <recv_read_discrete_res+0x64>
        return err;
 80044ac:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80044b0:	e023      	b.n	80044fa <recv_read_discrete_res+0xac>

    NMBS_DEBUG_PRINT("coils ");
    for (int i = 0; i < coils_bytes; i++) {
 80044b2:	2300      	movs	r3, #0
 80044b4:	60fb      	str	r3, [r7, #12]
 80044b6:	e00f      	b.n	80044d8 <recv_read_discrete_res+0x8a>
        uint8_t coil = get_1(nmbs);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f7ff fb53 	bl	8003b64 <get_1>
 80044be:	4603      	mov	r3, r0
 80044c0:	727b      	strb	r3, [r7, #9]
        if (values)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d004      	beq.n	80044d2 <recv_read_discrete_res+0x84>
            values[i] = coil;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	4413      	add	r3, r2
 80044ce:	7a7a      	ldrb	r2, [r7, #9]
 80044d0:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < coils_bytes; i++) {
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	3301      	adds	r3, #1
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	7abb      	ldrb	r3, [r7, #10]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	429a      	cmp	r2, r3
 80044de:	dbeb      	blt.n	80044b8 <recv_read_discrete_res+0x6a>
        NMBS_DEBUG_PRINT("%d ", coil);
    }

    err = recv_msg_footer(nmbs);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7ff fd91 	bl	8004008 <recv_msg_footer>
 80044e6:	4603      	mov	r3, r0
 80044e8:	72fb      	strb	r3, [r7, #11]
    if (err != NMBS_ERROR_NONE)
 80044ea:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <recv_read_discrete_res+0xaa>
        return err;
 80044f2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80044f6:	e000      	b.n	80044fa <recv_read_discrete_res+0xac>

    return NMBS_ERROR_NONE;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <recv_read_registers_res>:


static nmbs_error recv_read_registers_res(nmbs_t* nmbs, uint16_t quantity, uint16_t* registers) {
 8004502:	b580      	push	{r7, lr}
 8004504:	b086      	sub	sp, #24
 8004506:	af00      	add	r7, sp, #0
 8004508:	60f8      	str	r0, [r7, #12]
 800450a:	460b      	mov	r3, r1
 800450c:	607a      	str	r2, [r7, #4]
 800450e:	817b      	strh	r3, [r7, #10]
    nmbs_error err = recv_res_header(nmbs);
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f7ff ff21 	bl	8004358 <recv_res_header>
 8004516:	4603      	mov	r3, r0
 8004518:	74fb      	strb	r3, [r7, #19]
    if (err != NMBS_ERROR_NONE)
 800451a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <recv_read_registers_res+0x26>
        return err;
 8004522:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004526:	e050      	b.n	80045ca <recv_read_registers_res+0xc8>

    err = recv(nmbs, 1);
 8004528:	2101      	movs	r1, #1
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f7ff fd10 	bl	8003f50 <recv>
 8004530:	4603      	mov	r3, r0
 8004532:	74fb      	strb	r3, [r7, #19]
    if (err != NMBS_ERROR_NONE)
 8004534:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d002      	beq.n	8004542 <recv_read_registers_res+0x40>
        return err;
 800453c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004540:	e043      	b.n	80045ca <recv_read_registers_res+0xc8>

    uint8_t registers_bytes = get_1(nmbs);
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f7ff fb0e 	bl	8003b64 <get_1>
 8004548:	4603      	mov	r3, r0
 800454a:	74bb      	strb	r3, [r7, #18]
    NMBS_DEBUG_PRINT("b %d\t", registers_bytes);

    err = recv(nmbs, registers_bytes);
 800454c:	7cbb      	ldrb	r3, [r7, #18]
 800454e:	b29b      	uxth	r3, r3
 8004550:	4619      	mov	r1, r3
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f7ff fcfc 	bl	8003f50 <recv>
 8004558:	4603      	mov	r3, r0
 800455a:	74fb      	strb	r3, [r7, #19]
    if (err != NMBS_ERROR_NONE)
 800455c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <recv_read_registers_res+0x68>
        return err;
 8004564:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004568:	e02f      	b.n	80045ca <recv_read_registers_res+0xc8>

    NMBS_DEBUG_PRINT("regs ");
    for (int i = 0; i < registers_bytes / 2; i++) {
 800456a:	2300      	movs	r3, #0
 800456c:	617b      	str	r3, [r7, #20]
 800456e:	e010      	b.n	8004592 <recv_read_registers_res+0x90>
        uint16_t reg = get_2(nmbs);
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f7ff fb53 	bl	8003c1c <get_2>
 8004576:	4603      	mov	r3, r0
 8004578:	823b      	strh	r3, [r7, #16]
        if (registers)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d005      	beq.n	800458c <recv_read_registers_res+0x8a>
            registers[i] = reg;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	4413      	add	r3, r2
 8004588:	8a3a      	ldrh	r2, [r7, #16]
 800458a:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < registers_bytes / 2; i++) {
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	3301      	adds	r3, #1
 8004590:	617b      	str	r3, [r7, #20]
 8004592:	7cbb      	ldrb	r3, [r7, #18]
 8004594:	085b      	lsrs	r3, r3, #1
 8004596:	b2db      	uxtb	r3, r3
 8004598:	461a      	mov	r2, r3
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	4293      	cmp	r3, r2
 800459e:	dbe7      	blt.n	8004570 <recv_read_registers_res+0x6e>
        NMBS_DEBUG_PRINT("%d ", reg);
    }

    err = recv_msg_footer(nmbs);
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f7ff fd31 	bl	8004008 <recv_msg_footer>
 80045a6:	4603      	mov	r3, r0
 80045a8:	74fb      	strb	r3, [r7, #19]
    if (err != NMBS_ERROR_NONE)
 80045aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <recv_read_registers_res+0xb6>
        return err;
 80045b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80045b6:	e008      	b.n	80045ca <recv_read_registers_res+0xc8>

    if (registers_bytes != quantity * 2)
 80045b8:	7cba      	ldrb	r2, [r7, #18]
 80045ba:	897b      	ldrh	r3, [r7, #10]
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	429a      	cmp	r2, r3
 80045c0:	d002      	beq.n	80045c8 <recv_read_registers_res+0xc6>
        return NMBS_ERROR_INVALID_RESPONSE;
 80045c2:	f06f 0301 	mvn.w	r3, #1
 80045c6:	e000      	b.n	80045ca <recv_read_registers_res+0xc8>

    return NMBS_ERROR_NONE;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3718      	adds	r7, #24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <recv_write_single_coil_res>:


nmbs_error recv_write_single_coil_res(nmbs_t* nmbs, uint16_t address, uint16_t value_req) {
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b084      	sub	sp, #16
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
 80045da:	460b      	mov	r3, r1
 80045dc:	807b      	strh	r3, [r7, #2]
 80045de:	4613      	mov	r3, r2
 80045e0:	803b      	strh	r3, [r7, #0]
    nmbs_error err = recv_res_header(nmbs);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7ff feb8 	bl	8004358 <recv_res_header>
 80045e8:	4603      	mov	r3, r0
 80045ea:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 80045ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d002      	beq.n	80045fa <recv_write_single_coil_res+0x28>
        return err;
 80045f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045f8:	e031      	b.n	800465e <recv_write_single_coil_res+0x8c>

    err = recv(nmbs, 4);
 80045fa:	2104      	movs	r1, #4
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7ff fca7 	bl	8003f50 <recv>
 8004602:	4603      	mov	r3, r0
 8004604:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8004606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <recv_write_single_coil_res+0x42>
        return err;
 800460e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004612:	e024      	b.n	800465e <recv_write_single_coil_res+0x8c>

    uint16_t address_res = get_2(nmbs);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7ff fb01 	bl	8003c1c <get_2>
 800461a:	4603      	mov	r3, r0
 800461c:	81bb      	strh	r3, [r7, #12]
    uint16_t value_res = get_2(nmbs);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7ff fafc 	bl	8003c1c <get_2>
 8004624:	4603      	mov	r3, r0
 8004626:	817b      	strh	r3, [r7, #10]

    NMBS_DEBUG_PRINT("a %d\tvalue %d", address, value_res);

    err = recv_msg_footer(nmbs);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f7ff fced 	bl	8004008 <recv_msg_footer>
 800462e:	4603      	mov	r3, r0
 8004630:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8004632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d002      	beq.n	8004640 <recv_write_single_coil_res+0x6e>
        return err;
 800463a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800463e:	e00e      	b.n	800465e <recv_write_single_coil_res+0x8c>

    if (address_res != address)
 8004640:	89ba      	ldrh	r2, [r7, #12]
 8004642:	887b      	ldrh	r3, [r7, #2]
 8004644:	429a      	cmp	r2, r3
 8004646:	d002      	beq.n	800464e <recv_write_single_coil_res+0x7c>
        return NMBS_ERROR_INVALID_RESPONSE;
 8004648:	f06f 0301 	mvn.w	r3, #1
 800464c:	e007      	b.n	800465e <recv_write_single_coil_res+0x8c>

    if (value_res != value_req)
 800464e:	897a      	ldrh	r2, [r7, #10]
 8004650:	883b      	ldrh	r3, [r7, #0]
 8004652:	429a      	cmp	r2, r3
 8004654:	d002      	beq.n	800465c <recv_write_single_coil_res+0x8a>
        return NMBS_ERROR_INVALID_RESPONSE;
 8004656:	f06f 0301 	mvn.w	r3, #1
 800465a:	e000      	b.n	800465e <recv_write_single_coil_res+0x8c>

    return NMBS_ERROR_NONE;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <recv_write_single_register_res>:


nmbs_error recv_write_single_register_res(nmbs_t* nmbs, uint16_t address, uint16_t value_req) {
 8004666:	b580      	push	{r7, lr}
 8004668:	b084      	sub	sp, #16
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
 800466e:	460b      	mov	r3, r1
 8004670:	807b      	strh	r3, [r7, #2]
 8004672:	4613      	mov	r3, r2
 8004674:	803b      	strh	r3, [r7, #0]
    nmbs_error err = recv_res_header(nmbs);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7ff fe6e 	bl	8004358 <recv_res_header>
 800467c:	4603      	mov	r3, r0
 800467e:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8004680:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d002      	beq.n	800468e <recv_write_single_register_res+0x28>
        return err;
 8004688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800468c:	e031      	b.n	80046f2 <recv_write_single_register_res+0x8c>

    err = recv(nmbs, 4);
 800468e:	2104      	movs	r1, #4
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f7ff fc5d 	bl	8003f50 <recv>
 8004696:	4603      	mov	r3, r0
 8004698:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 800469a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <recv_write_single_register_res+0x42>
        return err;
 80046a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046a6:	e024      	b.n	80046f2 <recv_write_single_register_res+0x8c>

    uint16_t address_res = get_2(nmbs);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f7ff fab7 	bl	8003c1c <get_2>
 80046ae:	4603      	mov	r3, r0
 80046b0:	81bb      	strh	r3, [r7, #12]
    uint16_t value_res = get_2(nmbs);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7ff fab2 	bl	8003c1c <get_2>
 80046b8:	4603      	mov	r3, r0
 80046ba:	817b      	strh	r3, [r7, #10]
    NMBS_DEBUG_PRINT("a %d\tvalue %d ", address, value_res);

    err = recv_msg_footer(nmbs);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7ff fca3 	bl	8004008 <recv_msg_footer>
 80046c2:	4603      	mov	r3, r0
 80046c4:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 80046c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d002      	beq.n	80046d4 <recv_write_single_register_res+0x6e>
        return err;
 80046ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046d2:	e00e      	b.n	80046f2 <recv_write_single_register_res+0x8c>

    if (address_res != address)
 80046d4:	89ba      	ldrh	r2, [r7, #12]
 80046d6:	887b      	ldrh	r3, [r7, #2]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d002      	beq.n	80046e2 <recv_write_single_register_res+0x7c>
        return NMBS_ERROR_INVALID_RESPONSE;
 80046dc:	f06f 0301 	mvn.w	r3, #1
 80046e0:	e007      	b.n	80046f2 <recv_write_single_register_res+0x8c>

    if (value_res != value_req)
 80046e2:	897a      	ldrh	r2, [r7, #10]
 80046e4:	883b      	ldrh	r3, [r7, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d002      	beq.n	80046f0 <recv_write_single_register_res+0x8a>
        return NMBS_ERROR_INVALID_RESPONSE;
 80046ea:	f06f 0301 	mvn.w	r3, #1
 80046ee:	e000      	b.n	80046f2 <recv_write_single_register_res+0x8c>

    return NMBS_ERROR_NONE;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <recv_write_multiple_coils_res>:


nmbs_error recv_write_multiple_coils_res(nmbs_t* nmbs, uint16_t address, uint16_t quantity) {
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b084      	sub	sp, #16
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
 8004702:	460b      	mov	r3, r1
 8004704:	807b      	strh	r3, [r7, #2]
 8004706:	4613      	mov	r3, r2
 8004708:	803b      	strh	r3, [r7, #0]
    nmbs_error err = recv_res_header(nmbs);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7ff fe24 	bl	8004358 <recv_res_header>
 8004710:	4603      	mov	r3, r0
 8004712:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8004714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d002      	beq.n	8004722 <recv_write_multiple_coils_res+0x28>
        return err;
 800471c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004720:	e031      	b.n	8004786 <recv_write_multiple_coils_res+0x8c>

    err = recv(nmbs, 4);
 8004722:	2104      	movs	r1, #4
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7ff fc13 	bl	8003f50 <recv>
 800472a:	4603      	mov	r3, r0
 800472c:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 800472e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <recv_write_multiple_coils_res+0x42>
        return err;
 8004736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800473a:	e024      	b.n	8004786 <recv_write_multiple_coils_res+0x8c>

    uint16_t address_res = get_2(nmbs);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f7ff fa6d 	bl	8003c1c <get_2>
 8004742:	4603      	mov	r3, r0
 8004744:	81bb      	strh	r3, [r7, #12]
    uint16_t quantity_res = get_2(nmbs);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7ff fa68 	bl	8003c1c <get_2>
 800474c:	4603      	mov	r3, r0
 800474e:	817b      	strh	r3, [r7, #10]
    NMBS_DEBUG_PRINT("a %d\tq %d", address_res, quantity_res);

    err = recv_msg_footer(nmbs);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7ff fc59 	bl	8004008 <recv_msg_footer>
 8004756:	4603      	mov	r3, r0
 8004758:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 800475a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <recv_write_multiple_coils_res+0x6e>
        return err;
 8004762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004766:	e00e      	b.n	8004786 <recv_write_multiple_coils_res+0x8c>

    if (address_res != address)
 8004768:	89ba      	ldrh	r2, [r7, #12]
 800476a:	887b      	ldrh	r3, [r7, #2]
 800476c:	429a      	cmp	r2, r3
 800476e:	d002      	beq.n	8004776 <recv_write_multiple_coils_res+0x7c>
        return NMBS_ERROR_INVALID_RESPONSE;
 8004770:	f06f 0301 	mvn.w	r3, #1
 8004774:	e007      	b.n	8004786 <recv_write_multiple_coils_res+0x8c>

    if (quantity_res != quantity)
 8004776:	897a      	ldrh	r2, [r7, #10]
 8004778:	883b      	ldrh	r3, [r7, #0]
 800477a:	429a      	cmp	r2, r3
 800477c:	d002      	beq.n	8004784 <recv_write_multiple_coils_res+0x8a>
        return NMBS_ERROR_INVALID_RESPONSE;
 800477e:	f06f 0301 	mvn.w	r3, #1
 8004782:	e000      	b.n	8004786 <recv_write_multiple_coils_res+0x8c>

    return NMBS_ERROR_NONE;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <recv_write_multiple_registers_res>:


nmbs_error recv_write_multiple_registers_res(nmbs_t* nmbs, uint16_t address, uint16_t quantity) {
 800478e:	b580      	push	{r7, lr}
 8004790:	b084      	sub	sp, #16
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	460b      	mov	r3, r1
 8004798:	807b      	strh	r3, [r7, #2]
 800479a:	4613      	mov	r3, r2
 800479c:	803b      	strh	r3, [r7, #0]
    nmbs_error err = recv_res_header(nmbs);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7ff fdda 	bl	8004358 <recv_res_header>
 80047a4:	4603      	mov	r3, r0
 80047a6:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 80047a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d002      	beq.n	80047b6 <recv_write_multiple_registers_res+0x28>
        return err;
 80047b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047b4:	e031      	b.n	800481a <recv_write_multiple_registers_res+0x8c>

    err = recv(nmbs, 4);
 80047b6:	2104      	movs	r1, #4
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7ff fbc9 	bl	8003f50 <recv>
 80047be:	4603      	mov	r3, r0
 80047c0:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 80047c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d002      	beq.n	80047d0 <recv_write_multiple_registers_res+0x42>
        return err;
 80047ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ce:	e024      	b.n	800481a <recv_write_multiple_registers_res+0x8c>

    uint16_t address_res = get_2(nmbs);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f7ff fa23 	bl	8003c1c <get_2>
 80047d6:	4603      	mov	r3, r0
 80047d8:	81bb      	strh	r3, [r7, #12]
    uint16_t quantity_res = get_2(nmbs);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7ff fa1e 	bl	8003c1c <get_2>
 80047e0:	4603      	mov	r3, r0
 80047e2:	817b      	strh	r3, [r7, #10]
    NMBS_DEBUG_PRINT("a %d\tq %d", address_res, quantity_res);

    err = recv_msg_footer(nmbs);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7ff fc0f 	bl	8004008 <recv_msg_footer>
 80047ea:	4603      	mov	r3, r0
 80047ec:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 80047ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d002      	beq.n	80047fc <recv_write_multiple_registers_res+0x6e>
        return err;
 80047f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047fa:	e00e      	b.n	800481a <recv_write_multiple_registers_res+0x8c>

    if (address_res != address)
 80047fc:	89ba      	ldrh	r2, [r7, #12]
 80047fe:	887b      	ldrh	r3, [r7, #2]
 8004800:	429a      	cmp	r2, r3
 8004802:	d002      	beq.n	800480a <recv_write_multiple_registers_res+0x7c>
        return NMBS_ERROR_INVALID_RESPONSE;
 8004804:	f06f 0301 	mvn.w	r3, #1
 8004808:	e007      	b.n	800481a <recv_write_multiple_registers_res+0x8c>

    if (quantity_res != quantity)
 800480a:	897a      	ldrh	r2, [r7, #10]
 800480c:	883b      	ldrh	r3, [r7, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d002      	beq.n	8004818 <recv_write_multiple_registers_res+0x8a>
        return NMBS_ERROR_INVALID_RESPONSE;
 8004812:	f06f 0301 	mvn.w	r3, #1
 8004816:	e000      	b.n	800481a <recv_write_multiple_registers_res+0x8c>

    return NMBS_ERROR_NONE;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <recv_read_file_record_res>:


nmbs_error recv_read_file_record_res(nmbs_t* nmbs, uint16_t* registers, uint16_t count) {
 8004822:	b580      	push	{r7, lr}
 8004824:	b086      	sub	sp, #24
 8004826:	af00      	add	r7, sp, #0
 8004828:	60f8      	str	r0, [r7, #12]
 800482a:	60b9      	str	r1, [r7, #8]
 800482c:	4613      	mov	r3, r2
 800482e:	80fb      	strh	r3, [r7, #6]
    nmbs_error err = recv_res_header(nmbs);
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f7ff fd91 	bl	8004358 <recv_res_header>
 8004836:	4603      	mov	r3, r0
 8004838:	75fb      	strb	r3, [r7, #23]
    if (err != NMBS_ERROR_NONE)
 800483a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d002      	beq.n	8004848 <recv_read_file_record_res+0x26>
        return err;
 8004842:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004846:	e060      	b.n	800490a <recv_read_file_record_res+0xe8>

    err = recv(nmbs, 1);
 8004848:	2101      	movs	r1, #1
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f7ff fb80 	bl	8003f50 <recv>
 8004850:	4603      	mov	r3, r0
 8004852:	75fb      	strb	r3, [r7, #23]
    if (err != NMBS_ERROR_NONE)
 8004854:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d002      	beq.n	8004862 <recv_read_file_record_res+0x40>
        return err;
 800485c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004860:	e053      	b.n	800490a <recv_read_file_record_res+0xe8>

    uint8_t response_size = get_1(nmbs);
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f7ff f97e 	bl	8003b64 <get_1>
 8004868:	4603      	mov	r3, r0
 800486a:	75bb      	strb	r3, [r7, #22]

    err = recv(nmbs, response_size);
 800486c:	7dbb      	ldrb	r3, [r7, #22]
 800486e:	b29b      	uxth	r3, r3
 8004870:	4619      	mov	r1, r3
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f7ff fb6c 	bl	8003f50 <recv>
 8004878:	4603      	mov	r3, r0
 800487a:	75fb      	strb	r3, [r7, #23]
    if (err != NMBS_ERROR_NONE)
 800487c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d002      	beq.n	800488a <recv_read_file_record_res+0x68>
        return err;
 8004884:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004888:	e03f      	b.n	800490a <recv_read_file_record_res+0xe8>

    uint8_t subreq_data_size = get_1(nmbs) - 1;
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f7ff f96a 	bl	8003b64 <get_1>
 8004890:	4603      	mov	r3, r0
 8004892:	3b01      	subs	r3, #1
 8004894:	757b      	strb	r3, [r7, #21]
    uint8_t subreq_reference_type = get_1(nmbs);
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f7ff f964 	bl	8003b64 <get_1>
 800489c:	4603      	mov	r3, r0
 800489e:	753b      	strb	r3, [r7, #20]
    uint16_t* subreq_record_data = (uint16_t*) get_n(nmbs, subreq_data_size);
 80048a0:	7d7b      	ldrb	r3, [r7, #21]
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	4619      	mov	r1, r3
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f7ff fa03 	bl	8003cb2 <get_n>
 80048ac:	6138      	str	r0, [r7, #16]

    err = recv_msg_footer(nmbs);
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f7ff fbaa 	bl	8004008 <recv_msg_footer>
 80048b4:	4603      	mov	r3, r0
 80048b6:	75fb      	strb	r3, [r7, #23]
    if (err != NMBS_ERROR_NONE)
 80048b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d002      	beq.n	80048c6 <recv_read_file_record_res+0xa4>
        return err;
 80048c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80048c4:	e021      	b.n	800490a <recv_read_file_record_res+0xe8>

    if (registers) {
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d01d      	beq.n	8004908 <recv_read_file_record_res+0xe6>
        if (subreq_reference_type != 6)
 80048cc:	7d3b      	ldrb	r3, [r7, #20]
 80048ce:	2b06      	cmp	r3, #6
 80048d0:	d002      	beq.n	80048d8 <recv_read_file_record_res+0xb6>
            return NMBS_ERROR_INVALID_RESPONSE;
 80048d2:	f06f 0301 	mvn.w	r3, #1
 80048d6:	e018      	b.n	800490a <recv_read_file_record_res+0xe8>

        if (count != (subreq_data_size / 2))
 80048d8:	7d7b      	ldrb	r3, [r7, #21]
 80048da:	085b      	lsrs	r3, r3, #1
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	b29b      	uxth	r3, r3
 80048e0:	88fa      	ldrh	r2, [r7, #6]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d002      	beq.n	80048ec <recv_read_file_record_res+0xca>
            return NMBS_ERROR_INVALID_RESPONSE;
 80048e6:	f06f 0301 	mvn.w	r3, #1
 80048ea:	e00e      	b.n	800490a <recv_read_file_record_res+0xe8>

        swap_regs(subreq_record_data, subreq_data_size / 2);
 80048ec:	7d7b      	ldrb	r3, [r7, #21]
 80048ee:	085b      	lsrs	r3, r3, #1
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	4619      	mov	r1, r3
 80048f6:	6938      	ldr	r0, [r7, #16]
 80048f8:	f7ff fa32 	bl	8003d60 <swap_regs>
        memcpy(registers, subreq_record_data, subreq_data_size);
 80048fc:	7d7b      	ldrb	r3, [r7, #21]
 80048fe:	461a      	mov	r2, r3
 8004900:	6939      	ldr	r1, [r7, #16]
 8004902:	68b8      	ldr	r0, [r7, #8]
 8004904:	f001 ff20 	bl	8006748 <memcpy>
    }

    return NMBS_ERROR_NONE;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3718      	adds	r7, #24
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <recv_write_file_record_res>:


nmbs_error recv_write_file_record_res(nmbs_t* nmbs, uint16_t file_number, uint16_t record_number,
                                      const uint16_t* registers, uint16_t count) {
 8004912:	b580      	push	{r7, lr}
 8004914:	b088      	sub	sp, #32
 8004916:	af00      	add	r7, sp, #0
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	607b      	str	r3, [r7, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	817b      	strh	r3, [r7, #10]
 8004920:	4613      	mov	r3, r2
 8004922:	813b      	strh	r3, [r7, #8]
    nmbs_error err = recv_res_header(nmbs);
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f7ff fd17 	bl	8004358 <recv_res_header>
 800492a:	4603      	mov	r3, r0
 800492c:	77fb      	strb	r3, [r7, #31]
    if (err != NMBS_ERROR_NONE)
 800492e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <recv_write_file_record_res+0x2a>
        return err;
 8004936:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800493a:	e079      	b.n	8004a30 <recv_write_file_record_res+0x11e>

    err = recv(nmbs, 1);
 800493c:	2101      	movs	r1, #1
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f7ff fb06 	bl	8003f50 <recv>
 8004944:	4603      	mov	r3, r0
 8004946:	77fb      	strb	r3, [r7, #31]
    if (err != NMBS_ERROR_NONE)
 8004948:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d002      	beq.n	8004956 <recv_write_file_record_res+0x44>
        return err;
 8004950:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004954:	e06c      	b.n	8004a30 <recv_write_file_record_res+0x11e>

    uint8_t response_size = get_1(nmbs);
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f7ff f904 	bl	8003b64 <get_1>
 800495c:	4603      	mov	r3, r0
 800495e:	77bb      	strb	r3, [r7, #30]

    err = recv(nmbs, response_size);
 8004960:	7fbb      	ldrb	r3, [r7, #30]
 8004962:	b29b      	uxth	r3, r3
 8004964:	4619      	mov	r1, r3
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f7ff faf2 	bl	8003f50 <recv>
 800496c:	4603      	mov	r3, r0
 800496e:	77fb      	strb	r3, [r7, #31]
    if (err != NMBS_ERROR_NONE)
 8004970:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d002      	beq.n	800497e <recv_write_file_record_res+0x6c>
        return err;
 8004978:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800497c:	e058      	b.n	8004a30 <recv_write_file_record_res+0x11e>

    uint8_t subreq_reference_type = get_1(nmbs);
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f7ff f8f0 	bl	8003b64 <get_1>
 8004984:	4603      	mov	r3, r0
 8004986:	777b      	strb	r3, [r7, #29]
    uint16_t subreq_file_number = get_2(nmbs);
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f7ff f947 	bl	8003c1c <get_2>
 800498e:	4603      	mov	r3, r0
 8004990:	837b      	strh	r3, [r7, #26]
    uint16_t subreq_record_number = get_2(nmbs);
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f7ff f942 	bl	8003c1c <get_2>
 8004998:	4603      	mov	r3, r0
 800499a:	833b      	strh	r3, [r7, #24]
    uint16_t subreq_record_length = get_2(nmbs);
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f7ff f93d 	bl	8003c1c <get_2>
 80049a2:	4603      	mov	r3, r0
 80049a4:	82fb      	strh	r3, [r7, #22]
    NMBS_DEBUG_PRINT("a %d\tr %d\tl %d\t fwrite ", subreq_file_number, subreq_record_number, subreq_record_length);

    uint16_t subreq_data_size = subreq_record_length * 2;
 80049a6:	8afb      	ldrh	r3, [r7, #22]
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	82bb      	strh	r3, [r7, #20]
    uint16_t* subreq_record_data = (uint16_t*) get_n(nmbs, subreq_data_size);
 80049ac:	8abb      	ldrh	r3, [r7, #20]
 80049ae:	4619      	mov	r1, r3
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f7ff f97e 	bl	8003cb2 <get_n>
 80049b6:	6138      	str	r0, [r7, #16]

    err = recv_msg_footer(nmbs);
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f7ff fb25 	bl	8004008 <recv_msg_footer>
 80049be:	4603      	mov	r3, r0
 80049c0:	77fb      	strb	r3, [r7, #31]
    if (err != NMBS_ERROR_NONE)
 80049c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d002      	beq.n	80049d0 <recv_write_file_record_res+0xbe>
        return err;
 80049ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80049ce:	e02f      	b.n	8004a30 <recv_write_file_record_res+0x11e>

    if (registers) {
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d02b      	beq.n	8004a2e <recv_write_file_record_res+0x11c>
        if (subreq_reference_type != 6)
 80049d6:	7f7b      	ldrb	r3, [r7, #29]
 80049d8:	2b06      	cmp	r3, #6
 80049da:	d002      	beq.n	80049e2 <recv_write_file_record_res+0xd0>
            return NMBS_ERROR_INVALID_RESPONSE;
 80049dc:	f06f 0301 	mvn.w	r3, #1
 80049e0:	e026      	b.n	8004a30 <recv_write_file_record_res+0x11e>

        if (subreq_file_number != file_number)
 80049e2:	8b7a      	ldrh	r2, [r7, #26]
 80049e4:	897b      	ldrh	r3, [r7, #10]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d002      	beq.n	80049f0 <recv_write_file_record_res+0xde>
            return NMBS_ERROR_INVALID_RESPONSE;
 80049ea:	f06f 0301 	mvn.w	r3, #1
 80049ee:	e01f      	b.n	8004a30 <recv_write_file_record_res+0x11e>

        if (subreq_record_number != record_number)
 80049f0:	8b3a      	ldrh	r2, [r7, #24]
 80049f2:	893b      	ldrh	r3, [r7, #8]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d002      	beq.n	80049fe <recv_write_file_record_res+0xec>
            return NMBS_ERROR_INVALID_RESPONSE;
 80049f8:	f06f 0301 	mvn.w	r3, #1
 80049fc:	e018      	b.n	8004a30 <recv_write_file_record_res+0x11e>

        if (subreq_record_length != count)
 80049fe:	8afa      	ldrh	r2, [r7, #22]
 8004a00:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d002      	beq.n	8004a0c <recv_write_file_record_res+0xfa>
            return NMBS_ERROR_INVALID_RESPONSE;
 8004a06:	f06f 0301 	mvn.w	r3, #1
 8004a0a:	e011      	b.n	8004a30 <recv_write_file_record_res+0x11e>

        swap_regs(subreq_record_data, subreq_record_length);
 8004a0c:	8afb      	ldrh	r3, [r7, #22]
 8004a0e:	4619      	mov	r1, r3
 8004a10:	6938      	ldr	r0, [r7, #16]
 8004a12:	f7ff f9a5 	bl	8003d60 <swap_regs>
        if (memcmp(registers, subreq_record_data, subreq_data_size) != 0)
 8004a16:	8abb      	ldrh	r3, [r7, #20]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	6939      	ldr	r1, [r7, #16]
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f001 fe3f 	bl	80066a0 <memcmp>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <recv_write_file_record_res+0x11c>
            return NMBS_ERROR_INVALID_RESPONSE;
 8004a28:	f06f 0301 	mvn.w	r3, #1
 8004a2c:	e000      	b.n	8004a30 <recv_write_file_record_res+0x11e>
    }

    return NMBS_ERROR_NONE;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3720      	adds	r7, #32
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <handle_read_discrete>:


#ifndef NMBS_SERVER_DISABLED
#if !defined(NMBS_SERVER_READ_COILS_DISABLED) || !defined(NMBS_SERVER_READ_DISCRETE_INPUTS_DISABLED)
static nmbs_error handle_read_discrete(nmbs_t* nmbs,
                                       nmbs_error (*callback)(uint16_t, uint16_t, nmbs_bitfield, uint8_t, void*)) {
 8004a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a3a:	b0c7      	sub	sp, #284	; 0x11c
 8004a3c:	af02      	add	r7, sp, #8
 8004a3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004a42:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a46:	6018      	str	r0, [r3, #0]
 8004a48:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004a4c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004a50:	6019      	str	r1, [r3, #0]
    nmbs_error err = recv(nmbs, 4);
 8004a52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004a56:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a5a:	2104      	movs	r1, #4
 8004a5c:	6818      	ldr	r0, [r3, #0]
 8004a5e:	f7ff fa77 	bl	8003f50 <recv>
 8004a62:	4603      	mov	r3, r0
 8004a64:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8004a68:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d002      	beq.n	8004a76 <handle_read_discrete+0x3e>
        return err;
 8004a70:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004a74:	e11d      	b.n	8004cb2 <handle_read_discrete+0x27a>

    uint16_t address = get_2(nmbs);
 8004a76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004a7a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a7e:	6818      	ldr	r0, [r3, #0]
 8004a80:	f7ff f8cc 	bl	8003c1c <get_2>
 8004a84:	4603      	mov	r3, r0
 8004a86:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    uint16_t quantity = get_2(nmbs);
 8004a8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004a8e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a92:	6818      	ldr	r0, [r3, #0]
 8004a94:	f7ff f8c2 	bl	8003c1c <get_2>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106

    NMBS_DEBUG_PRINT("a %d\tq %d", address, quantity);

    err = recv_msg_footer(nmbs);
 8004a9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004aa2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004aa6:	6818      	ldr	r0, [r3, #0]
 8004aa8:	f7ff faae 	bl	8004008 <recv_msg_footer>
 8004aac:	4603      	mov	r3, r0
 8004aae:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8004ab2:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <handle_read_discrete+0x88>
        return err;
 8004aba:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004abe:	e0f8      	b.n	8004cb2 <handle_read_discrete+0x27a>

    if (!nmbs->msg.ignored) {
 8004ac0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ac4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8004ace:	f083 0301 	eor.w	r3, r3, #1
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 80e1 	beq.w	8004c9c <handle_read_discrete+0x264>
        if (quantity < 1 || quantity > 2000)
 8004ada:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d004      	beq.n	8004aec <handle_read_discrete+0xb4>
 8004ae2:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8004ae6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004aea:	d909      	bls.n	8004b00 <handle_read_discrete+0xc8>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8004aec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004af0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004af4:	2103      	movs	r1, #3
 8004af6:	6818      	ldr	r0, [r3, #0]
 8004af8:	f7ff fc0f 	bl	800431a <send_exception_msg>
 8004afc:	4603      	mov	r3, r0
 8004afe:	e0d8      	b.n	8004cb2 <handle_read_discrete+0x27a>

        if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 8004b00:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 8004b04:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8004b08:	4413      	add	r3, r2
 8004b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b0e:	d909      	bls.n	8004b24 <handle_read_discrete+0xec>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8004b10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b14:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004b18:	2102      	movs	r1, #2
 8004b1a:	6818      	ldr	r0, [r3, #0]
 8004b1c:	f7ff fbfd 	bl	800431a <send_exception_msg>
 8004b20:	4603      	mov	r3, r0
 8004b22:	e0c6      	b.n	8004cb2 <handle_read_discrete+0x27a>

        if (callback) {
 8004b24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b28:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f000 80aa 	beq.w	8004c88 <handle_read_discrete+0x250>
            nmbs_bitfield bitfield = {0};
 8004b34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	3304      	adds	r3, #4
 8004b42:	22f6      	movs	r2, #246	; 0xf6
 8004b44:	2100      	movs	r1, #0
 8004b46:	4618      	mov	r0, r3
 8004b48:	f001 fdba 	bl	80066c0 <memset>
            err = callback(address, quantity, bitfield, nmbs->msg.unit_id, nmbs->platform.arg);
 8004b4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b50:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f893 6106 	ldrb.w	r6, [r3, #262]	; 0x106
 8004b5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b5e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8004b68:	f107 0508 	add.w	r5, r7, #8
 8004b6c:	f8b7 1106 	ldrh.w	r1, [r7, #262]	; 0x106
 8004b70:	f8b7 0108 	ldrh.w	r0, [r7, #264]	; 0x108
 8004b74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b78:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004b7c:	9200      	str	r2, [sp, #0]
 8004b7e:	681c      	ldr	r4, [r3, #0]
 8004b80:	4633      	mov	r3, r6
 8004b82:	462a      	mov	r2, r5
 8004b84:	47a0      	blx	r4
 8004b86:	4603      	mov	r3, r0
 8004b88:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
            if (err != NMBS_ERROR_NONE) {
 8004b8c:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d01d      	beq.n	8004bd0 <handle_read_discrete+0x198>
                if (nmbs_error_is_exception(err))
 8004b94:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	dd0f      	ble.n	8004bbc <handle_read_discrete+0x184>
 8004b9c:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	dc0b      	bgt.n	8004bbc <handle_read_discrete+0x184>
                    return send_exception_msg(nmbs, err);
 8004ba4:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 8004ba8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004bac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004bb0:	4611      	mov	r1, r2
 8004bb2:	6818      	ldr	r0, [r3, #0]
 8004bb4:	f7ff fbb1 	bl	800431a <send_exception_msg>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	e07a      	b.n	8004cb2 <handle_read_discrete+0x27a>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8004bbc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004bc0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004bc4:	2104      	movs	r1, #4
 8004bc6:	6818      	ldr	r0, [r3, #0]
 8004bc8:	f7ff fba7 	bl	800431a <send_exception_msg>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	e070      	b.n	8004cb2 <handle_read_discrete+0x27a>
            }

            if (!nmbs->msg.broadcast) {
 8004bd0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004bd4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8004bde:	f083 0301 	eor.w	r3, r3, #1
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d063      	beq.n	8004cb0 <handle_read_discrete+0x278>
                uint8_t discrete_bytes = (quantity + 7) / 8;
 8004be8:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8004bec:	3307      	adds	r3, #7
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	da00      	bge.n	8004bf4 <handle_read_discrete+0x1bc>
 8004bf2:	3307      	adds	r3, #7
 8004bf4:	10db      	asrs	r3, r3, #3
 8004bf6:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
                put_res_header(nmbs, 1 + discrete_bytes);
 8004bfa:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	3301      	adds	r3, #1
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004c08:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c0c:	4611      	mov	r1, r2
 8004c0e:	6818      	ldr	r0, [r3, #0]
 8004c10:	f7ff fb74 	bl	80042fc <put_res_header>

                put_1(nmbs, discrete_bytes);
 8004c14:	f897 2105 	ldrb.w	r2, [r7, #261]	; 0x105
 8004c18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004c1c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c20:	4611      	mov	r1, r2
 8004c22:	6818      	ldr	r0, [r3, #0]
 8004c24:	f7fe ffb8 	bl	8003b98 <put_1>

                NMBS_DEBUG_PRINT("b %d\t", discrete_bytes);

                NMBS_DEBUG_PRINT("coils ");
                for (int i = 0; i < discrete_bytes; i++) {
 8004c28:	2300      	movs	r3, #0
 8004c2a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004c2e:	e014      	b.n	8004c5a <handle_read_discrete+0x222>
                    put_1(nmbs, bitfield[i]);
 8004c30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004c34:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8004c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c3c:	4413      	add	r3, r2
 8004c3e:	781a      	ldrb	r2, [r3, #0]
 8004c40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004c44:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c48:	4611      	mov	r1, r2
 8004c4a:	6818      	ldr	r0, [r3, #0]
 8004c4c:	f7fe ffa4 	bl	8003b98 <put_1>
                for (int i = 0; i < discrete_bytes; i++) {
 8004c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c54:	3301      	adds	r3, #1
 8004c56:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004c5a:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8004c5e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004c62:	429a      	cmp	r2, r3
 8004c64:	dbe4      	blt.n	8004c30 <handle_read_discrete+0x1f8>
                    NMBS_DEBUG_PRINT("%d ", bitfield[i]);
                }

                err = send_msg(nmbs);
 8004c66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004c6a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c6e:	6818      	ldr	r0, [r3, #0]
 8004c70:	f7ff fae5 	bl	800423e <send_msg>
 8004c74:	4603      	mov	r3, r0
 8004c76:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
                if (err != NMBS_ERROR_NONE)
 8004c7a:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d016      	beq.n	8004cb0 <handle_read_discrete+0x278>
                    return err;
 8004c82:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004c86:	e014      	b.n	8004cb2 <handle_read_discrete+0x27a>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8004c88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004c8c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c90:	2101      	movs	r1, #1
 8004c92:	6818      	ldr	r0, [r3, #0]
 8004c94:	f7ff fb41 	bl	800431a <send_exception_msg>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	e00a      	b.n	8004cb2 <handle_read_discrete+0x27a>
        }
    }
    else {
        return recv_read_discrete_res(nmbs, NULL);
 8004c9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ca0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	6818      	ldr	r0, [r3, #0]
 8004ca8:	f7ff fbd1 	bl	800444e <recv_read_discrete_res>
 8004cac:	4603      	mov	r3, r0
 8004cae:	e000      	b.n	8004cb2 <handle_read_discrete+0x27a>
    }

    return NMBS_ERROR_NONE;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004cbc <handle_read_registers>:
#endif


#if !defined(NMBS_SERVER_READ_HOLDING_REGISTERS_DISABLED) || !defined(NMBS_SERVER_READ_INPUT_REGISTERS_DISABLED)
static nmbs_error handle_read_registers(nmbs_t* nmbs,
                                        nmbs_error (*callback)(uint16_t, uint16_t, uint16_t*, uint8_t, void*)) {
 8004cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cbe:	b0c7      	sub	sp, #284	; 0x11c
 8004cc0:	af02      	add	r7, sp, #8
 8004cc2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004cc6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004cca:	6018      	str	r0, [r3, #0]
 8004ccc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004cd0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004cd4:	6019      	str	r1, [r3, #0]
    nmbs_error err = recv(nmbs, 4);
 8004cd6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004cda:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004cde:	2104      	movs	r1, #4
 8004ce0:	6818      	ldr	r0, [r3, #0]
 8004ce2:	f7ff f935 	bl	8003f50 <recv>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8004cec:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <handle_read_registers+0x3e>
        return err;
 8004cf4:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004cf8:	e119      	b.n	8004f2e <handle_read_registers+0x272>

    uint16_t address = get_2(nmbs);
 8004cfa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004cfe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d02:	6818      	ldr	r0, [r3, #0]
 8004d04:	f7fe ff8a 	bl	8003c1c <get_2>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    uint16_t quantity = get_2(nmbs);
 8004d0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d12:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d16:	6818      	ldr	r0, [r3, #0]
 8004d18:	f7fe ff80 	bl	8003c1c <get_2>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106

    NMBS_DEBUG_PRINT("a %d\tq %d", address, quantity);

    err = recv_msg_footer(nmbs);
 8004d22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d26:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d2a:	6818      	ldr	r0, [r3, #0]
 8004d2c:	f7ff f96c 	bl	8004008 <recv_msg_footer>
 8004d30:	4603      	mov	r3, r0
 8004d32:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8004d36:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <handle_read_registers+0x88>
        return err;
 8004d3e:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004d42:	e0f4      	b.n	8004f2e <handle_read_registers+0x272>

    if (!nmbs->msg.ignored) {
 8004d44:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d48:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8004d52:	f083 0301 	eor.w	r3, r3, #1
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f000 80db 	beq.w	8004f14 <handle_read_registers+0x258>
        if (quantity < 1 || quantity > 125)
 8004d5e:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d003      	beq.n	8004d6e <handle_read_registers+0xb2>
 8004d66:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8004d6a:	2b7d      	cmp	r3, #125	; 0x7d
 8004d6c:	d909      	bls.n	8004d82 <handle_read_registers+0xc6>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8004d6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d72:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d76:	2103      	movs	r1, #3
 8004d78:	6818      	ldr	r0, [r3, #0]
 8004d7a:	f7ff face 	bl	800431a <send_exception_msg>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	e0d5      	b.n	8004f2e <handle_read_registers+0x272>

        if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 8004d82:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 8004d86:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d90:	d909      	bls.n	8004da6 <handle_read_registers+0xea>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8004d92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d96:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d9a:	2102      	movs	r1, #2
 8004d9c:	6818      	ldr	r0, [r3, #0]
 8004d9e:	f7ff fabc 	bl	800431a <send_exception_msg>
 8004da2:	4603      	mov	r3, r0
 8004da4:	e0c3      	b.n	8004f2e <handle_read_registers+0x272>

        if (callback) {
 8004da6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004daa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 80a5 	beq.w	8004f00 <handle_read_registers+0x244>
            uint16_t regs[125] = {0};
 8004db6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004dba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	23fa      	movs	r3, #250	; 0xfa
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	f001 fc7b 	bl	80066c0 <memset>
            err = callback(address, quantity, regs, nmbs->msg.unit_id, nmbs->platform.arg);
 8004dca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004dce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f893 6106 	ldrb.w	r6, [r3, #262]	; 0x106
 8004dd8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ddc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8004de6:	f107 0508 	add.w	r5, r7, #8
 8004dea:	f8b7 1106 	ldrh.w	r1, [r7, #262]	; 0x106
 8004dee:	f8b7 0108 	ldrh.w	r0, [r7, #264]	; 0x108
 8004df2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004df6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004dfa:	9200      	str	r2, [sp, #0]
 8004dfc:	681c      	ldr	r4, [r3, #0]
 8004dfe:	4633      	mov	r3, r6
 8004e00:	462a      	mov	r2, r5
 8004e02:	47a0      	blx	r4
 8004e04:	4603      	mov	r3, r0
 8004e06:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
            if (err != NMBS_ERROR_NONE) {
 8004e0a:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d01d      	beq.n	8004e4e <handle_read_registers+0x192>
                if (nmbs_error_is_exception(err))
 8004e12:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	dd0f      	ble.n	8004e3a <handle_read_registers+0x17e>
 8004e1a:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	dc0b      	bgt.n	8004e3a <handle_read_registers+0x17e>
                    return send_exception_msg(nmbs, err);
 8004e22:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 8004e26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e2e:	4611      	mov	r1, r2
 8004e30:	6818      	ldr	r0, [r3, #0]
 8004e32:	f7ff fa72 	bl	800431a <send_exception_msg>
 8004e36:	4603      	mov	r3, r0
 8004e38:	e079      	b.n	8004f2e <handle_read_registers+0x272>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8004e3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e3e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e42:	2104      	movs	r1, #4
 8004e44:	6818      	ldr	r0, [r3, #0]
 8004e46:	f7ff fa68 	bl	800431a <send_exception_msg>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	e06f      	b.n	8004f2e <handle_read_registers+0x272>
            }

            if (!nmbs->msg.broadcast) {
 8004e4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e52:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8004e5c:	f083 0301 	eor.w	r3, r3, #1
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d062      	beq.n	8004f2c <handle_read_registers+0x270>
                uint8_t regs_bytes = quantity * 2;
 8004e66:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
                put_res_header(nmbs, 1 + regs_bytes);
 8004e72:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	3301      	adds	r3, #1
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e80:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e84:	4611      	mov	r1, r2
 8004e86:	6818      	ldr	r0, [r3, #0]
 8004e88:	f7ff fa38 	bl	80042fc <put_res_header>

                put_1(nmbs, regs_bytes);
 8004e8c:	f897 2105 	ldrb.w	r2, [r7, #261]	; 0x105
 8004e90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e94:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e98:	4611      	mov	r1, r2
 8004e9a:	6818      	ldr	r0, [r3, #0]
 8004e9c:	f7fe fe7c 	bl	8003b98 <put_1>

                NMBS_DEBUG_PRINT("b %d\t", regs_bytes);

                NMBS_DEBUG_PRINT("regs ");
                for (int i = 0; i < quantity; i++) {
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004ea6:	e014      	b.n	8004ed2 <handle_read_registers+0x216>
                    put_2(nmbs, regs[i]);
 8004ea8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004eac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eb0:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004eb4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004eb8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ebc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ec0:	4611      	mov	r1, r2
 8004ec2:	6818      	ldr	r0, [r3, #0]
 8004ec4:	f7fe fecf 	bl	8003c66 <put_2>
                for (int i = 0; i < quantity; i++) {
 8004ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ecc:	3301      	adds	r3, #1
 8004ece:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004ed2:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8004ed6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004eda:	429a      	cmp	r2, r3
 8004edc:	dbe4      	blt.n	8004ea8 <handle_read_registers+0x1ec>
                    NMBS_DEBUG_PRINT("%d ", regs[i]);
                }

                err = send_msg(nmbs);
 8004ede:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ee2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ee6:	6818      	ldr	r0, [r3, #0]
 8004ee8:	f7ff f9a9 	bl	800423e <send_msg>
 8004eec:	4603      	mov	r3, r0
 8004eee:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
                if (err != NMBS_ERROR_NONE)
 8004ef2:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d018      	beq.n	8004f2c <handle_read_registers+0x270>
                    return err;
 8004efa:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004efe:	e016      	b.n	8004f2e <handle_read_registers+0x272>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8004f00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f04:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f08:	2101      	movs	r1, #1
 8004f0a:	6818      	ldr	r0, [r3, #0]
 8004f0c:	f7ff fa05 	bl	800431a <send_exception_msg>
 8004f10:	4603      	mov	r3, r0
 8004f12:	e00c      	b.n	8004f2e <handle_read_registers+0x272>
        }
    }
    else {
        return recv_read_registers_res(nmbs, quantity, NULL);
 8004f14:	f8b7 1106 	ldrh.w	r1, [r7, #262]	; 0x106
 8004f18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f1c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f20:	2200      	movs	r2, #0
 8004f22:	6818      	ldr	r0, [r3, #0]
 8004f24:	f7ff faed 	bl	8004502 <recv_read_registers_res>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	e000      	b.n	8004f2e <handle_read_registers+0x272>
    }

    return NMBS_ERROR_NONE;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f38 <handle_read_coils>:
#endif


#ifndef NMBS_SERVER_READ_COILS_DISABLED
static nmbs_error handle_read_coils(nmbs_t* nmbs) {
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
    return handle_read_discrete(nmbs, nmbs->callbacks.read_coils);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004f46:	4619      	mov	r1, r3
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f7ff fd75 	bl	8004a38 <handle_read_discrete>
 8004f4e:	4603      	mov	r3, r0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <handle_read_discrete_inputs>:
#endif


#ifndef NMBS_SERVER_READ_DISCRETE_INPUTS_DISABLED
static nmbs_error handle_read_discrete_inputs(nmbs_t* nmbs) {
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
    return handle_read_discrete(nmbs, nmbs->callbacks.read_discrete_inputs);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8004f66:	4619      	mov	r1, r3
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7ff fd65 	bl	8004a38 <handle_read_discrete>
 8004f6e:	4603      	mov	r3, r0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <handle_read_holding_registers>:
#endif


#ifndef NMBS_SERVER_READ_HOLDING_REGISTERS_DISABLED
static nmbs_error handle_read_holding_registers(nmbs_t* nmbs) {
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
    return handle_read_registers(nmbs, nmbs->callbacks.read_holding_registers);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004f86:	4619      	mov	r1, r3
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7ff fe97 	bl	8004cbc <handle_read_registers>
 8004f8e:	4603      	mov	r3, r0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3708      	adds	r7, #8
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <handle_read_input_registers>:
#endif


#ifndef NMBS_SERVER_READ_INPUT_REGISTERS_DISABLED
static nmbs_error handle_read_input_registers(nmbs_t* nmbs) {
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
    return handle_read_registers(nmbs, nmbs->callbacks.read_input_registers);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f7ff fe87 	bl	8004cbc <handle_read_registers>
 8004fae:	4603      	mov	r3, r0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <handle_write_single_coil>:
#endif


#ifndef NMBS_SERVER_WRITE_SINGLE_COIL_DISABLED
static nmbs_error handle_write_single_coil(nmbs_t* nmbs) {
 8004fb8:	b590      	push	{r4, r7, lr}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
    nmbs_error err = recv(nmbs, 4);
 8004fc0:	2104      	movs	r1, #4
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7fe ffc4 	bl	8003f50 <recv>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8004fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <handle_write_single_coil+0x22>
        return err;
 8004fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fd8:	e08c      	b.n	80050f4 <handle_write_single_coil+0x13c>

    uint16_t address = get_2(nmbs);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7fe fe1e 	bl	8003c1c <get_2>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	81bb      	strh	r3, [r7, #12]
    uint16_t value = get_2(nmbs);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f7fe fe19 	bl	8003c1c <get_2>
 8004fea:	4603      	mov	r3, r0
 8004fec:	817b      	strh	r3, [r7, #10]

    NMBS_DEBUG_PRINT("a %d\tvalue %d", address, value);

    err = recv_msg_footer(nmbs);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7ff f80a 	bl	8004008 <recv_msg_footer>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8004ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d002      	beq.n	8005006 <handle_write_single_coil+0x4e>
        return err;
 8005000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005004:	e076      	b.n	80050f4 <handle_write_single_coil+0x13c>

    if (!nmbs->msg.ignored) {
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 800500c:	f083 0301 	eor.w	r3, r3, #1
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d065      	beq.n	80050e2 <handle_write_single_coil+0x12a>
        if (nmbs->callbacks.write_single_coil) {
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800501c:	2b00      	cmp	r3, #0
 800501e:	d05a      	beq.n	80050d6 <handle_write_single_coil+0x11e>
            if (value != 0 && value != 0xFF00)
 8005020:	897b      	ldrh	r3, [r7, #10]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d009      	beq.n	800503a <handle_write_single_coil+0x82>
 8005026:	897b      	ldrh	r3, [r7, #10]
 8005028:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800502c:	d005      	beq.n	800503a <handle_write_single_coil+0x82>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 800502e:	2103      	movs	r1, #3
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f7ff f972 	bl	800431a <send_exception_msg>
 8005036:	4603      	mov	r3, r0
 8005038:	e05c      	b.n	80050f4 <handle_write_single_coil+0x13c>

            err = nmbs->callbacks.write_single_coil(address, value == 0 ? false : true, nmbs->msg.unit_id,
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8d3 411c 	ldr.w	r4, [r3, #284]	; 0x11c
 8005040:	897b      	ldrh	r3, [r7, #10]
 8005042:	2b00      	cmp	r3, #0
 8005044:	bf14      	ite	ne
 8005046:	2301      	movne	r3, #1
 8005048:	2300      	moveq	r3, #0
 800504a:	b2d9      	uxtb	r1, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8005058:	89b8      	ldrh	r0, [r7, #12]
 800505a:	47a0      	blx	r4
 800505c:	4603      	mov	r3, r0
 800505e:	73fb      	strb	r3, [r7, #15]
                                                    nmbs->platform.arg);
            if (err != NMBS_ERROR_NONE) {
 8005060:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d014      	beq.n	8005092 <handle_write_single_coil+0xda>
                if (nmbs_error_is_exception(err))
 8005068:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800506c:	2b00      	cmp	r3, #0
 800506e:	dd0a      	ble.n	8005086 <handle_write_single_coil+0xce>
 8005070:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005074:	2b04      	cmp	r3, #4
 8005076:	dc06      	bgt.n	8005086 <handle_write_single_coil+0xce>
                    return send_exception_msg(nmbs, err);
 8005078:	7bfb      	ldrb	r3, [r7, #15]
 800507a:	4619      	mov	r1, r3
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7ff f94c 	bl	800431a <send_exception_msg>
 8005082:	4603      	mov	r3, r0
 8005084:	e036      	b.n	80050f4 <handle_write_single_coil+0x13c>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8005086:	2104      	movs	r1, #4
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7ff f946 	bl	800431a <send_exception_msg>
 800508e:	4603      	mov	r3, r0
 8005090:	e030      	b.n	80050f4 <handle_write_single_coil+0x13c>
            }

            if (!nmbs->msg.broadcast) {
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8005098:	f083 0301 	eor.w	r3, r3, #1
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d027      	beq.n	80050f2 <handle_write_single_coil+0x13a>
                put_res_header(nmbs, 4);
 80050a2:	2104      	movs	r1, #4
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7ff f929 	bl	80042fc <put_res_header>

                put_2(nmbs, address);
 80050aa:	89bb      	ldrh	r3, [r7, #12]
 80050ac:	4619      	mov	r1, r3
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f7fe fdd9 	bl	8003c66 <put_2>
                put_2(nmbs, value);
 80050b4:	897b      	ldrh	r3, [r7, #10]
 80050b6:	4619      	mov	r1, r3
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7fe fdd4 	bl	8003c66 <put_2>
                NMBS_DEBUG_PRINT("a %d\tvalue %d", address, value);

                err = send_msg(nmbs);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7ff f8bd 	bl	800423e <send_msg>
 80050c4:	4603      	mov	r3, r0
 80050c6:	73fb      	strb	r3, [r7, #15]
                if (err != NMBS_ERROR_NONE)
 80050c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d010      	beq.n	80050f2 <handle_write_single_coil+0x13a>
                    return err;
 80050d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050d4:	e00e      	b.n	80050f4 <handle_write_single_coil+0x13c>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 80050d6:	2101      	movs	r1, #1
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f7ff f91e 	bl	800431a <send_exception_msg>
 80050de:	4603      	mov	r3, r0
 80050e0:	e008      	b.n	80050f4 <handle_write_single_coil+0x13c>
        }
    }
    else {
        return recv_write_single_coil_res(nmbs, address, value);
 80050e2:	897a      	ldrh	r2, [r7, #10]
 80050e4:	89bb      	ldrh	r3, [r7, #12]
 80050e6:	4619      	mov	r1, r3
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff fa72 	bl	80045d2 <recv_write_single_coil_res>
 80050ee:	4603      	mov	r3, r0
 80050f0:	e000      	b.n	80050f4 <handle_write_single_coil+0x13c>
    }

    return NMBS_ERROR_NONE;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd90      	pop	{r4, r7, pc}

080050fc <handle_write_single_register>:
#endif


#ifndef NMBS_SERVER_WRITE_SINGLE_REGISTER_DISABLED
static nmbs_error handle_write_single_register(nmbs_t* nmbs) {
 80050fc:	b590      	push	{r4, r7, lr}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
    nmbs_error err = recv(nmbs, 4);
 8005104:	2104      	movs	r1, #4
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7fe ff22 	bl	8003f50 <recv>
 800510c:	4603      	mov	r3, r0
 800510e:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8005110:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d002      	beq.n	800511e <handle_write_single_register+0x22>
        return err;
 8005118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800511c:	e07a      	b.n	8005214 <handle_write_single_register+0x118>

    uint16_t address = get_2(nmbs);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7fe fd7c 	bl	8003c1c <get_2>
 8005124:	4603      	mov	r3, r0
 8005126:	81bb      	strh	r3, [r7, #12]
    uint16_t value = get_2(nmbs);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f7fe fd77 	bl	8003c1c <get_2>
 800512e:	4603      	mov	r3, r0
 8005130:	817b      	strh	r3, [r7, #10]

    NMBS_DEBUG_PRINT("a %d\tvalue %d", address, value);

    err = recv_msg_footer(nmbs);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7fe ff68 	bl	8004008 <recv_msg_footer>
 8005138:	4603      	mov	r3, r0
 800513a:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 800513c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d002      	beq.n	800514a <handle_write_single_register+0x4e>
        return err;
 8005144:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005148:	e064      	b.n	8005214 <handle_write_single_register+0x118>

    if (!nmbs->msg.ignored) {
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8005150:	f083 0301 	eor.w	r3, r3, #1
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d053      	beq.n	8005202 <handle_write_single_register+0x106>
        if (nmbs->callbacks.write_single_register) {
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8005160:	2b00      	cmp	r3, #0
 8005162:	d048      	beq.n	80051f6 <handle_write_single_register+0xfa>
            err = nmbs->callbacks.write_single_register(address, value, nmbs->msg.unit_id, nmbs->platform.arg);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8005176:	8979      	ldrh	r1, [r7, #10]
 8005178:	89b8      	ldrh	r0, [r7, #12]
 800517a:	47a0      	blx	r4
 800517c:	4603      	mov	r3, r0
 800517e:	73fb      	strb	r3, [r7, #15]
            if (err != NMBS_ERROR_NONE) {
 8005180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d014      	beq.n	80051b2 <handle_write_single_register+0xb6>
                if (nmbs_error_is_exception(err))
 8005188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800518c:	2b00      	cmp	r3, #0
 800518e:	dd0a      	ble.n	80051a6 <handle_write_single_register+0xaa>
 8005190:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005194:	2b04      	cmp	r3, #4
 8005196:	dc06      	bgt.n	80051a6 <handle_write_single_register+0xaa>
                    return send_exception_msg(nmbs, err);
 8005198:	7bfb      	ldrb	r3, [r7, #15]
 800519a:	4619      	mov	r1, r3
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f7ff f8bc 	bl	800431a <send_exception_msg>
 80051a2:	4603      	mov	r3, r0
 80051a4:	e036      	b.n	8005214 <handle_write_single_register+0x118>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 80051a6:	2104      	movs	r1, #4
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7ff f8b6 	bl	800431a <send_exception_msg>
 80051ae:	4603      	mov	r3, r0
 80051b0:	e030      	b.n	8005214 <handle_write_single_register+0x118>
            }

            if (!nmbs->msg.broadcast) {
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 80051b8:	f083 0301 	eor.w	r3, r3, #1
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d027      	beq.n	8005212 <handle_write_single_register+0x116>
                put_res_header(nmbs, 4);
 80051c2:	2104      	movs	r1, #4
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f7ff f899 	bl	80042fc <put_res_header>

                put_2(nmbs, address);
 80051ca:	89bb      	ldrh	r3, [r7, #12]
 80051cc:	4619      	mov	r1, r3
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7fe fd49 	bl	8003c66 <put_2>
                put_2(nmbs, value);
 80051d4:	897b      	ldrh	r3, [r7, #10]
 80051d6:	4619      	mov	r1, r3
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f7fe fd44 	bl	8003c66 <put_2>
                NMBS_DEBUG_PRINT("a %d\tvalue %d", address, value);

                err = send_msg(nmbs);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7ff f82d 	bl	800423e <send_msg>
 80051e4:	4603      	mov	r3, r0
 80051e6:	73fb      	strb	r3, [r7, #15]
                if (err != NMBS_ERROR_NONE)
 80051e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d010      	beq.n	8005212 <handle_write_single_register+0x116>
                    return err;
 80051f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051f4:	e00e      	b.n	8005214 <handle_write_single_register+0x118>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 80051f6:	2101      	movs	r1, #1
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f7ff f88e 	bl	800431a <send_exception_msg>
 80051fe:	4603      	mov	r3, r0
 8005200:	e008      	b.n	8005214 <handle_write_single_register+0x118>
        }
    }
    else {
        return recv_write_single_register_res(nmbs, address, value);
 8005202:	897a      	ldrh	r2, [r7, #10]
 8005204:	89bb      	ldrh	r3, [r7, #12]
 8005206:	4619      	mov	r1, r3
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7ff fa2c 	bl	8004666 <recv_write_single_register_res>
 800520e:	4603      	mov	r3, r0
 8005210:	e000      	b.n	8005214 <handle_write_single_register+0x118>
    }

    return NMBS_ERROR_NONE;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	bd90      	pop	{r4, r7, pc}

0800521c <handle_write_multiple_coils>:
#endif


#ifndef NMBS_SERVER_WRITE_MULTIPLE_COILS_DISABLED
static nmbs_error handle_write_multiple_coils(nmbs_t* nmbs) {
 800521c:	b5b0      	push	{r4, r5, r7, lr}
 800521e:	b0c6      	sub	sp, #280	; 0x118
 8005220:	af02      	add	r7, sp, #8
 8005222:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005226:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800522a:	6018      	str	r0, [r3, #0]
    nmbs_error err = recv(nmbs, 5);
 800522c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005230:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005234:	2105      	movs	r1, #5
 8005236:	6818      	ldr	r0, [r3, #0]
 8005238:	f7fe fe8a 	bl	8003f50 <recv>
 800523c:	4603      	mov	r3, r0
 800523e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8005242:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <handle_write_multiple_coils+0x34>
        return err;
 800524a:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 800524e:	e163      	b.n	8005518 <handle_write_multiple_coils+0x2fc>

    uint16_t address = get_2(nmbs);
 8005250:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005254:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005258:	6818      	ldr	r0, [r3, #0]
 800525a:	f7fe fcdf 	bl	8003c1c <get_2>
 800525e:	4603      	mov	r3, r0
 8005260:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    uint16_t quantity = get_2(nmbs);
 8005264:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005268:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800526c:	6818      	ldr	r0, [r3, #0]
 800526e:	f7fe fcd5 	bl	8003c1c <get_2>
 8005272:	4603      	mov	r3, r0
 8005274:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
    uint8_t coils_bytes = get_1(nmbs);
 8005278:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800527c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005280:	6818      	ldr	r0, [r3, #0]
 8005282:	f7fe fc6f 	bl	8003b64 <get_1>
 8005286:	4603      	mov	r3, r0
 8005288:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105

    NMBS_DEBUG_PRINT("a %d\tq %d\tb %d\tcoils ", address, quantity, coils_bytes);

    err = recv(nmbs, coils_bytes);
 800528c:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8005290:	b29a      	uxth	r2, r3
 8005292:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005296:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800529a:	4611      	mov	r1, r2
 800529c:	6818      	ldr	r0, [r3, #0]
 800529e:	f7fe fe57 	bl	8003f50 <recv>
 80052a2:	4603      	mov	r3, r0
 80052a4:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 80052a8:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d002      	beq.n	80052b6 <handle_write_multiple_coils+0x9a>
        return err;
 80052b0:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80052b4:	e130      	b.n	8005518 <handle_write_multiple_coils+0x2fc>

    nmbs_bitfield coils = {0};
 80052b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80052ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052be:	2200      	movs	r2, #0
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	3304      	adds	r3, #4
 80052c4:	22f6      	movs	r2, #246	; 0xf6
 80052c6:	2100      	movs	r1, #0
 80052c8:	4618      	mov	r0, r3
 80052ca:	f001 f9f9 	bl	80066c0 <memset>
    for (int i = 0; i < coils_bytes; i++) {
 80052ce:	2300      	movs	r3, #0
 80052d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80052d4:	e016      	b.n	8005304 <handle_write_multiple_coils+0xe8>
        coils[i] = get_1(nmbs);
 80052d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80052da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80052de:	6818      	ldr	r0, [r3, #0]
 80052e0:	f7fe fc40 	bl	8003b64 <get_1>
 80052e4:	4603      	mov	r3, r0
 80052e6:	4619      	mov	r1, r3
 80052e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80052ec:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 80052f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052f4:	4413      	add	r3, r2
 80052f6:	460a      	mov	r2, r1
 80052f8:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < coils_bytes; i++) {
 80052fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052fe:	3301      	adds	r3, #1
 8005300:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005304:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8005308:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800530c:	429a      	cmp	r2, r3
 800530e:	dbe2      	blt.n	80052d6 <handle_write_multiple_coils+0xba>
        NMBS_DEBUG_PRINT("%d ", coils[i]);
    }

    err = recv_msg_footer(nmbs);
 8005310:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005314:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005318:	6818      	ldr	r0, [r3, #0]
 800531a:	f7fe fe75 	bl	8004008 <recv_msg_footer>
 800531e:	4603      	mov	r3, r0
 8005320:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8005324:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8005328:	2b00      	cmp	r3, #0
 800532a:	d002      	beq.n	8005332 <handle_write_multiple_coils+0x116>
        return err;
 800532c:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8005330:	e0f2      	b.n	8005518 <handle_write_multiple_coils+0x2fc>

    if (!nmbs->msg.ignored) {
 8005332:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005336:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8005340:	f083 0301 	eor.w	r3, r3, #1
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 80d8 	beq.w	80054fc <handle_write_multiple_coils+0x2e0>
        if (quantity < 1 || quantity > 0x07B0)
 800534c:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8005350:	2b00      	cmp	r3, #0
 8005352:	d004      	beq.n	800535e <handle_write_multiple_coils+0x142>
 8005354:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8005358:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 800535c:	d909      	bls.n	8005372 <handle_write_multiple_coils+0x156>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 800535e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005362:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005366:	2103      	movs	r1, #3
 8005368:	6818      	ldr	r0, [r3, #0]
 800536a:	f7fe ffd6 	bl	800431a <send_exception_msg>
 800536e:	4603      	mov	r3, r0
 8005370:	e0d2      	b.n	8005518 <handle_write_multiple_coils+0x2fc>

        if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 8005372:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 8005376:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 800537a:	4413      	add	r3, r2
 800537c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005380:	d909      	bls.n	8005396 <handle_write_multiple_coils+0x17a>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8005382:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005386:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800538a:	2102      	movs	r1, #2
 800538c:	6818      	ldr	r0, [r3, #0]
 800538e:	f7fe ffc4 	bl	800431a <send_exception_msg>
 8005392:	4603      	mov	r3, r0
 8005394:	e0c0      	b.n	8005518 <handle_write_multiple_coils+0x2fc>

        if (coils_bytes == 0)
 8005396:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 800539a:	2b00      	cmp	r3, #0
 800539c:	d109      	bne.n	80053b2 <handle_write_multiple_coils+0x196>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 800539e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80053a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80053a6:	2103      	movs	r1, #3
 80053a8:	6818      	ldr	r0, [r3, #0]
 80053aa:	f7fe ffb6 	bl	800431a <send_exception_msg>
 80053ae:	4603      	mov	r3, r0
 80053b0:	e0b2      	b.n	8005518 <handle_write_multiple_coils+0x2fc>

        if ((quantity + 7) / 8 != coils_bytes)
 80053b2:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80053b6:	3307      	adds	r3, #7
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	da00      	bge.n	80053be <handle_write_multiple_coils+0x1a2>
 80053bc:	3307      	adds	r3, #7
 80053be:	10db      	asrs	r3, r3, #3
 80053c0:	461a      	mov	r2, r3
 80053c2:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d009      	beq.n	80053de <handle_write_multiple_coils+0x1c2>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 80053ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80053ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80053d2:	2103      	movs	r1, #3
 80053d4:	6818      	ldr	r0, [r3, #0]
 80053d6:	f7fe ffa0 	bl	800431a <send_exception_msg>
 80053da:	4603      	mov	r3, r0
 80053dc:	e09c      	b.n	8005518 <handle_write_multiple_coils+0x2fc>

        if (nmbs->callbacks.write_multiple_coils) {
 80053de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80053e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d07b      	beq.n	80054e8 <handle_write_multiple_coils+0x2cc>
            err = nmbs->callbacks.write_multiple_coils(address, quantity, coils, nmbs->msg.unit_id, nmbs->platform.arg);
 80053f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80053f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f8d3 4124 	ldr.w	r4, [r3, #292]	; 0x124
 80053fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005402:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f893 5106 	ldrb.w	r5, [r3, #262]	; 0x106
 800540c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005410:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800541a:	f107 0208 	add.w	r2, r7, #8
 800541e:	f8b7 1106 	ldrh.w	r1, [r7, #262]	; 0x106
 8005422:	f8b7 0108 	ldrh.w	r0, [r7, #264]	; 0x108
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	462b      	mov	r3, r5
 800542a:	47a0      	blx	r4
 800542c:	4603      	mov	r3, r0
 800542e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
            if (err != NMBS_ERROR_NONE) {
 8005432:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8005436:	2b00      	cmp	r3, #0
 8005438:	d01d      	beq.n	8005476 <handle_write_multiple_coils+0x25a>
                if (nmbs_error_is_exception(err))
 800543a:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 800543e:	2b00      	cmp	r3, #0
 8005440:	dd0f      	ble.n	8005462 <handle_write_multiple_coils+0x246>
 8005442:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8005446:	2b04      	cmp	r3, #4
 8005448:	dc0b      	bgt.n	8005462 <handle_write_multiple_coils+0x246>
                    return send_exception_msg(nmbs, err);
 800544a:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 800544e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005452:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005456:	4611      	mov	r1, r2
 8005458:	6818      	ldr	r0, [r3, #0]
 800545a:	f7fe ff5e 	bl	800431a <send_exception_msg>
 800545e:	4603      	mov	r3, r0
 8005460:	e05a      	b.n	8005518 <handle_write_multiple_coils+0x2fc>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8005462:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005466:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800546a:	2104      	movs	r1, #4
 800546c:	6818      	ldr	r0, [r3, #0]
 800546e:	f7fe ff54 	bl	800431a <send_exception_msg>
 8005472:	4603      	mov	r3, r0
 8005474:	e050      	b.n	8005518 <handle_write_multiple_coils+0x2fc>
            }

            if (!nmbs->msg.broadcast) {
 8005476:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800547a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8005484:	f083 0301 	eor.w	r3, r3, #1
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d043      	beq.n	8005516 <handle_write_multiple_coils+0x2fa>
                put_res_header(nmbs, 4);
 800548e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005492:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005496:	2104      	movs	r1, #4
 8005498:	6818      	ldr	r0, [r3, #0]
 800549a:	f7fe ff2f 	bl	80042fc <put_res_header>

                put_2(nmbs, address);
 800549e:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 80054a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80054a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80054aa:	4611      	mov	r1, r2
 80054ac:	6818      	ldr	r0, [r3, #0]
 80054ae:	f7fe fbda 	bl	8003c66 <put_2>
                put_2(nmbs, quantity);
 80054b2:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 80054b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80054ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80054be:	4611      	mov	r1, r2
 80054c0:	6818      	ldr	r0, [r3, #0]
 80054c2:	f7fe fbd0 	bl	8003c66 <put_2>
                NMBS_DEBUG_PRINT("a %d\tq %d", address, quantity);

                err = send_msg(nmbs);
 80054c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80054ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80054ce:	6818      	ldr	r0, [r3, #0]
 80054d0:	f7fe feb5 	bl	800423e <send_msg>
 80054d4:	4603      	mov	r3, r0
 80054d6:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
                if (err != NMBS_ERROR_NONE)
 80054da:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d019      	beq.n	8005516 <handle_write_multiple_coils+0x2fa>
                    return err;
 80054e2:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80054e6:	e017      	b.n	8005518 <handle_write_multiple_coils+0x2fc>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 80054e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80054ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80054f0:	2101      	movs	r1, #1
 80054f2:	6818      	ldr	r0, [r3, #0]
 80054f4:	f7fe ff11 	bl	800431a <send_exception_msg>
 80054f8:	4603      	mov	r3, r0
 80054fa:	e00d      	b.n	8005518 <handle_write_multiple_coils+0x2fc>
        }
    }
    else {
        return recv_write_multiple_coils_res(nmbs, address, quantity);
 80054fc:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 8005500:	f8b7 1108 	ldrh.w	r1, [r7, #264]	; 0x108
 8005504:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005508:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800550c:	6818      	ldr	r0, [r3, #0]
 800550e:	f7ff f8f4 	bl	80046fa <recv_write_multiple_coils_res>
 8005512:	4603      	mov	r3, r0
 8005514:	e000      	b.n	8005518 <handle_write_multiple_coils+0x2fc>
    }

    return NMBS_ERROR_NONE;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800551e:	46bd      	mov	sp, r7
 8005520:	bdb0      	pop	{r4, r5, r7, pc}

08005522 <handle_write_multiple_registers>:
#endif


#ifndef NMBS_SERVER_WRITE_MULTIPLE_REGISTERS_DISABLED
static nmbs_error handle_write_multiple_registers(nmbs_t* nmbs) {
 8005522:	b5b0      	push	{r4, r5, r7, lr}
 8005524:	b0c6      	sub	sp, #280	; 0x118
 8005526:	af02      	add	r7, sp, #8
 8005528:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800552c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005530:	6018      	str	r0, [r3, #0]
    nmbs_error err = recv(nmbs, 5);
 8005532:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005536:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800553a:	2105      	movs	r1, #5
 800553c:	6818      	ldr	r0, [r3, #0]
 800553e:	f7fe fd07 	bl	8003f50 <recv>
 8005542:	4603      	mov	r3, r0
 8005544:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8005548:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 800554c:	2b00      	cmp	r3, #0
 800554e:	d002      	beq.n	8005556 <handle_write_multiple_registers+0x34>
        return err;
 8005550:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8005554:	e153      	b.n	80057fe <handle_write_multiple_registers+0x2dc>

    uint16_t address = get_2(nmbs);
 8005556:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800555a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800555e:	6818      	ldr	r0, [r3, #0]
 8005560:	f7fe fb5c 	bl	8003c1c <get_2>
 8005564:	4603      	mov	r3, r0
 8005566:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    uint16_t quantity = get_2(nmbs);
 800556a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800556e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005572:	6818      	ldr	r0, [r3, #0]
 8005574:	f7fe fb52 	bl	8003c1c <get_2>
 8005578:	4603      	mov	r3, r0
 800557a:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
    uint8_t registers_bytes = get_1(nmbs);
 800557e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005582:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005586:	6818      	ldr	r0, [r3, #0]
 8005588:	f7fe faec 	bl	8003b64 <get_1>
 800558c:	4603      	mov	r3, r0
 800558e:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105

    NMBS_DEBUG_PRINT("a %d\tq %d\tb %d\tregs ", address, quantity, registers_bytes);

    err = recv(nmbs, registers_bytes);
 8005592:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8005596:	b29a      	uxth	r2, r3
 8005598:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800559c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80055a0:	4611      	mov	r1, r2
 80055a2:	6818      	ldr	r0, [r3, #0]
 80055a4:	f7fe fcd4 	bl	8003f50 <recv>
 80055a8:	4603      	mov	r3, r0
 80055aa:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 80055ae:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <handle_write_multiple_registers+0x9a>
        return err;
 80055b6:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80055ba:	e120      	b.n	80057fe <handle_write_multiple_registers+0x2dc>

    uint16_t registers[0x007B];
    for (int i = 0; i < registers_bytes / 2; i++) {
 80055bc:	2300      	movs	r3, #0
 80055be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80055c2:	e015      	b.n	80055f0 <handle_write_multiple_registers+0xce>
        registers[i] = get_2(nmbs);
 80055c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80055c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80055cc:	6818      	ldr	r0, [r3, #0]
 80055ce:	f7fe fb25 	bl	8003c1c <get_2>
 80055d2:	4603      	mov	r3, r0
 80055d4:	4619      	mov	r1, r3
 80055d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80055da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055de:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80055e2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 0; i < registers_bytes / 2; i++) {
 80055e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055ea:	3301      	adds	r3, #1
 80055ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80055f0:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80055f4:	085b      	lsrs	r3, r3, #1
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	461a      	mov	r2, r3
 80055fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055fe:	4293      	cmp	r3, r2
 8005600:	dbe0      	blt.n	80055c4 <handle_write_multiple_registers+0xa2>
        NMBS_DEBUG_PRINT("%d ", registers[i]);
    }

    err = recv_msg_footer(nmbs);
 8005602:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005606:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800560a:	6818      	ldr	r0, [r3, #0]
 800560c:	f7fe fcfc 	bl	8004008 <recv_msg_footer>
 8005610:	4603      	mov	r3, r0
 8005612:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8005616:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <handle_write_multiple_registers+0x102>
        return err;
 800561e:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8005622:	e0ec      	b.n	80057fe <handle_write_multiple_registers+0x2dc>

    if (!nmbs->msg.ignored) {
 8005624:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005628:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8005632:	f083 0301 	eor.w	r3, r3, #1
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 80d2 	beq.w	80057e2 <handle_write_multiple_registers+0x2c0>
        if (quantity < 1 || quantity > 0x007B)
 800563e:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <handle_write_multiple_registers+0x12c>
 8005646:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 800564a:	2b7b      	cmp	r3, #123	; 0x7b
 800564c:	d909      	bls.n	8005662 <handle_write_multiple_registers+0x140>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 800564e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005652:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005656:	2103      	movs	r1, #3
 8005658:	6818      	ldr	r0, [r3, #0]
 800565a:	f7fe fe5e 	bl	800431a <send_exception_msg>
 800565e:	4603      	mov	r3, r0
 8005660:	e0cd      	b.n	80057fe <handle_write_multiple_registers+0x2dc>

        if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 8005662:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 8005666:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 800566a:	4413      	add	r3, r2
 800566c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005670:	d909      	bls.n	8005686 <handle_write_multiple_registers+0x164>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8005672:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005676:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800567a:	2102      	movs	r1, #2
 800567c:	6818      	ldr	r0, [r3, #0]
 800567e:	f7fe fe4c 	bl	800431a <send_exception_msg>
 8005682:	4603      	mov	r3, r0
 8005684:	e0bb      	b.n	80057fe <handle_write_multiple_registers+0x2dc>

        if (registers_bytes == 0)
 8005686:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 800568a:	2b00      	cmp	r3, #0
 800568c:	d109      	bne.n	80056a2 <handle_write_multiple_registers+0x180>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 800568e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005692:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005696:	2103      	movs	r1, #3
 8005698:	6818      	ldr	r0, [r3, #0]
 800569a:	f7fe fe3e 	bl	800431a <send_exception_msg>
 800569e:	4603      	mov	r3, r0
 80056a0:	e0ad      	b.n	80057fe <handle_write_multiple_registers+0x2dc>

        if (registers_bytes != quantity * 2)
 80056a2:	f897 2105 	ldrb.w	r2, [r7, #261]	; 0x105
 80056a6:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d009      	beq.n	80056c4 <handle_write_multiple_registers+0x1a2>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 80056b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80056b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80056b8:	2103      	movs	r1, #3
 80056ba:	6818      	ldr	r0, [r3, #0]
 80056bc:	f7fe fe2d 	bl	800431a <send_exception_msg>
 80056c0:	4603      	mov	r3, r0
 80056c2:	e09c      	b.n	80057fe <handle_write_multiple_registers+0x2dc>

        if (nmbs->callbacks.write_multiple_registers) {
 80056c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80056c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d07b      	beq.n	80057ce <handle_write_multiple_registers+0x2ac>
            err = nmbs->callbacks.write_multiple_registers(address, quantity, registers, nmbs->msg.unit_id,
 80056d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80056da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f8d3 4128 	ldr.w	r4, [r3, #296]	; 0x128
 80056e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80056e8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f893 5106 	ldrb.w	r5, [r3, #262]	; 0x106
 80056f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80056f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8005700:	f107 020c 	add.w	r2, r7, #12
 8005704:	f8b7 1106 	ldrh.w	r1, [r7, #262]	; 0x106
 8005708:	f8b7 0108 	ldrh.w	r0, [r7, #264]	; 0x108
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	462b      	mov	r3, r5
 8005710:	47a0      	blx	r4
 8005712:	4603      	mov	r3, r0
 8005714:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
                                                           nmbs->platform.arg);
            if (err != NMBS_ERROR_NONE) {
 8005718:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 800571c:	2b00      	cmp	r3, #0
 800571e:	d01d      	beq.n	800575c <handle_write_multiple_registers+0x23a>
                if (nmbs_error_is_exception(err))
 8005720:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8005724:	2b00      	cmp	r3, #0
 8005726:	dd0f      	ble.n	8005748 <handle_write_multiple_registers+0x226>
 8005728:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 800572c:	2b04      	cmp	r3, #4
 800572e:	dc0b      	bgt.n	8005748 <handle_write_multiple_registers+0x226>
                    return send_exception_msg(nmbs, err);
 8005730:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 8005734:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005738:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800573c:	4611      	mov	r1, r2
 800573e:	6818      	ldr	r0, [r3, #0]
 8005740:	f7fe fdeb 	bl	800431a <send_exception_msg>
 8005744:	4603      	mov	r3, r0
 8005746:	e05a      	b.n	80057fe <handle_write_multiple_registers+0x2dc>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8005748:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800574c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005750:	2104      	movs	r1, #4
 8005752:	6818      	ldr	r0, [r3, #0]
 8005754:	f7fe fde1 	bl	800431a <send_exception_msg>
 8005758:	4603      	mov	r3, r0
 800575a:	e050      	b.n	80057fe <handle_write_multiple_registers+0x2dc>
            }

            if (!nmbs->msg.broadcast) {
 800575c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005760:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 800576a:	f083 0301 	eor.w	r3, r3, #1
 800576e:	b2db      	uxtb	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d043      	beq.n	80057fc <handle_write_multiple_registers+0x2da>
                put_res_header(nmbs, 4);
 8005774:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005778:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800577c:	2104      	movs	r1, #4
 800577e:	6818      	ldr	r0, [r3, #0]
 8005780:	f7fe fdbc 	bl	80042fc <put_res_header>

                put_2(nmbs, address);
 8005784:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 8005788:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800578c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005790:	4611      	mov	r1, r2
 8005792:	6818      	ldr	r0, [r3, #0]
 8005794:	f7fe fa67 	bl	8003c66 <put_2>
                put_2(nmbs, quantity);
 8005798:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 800579c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80057a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80057a4:	4611      	mov	r1, r2
 80057a6:	6818      	ldr	r0, [r3, #0]
 80057a8:	f7fe fa5d 	bl	8003c66 <put_2>
                NMBS_DEBUG_PRINT("a %d\tq %d", address, quantity);

                err = send_msg(nmbs);
 80057ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80057b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80057b4:	6818      	ldr	r0, [r3, #0]
 80057b6:	f7fe fd42 	bl	800423e <send_msg>
 80057ba:	4603      	mov	r3, r0
 80057bc:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
                if (err != NMBS_ERROR_NONE)
 80057c0:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d019      	beq.n	80057fc <handle_write_multiple_registers+0x2da>
                    return err;
 80057c8:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80057cc:	e017      	b.n	80057fe <handle_write_multiple_registers+0x2dc>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 80057ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80057d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80057d6:	2101      	movs	r1, #1
 80057d8:	6818      	ldr	r0, [r3, #0]
 80057da:	f7fe fd9e 	bl	800431a <send_exception_msg>
 80057de:	4603      	mov	r3, r0
 80057e0:	e00d      	b.n	80057fe <handle_write_multiple_registers+0x2dc>
        }
    }
    else {
        return recv_write_multiple_registers_res(nmbs, address, quantity);
 80057e2:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 80057e6:	f8b7 1108 	ldrh.w	r1, [r7, #264]	; 0x108
 80057ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80057ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80057f2:	6818      	ldr	r0, [r3, #0]
 80057f4:	f7fe ffcb 	bl	800478e <recv_write_multiple_registers_res>
 80057f8:	4603      	mov	r3, r0
 80057fa:	e000      	b.n	80057fe <handle_write_multiple_registers+0x2dc>
    }

    return NMBS_ERROR_NONE;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005804:	46bd      	mov	sp, r7
 8005806:	bdb0      	pop	{r4, r5, r7, pc}

08005808 <handle_read_file_record>:
#endif

#ifndef NMBS_SERVER_READ_FILE_RECORD_DISABLED
static nmbs_error handle_read_file_record(nmbs_t* nmbs) {
 8005808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800580c:	b08b      	sub	sp, #44	; 0x2c
 800580e:	af02      	add	r7, sp, #8
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	466b      	mov	r3, sp
 8005814:	461e      	mov	r6, r3
    nmbs_error err = recv(nmbs, 1);
 8005816:	2101      	movs	r1, #1
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7fe fb99 	bl	8003f50 <recv>
 800581e:	4603      	mov	r3, r0
 8005820:	76fb      	strb	r3, [r7, #27]
    if (err != NMBS_ERROR_NONE)
 8005822:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d002      	beq.n	8005830 <handle_read_file_record+0x28>
        return err;
 800582a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800582e:	e199      	b.n	8005b64 <handle_read_file_record+0x35c>

    uint8_t request_size = get_1(nmbs);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f7fe f997 	bl	8003b64 <get_1>
 8005836:	4603      	mov	r3, r0
 8005838:	76bb      	strb	r3, [r7, #26]

    err = recv(nmbs, request_size);
 800583a:	7ebb      	ldrb	r3, [r7, #26]
 800583c:	b29b      	uxth	r3, r3
 800583e:	4619      	mov	r1, r3
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7fe fb85 	bl	8003f50 <recv>
 8005846:	4603      	mov	r3, r0
 8005848:	76fb      	strb	r3, [r7, #27]
    if (err != NMBS_ERROR_NONE)
 800584a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d002      	beq.n	8005858 <handle_read_file_record+0x50>
        return err;
 8005852:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005856:	e185      	b.n	8005b64 <handle_read_file_record+0x35c>

    const uint8_t subreq_header_size = 7;
 8005858:	2307      	movs	r3, #7
 800585a:	767b      	strb	r3, [r7, #25]
    const uint8_t subreq_count = request_size / subreq_header_size;
 800585c:	7eba      	ldrb	r2, [r7, #26]
 800585e:	7e7b      	ldrb	r3, [r7, #25]
 8005860:	fbb2 f3f3 	udiv	r3, r2, r3
 8005864:	763b      	strb	r3, [r7, #24]
        uint16_t record_length;
    }
#ifdef __STDC_NO_VLA__
    subreq[35];    // 245 / subreq_header_size
#else
    subreq[subreq_count];
 8005866:	7e3b      	ldrb	r3, [r7, #24]
 8005868:	3b01      	subs	r3, #1
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	7e3b      	ldrb	r3, [r7, #24]
 800586e:	2200      	movs	r2, #0
 8005870:	4698      	mov	r8, r3
 8005872:	4691      	mov	r9, r2
 8005874:	f04f 0200 	mov.w	r2, #0
 8005878:	f04f 0300 	mov.w	r3, #0
 800587c:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005880:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005884:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005888:	7e3b      	ldrb	r3, [r7, #24]
 800588a:	2200      	movs	r2, #0
 800588c:	461c      	mov	r4, r3
 800588e:	4615      	mov	r5, r2
 8005890:	f04f 0200 	mov.w	r2, #0
 8005894:	f04f 0300 	mov.w	r3, #0
 8005898:	01ab      	lsls	r3, r5, #6
 800589a:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 800589e:	01a2      	lsls	r2, r4, #6
 80058a0:	7e3b      	ldrb	r3, [r7, #24]
 80058a2:	00db      	lsls	r3, r3, #3
 80058a4:	3307      	adds	r3, #7
 80058a6:	08db      	lsrs	r3, r3, #3
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	ebad 0d03 	sub.w	sp, sp, r3
 80058ae:	ab02      	add	r3, sp, #8
 80058b0:	3301      	adds	r3, #1
 80058b2:	085b      	lsrs	r3, r3, #1
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	613b      	str	r3, [r7, #16]
#endif

    uint8_t response_data_size = 0;
 80058b8:	2300      	movs	r3, #0
 80058ba:	77fb      	strb	r3, [r7, #31]

    for (uint8_t i = 0; i < subreq_count; i++) {
 80058bc:	2300      	movs	r3, #0
 80058be:	77bb      	strb	r3, [r7, #30]
 80058c0:	e038      	b.n	8005934 <handle_read_file_record+0x12c>
        subreq[i].reference_type = get_1(nmbs);
 80058c2:	7fbc      	ldrb	r4, [r7, #30]
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f7fe f94d 	bl	8003b64 <get_1>
 80058ca:	4603      	mov	r3, r0
 80058cc:	461a      	mov	r2, r3
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
        subreq[i].file_number = get_2(nmbs);
 80058d4:	7fbc      	ldrb	r4, [r7, #30]
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f7fe f9a0 	bl	8003c1c <get_2>
 80058dc:	4603      	mov	r3, r0
 80058de:	4619      	mov	r1, r3
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	00e3      	lsls	r3, r4, #3
 80058e4:	4413      	add	r3, r2
 80058e6:	460a      	mov	r2, r1
 80058e8:	805a      	strh	r2, [r3, #2]
        subreq[i].record_number = get_2(nmbs);
 80058ea:	7fbc      	ldrb	r4, [r7, #30]
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f7fe f995 	bl	8003c1c <get_2>
 80058f2:	4603      	mov	r3, r0
 80058f4:	4619      	mov	r1, r3
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	00e3      	lsls	r3, r4, #3
 80058fa:	4413      	add	r3, r2
 80058fc:	460a      	mov	r2, r1
 80058fe:	809a      	strh	r2, [r3, #4]
        subreq[i].record_length = get_2(nmbs);
 8005900:	7fbc      	ldrb	r4, [r7, #30]
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f7fe f98a 	bl	8003c1c <get_2>
 8005908:	4603      	mov	r3, r0
 800590a:	4619      	mov	r1, r3
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	00e3      	lsls	r3, r4, #3
 8005910:	4413      	add	r3, r2
 8005912:	460a      	mov	r2, r1
 8005914:	80da      	strh	r2, [r3, #6]

        response_data_size += 2 + subreq[i].record_length * 2;
 8005916:	7fbb      	ldrb	r3, [r7, #30]
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	00db      	lsls	r3, r3, #3
 800591c:	4413      	add	r3, r2
 800591e:	88db      	ldrh	r3, [r3, #6]
 8005920:	3301      	adds	r3, #1
 8005922:	b2db      	uxtb	r3, r3
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	b2da      	uxtb	r2, r3
 8005928:	7ffb      	ldrb	r3, [r7, #31]
 800592a:	4413      	add	r3, r2
 800592c:	77fb      	strb	r3, [r7, #31]
    for (uint8_t i = 0; i < subreq_count; i++) {
 800592e:	7fbb      	ldrb	r3, [r7, #30]
 8005930:	3301      	adds	r3, #1
 8005932:	77bb      	strb	r3, [r7, #30]
 8005934:	7fba      	ldrb	r2, [r7, #30]
 8005936:	7e3b      	ldrb	r3, [r7, #24]
 8005938:	429a      	cmp	r2, r3
 800593a:	d3c2      	bcc.n	80058c2 <handle_read_file_record+0xba>
    }

    discard_n(nmbs, request_size % subreq_header_size);
 800593c:	7ebb      	ldrb	r3, [r7, #26]
 800593e:	7e7a      	ldrb	r2, [r7, #25]
 8005940:	fbb3 f1f2 	udiv	r1, r3, r2
 8005944:	fb01 f202 	mul.w	r2, r1, r2
 8005948:	1a9b      	subs	r3, r3, r2
 800594a:	b2db      	uxtb	r3, r3
 800594c:	b29b      	uxth	r3, r3
 800594e:	4619      	mov	r1, r3
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f7fe f94e 	bl	8003bf2 <discard_n>

    err = recv_msg_footer(nmbs);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f7fe fb56 	bl	8004008 <recv_msg_footer>
 800595c:	4603      	mov	r3, r0
 800595e:	76fb      	strb	r3, [r7, #27]
    if (err != NMBS_ERROR_NONE)
 8005960:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d002      	beq.n	800596e <handle_read_file_record+0x166>
        return err;
 8005968:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800596c:	e0fa      	b.n	8005b64 <handle_read_file_record+0x35c>

    if (!nmbs->msg.ignored) {
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8005974:	f083 0301 	eor.w	r3, r3, #1
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 80ea 	beq.w	8005b54 <handle_read_file_record+0x34c>
        if (request_size % subreq_header_size)
 8005980:	7ebb      	ldrb	r3, [r7, #26]
 8005982:	7e7a      	ldrb	r2, [r7, #25]
 8005984:	fbb3 f1f2 	udiv	r1, r3, r2
 8005988:	fb01 f202 	mul.w	r2, r1, r2
 800598c:	1a9b      	subs	r3, r3, r2
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b00      	cmp	r3, #0
 8005992:	d005      	beq.n	80059a0 <handle_read_file_record+0x198>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8005994:	2103      	movs	r1, #3
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7fe fcbf 	bl	800431a <send_exception_msg>
 800599c:	4603      	mov	r3, r0
 800599e:	e0e1      	b.n	8005b64 <handle_read_file_record+0x35c>

        if (request_size < 0x07 || request_size > 0xF5)
 80059a0:	7ebb      	ldrb	r3, [r7, #26]
 80059a2:	2b06      	cmp	r3, #6
 80059a4:	d902      	bls.n	80059ac <handle_read_file_record+0x1a4>
 80059a6:	7ebb      	ldrb	r3, [r7, #26]
 80059a8:	2bf5      	cmp	r3, #245	; 0xf5
 80059aa:	d905      	bls.n	80059b8 <handle_read_file_record+0x1b0>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 80059ac:	2103      	movs	r1, #3
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7fe fcb3 	bl	800431a <send_exception_msg>
 80059b4:	4603      	mov	r3, r0
 80059b6:	e0d5      	b.n	8005b64 <handle_read_file_record+0x35c>

        for (uint8_t i = 0; i < subreq_count; i++) {
 80059b8:	2300      	movs	r3, #0
 80059ba:	777b      	strb	r3, [r7, #29]
 80059bc:	e037      	b.n	8005a2e <handle_read_file_record+0x226>
            if (subreq[i].reference_type != 0x06)
 80059be:	7f7a      	ldrb	r2, [r7, #29]
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 80059c6:	2b06      	cmp	r3, #6
 80059c8:	d005      	beq.n	80059d6 <handle_read_file_record+0x1ce>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 80059ca:	2102      	movs	r1, #2
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7fe fca4 	bl	800431a <send_exception_msg>
 80059d2:	4603      	mov	r3, r0
 80059d4:	e0c6      	b.n	8005b64 <handle_read_file_record+0x35c>

            if (subreq[i].file_number == 0x0000)
 80059d6:	7f7b      	ldrb	r3, [r7, #29]
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	4413      	add	r3, r2
 80059de:	885b      	ldrh	r3, [r3, #2]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d105      	bne.n	80059f0 <handle_read_file_record+0x1e8>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 80059e4:	2102      	movs	r1, #2
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7fe fc97 	bl	800431a <send_exception_msg>
 80059ec:	4603      	mov	r3, r0
 80059ee:	e0b9      	b.n	8005b64 <handle_read_file_record+0x35c>

            if (subreq[i].record_number > 0x270F)
 80059f0:	7f7b      	ldrb	r3, [r7, #29]
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	4413      	add	r3, r2
 80059f8:	889b      	ldrh	r3, [r3, #4]
 80059fa:	f242 720f 	movw	r2, #9999	; 0x270f
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d905      	bls.n	8005a0e <handle_read_file_record+0x206>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8005a02:	2102      	movs	r1, #2
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f7fe fc88 	bl	800431a <send_exception_msg>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	e0aa      	b.n	8005b64 <handle_read_file_record+0x35c>

            if (subreq[i].record_length > 124)
 8005a0e:	7f7b      	ldrb	r3, [r7, #29]
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	00db      	lsls	r3, r3, #3
 8005a14:	4413      	add	r3, r2
 8005a16:	88db      	ldrh	r3, [r3, #6]
 8005a18:	2b7c      	cmp	r3, #124	; 0x7c
 8005a1a:	d905      	bls.n	8005a28 <handle_read_file_record+0x220>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8005a1c:	2102      	movs	r1, #2
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7fe fc7b 	bl	800431a <send_exception_msg>
 8005a24:	4603      	mov	r3, r0
 8005a26:	e09d      	b.n	8005b64 <handle_read_file_record+0x35c>
        for (uint8_t i = 0; i < subreq_count; i++) {
 8005a28:	7f7b      	ldrb	r3, [r7, #29]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	777b      	strb	r3, [r7, #29]
 8005a2e:	7f7a      	ldrb	r2, [r7, #29]
 8005a30:	7e3b      	ldrb	r3, [r7, #24]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d3c3      	bcc.n	80059be <handle_read_file_record+0x1b6>

            NMBS_DEBUG_PRINT("a %d\tr %d\tl %d\t fread ", subreq[i].file_number, subreq[i].record_number,
                             subreq[i].record_length);
        }

        put_res_header(nmbs, response_data_size);
 8005a36:	7ffb      	ldrb	r3, [r7, #31]
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f7fe fc5d 	bl	80042fc <put_res_header>
        put_1(nmbs, response_data_size);
 8005a42:	7ffb      	ldrb	r3, [r7, #31]
 8005a44:	4619      	mov	r1, r3
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7fe f8a6 	bl	8003b98 <put_1>

        if (nmbs->callbacks.read_file_record) {
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d064      	beq.n	8005b20 <handle_read_file_record+0x318>
            for (uint8_t i = 0; i < subreq_count; i++) {
 8005a56:	2300      	movs	r3, #0
 8005a58:	773b      	strb	r3, [r7, #28]
 8005a5a:	e05c      	b.n	8005b16 <handle_read_file_record+0x30e>
                uint16_t subreq_data_size = subreq[i].record_length * 2;
 8005a5c:	7f3b      	ldrb	r3, [r7, #28]
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	4413      	add	r3, r2
 8005a64:	88db      	ldrh	r3, [r3, #6]
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	81fb      	strh	r3, [r7, #14]
                put_1(nmbs, subreq_data_size + 1);
 8005a6a:	89fb      	ldrh	r3, [r7, #14]
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	3301      	adds	r3, #1
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	4619      	mov	r1, r3
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7fe f88f 	bl	8003b98 <put_1>
                put_1(nmbs, 0x06);    // add Reference Type const
 8005a7a:	2106      	movs	r1, #6
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f7fe f88b 	bl	8003b98 <put_1>
                uint16_t* subreq_data = (uint16_t*) get_n(nmbs, subreq_data_size);
 8005a82:	89fb      	ldrh	r3, [r7, #14]
 8005a84:	4619      	mov	r1, r3
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7fe f913 	bl	8003cb2 <get_n>
 8005a8c:	60b8      	str	r0, [r7, #8]

                err = nmbs->callbacks.read_file_record(subreq[i].file_number, subreq[i].record_number, subreq_data,
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8d3 412c 	ldr.w	r4, [r3, #300]	; 0x12c
 8005a94:	7f3b      	ldrb	r3, [r7, #28]
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	00db      	lsls	r3, r3, #3
 8005a9a:	4413      	add	r3, r2
 8005a9c:	8858      	ldrh	r0, [r3, #2]
 8005a9e:	7f3b      	ldrb	r3, [r7, #28]
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	4413      	add	r3, r2
 8005aa6:	8899      	ldrh	r1, [r3, #4]
 8005aa8:	7f3b      	ldrb	r3, [r7, #28]
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	00db      	lsls	r3, r3, #3
 8005aae:	4413      	add	r3, r2
 8005ab0:	88dd      	ldrh	r5, [r3, #6]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	f8d2 214c 	ldr.w	r2, [r2, #332]	; 0x14c
 8005abe:	9201      	str	r2, [sp, #4]
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	462b      	mov	r3, r5
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	47a0      	blx	r4
 8005ac8:	4603      	mov	r3, r0
 8005aca:	76fb      	strb	r3, [r7, #27]
                                                       subreq[i].record_length, nmbs->msg.unit_id, nmbs->platform.arg);
                if (err != NMBS_ERROR_NONE) {
 8005acc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d014      	beq.n	8005afe <handle_read_file_record+0x2f6>
                    if (nmbs_error_is_exception(err))
 8005ad4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	dd0a      	ble.n	8005af2 <handle_read_file_record+0x2ea>
 8005adc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005ae0:	2b04      	cmp	r3, #4
 8005ae2:	dc06      	bgt.n	8005af2 <handle_read_file_record+0x2ea>
                        return send_exception_msg(nmbs, err);
 8005ae4:	7efb      	ldrb	r3, [r7, #27]
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f7fe fc16 	bl	800431a <send_exception_msg>
 8005aee:	4603      	mov	r3, r0
 8005af0:	e038      	b.n	8005b64 <handle_read_file_record+0x35c>

                    return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8005af2:	2104      	movs	r1, #4
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f7fe fc10 	bl	800431a <send_exception_msg>
 8005afa:	4603      	mov	r3, r0
 8005afc:	e032      	b.n	8005b64 <handle_read_file_record+0x35c>
                }

                swap_regs(subreq_data, subreq[i].record_length);
 8005afe:	7f3b      	ldrb	r3, [r7, #28]
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	00db      	lsls	r3, r3, #3
 8005b04:	4413      	add	r3, r2
 8005b06:	88db      	ldrh	r3, [r3, #6]
 8005b08:	4619      	mov	r1, r3
 8005b0a:	68b8      	ldr	r0, [r7, #8]
 8005b0c:	f7fe f928 	bl	8003d60 <swap_regs>
            for (uint8_t i = 0; i < subreq_count; i++) {
 8005b10:	7f3b      	ldrb	r3, [r7, #28]
 8005b12:	3301      	adds	r3, #1
 8005b14:	773b      	strb	r3, [r7, #28]
 8005b16:	7f3a      	ldrb	r2, [r7, #28]
 8005b18:	7e3b      	ldrb	r3, [r7, #24]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d39e      	bcc.n	8005a5c <handle_read_file_record+0x254>
 8005b1e:	e005      	b.n	8005b2c <handle_read_file_record+0x324>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8005b20:	2101      	movs	r1, #1
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7fe fbf9 	bl	800431a <send_exception_msg>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	e01b      	b.n	8005b64 <handle_read_file_record+0x35c>
        }

        if (!nmbs->msg.broadcast) {
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8005b32:	f083 0301 	eor.w	r3, r3, #1
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d012      	beq.n	8005b62 <handle_read_file_record+0x35a>
            err = send_msg(nmbs);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f7fe fb7e 	bl	800423e <send_msg>
 8005b42:	4603      	mov	r3, r0
 8005b44:	76fb      	strb	r3, [r7, #27]
            if (err != NMBS_ERROR_NONE)
 8005b46:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d009      	beq.n	8005b62 <handle_read_file_record+0x35a>
                return err;
 8005b4e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005b52:	e007      	b.n	8005b64 <handle_read_file_record+0x35c>
        }
    }
    else {
        return recv_read_file_record_res(nmbs, NULL, 0);
 8005b54:	2200      	movs	r2, #0
 8005b56:	2100      	movs	r1, #0
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f7fe fe62 	bl	8004822 <recv_read_file_record_res>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	e000      	b.n	8005b64 <handle_read_file_record+0x35c>
    }

    return NMBS_ERROR_NONE;
 8005b62:	2300      	movs	r3, #0
 8005b64:	46b5      	mov	sp, r6
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3724      	adds	r7, #36	; 0x24
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005b70 <handle_write_file_record>:
#endif

#ifndef NMBS_SERVER_WRITE_FILE_RECORD_DISABLED
static nmbs_error handle_write_file_record(nmbs_t* nmbs) {
 8005b70:	b5b0      	push	{r4, r5, r7, lr}
 8005b72:	b08a      	sub	sp, #40	; 0x28
 8005b74:	af02      	add	r7, sp, #8
 8005b76:	6078      	str	r0, [r7, #4]
    nmbs_error err = recv(nmbs, 1);
 8005b78:	2101      	movs	r1, #1
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7fe f9e8 	bl	8003f50 <recv>
 8005b80:	4603      	mov	r3, r0
 8005b82:	777b      	strb	r3, [r7, #29]
    if (err != NMBS_ERROR_NONE)
 8005b84:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d002      	beq.n	8005b92 <handle_write_file_record+0x22>
        return err;
 8005b8c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8005b90:	e132      	b.n	8005df8 <handle_write_file_record+0x288>

    uint8_t request_size = get_1(nmbs);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7fd ffe6 	bl	8003b64 <get_1>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	773b      	strb	r3, [r7, #28]

    err = recv(nmbs, request_size);
 8005b9c:	7f3b      	ldrb	r3, [r7, #28]
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7fe f9d4 	bl	8003f50 <recv>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	777b      	strb	r3, [r7, #29]
    if (err != NMBS_ERROR_NONE)
 8005bac:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d002      	beq.n	8005bba <handle_write_file_record+0x4a>
        return err;
 8005bb4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8005bb8:	e11e      	b.n	8005df8 <handle_write_file_record+0x288>

    // We can save msg.buf index and use it later for context recovery.
    uint16_t msg_buf_idx = nmbs->msg.buf_idx;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8005bc0:	837b      	strh	r3, [r7, #26]
    discard_n(nmbs, request_size);
 8005bc2:	7f3b      	ldrb	r3, [r7, #28]
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7fe f812 	bl	8003bf2 <discard_n>

    err = recv_msg_footer(nmbs);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7fe fa1a 	bl	8004008 <recv_msg_footer>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	777b      	strb	r3, [r7, #29]
    if (err != NMBS_ERROR_NONE)
 8005bd8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d002      	beq.n	8005be6 <handle_write_file_record+0x76>
        return err;
 8005be0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8005be4:	e108      	b.n	8005df8 <handle_write_file_record+0x288>

    if (!nmbs->msg.ignored) {
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8005bec:	f083 0301 	eor.w	r3, r3, #1
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 80f5 	beq.w	8005de2 <handle_write_file_record+0x272>
        const uint8_t subreq_header_size = 7;
 8005bf8:	2307      	movs	r3, #7
 8005bfa:	767b      	strb	r3, [r7, #25]
        uint16_t size = request_size;
 8005bfc:	7f3b      	ldrb	r3, [r7, #28]
 8005bfe:	83fb      	strh	r3, [r7, #30]
        nmbs->msg.buf_idx = msg_buf_idx;    // restore context
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	8b7a      	ldrh	r2, [r7, #26]
 8005c04:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104

        if (request_size < 0x07 || request_size > 0xFB)
 8005c08:	7f3b      	ldrb	r3, [r7, #28]
 8005c0a:	2b06      	cmp	r3, #6
 8005c0c:	d902      	bls.n	8005c14 <handle_write_file_record+0xa4>
 8005c0e:	7f3b      	ldrb	r3, [r7, #28]
 8005c10:	2bfb      	cmp	r3, #251	; 0xfb
 8005c12:	d905      	bls.n	8005c20 <handle_write_file_record+0xb0>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8005c14:	2103      	movs	r1, #3
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f7fe fb7f 	bl	800431a <send_exception_msg>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	e0eb      	b.n	8005df8 <handle_write_file_record+0x288>

        do {
            uint8_t subreq_reference_type = get_1(nmbs);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f7fd ff9f 	bl	8003b64 <get_1>
 8005c26:	4603      	mov	r3, r0
 8005c28:	763b      	strb	r3, [r7, #24]
            uint16_t subreq_file_number_c = get_2(nmbs);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f7fd fff6 	bl	8003c1c <get_2>
 8005c30:	4603      	mov	r3, r0
 8005c32:	82fb      	strh	r3, [r7, #22]
            uint16_t subreq_record_number_c = get_2(nmbs);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f7fd fff1 	bl	8003c1c <get_2>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	82bb      	strh	r3, [r7, #20]
            uint16_t subreq_record_length_c = get_2(nmbs);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7fd ffec 	bl	8003c1c <get_2>
 8005c44:	4603      	mov	r3, r0
 8005c46:	827b      	strh	r3, [r7, #18]
            discard_n(nmbs, subreq_record_length_c * 2);
 8005c48:	8a7b      	ldrh	r3, [r7, #18]
 8005c4a:	005b      	lsls	r3, r3, #1
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	4619      	mov	r1, r3
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f7fd ffce 	bl	8003bf2 <discard_n>

            if (subreq_reference_type != 0x06)
 8005c56:	7e3b      	ldrb	r3, [r7, #24]
 8005c58:	2b06      	cmp	r3, #6
 8005c5a:	d005      	beq.n	8005c68 <handle_write_file_record+0xf8>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8005c5c:	2102      	movs	r1, #2
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7fe fb5b 	bl	800431a <send_exception_msg>
 8005c64:	4603      	mov	r3, r0
 8005c66:	e0c7      	b.n	8005df8 <handle_write_file_record+0x288>

            if (subreq_file_number_c == 0x0000)
 8005c68:	8afb      	ldrh	r3, [r7, #22]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d105      	bne.n	8005c7a <handle_write_file_record+0x10a>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8005c6e:	2102      	movs	r1, #2
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f7fe fb52 	bl	800431a <send_exception_msg>
 8005c76:	4603      	mov	r3, r0
 8005c78:	e0be      	b.n	8005df8 <handle_write_file_record+0x288>

            if (subreq_record_number_c > 0x270F)
 8005c7a:	8abb      	ldrh	r3, [r7, #20]
 8005c7c:	f242 720f 	movw	r2, #9999	; 0x270f
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d905      	bls.n	8005c90 <handle_write_file_record+0x120>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8005c84:	2102      	movs	r1, #2
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7fe fb47 	bl	800431a <send_exception_msg>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	e0b3      	b.n	8005df8 <handle_write_file_record+0x288>

            if (subreq_record_length_c > 122)
 8005c90:	8a7b      	ldrh	r3, [r7, #18]
 8005c92:	2b7a      	cmp	r3, #122	; 0x7a
 8005c94:	d905      	bls.n	8005ca2 <handle_write_file_record+0x132>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8005c96:	2102      	movs	r1, #2
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f7fe fb3e 	bl	800431a <send_exception_msg>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	e0aa      	b.n	8005df8 <handle_write_file_record+0x288>

            NMBS_DEBUG_PRINT("a %d\tr %d\tl %d\t fwrite ", subreq_file_number_c, subreq_record_number_c,
                             subreq_record_length_c);
            size -= (subreq_header_size + subreq_record_length_c * 2);
 8005ca2:	7e7b      	ldrb	r3, [r7, #25]
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	8a7b      	ldrh	r3, [r7, #18]
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	4413      	add	r3, r2
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	8bfa      	ldrh	r2, [r7, #30]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	83fb      	strh	r3, [r7, #30]
        } while (size >= subreq_header_size);
 8005cb6:	7e7b      	ldrb	r3, [r7, #25]
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	8bfa      	ldrh	r2, [r7, #30]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d2af      	bcs.n	8005c20 <handle_write_file_record+0xb0>

        if (size)
 8005cc0:	8bfb      	ldrh	r3, [r7, #30]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d005      	beq.n	8005cd2 <handle_write_file_record+0x162>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8005cc6:	2103      	movs	r1, #3
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f7fe fb26 	bl	800431a <send_exception_msg>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	e092      	b.n	8005df8 <handle_write_file_record+0x288>

        // checks completed

        size = request_size;
 8005cd2:	7f3b      	ldrb	r3, [r7, #28]
 8005cd4:	83fb      	strh	r3, [r7, #30]
        nmbs->msg.buf_idx = msg_buf_idx;    // restore context
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	8b7a      	ldrh	r2, [r7, #26]
 8005cda:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104

        do {
            discard_1(nmbs);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7fd ff75 	bl	8003bce <discard_1>
            uint16_t subreq_file_number = get_2(nmbs);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7fd ff99 	bl	8003c1c <get_2>
 8005cea:	4603      	mov	r3, r0
 8005cec:	823b      	strh	r3, [r7, #16]
            uint16_t subreq_record_number = get_2(nmbs);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7fd ff94 	bl	8003c1c <get_2>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	81fb      	strh	r3, [r7, #14]
            uint16_t subreq_record_length = get_2(nmbs);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7fd ff8f 	bl	8003c1c <get_2>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	81bb      	strh	r3, [r7, #12]
            uint16_t* subreq_data = get_regs(nmbs, subreq_record_length);
 8005d02:	89bb      	ldrh	r3, [r7, #12]
 8005d04:	4619      	mov	r1, r3
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7fd ffef 	bl	8003cea <get_regs>
 8005d0c:	60b8      	str	r0, [r7, #8]

            if (nmbs->callbacks.write_file_record) {
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d031      	beq.n	8005d7c <handle_write_file_record+0x20c>
                err = nmbs->callbacks.write_file_record(subreq_file_number, subreq_record_number, subreq_data,
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8d3 4130 	ldr.w	r4, [r3, #304]	; 0x130
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	f8d2 214c 	ldr.w	r2, [r2, #332]	; 0x14c
 8005d2a:	89bd      	ldrh	r5, [r7, #12]
 8005d2c:	89f9      	ldrh	r1, [r7, #14]
 8005d2e:	8a38      	ldrh	r0, [r7, #16]
 8005d30:	9201      	str	r2, [sp, #4]
 8005d32:	9300      	str	r3, [sp, #0]
 8005d34:	462b      	mov	r3, r5
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	47a0      	blx	r4
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	777b      	strb	r3, [r7, #29]
                                                        subreq_record_length, nmbs->msg.unit_id, nmbs->platform.arg);
                if (err != NMBS_ERROR_NONE) {
 8005d3e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d014      	beq.n	8005d70 <handle_write_file_record+0x200>
                    if (nmbs_error_is_exception(err))
 8005d46:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	dd0a      	ble.n	8005d64 <handle_write_file_record+0x1f4>
 8005d4e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8005d52:	2b04      	cmp	r3, #4
 8005d54:	dc06      	bgt.n	8005d64 <handle_write_file_record+0x1f4>
                        return send_exception_msg(nmbs, err);
 8005d56:	7f7b      	ldrb	r3, [r7, #29]
 8005d58:	4619      	mov	r1, r3
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7fe fadd 	bl	800431a <send_exception_msg>
 8005d60:	4603      	mov	r3, r0
 8005d62:	e049      	b.n	8005df8 <handle_write_file_record+0x288>

                    return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8005d64:	2104      	movs	r1, #4
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7fe fad7 	bl	800431a <send_exception_msg>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	e043      	b.n	8005df8 <handle_write_file_record+0x288>
                }

                swap_regs(subreq_data, subreq_record_length);    // restore swapping
 8005d70:	89bb      	ldrh	r3, [r7, #12]
 8005d72:	4619      	mov	r1, r3
 8005d74:	68b8      	ldr	r0, [r7, #8]
 8005d76:	f7fd fff3 	bl	8003d60 <swap_regs>
 8005d7a:	e005      	b.n	8005d88 <handle_write_file_record+0x218>
            }
            else {
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f7fe facb 	bl	800431a <send_exception_msg>
 8005d84:	4603      	mov	r3, r0
 8005d86:	e037      	b.n	8005df8 <handle_write_file_record+0x288>
            }

            size -= (subreq_header_size + subreq_record_length * 2);
 8005d88:	7e7b      	ldrb	r3, [r7, #25]
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	89bb      	ldrh	r3, [r7, #12]
 8005d8e:	005b      	lsls	r3, r3, #1
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	4413      	add	r3, r2
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	8bfa      	ldrh	r2, [r7, #30]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	83fb      	strh	r3, [r7, #30]
        } while (size >= subreq_header_size);
 8005d9c:	7e7b      	ldrb	r3, [r7, #25]
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	8bfa      	ldrh	r2, [r7, #30]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d29b      	bcs.n	8005cde <handle_write_file_record+0x16e>

        if (!nmbs->msg.broadcast) {
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8005dac:	f083 0301 	eor.w	r3, r3, #1
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d01f      	beq.n	8005df6 <handle_write_file_record+0x286>
            // The normal response to 'Write File' is an echo of the request.
            // We can restore buffer index and response msg.
            nmbs->msg.buf_idx = msg_buf_idx;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	8b7a      	ldrh	r2, [r7, #26]
 8005dba:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
            discard_n(nmbs, request_size);
 8005dbe:	7f3b      	ldrb	r3, [r7, #28]
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f7fd ff14 	bl	8003bf2 <discard_n>

            err = send_msg(nmbs);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7fe fa37 	bl	800423e <send_msg>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	777b      	strb	r3, [r7, #29]
            if (err != NMBS_ERROR_NONE)
 8005dd4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00c      	beq.n	8005df6 <handle_write_file_record+0x286>
                return err;
 8005ddc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8005de0:	e00a      	b.n	8005df8 <handle_write_file_record+0x288>
        }
    }
    else {
        return recv_write_file_record_res(nmbs, 0, 0, NULL, 0);
 8005de2:	2300      	movs	r3, #0
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	2300      	movs	r3, #0
 8005de8:	2200      	movs	r2, #0
 8005dea:	2100      	movs	r1, #0
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f7fe fd90 	bl	8004912 <recv_write_file_record_res>
 8005df2:	4603      	mov	r3, r0
 8005df4:	e000      	b.n	8005df8 <handle_write_file_record+0x288>
    }

    return NMBS_ERROR_NONE;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3720      	adds	r7, #32
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bdb0      	pop	{r4, r5, r7, pc}

08005e00 <handle_read_write_registers>:
#endif

#ifndef NMBS_SERVER_READ_WRITE_REGISTERS_DISABLED
static nmbs_error handle_read_write_registers(nmbs_t* nmbs) {
 8005e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e04:	b091      	sub	sp, #68	; 0x44
 8005e06:	af02      	add	r7, sp, #8
 8005e08:	60f8      	str	r0, [r7, #12]
 8005e0a:	466b      	mov	r3, sp
 8005e0c:	60bb      	str	r3, [r7, #8]
    nmbs_error err = recv(nmbs, 9);
 8005e0e:	2109      	movs	r1, #9
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f7fe f89d 	bl	8003f50 <recv>
 8005e16:	4603      	mov	r3, r0
 8005e18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (err != NMBS_ERROR_NONE)
 8005e1c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d002      	beq.n	8005e2a <handle_read_write_registers+0x2a>
        return err;
 8005e24:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005e28:	e19d      	b.n	8006166 <handle_read_write_registers+0x366>

    uint16_t read_address = get_2(nmbs);
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f7fd fef6 	bl	8003c1c <get_2>
 8005e30:	4603      	mov	r3, r0
 8005e32:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint16_t read_quantity = get_2(nmbs);
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f7fd fef1 	bl	8003c1c <get_2>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint16_t write_address = get_2(nmbs);
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f7fd feec 	bl	8003c1c <get_2>
 8005e44:	4603      	mov	r3, r0
 8005e46:	853b      	strh	r3, [r7, #40]	; 0x28
    uint16_t write_quantity = get_2(nmbs);
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f7fd fee7 	bl	8003c1c <get_2>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	84fb      	strh	r3, [r7, #38]	; 0x26

    uint8_t byte_count_write = get_1(nmbs);
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f7fd fe86 	bl	8003b64 <get_1>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

    NMBS_DEBUG_PRINT("ra %d\trq %d\t wa %d\t wq %d\t b %d\tregs ", read_address, read_quantity, write_address,
                     write_quantity, byte_count_write);

    err = recv(nmbs, byte_count_write);
 8005e5e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	4619      	mov	r1, r3
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f7fe f872 	bl	8003f50 <recv>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (err != NMBS_ERROR_NONE)
 8005e72:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d002      	beq.n	8005e80 <handle_read_write_registers+0x80>
        return err;
 8005e7a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005e7e:	e172      	b.n	8006166 <handle_read_write_registers+0x366>

#ifdef __STDC_NO_VLA__
    uint16_t registers[0x007B];
#else
    uint16_t registers[byte_count_write / 2];
 8005e80:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005e84:	085b      	lsrs	r3, r3, #1
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	4619      	mov	r1, r3
 8005e8a:	1e4b      	subs	r3, r1, #1
 8005e8c:	623b      	str	r3, [r7, #32]
 8005e8e:	460a      	mov	r2, r1
 8005e90:	2300      	movs	r3, #0
 8005e92:	603a      	str	r2, [r7, #0]
 8005e94:	607b      	str	r3, [r7, #4]
 8005e96:	f04f 0200 	mov.w	r2, #0
 8005e9a:	f04f 0300 	mov.w	r3, #0
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	0103      	lsls	r3, r0, #4
 8005ea2:	6838      	ldr	r0, [r7, #0]
 8005ea4:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8005ea8:	6838      	ldr	r0, [r7, #0]
 8005eaa:	0102      	lsls	r2, r0, #4
 8005eac:	460a      	mov	r2, r1
 8005eae:	2300      	movs	r3, #0
 8005eb0:	4692      	mov	sl, r2
 8005eb2:	469b      	mov	fp, r3
 8005eb4:	f04f 0200 	mov.w	r2, #0
 8005eb8:	f04f 0300 	mov.w	r3, #0
 8005ebc:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8005ec0:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8005ec4:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8005ec8:	460b      	mov	r3, r1
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	3307      	adds	r3, #7
 8005ece:	08db      	lsrs	r3, r3, #3
 8005ed0:	00db      	lsls	r3, r3, #3
 8005ed2:	ebad 0d03 	sub.w	sp, sp, r3
 8005ed6:	ab02      	add	r3, sp, #8
 8005ed8:	3301      	adds	r3, #1
 8005eda:	085b      	lsrs	r3, r3, #1
 8005edc:	005b      	lsls	r3, r3, #1
 8005ede:	61fb      	str	r3, [r7, #28]
#endif
    for (int i = 0; i < byte_count_write / 2; i++) {
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ee4:	e00b      	b.n	8005efe <handle_read_write_registers+0xfe>
        registers[i] = get_2(nmbs);
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f7fd fe98 	bl	8003c1c <get_2>
 8005eec:	4603      	mov	r3, r0
 8005eee:	4619      	mov	r1, r3
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ef4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 0; i < byte_count_write / 2; i++) {
 8005ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005efa:	3301      	adds	r3, #1
 8005efc:	637b      	str	r3, [r7, #52]	; 0x34
 8005efe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005f02:	085b      	lsrs	r3, r3, #1
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	461a      	mov	r2, r3
 8005f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	dbeb      	blt.n	8005ee6 <handle_read_write_registers+0xe6>
        NMBS_DEBUG_PRINT("%d ", registers[i]);
    }

    err = recv_msg_footer(nmbs);
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f7fe f87a 	bl	8004008 <recv_msg_footer>
 8005f14:	4603      	mov	r3, r0
 8005f16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (err != NMBS_ERROR_NONE)
 8005f1a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d002      	beq.n	8005f28 <handle_read_write_registers+0x128>
        return err;
 8005f22:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005f26:	e11e      	b.n	8006166 <handle_read_write_registers+0x366>

    if (!nmbs->msg.ignored) {
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8005f2e:	f083 0301 	eor.w	r3, r3, #1
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 810d 	beq.w	8006154 <handle_read_write_registers+0x354>
        if (read_quantity < 1 || read_quantity > 0x007D)
 8005f3a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d002      	beq.n	8005f46 <handle_read_write_registers+0x146>
 8005f40:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005f42:	2b7d      	cmp	r3, #125	; 0x7d
 8005f44:	d905      	bls.n	8005f52 <handle_read_write_registers+0x152>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8005f46:	2103      	movs	r1, #3
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f7fe f9e6 	bl	800431a <send_exception_msg>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	e109      	b.n	8006166 <handle_read_write_registers+0x366>

        if (write_quantity < 1 || write_quantity > 0x007B)
 8005f52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d002      	beq.n	8005f5e <handle_read_write_registers+0x15e>
 8005f58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f5a:	2b7b      	cmp	r3, #123	; 0x7b
 8005f5c:	d905      	bls.n	8005f6a <handle_read_write_registers+0x16a>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8005f5e:	2103      	movs	r1, #3
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f7fe f9da 	bl	800431a <send_exception_msg>
 8005f66:	4603      	mov	r3, r0
 8005f68:	e0fd      	b.n	8006166 <handle_read_write_registers+0x366>

        if (byte_count_write != write_quantity * 2)
 8005f6a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8005f6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f70:	005b      	lsls	r3, r3, #1
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d005      	beq.n	8005f82 <handle_read_write_registers+0x182>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8005f76:	2103      	movs	r1, #3
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f7fe f9ce 	bl	800431a <send_exception_msg>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	e0f1      	b.n	8006166 <handle_read_write_registers+0x366>

        if ((uint32_t) read_address + (uint32_t) read_quantity > ((uint32_t) 0xFFFF) + 1)
 8005f82:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8005f84:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005f86:	4413      	add	r3, r2
 8005f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f8c:	d905      	bls.n	8005f9a <handle_read_write_registers+0x19a>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8005f8e:	2102      	movs	r1, #2
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f7fe f9c2 	bl	800431a <send_exception_msg>
 8005f96:	4603      	mov	r3, r0
 8005f98:	e0e5      	b.n	8006166 <handle_read_write_registers+0x366>

        if ((uint32_t) write_address + (uint32_t) write_quantity > ((uint32_t) 0xFFFF) + 1)
 8005f9a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005f9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fa4:	d905      	bls.n	8005fb2 <handle_read_write_registers+0x1b2>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8005fa6:	2102      	movs	r1, #2
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f7fe f9b6 	bl	800431a <send_exception_msg>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	e0d9      	b.n	8006166 <handle_read_write_registers+0x366>

        if (!nmbs->callbacks.write_multiple_registers || !nmbs->callbacks.read_holding_registers)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d004      	beq.n	8005fc6 <handle_read_write_registers+0x1c6>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d105      	bne.n	8005fd2 <handle_read_write_registers+0x1d2>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8005fc6:	2101      	movs	r1, #1
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f7fe f9a6 	bl	800431a <send_exception_msg>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	e0c9      	b.n	8006166 <handle_read_write_registers+0x366>

        err = nmbs->callbacks.write_multiple_registers(write_address, write_quantity, registers, nmbs->msg.unit_id,
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f8d3 6128 	ldr.w	r6, [r3, #296]	; 0x128
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8005fe4:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8005fe6:	8d38      	ldrh	r0, [r7, #40]	; 0x28
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	4613      	mov	r3, r2
 8005fec:	69fa      	ldr	r2, [r7, #28]
 8005fee:	47b0      	blx	r6
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                                       nmbs->platform.arg);
        if (err != NMBS_ERROR_NONE) {
 8005ff6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d015      	beq.n	800602a <handle_read_write_registers+0x22a>
            if (nmbs_error_is_exception(err))
 8005ffe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006002:	2b00      	cmp	r3, #0
 8006004:	dd0b      	ble.n	800601e <handle_read_write_registers+0x21e>
 8006006:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800600a:	2b04      	cmp	r3, #4
 800600c:	dc07      	bgt.n	800601e <handle_read_write_registers+0x21e>
                return send_exception_msg(nmbs, err);
 800600e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006012:	4619      	mov	r1, r3
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f7fe f980 	bl	800431a <send_exception_msg>
 800601a:	4603      	mov	r3, r0
 800601c:	e0a3      	b.n	8006166 <handle_read_write_registers+0x366>

            return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 800601e:	2104      	movs	r1, #4
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f7fe f97a 	bl	800431a <send_exception_msg>
 8006026:	4603      	mov	r3, r0
 8006028:	e09d      	b.n	8006166 <handle_read_write_registers+0x366>
        }

        if (!nmbs->msg.broadcast) {
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8006030:	f083 0301 	eor.w	r3, r3, #1
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	f000 8094 	beq.w	8006164 <handle_read_write_registers+0x364>
 800603c:	466b      	mov	r3, sp
 800603e:	461e      	mov	r6, r3
#ifdef __STDC_NO_VLA__
            uint16_t regs[125];
#else
            uint16_t regs[read_quantity];
 8006040:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8006042:	460b      	mov	r3, r1
 8006044:	3b01      	subs	r3, #1
 8006046:	61bb      	str	r3, [r7, #24]
 8006048:	b28b      	uxth	r3, r1
 800604a:	2200      	movs	r2, #0
 800604c:	4698      	mov	r8, r3
 800604e:	4691      	mov	r9, r2
 8006050:	f04f 0200 	mov.w	r2, #0
 8006054:	f04f 0300 	mov.w	r3, #0
 8006058:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800605c:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8006060:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8006064:	b28b      	uxth	r3, r1
 8006066:	2200      	movs	r2, #0
 8006068:	461c      	mov	r4, r3
 800606a:	4615      	mov	r5, r2
 800606c:	f04f 0200 	mov.w	r2, #0
 8006070:	f04f 0300 	mov.w	r3, #0
 8006074:	012b      	lsls	r3, r5, #4
 8006076:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800607a:	0122      	lsls	r2, r4, #4
 800607c:	460b      	mov	r3, r1
 800607e:	005b      	lsls	r3, r3, #1
 8006080:	3307      	adds	r3, #7
 8006082:	08db      	lsrs	r3, r3, #3
 8006084:	00db      	lsls	r3, r3, #3
 8006086:	ebad 0d03 	sub.w	sp, sp, r3
 800608a:	ab02      	add	r3, sp, #8
 800608c:	3301      	adds	r3, #1
 800608e:	085b      	lsrs	r3, r3, #1
 8006090:	005b      	lsls	r3, r3, #1
 8006092:	617b      	str	r3, [r7, #20]
#endif
            err = nmbs->callbacks.read_holding_registers(read_address, read_quantity, regs, nmbs->msg.unit_id,
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f8d3 4114 	ldr.w	r4, [r3, #276]	; 0x114
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80060a6:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80060a8:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	4613      	mov	r3, r2
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	47a0      	blx	r4
 80060b2:	4603      	mov	r3, r0
 80060b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                                         nmbs->platform.arg);
            if (err != NMBS_ERROR_NONE) {
 80060b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d015      	beq.n	80060ec <handle_read_write_registers+0x2ec>
                if (nmbs_error_is_exception(err))
 80060c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	dd0b      	ble.n	80060e0 <handle_read_write_registers+0x2e0>
 80060c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80060cc:	2b04      	cmp	r3, #4
 80060ce:	dc07      	bgt.n	80060e0 <handle_read_write_registers+0x2e0>
                    return send_exception_msg(nmbs, err);
 80060d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80060d4:	4619      	mov	r1, r3
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f7fe f91f 	bl	800431a <send_exception_msg>
 80060dc:	4603      	mov	r3, r0
 80060de:	e037      	b.n	8006150 <handle_read_write_registers+0x350>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 80060e0:	2104      	movs	r1, #4
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f7fe f919 	bl	800431a <send_exception_msg>
 80060e8:	4603      	mov	r3, r0
 80060ea:	e031      	b.n	8006150 <handle_read_write_registers+0x350>
            }

            uint8_t regs_bytes = read_quantity * 2;
 80060ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	74fb      	strb	r3, [r7, #19]
            put_res_header(nmbs, 1 + regs_bytes);
 80060f4:	7cfb      	ldrb	r3, [r7, #19]
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	3301      	adds	r3, #1
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	4619      	mov	r1, r3
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f7fe f8fc 	bl	80042fc <put_res_header>

            put_1(nmbs, regs_bytes);
 8006104:	7cfb      	ldrb	r3, [r7, #19]
 8006106:	4619      	mov	r1, r3
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f7fd fd45 	bl	8003b98 <put_1>

            NMBS_DEBUG_PRINT("b %d\t", regs_bytes);

            NMBS_DEBUG_PRINT("regs ");
            for (int i = 0; i < read_quantity; i++) {
 800610e:	2300      	movs	r3, #0
 8006110:	633b      	str	r3, [r7, #48]	; 0x30
 8006112:	e00a      	b.n	800612a <handle_read_write_registers+0x32a>
                put_2(nmbs, regs[i]);
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006118:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800611c:	4619      	mov	r1, r3
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f7fd fda1 	bl	8003c66 <put_2>
            for (int i = 0; i < read_quantity; i++) {
 8006124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006126:	3301      	adds	r3, #1
 8006128:	633b      	str	r3, [r7, #48]	; 0x30
 800612a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800612c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800612e:	429a      	cmp	r2, r3
 8006130:	dbf0      	blt.n	8006114 <handle_read_write_registers+0x314>
                NMBS_DEBUG_PRINT("%d ", regs[i]);
            }

            err = send_msg(nmbs);
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f7fe f883 	bl	800423e <send_msg>
 8006138:	4603      	mov	r3, r0
 800613a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            if (err != NMBS_ERROR_NONE)
 800613e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006142:	2b00      	cmp	r3, #0
 8006144:	d002      	beq.n	800614c <handle_read_write_registers+0x34c>
                return err;
 8006146:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800614a:	e001      	b.n	8006150 <handle_read_write_registers+0x350>
 800614c:	46b5      	mov	sp, r6
 800614e:	e009      	b.n	8006164 <handle_read_write_registers+0x364>
                    return send_exception_msg(nmbs, err);
 8006150:	46b5      	mov	sp, r6
 8006152:	e008      	b.n	8006166 <handle_read_write_registers+0x366>
        }
    }
    else {
        return recv_write_multiple_registers_res(nmbs, write_address, write_quantity);
 8006154:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006156:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006158:	4619      	mov	r1, r3
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f7fe fb17 	bl	800478e <recv_write_multiple_registers_res>
 8006160:	4603      	mov	r3, r0
 8006162:	e000      	b.n	8006166 <handle_read_write_registers+0x366>
    }

    return NMBS_ERROR_NONE;
 8006164:	2300      	movs	r3, #0
 8006166:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 800616a:	4618      	mov	r0, r3
 800616c:	373c      	adds	r7, #60	; 0x3c
 800616e:	46bd      	mov	sp, r7
 8006170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006174 <handle_req_fc>:
#endif


static nmbs_error handle_req_fc(nmbs_t* nmbs) {
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
    NMBS_DEBUG_PRINT("fc %d\t", nmbs->msg.fc);

    nmbs_error err;
    switch (nmbs->msg.fc) {
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8006182:	3b01      	subs	r3, #1
 8006184:	2b16      	cmp	r3, #22
 8006186:	d873      	bhi.n	8006270 <handle_req_fc+0xfc>
 8006188:	a201      	add	r2, pc, #4	; (adr r2, 8006190 <handle_req_fc+0x1c>)
 800618a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618e:	bf00      	nop
 8006190:	080061ed 	.word	0x080061ed
 8006194:	080061f9 	.word	0x080061f9
 8006198:	08006205 	.word	0x08006205
 800619c:	08006211 	.word	0x08006211
 80061a0:	0800621d 	.word	0x0800621d
 80061a4:	08006229 	.word	0x08006229
 80061a8:	08006271 	.word	0x08006271
 80061ac:	08006271 	.word	0x08006271
 80061b0:	08006271 	.word	0x08006271
 80061b4:	08006271 	.word	0x08006271
 80061b8:	08006271 	.word	0x08006271
 80061bc:	08006271 	.word	0x08006271
 80061c0:	08006271 	.word	0x08006271
 80061c4:	08006271 	.word	0x08006271
 80061c8:	08006235 	.word	0x08006235
 80061cc:	08006241 	.word	0x08006241
 80061d0:	08006271 	.word	0x08006271
 80061d4:	08006271 	.word	0x08006271
 80061d8:	08006271 	.word	0x08006271
 80061dc:	0800624d 	.word	0x0800624d
 80061e0:	08006259 	.word	0x08006259
 80061e4:	08006271 	.word	0x08006271
 80061e8:	08006265 	.word	0x08006265
#ifndef NMBS_SERVER_WRITE_MULTIPLE_COILS_DISABLED
        case 1:
            err = handle_read_coils(nmbs);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7fe fea3 	bl	8004f38 <handle_read_coils>
 80061f2:	4603      	mov	r3, r0
 80061f4:	73fb      	strb	r3, [r7, #15]
            break;
 80061f6:	e03d      	b.n	8006274 <handle_req_fc+0x100>
#endif

#ifndef NMBS_SERVER_READ_DISCRETE_INPUTS_DISABLED
        case 2:
            err = handle_read_discrete_inputs(nmbs);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f7fe fead 	bl	8004f58 <handle_read_discrete_inputs>
 80061fe:	4603      	mov	r3, r0
 8006200:	73fb      	strb	r3, [r7, #15]
            break;
 8006202:	e037      	b.n	8006274 <handle_req_fc+0x100>
#endif

#ifndef NMBS_SERVER_READ_HOLDING_REGISTERS_DISABLED
        case 3:
            err = handle_read_holding_registers(nmbs);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7fe feb7 	bl	8004f78 <handle_read_holding_registers>
 800620a:	4603      	mov	r3, r0
 800620c:	73fb      	strb	r3, [r7, #15]
            break;
 800620e:	e031      	b.n	8006274 <handle_req_fc+0x100>
#endif

#ifndef NMBS_SERVER_READ_INPUT_REGISTERS_DISABLED
        case 4:
            err = handle_read_input_registers(nmbs);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f7fe fec1 	bl	8004f98 <handle_read_input_registers>
 8006216:	4603      	mov	r3, r0
 8006218:	73fb      	strb	r3, [r7, #15]
            break;
 800621a:	e02b      	b.n	8006274 <handle_req_fc+0x100>
#endif

#ifndef NMBS_SERVER_WRITE_SINGLE_COIL_DISABLED
        case 5:
            err = handle_write_single_coil(nmbs);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7fe fecb 	bl	8004fb8 <handle_write_single_coil>
 8006222:	4603      	mov	r3, r0
 8006224:	73fb      	strb	r3, [r7, #15]
            break;
 8006226:	e025      	b.n	8006274 <handle_req_fc+0x100>
#endif

#ifndef NMBS_SERVER_WRITE_SINGLE_REGISTER_DISABLED
        case 6:
            err = handle_write_single_register(nmbs);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f7fe ff67 	bl	80050fc <handle_write_single_register>
 800622e:	4603      	mov	r3, r0
 8006230:	73fb      	strb	r3, [r7, #15]
            break;
 8006232:	e01f      	b.n	8006274 <handle_req_fc+0x100>
#endif

#ifndef NMBS_SERVER_WRITE_MULTIPLE_COILS_DISABLED
        case 15:
            err = handle_write_multiple_coils(nmbs);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f7fe fff1 	bl	800521c <handle_write_multiple_coils>
 800623a:	4603      	mov	r3, r0
 800623c:	73fb      	strb	r3, [r7, #15]
            break;
 800623e:	e019      	b.n	8006274 <handle_req_fc+0x100>
#endif

#ifndef NMBS_SERVER_WRITE_MULTIPLE_REGISTERS_DISABLED
        case 16:
            err = handle_write_multiple_registers(nmbs);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f7ff f96e 	bl	8005522 <handle_write_multiple_registers>
 8006246:	4603      	mov	r3, r0
 8006248:	73fb      	strb	r3, [r7, #15]
            break;
 800624a:	e013      	b.n	8006274 <handle_req_fc+0x100>
#endif

#ifndef NMBS_SERVER_READ_FILE_RECORD_DISABLED
        case 20:
            err = handle_read_file_record(nmbs);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f7ff fadb 	bl	8005808 <handle_read_file_record>
 8006252:	4603      	mov	r3, r0
 8006254:	73fb      	strb	r3, [r7, #15]
            break;
 8006256:	e00d      	b.n	8006274 <handle_req_fc+0x100>
#endif

#ifndef NMBS_SERVER_WRITE_FILE_RECORD_DISABLED
        case 21:
            err = handle_write_file_record(nmbs);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f7ff fc89 	bl	8005b70 <handle_write_file_record>
 800625e:	4603      	mov	r3, r0
 8006260:	73fb      	strb	r3, [r7, #15]
            break;
 8006262:	e007      	b.n	8006274 <handle_req_fc+0x100>
#endif

#ifndef NMBS_SERVER_READ_WRITE_REGISTERS_DISABLED
        case 23:
            err = handle_read_write_registers(nmbs);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f7ff fdcb 	bl	8005e00 <handle_read_write_registers>
 800626a:	4603      	mov	r3, r0
 800626c:	73fb      	strb	r3, [r7, #15]
            break;
 800626e:	e001      	b.n	8006274 <handle_req_fc+0x100>
#endif
        default:
            err = NMBS_EXCEPTION_ILLEGAL_FUNCTION;
 8006270:	2301      	movs	r3, #1
 8006272:	73fb      	strb	r3, [r7, #15]
    }

    return err;
 8006274:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <nmbs_server_create>:


nmbs_error nmbs_server_create(nmbs_t* nmbs, uint8_t address_rtu, const nmbs_platform_conf* platform_conf,
                              const nmbs_callbacks* callbacks) {
 8006280:	b5b0      	push	{r4, r5, r7, lr}
 8006282:	b086      	sub	sp, #24
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	607a      	str	r2, [r7, #4]
 800628a:	603b      	str	r3, [r7, #0]
 800628c:	460b      	mov	r3, r1
 800628e:	72fb      	strb	r3, [r7, #11]
    if (platform_conf->transport == NMBS_TRANSPORT_RTU && address_rtu == 0)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d105      	bne.n	80062a4 <nmbs_server_create+0x24>
 8006298:	7afb      	ldrb	r3, [r7, #11]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d102      	bne.n	80062a4 <nmbs_server_create+0x24>
        return NMBS_ERROR_INVALID_ARGUMENT;
 800629e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062a2:	e01e      	b.n	80062e2 <nmbs_server_create+0x62>

    nmbs_error ret = nmbs_create(nmbs, platform_conf);
 80062a4:	6879      	ldr	r1, [r7, #4]
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f7fd fdb1 	bl	8003e0e <nmbs_create>
 80062ac:	4603      	mov	r3, r0
 80062ae:	75fb      	strb	r3, [r7, #23]
    if (ret != NMBS_ERROR_NONE)
 80062b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <nmbs_server_create+0x3e>
        return ret;
 80062b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80062bc:	e011      	b.n	80062e2 <nmbs_server_create+0x62>

    nmbs->address_rtu = address_rtu;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	7afa      	ldrb	r2, [r7, #11]
 80062c2:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
    nmbs->callbacks = *callbacks;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	683a      	ldr	r2, [r7, #0]
 80062ca:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 80062ce:	4615      	mov	r5, r2
 80062d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80062dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    return NMBS_ERROR_NONE;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3718      	adds	r7, #24
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bdb0      	pop	{r4, r5, r7, pc}

080062ea <nmbs_server_poll>:


nmbs_error nmbs_server_poll(nmbs_t* nmbs) {
 80062ea:	b590      	push	{r4, r7, lr}
 80062ec:	b085      	sub	sp, #20
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
    msg_state_reset(nmbs);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7fd fd6c 	bl	8003dd0 <msg_state_reset>

    bool first_byte_received = false;
 80062f8:	2300      	movs	r3, #0
 80062fa:	73bb      	strb	r3, [r7, #14]
    nmbs_error err = recv_req_header(nmbs, &first_byte_received);
 80062fc:	f107 030e 	add.w	r3, r7, #14
 8006300:	4619      	mov	r1, r3
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7fd ffc2 	bl	800428c <recv_req_header>
 8006308:	4603      	mov	r3, r0
 800630a:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE) {
 800630c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00f      	beq.n	8006334 <nmbs_server_poll+0x4a>
        if (!first_byte_received && err == NMBS_ERROR_TIMEOUT)
 8006314:	7bbb      	ldrb	r3, [r7, #14]
 8006316:	f083 0301 	eor.w	r3, r3, #1
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b00      	cmp	r3, #0
 800631e:	d006      	beq.n	800632e <nmbs_server_poll+0x44>
 8006320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006324:	f113 0f03 	cmn.w	r3, #3
 8006328:	d101      	bne.n	800632e <nmbs_server_poll+0x44>
            return NMBS_ERROR_NONE;
 800632a:	2300      	movs	r3, #0
 800632c:	e031      	b.n	8006392 <nmbs_server_poll+0xa8>

        return err;
 800632e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006332:	e02e      	b.n	8006392 <nmbs_server_poll+0xa8>
        else
            printf("address_rtu %d\t", nmbs->msg.unit_id);
    }
#endif

    err = handle_req_fc(nmbs);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f7ff ff1d 	bl	8006174 <handle_req_fc>
 800633a:	4603      	mov	r3, r0
 800633c:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE && !nmbs_error_is_exception(err)) {
 800633e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d024      	beq.n	8006390 <nmbs_server_poll+0xa6>
 8006346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800634a:	2b00      	cmp	r3, #0
 800634c:	dd03      	ble.n	8006356 <nmbs_server_poll+0x6c>
 800634e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006352:	2b04      	cmp	r3, #4
 8006354:	dd1c      	ble.n	8006390 <nmbs_server_poll+0xa6>
        if (nmbs->platform.transport == NMBS_TRANSPORT_RTU && err != NMBS_ERROR_TIMEOUT && nmbs->msg.ignored) {
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800635c:	2b01      	cmp	r3, #1
 800635e:	d114      	bne.n	800638a <nmbs_server_poll+0xa0>
 8006360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006364:	f113 0f03 	cmn.w	r3, #3
 8006368:	d00f      	beq.n	800638a <nmbs_server_poll+0xa0>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00a      	beq.n	800638a <nmbs_server_poll+0xa0>
            // Flush the remaining data on the line
            nmbs->platform.read(nmbs->msg.buf, sizeof(nmbs->msg.buf), 0, nmbs->platform.arg);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8006382:	2200      	movs	r2, #0
 8006384:	f44f 7182 	mov.w	r1, #260	; 0x104
 8006388:	47a0      	blx	r4
        }

        return err;
 800638a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800638e:	e000      	b.n	8006392 <nmbs_server_poll+0xa8>
    }

    return NMBS_ERROR_NONE;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3714      	adds	r7, #20
 8006396:	46bd      	mov	sp, r7
 8006398:	bd90      	pop	{r4, r7, pc}
	...

0800639c <lkv_stepmotor_gpio_init>:
}




void lkv_stepmotor_gpio_init(void){
 800639c:	b580      	push	{r7, lr}
 800639e:	b088      	sub	sp, #32
 80063a0:	af00      	add	r7, sp, #0

	/* enable GPIO LCD PORTs clock */

	 __HAL_RCC_GPIOC_CLK_ENABLE();
 80063a2:	2300      	movs	r3, #0
 80063a4:	60bb      	str	r3, [r7, #8]
 80063a6:	4b2d      	ldr	r3, [pc, #180]	; (800645c <lkv_stepmotor_gpio_init+0xc0>)
 80063a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063aa:	4a2c      	ldr	r2, [pc, #176]	; (800645c <lkv_stepmotor_gpio_init+0xc0>)
 80063ac:	f043 0304 	orr.w	r3, r3, #4
 80063b0:	6313      	str	r3, [r2, #48]	; 0x30
 80063b2:	4b2a      	ldr	r3, [pc, #168]	; (800645c <lkv_stepmotor_gpio_init+0xc0>)
 80063b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b6:	f003 0304 	and.w	r3, r3, #4
 80063ba:	60bb      	str	r3, [r7, #8]
 80063bc:	68bb      	ldr	r3, [r7, #8]
	 __HAL_RCC_GPIOH_CLK_ENABLE();
 80063be:	2300      	movs	r3, #0
 80063c0:	607b      	str	r3, [r7, #4]
 80063c2:	4b26      	ldr	r3, [pc, #152]	; (800645c <lkv_stepmotor_gpio_init+0xc0>)
 80063c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c6:	4a25      	ldr	r2, [pc, #148]	; (800645c <lkv_stepmotor_gpio_init+0xc0>)
 80063c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063cc:	6313      	str	r3, [r2, #48]	; 0x30
 80063ce:	4b23      	ldr	r3, [pc, #140]	; (800645c <lkv_stepmotor_gpio_init+0xc0>)
 80063d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d6:	607b      	str	r3, [r7, #4]
 80063d8:	687b      	ldr	r3, [r7, #4]
	 __HAL_RCC_GPIOE_CLK_ENABLE();
 80063da:	2300      	movs	r3, #0
 80063dc:	603b      	str	r3, [r7, #0]
 80063de:	4b1f      	ldr	r3, [pc, #124]	; (800645c <lkv_stepmotor_gpio_init+0xc0>)
 80063e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e2:	4a1e      	ldr	r2, [pc, #120]	; (800645c <lkv_stepmotor_gpio_init+0xc0>)
 80063e4:	f043 0310 	orr.w	r3, r3, #16
 80063e8:	6313      	str	r3, [r2, #48]	; 0x30
 80063ea:	4b1c      	ldr	r3, [pc, #112]	; (800645c <lkv_stepmotor_gpio_init+0xc0>)
 80063ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ee:	f003 0310 	and.w	r3, r3, #16
 80063f2:	603b      	str	r3, [r7, #0]
 80063f4:	683b      	ldr	r3, [r7, #0]

	/* enable GPIO LCD PINs */

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063f6:	f107 030c 	add.w	r3, r7, #12
 80063fa:	2200      	movs	r2, #0
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	605a      	str	r2, [r3, #4]
 8006400:	609a      	str	r2, [r3, #8]
 8006402:	60da      	str	r2, [r3, #12]
 8006404:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006406:	2301      	movs	r3, #1
 8006408:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800640a:	2300      	movs	r3, #0
 800640c:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800640e:	2302      	movs	r3, #2
 8006410:	61bb      	str	r3, [r7, #24]

	  GPIO_InitStruct.Pin = DRIVER_PIN_1;
 8006412:	2301      	movs	r3, #1
 8006414:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(DRIVER_PIN_1_PORT, &GPIO_InitStruct);
 8006416:	f107 030c 	add.w	r3, r7, #12
 800641a:	4619      	mov	r1, r3
 800641c:	4810      	ldr	r0, [pc, #64]	; (8006460 <lkv_stepmotor_gpio_init+0xc4>)
 800641e:	f7fa fc71 	bl	8000d04 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = DRIVER_PIN_2;
 8006422:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006426:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(DRIVER_PIN_2_PORT, &GPIO_InitStruct);
 8006428:	f107 030c 	add.w	r3, r7, #12
 800642c:	4619      	mov	r1, r3
 800642e:	480d      	ldr	r0, [pc, #52]	; (8006464 <lkv_stepmotor_gpio_init+0xc8>)
 8006430:	f7fa fc68 	bl	8000d04 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = DRIVER_PIN_3;
 8006434:	2340      	movs	r3, #64	; 0x40
 8006436:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(DRIVER_PIN_3_PORT, &GPIO_InitStruct);
 8006438:	f107 030c 	add.w	r3, r7, #12
 800643c:	4619      	mov	r1, r3
 800643e:	480a      	ldr	r0, [pc, #40]	; (8006468 <lkv_stepmotor_gpio_init+0xcc>)
 8006440:	f7fa fc60 	bl	8000d04 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = DRIVER_PIN_4;
 8006444:	2310      	movs	r3, #16
 8006446:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(DRIVER_PIN_4_PORT, &GPIO_InitStruct);
 8006448:	f107 030c 	add.w	r3, r7, #12
 800644c:	4619      	mov	r1, r3
 800644e:	4806      	ldr	r0, [pc, #24]	; (8006468 <lkv_stepmotor_gpio_init+0xcc>)
 8006450:	f7fa fc58 	bl	8000d04 <HAL_GPIO_Init>

}
 8006454:	bf00      	nop
 8006456:	3720      	adds	r7, #32
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	40023800 	.word	0x40023800
 8006460:	40021c00 	.word	0x40021c00
 8006464:	40020800 	.word	0x40020800
 8006468:	40021000 	.word	0x40021000

0800646c <sbrk_aligned>:
 800646c:	b570      	push	{r4, r5, r6, lr}
 800646e:	4e0e      	ldr	r6, [pc, #56]	; (80064a8 <sbrk_aligned+0x3c>)
 8006470:	460c      	mov	r4, r1
 8006472:	6831      	ldr	r1, [r6, #0]
 8006474:	4605      	mov	r5, r0
 8006476:	b911      	cbnz	r1, 800647e <sbrk_aligned+0x12>
 8006478:	f000 f92a 	bl	80066d0 <_sbrk_r>
 800647c:	6030      	str	r0, [r6, #0]
 800647e:	4621      	mov	r1, r4
 8006480:	4628      	mov	r0, r5
 8006482:	f000 f925 	bl	80066d0 <_sbrk_r>
 8006486:	1c43      	adds	r3, r0, #1
 8006488:	d00a      	beq.n	80064a0 <sbrk_aligned+0x34>
 800648a:	1cc4      	adds	r4, r0, #3
 800648c:	f024 0403 	bic.w	r4, r4, #3
 8006490:	42a0      	cmp	r0, r4
 8006492:	d007      	beq.n	80064a4 <sbrk_aligned+0x38>
 8006494:	1a21      	subs	r1, r4, r0
 8006496:	4628      	mov	r0, r5
 8006498:	f000 f91a 	bl	80066d0 <_sbrk_r>
 800649c:	3001      	adds	r0, #1
 800649e:	d101      	bne.n	80064a4 <sbrk_aligned+0x38>
 80064a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80064a4:	4620      	mov	r0, r4
 80064a6:	bd70      	pop	{r4, r5, r6, pc}
 80064a8:	20000838 	.word	0x20000838

080064ac <_malloc_r>:
 80064ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064b0:	1ccd      	adds	r5, r1, #3
 80064b2:	f025 0503 	bic.w	r5, r5, #3
 80064b6:	3508      	adds	r5, #8
 80064b8:	2d0c      	cmp	r5, #12
 80064ba:	bf38      	it	cc
 80064bc:	250c      	movcc	r5, #12
 80064be:	2d00      	cmp	r5, #0
 80064c0:	4607      	mov	r7, r0
 80064c2:	db01      	blt.n	80064c8 <_malloc_r+0x1c>
 80064c4:	42a9      	cmp	r1, r5
 80064c6:	d905      	bls.n	80064d4 <_malloc_r+0x28>
 80064c8:	230c      	movs	r3, #12
 80064ca:	603b      	str	r3, [r7, #0]
 80064cc:	2600      	movs	r6, #0
 80064ce:	4630      	mov	r0, r6
 80064d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80065a8 <_malloc_r+0xfc>
 80064d8:	f000 f868 	bl	80065ac <__malloc_lock>
 80064dc:	f8d8 3000 	ldr.w	r3, [r8]
 80064e0:	461c      	mov	r4, r3
 80064e2:	bb5c      	cbnz	r4, 800653c <_malloc_r+0x90>
 80064e4:	4629      	mov	r1, r5
 80064e6:	4638      	mov	r0, r7
 80064e8:	f7ff ffc0 	bl	800646c <sbrk_aligned>
 80064ec:	1c43      	adds	r3, r0, #1
 80064ee:	4604      	mov	r4, r0
 80064f0:	d155      	bne.n	800659e <_malloc_r+0xf2>
 80064f2:	f8d8 4000 	ldr.w	r4, [r8]
 80064f6:	4626      	mov	r6, r4
 80064f8:	2e00      	cmp	r6, #0
 80064fa:	d145      	bne.n	8006588 <_malloc_r+0xdc>
 80064fc:	2c00      	cmp	r4, #0
 80064fe:	d048      	beq.n	8006592 <_malloc_r+0xe6>
 8006500:	6823      	ldr	r3, [r4, #0]
 8006502:	4631      	mov	r1, r6
 8006504:	4638      	mov	r0, r7
 8006506:	eb04 0903 	add.w	r9, r4, r3
 800650a:	f000 f8e1 	bl	80066d0 <_sbrk_r>
 800650e:	4581      	cmp	r9, r0
 8006510:	d13f      	bne.n	8006592 <_malloc_r+0xe6>
 8006512:	6821      	ldr	r1, [r4, #0]
 8006514:	1a6d      	subs	r5, r5, r1
 8006516:	4629      	mov	r1, r5
 8006518:	4638      	mov	r0, r7
 800651a:	f7ff ffa7 	bl	800646c <sbrk_aligned>
 800651e:	3001      	adds	r0, #1
 8006520:	d037      	beq.n	8006592 <_malloc_r+0xe6>
 8006522:	6823      	ldr	r3, [r4, #0]
 8006524:	442b      	add	r3, r5
 8006526:	6023      	str	r3, [r4, #0]
 8006528:	f8d8 3000 	ldr.w	r3, [r8]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d038      	beq.n	80065a2 <_malloc_r+0xf6>
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	42a2      	cmp	r2, r4
 8006534:	d12b      	bne.n	800658e <_malloc_r+0xe2>
 8006536:	2200      	movs	r2, #0
 8006538:	605a      	str	r2, [r3, #4]
 800653a:	e00f      	b.n	800655c <_malloc_r+0xb0>
 800653c:	6822      	ldr	r2, [r4, #0]
 800653e:	1b52      	subs	r2, r2, r5
 8006540:	d41f      	bmi.n	8006582 <_malloc_r+0xd6>
 8006542:	2a0b      	cmp	r2, #11
 8006544:	d917      	bls.n	8006576 <_malloc_r+0xca>
 8006546:	1961      	adds	r1, r4, r5
 8006548:	42a3      	cmp	r3, r4
 800654a:	6025      	str	r5, [r4, #0]
 800654c:	bf18      	it	ne
 800654e:	6059      	strne	r1, [r3, #4]
 8006550:	6863      	ldr	r3, [r4, #4]
 8006552:	bf08      	it	eq
 8006554:	f8c8 1000 	streq.w	r1, [r8]
 8006558:	5162      	str	r2, [r4, r5]
 800655a:	604b      	str	r3, [r1, #4]
 800655c:	4638      	mov	r0, r7
 800655e:	f104 060b 	add.w	r6, r4, #11
 8006562:	f000 f829 	bl	80065b8 <__malloc_unlock>
 8006566:	f026 0607 	bic.w	r6, r6, #7
 800656a:	1d23      	adds	r3, r4, #4
 800656c:	1af2      	subs	r2, r6, r3
 800656e:	d0ae      	beq.n	80064ce <_malloc_r+0x22>
 8006570:	1b9b      	subs	r3, r3, r6
 8006572:	50a3      	str	r3, [r4, r2]
 8006574:	e7ab      	b.n	80064ce <_malloc_r+0x22>
 8006576:	42a3      	cmp	r3, r4
 8006578:	6862      	ldr	r2, [r4, #4]
 800657a:	d1dd      	bne.n	8006538 <_malloc_r+0x8c>
 800657c:	f8c8 2000 	str.w	r2, [r8]
 8006580:	e7ec      	b.n	800655c <_malloc_r+0xb0>
 8006582:	4623      	mov	r3, r4
 8006584:	6864      	ldr	r4, [r4, #4]
 8006586:	e7ac      	b.n	80064e2 <_malloc_r+0x36>
 8006588:	4634      	mov	r4, r6
 800658a:	6876      	ldr	r6, [r6, #4]
 800658c:	e7b4      	b.n	80064f8 <_malloc_r+0x4c>
 800658e:	4613      	mov	r3, r2
 8006590:	e7cc      	b.n	800652c <_malloc_r+0x80>
 8006592:	230c      	movs	r3, #12
 8006594:	603b      	str	r3, [r7, #0]
 8006596:	4638      	mov	r0, r7
 8006598:	f000 f80e 	bl	80065b8 <__malloc_unlock>
 800659c:	e797      	b.n	80064ce <_malloc_r+0x22>
 800659e:	6025      	str	r5, [r4, #0]
 80065a0:	e7dc      	b.n	800655c <_malloc_r+0xb0>
 80065a2:	605b      	str	r3, [r3, #4]
 80065a4:	deff      	udf	#255	; 0xff
 80065a6:	bf00      	nop
 80065a8:	20000834 	.word	0x20000834

080065ac <__malloc_lock>:
 80065ac:	4801      	ldr	r0, [pc, #4]	; (80065b4 <__malloc_lock+0x8>)
 80065ae:	f000 b8c9 	b.w	8006744 <__retarget_lock_acquire_recursive>
 80065b2:	bf00      	nop
 80065b4:	20000978 	.word	0x20000978

080065b8 <__malloc_unlock>:
 80065b8:	4801      	ldr	r0, [pc, #4]	; (80065c0 <__malloc_unlock+0x8>)
 80065ba:	f000 b8c4 	b.w	8006746 <__retarget_lock_release_recursive>
 80065be:	bf00      	nop
 80065c0:	20000978 	.word	0x20000978

080065c4 <sniprintf>:
 80065c4:	b40c      	push	{r2, r3}
 80065c6:	b530      	push	{r4, r5, lr}
 80065c8:	4b17      	ldr	r3, [pc, #92]	; (8006628 <sniprintf+0x64>)
 80065ca:	1e0c      	subs	r4, r1, #0
 80065cc:	681d      	ldr	r5, [r3, #0]
 80065ce:	b09d      	sub	sp, #116	; 0x74
 80065d0:	da08      	bge.n	80065e4 <sniprintf+0x20>
 80065d2:	238b      	movs	r3, #139	; 0x8b
 80065d4:	602b      	str	r3, [r5, #0]
 80065d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065da:	b01d      	add	sp, #116	; 0x74
 80065dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065e0:	b002      	add	sp, #8
 80065e2:	4770      	bx	lr
 80065e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80065e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80065ec:	bf14      	ite	ne
 80065ee:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80065f2:	4623      	moveq	r3, r4
 80065f4:	9304      	str	r3, [sp, #16]
 80065f6:	9307      	str	r3, [sp, #28]
 80065f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80065fc:	9002      	str	r0, [sp, #8]
 80065fe:	9006      	str	r0, [sp, #24]
 8006600:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006604:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006606:	ab21      	add	r3, sp, #132	; 0x84
 8006608:	a902      	add	r1, sp, #8
 800660a:	4628      	mov	r0, r5
 800660c:	9301      	str	r3, [sp, #4]
 800660e:	f000 f94f 	bl	80068b0 <_svfiprintf_r>
 8006612:	1c43      	adds	r3, r0, #1
 8006614:	bfbc      	itt	lt
 8006616:	238b      	movlt	r3, #139	; 0x8b
 8006618:	602b      	strlt	r3, [r5, #0]
 800661a:	2c00      	cmp	r4, #0
 800661c:	d0dd      	beq.n	80065da <sniprintf+0x16>
 800661e:	9b02      	ldr	r3, [sp, #8]
 8006620:	2200      	movs	r2, #0
 8006622:	701a      	strb	r2, [r3, #0]
 8006624:	e7d9      	b.n	80065da <sniprintf+0x16>
 8006626:	bf00      	nop
 8006628:	200000b0 	.word	0x200000b0

0800662c <_vsniprintf_r>:
 800662c:	b530      	push	{r4, r5, lr}
 800662e:	4614      	mov	r4, r2
 8006630:	2c00      	cmp	r4, #0
 8006632:	b09b      	sub	sp, #108	; 0x6c
 8006634:	4605      	mov	r5, r0
 8006636:	461a      	mov	r2, r3
 8006638:	da05      	bge.n	8006646 <_vsniprintf_r+0x1a>
 800663a:	238b      	movs	r3, #139	; 0x8b
 800663c:	6003      	str	r3, [r0, #0]
 800663e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006642:	b01b      	add	sp, #108	; 0x6c
 8006644:	bd30      	pop	{r4, r5, pc}
 8006646:	f44f 7302 	mov.w	r3, #520	; 0x208
 800664a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800664e:	bf14      	ite	ne
 8006650:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8006654:	4623      	moveq	r3, r4
 8006656:	9302      	str	r3, [sp, #8]
 8006658:	9305      	str	r3, [sp, #20]
 800665a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800665e:	9100      	str	r1, [sp, #0]
 8006660:	9104      	str	r1, [sp, #16]
 8006662:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006666:	4669      	mov	r1, sp
 8006668:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800666a:	f000 f921 	bl	80068b0 <_svfiprintf_r>
 800666e:	1c43      	adds	r3, r0, #1
 8006670:	bfbc      	itt	lt
 8006672:	238b      	movlt	r3, #139	; 0x8b
 8006674:	602b      	strlt	r3, [r5, #0]
 8006676:	2c00      	cmp	r4, #0
 8006678:	d0e3      	beq.n	8006642 <_vsniprintf_r+0x16>
 800667a:	9b00      	ldr	r3, [sp, #0]
 800667c:	2200      	movs	r2, #0
 800667e:	701a      	strb	r2, [r3, #0]
 8006680:	e7df      	b.n	8006642 <_vsniprintf_r+0x16>
	...

08006684 <vsniprintf>:
 8006684:	b507      	push	{r0, r1, r2, lr}
 8006686:	9300      	str	r3, [sp, #0]
 8006688:	4613      	mov	r3, r2
 800668a:	460a      	mov	r2, r1
 800668c:	4601      	mov	r1, r0
 800668e:	4803      	ldr	r0, [pc, #12]	; (800669c <vsniprintf+0x18>)
 8006690:	6800      	ldr	r0, [r0, #0]
 8006692:	f7ff ffcb 	bl	800662c <_vsniprintf_r>
 8006696:	b003      	add	sp, #12
 8006698:	f85d fb04 	ldr.w	pc, [sp], #4
 800669c:	200000b0 	.word	0x200000b0

080066a0 <memcmp>:
 80066a0:	b510      	push	{r4, lr}
 80066a2:	3901      	subs	r1, #1
 80066a4:	4402      	add	r2, r0
 80066a6:	4290      	cmp	r0, r2
 80066a8:	d101      	bne.n	80066ae <memcmp+0xe>
 80066aa:	2000      	movs	r0, #0
 80066ac:	e005      	b.n	80066ba <memcmp+0x1a>
 80066ae:	7803      	ldrb	r3, [r0, #0]
 80066b0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80066b4:	42a3      	cmp	r3, r4
 80066b6:	d001      	beq.n	80066bc <memcmp+0x1c>
 80066b8:	1b18      	subs	r0, r3, r4
 80066ba:	bd10      	pop	{r4, pc}
 80066bc:	3001      	adds	r0, #1
 80066be:	e7f2      	b.n	80066a6 <memcmp+0x6>

080066c0 <memset>:
 80066c0:	4402      	add	r2, r0
 80066c2:	4603      	mov	r3, r0
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d100      	bne.n	80066ca <memset+0xa>
 80066c8:	4770      	bx	lr
 80066ca:	f803 1b01 	strb.w	r1, [r3], #1
 80066ce:	e7f9      	b.n	80066c4 <memset+0x4>

080066d0 <_sbrk_r>:
 80066d0:	b538      	push	{r3, r4, r5, lr}
 80066d2:	4d06      	ldr	r5, [pc, #24]	; (80066ec <_sbrk_r+0x1c>)
 80066d4:	2300      	movs	r3, #0
 80066d6:	4604      	mov	r4, r0
 80066d8:	4608      	mov	r0, r1
 80066da:	602b      	str	r3, [r5, #0]
 80066dc:	f7fa f866 	bl	80007ac <_sbrk>
 80066e0:	1c43      	adds	r3, r0, #1
 80066e2:	d102      	bne.n	80066ea <_sbrk_r+0x1a>
 80066e4:	682b      	ldr	r3, [r5, #0]
 80066e6:	b103      	cbz	r3, 80066ea <_sbrk_r+0x1a>
 80066e8:	6023      	str	r3, [r4, #0]
 80066ea:	bd38      	pop	{r3, r4, r5, pc}
 80066ec:	20000974 	.word	0x20000974

080066f0 <__errno>:
 80066f0:	4b01      	ldr	r3, [pc, #4]	; (80066f8 <__errno+0x8>)
 80066f2:	6818      	ldr	r0, [r3, #0]
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	200000b0 	.word	0x200000b0

080066fc <__libc_init_array>:
 80066fc:	b570      	push	{r4, r5, r6, lr}
 80066fe:	4d0d      	ldr	r5, [pc, #52]	; (8006734 <__libc_init_array+0x38>)
 8006700:	4c0d      	ldr	r4, [pc, #52]	; (8006738 <__libc_init_array+0x3c>)
 8006702:	1b64      	subs	r4, r4, r5
 8006704:	10a4      	asrs	r4, r4, #2
 8006706:	2600      	movs	r6, #0
 8006708:	42a6      	cmp	r6, r4
 800670a:	d109      	bne.n	8006720 <__libc_init_array+0x24>
 800670c:	4d0b      	ldr	r5, [pc, #44]	; (800673c <__libc_init_array+0x40>)
 800670e:	4c0c      	ldr	r4, [pc, #48]	; (8006740 <__libc_init_array+0x44>)
 8006710:	f000 fbae 	bl	8006e70 <_init>
 8006714:	1b64      	subs	r4, r4, r5
 8006716:	10a4      	asrs	r4, r4, #2
 8006718:	2600      	movs	r6, #0
 800671a:	42a6      	cmp	r6, r4
 800671c:	d105      	bne.n	800672a <__libc_init_array+0x2e>
 800671e:	bd70      	pop	{r4, r5, r6, pc}
 8006720:	f855 3b04 	ldr.w	r3, [r5], #4
 8006724:	4798      	blx	r3
 8006726:	3601      	adds	r6, #1
 8006728:	e7ee      	b.n	8006708 <__libc_init_array+0xc>
 800672a:	f855 3b04 	ldr.w	r3, [r5], #4
 800672e:	4798      	blx	r3
 8006730:	3601      	adds	r6, #1
 8006732:	e7f2      	b.n	800671a <__libc_init_array+0x1e>
 8006734:	08006f50 	.word	0x08006f50
 8006738:	08006f50 	.word	0x08006f50
 800673c:	08006f50 	.word	0x08006f50
 8006740:	08006f54 	.word	0x08006f54

08006744 <__retarget_lock_acquire_recursive>:
 8006744:	4770      	bx	lr

08006746 <__retarget_lock_release_recursive>:
 8006746:	4770      	bx	lr

08006748 <memcpy>:
 8006748:	440a      	add	r2, r1
 800674a:	4291      	cmp	r1, r2
 800674c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006750:	d100      	bne.n	8006754 <memcpy+0xc>
 8006752:	4770      	bx	lr
 8006754:	b510      	push	{r4, lr}
 8006756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800675a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800675e:	4291      	cmp	r1, r2
 8006760:	d1f9      	bne.n	8006756 <memcpy+0xe>
 8006762:	bd10      	pop	{r4, pc}

08006764 <_free_r>:
 8006764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006766:	2900      	cmp	r1, #0
 8006768:	d044      	beq.n	80067f4 <_free_r+0x90>
 800676a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800676e:	9001      	str	r0, [sp, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	f1a1 0404 	sub.w	r4, r1, #4
 8006776:	bfb8      	it	lt
 8006778:	18e4      	addlt	r4, r4, r3
 800677a:	f7ff ff17 	bl	80065ac <__malloc_lock>
 800677e:	4a1e      	ldr	r2, [pc, #120]	; (80067f8 <_free_r+0x94>)
 8006780:	9801      	ldr	r0, [sp, #4]
 8006782:	6813      	ldr	r3, [r2, #0]
 8006784:	b933      	cbnz	r3, 8006794 <_free_r+0x30>
 8006786:	6063      	str	r3, [r4, #4]
 8006788:	6014      	str	r4, [r2, #0]
 800678a:	b003      	add	sp, #12
 800678c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006790:	f7ff bf12 	b.w	80065b8 <__malloc_unlock>
 8006794:	42a3      	cmp	r3, r4
 8006796:	d908      	bls.n	80067aa <_free_r+0x46>
 8006798:	6825      	ldr	r5, [r4, #0]
 800679a:	1961      	adds	r1, r4, r5
 800679c:	428b      	cmp	r3, r1
 800679e:	bf01      	itttt	eq
 80067a0:	6819      	ldreq	r1, [r3, #0]
 80067a2:	685b      	ldreq	r3, [r3, #4]
 80067a4:	1949      	addeq	r1, r1, r5
 80067a6:	6021      	streq	r1, [r4, #0]
 80067a8:	e7ed      	b.n	8006786 <_free_r+0x22>
 80067aa:	461a      	mov	r2, r3
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	b10b      	cbz	r3, 80067b4 <_free_r+0x50>
 80067b0:	42a3      	cmp	r3, r4
 80067b2:	d9fa      	bls.n	80067aa <_free_r+0x46>
 80067b4:	6811      	ldr	r1, [r2, #0]
 80067b6:	1855      	adds	r5, r2, r1
 80067b8:	42a5      	cmp	r5, r4
 80067ba:	d10b      	bne.n	80067d4 <_free_r+0x70>
 80067bc:	6824      	ldr	r4, [r4, #0]
 80067be:	4421      	add	r1, r4
 80067c0:	1854      	adds	r4, r2, r1
 80067c2:	42a3      	cmp	r3, r4
 80067c4:	6011      	str	r1, [r2, #0]
 80067c6:	d1e0      	bne.n	800678a <_free_r+0x26>
 80067c8:	681c      	ldr	r4, [r3, #0]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	6053      	str	r3, [r2, #4]
 80067ce:	440c      	add	r4, r1
 80067d0:	6014      	str	r4, [r2, #0]
 80067d2:	e7da      	b.n	800678a <_free_r+0x26>
 80067d4:	d902      	bls.n	80067dc <_free_r+0x78>
 80067d6:	230c      	movs	r3, #12
 80067d8:	6003      	str	r3, [r0, #0]
 80067da:	e7d6      	b.n	800678a <_free_r+0x26>
 80067dc:	6825      	ldr	r5, [r4, #0]
 80067de:	1961      	adds	r1, r4, r5
 80067e0:	428b      	cmp	r3, r1
 80067e2:	bf04      	itt	eq
 80067e4:	6819      	ldreq	r1, [r3, #0]
 80067e6:	685b      	ldreq	r3, [r3, #4]
 80067e8:	6063      	str	r3, [r4, #4]
 80067ea:	bf04      	itt	eq
 80067ec:	1949      	addeq	r1, r1, r5
 80067ee:	6021      	streq	r1, [r4, #0]
 80067f0:	6054      	str	r4, [r2, #4]
 80067f2:	e7ca      	b.n	800678a <_free_r+0x26>
 80067f4:	b003      	add	sp, #12
 80067f6:	bd30      	pop	{r4, r5, pc}
 80067f8:	20000834 	.word	0x20000834

080067fc <__ssputs_r>:
 80067fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006800:	688e      	ldr	r6, [r1, #8]
 8006802:	461f      	mov	r7, r3
 8006804:	42be      	cmp	r6, r7
 8006806:	680b      	ldr	r3, [r1, #0]
 8006808:	4682      	mov	sl, r0
 800680a:	460c      	mov	r4, r1
 800680c:	4690      	mov	r8, r2
 800680e:	d82c      	bhi.n	800686a <__ssputs_r+0x6e>
 8006810:	898a      	ldrh	r2, [r1, #12]
 8006812:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006816:	d026      	beq.n	8006866 <__ssputs_r+0x6a>
 8006818:	6965      	ldr	r5, [r4, #20]
 800681a:	6909      	ldr	r1, [r1, #16]
 800681c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006820:	eba3 0901 	sub.w	r9, r3, r1
 8006824:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006828:	1c7b      	adds	r3, r7, #1
 800682a:	444b      	add	r3, r9
 800682c:	106d      	asrs	r5, r5, #1
 800682e:	429d      	cmp	r5, r3
 8006830:	bf38      	it	cc
 8006832:	461d      	movcc	r5, r3
 8006834:	0553      	lsls	r3, r2, #21
 8006836:	d527      	bpl.n	8006888 <__ssputs_r+0x8c>
 8006838:	4629      	mov	r1, r5
 800683a:	f7ff fe37 	bl	80064ac <_malloc_r>
 800683e:	4606      	mov	r6, r0
 8006840:	b360      	cbz	r0, 800689c <__ssputs_r+0xa0>
 8006842:	6921      	ldr	r1, [r4, #16]
 8006844:	464a      	mov	r2, r9
 8006846:	f7ff ff7f 	bl	8006748 <memcpy>
 800684a:	89a3      	ldrh	r3, [r4, #12]
 800684c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006854:	81a3      	strh	r3, [r4, #12]
 8006856:	6126      	str	r6, [r4, #16]
 8006858:	6165      	str	r5, [r4, #20]
 800685a:	444e      	add	r6, r9
 800685c:	eba5 0509 	sub.w	r5, r5, r9
 8006860:	6026      	str	r6, [r4, #0]
 8006862:	60a5      	str	r5, [r4, #8]
 8006864:	463e      	mov	r6, r7
 8006866:	42be      	cmp	r6, r7
 8006868:	d900      	bls.n	800686c <__ssputs_r+0x70>
 800686a:	463e      	mov	r6, r7
 800686c:	6820      	ldr	r0, [r4, #0]
 800686e:	4632      	mov	r2, r6
 8006870:	4641      	mov	r1, r8
 8006872:	f000 faab 	bl	8006dcc <memmove>
 8006876:	68a3      	ldr	r3, [r4, #8]
 8006878:	1b9b      	subs	r3, r3, r6
 800687a:	60a3      	str	r3, [r4, #8]
 800687c:	6823      	ldr	r3, [r4, #0]
 800687e:	4433      	add	r3, r6
 8006880:	6023      	str	r3, [r4, #0]
 8006882:	2000      	movs	r0, #0
 8006884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006888:	462a      	mov	r2, r5
 800688a:	f000 fab9 	bl	8006e00 <_realloc_r>
 800688e:	4606      	mov	r6, r0
 8006890:	2800      	cmp	r0, #0
 8006892:	d1e0      	bne.n	8006856 <__ssputs_r+0x5a>
 8006894:	6921      	ldr	r1, [r4, #16]
 8006896:	4650      	mov	r0, sl
 8006898:	f7ff ff64 	bl	8006764 <_free_r>
 800689c:	230c      	movs	r3, #12
 800689e:	f8ca 3000 	str.w	r3, [sl]
 80068a2:	89a3      	ldrh	r3, [r4, #12]
 80068a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068a8:	81a3      	strh	r3, [r4, #12]
 80068aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068ae:	e7e9      	b.n	8006884 <__ssputs_r+0x88>

080068b0 <_svfiprintf_r>:
 80068b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b4:	4698      	mov	r8, r3
 80068b6:	898b      	ldrh	r3, [r1, #12]
 80068b8:	061b      	lsls	r3, r3, #24
 80068ba:	b09d      	sub	sp, #116	; 0x74
 80068bc:	4607      	mov	r7, r0
 80068be:	460d      	mov	r5, r1
 80068c0:	4614      	mov	r4, r2
 80068c2:	d50e      	bpl.n	80068e2 <_svfiprintf_r+0x32>
 80068c4:	690b      	ldr	r3, [r1, #16]
 80068c6:	b963      	cbnz	r3, 80068e2 <_svfiprintf_r+0x32>
 80068c8:	2140      	movs	r1, #64	; 0x40
 80068ca:	f7ff fdef 	bl	80064ac <_malloc_r>
 80068ce:	6028      	str	r0, [r5, #0]
 80068d0:	6128      	str	r0, [r5, #16]
 80068d2:	b920      	cbnz	r0, 80068de <_svfiprintf_r+0x2e>
 80068d4:	230c      	movs	r3, #12
 80068d6:	603b      	str	r3, [r7, #0]
 80068d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068dc:	e0d0      	b.n	8006a80 <_svfiprintf_r+0x1d0>
 80068de:	2340      	movs	r3, #64	; 0x40
 80068e0:	616b      	str	r3, [r5, #20]
 80068e2:	2300      	movs	r3, #0
 80068e4:	9309      	str	r3, [sp, #36]	; 0x24
 80068e6:	2320      	movs	r3, #32
 80068e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80068f0:	2330      	movs	r3, #48	; 0x30
 80068f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006a98 <_svfiprintf_r+0x1e8>
 80068f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068fa:	f04f 0901 	mov.w	r9, #1
 80068fe:	4623      	mov	r3, r4
 8006900:	469a      	mov	sl, r3
 8006902:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006906:	b10a      	cbz	r2, 800690c <_svfiprintf_r+0x5c>
 8006908:	2a25      	cmp	r2, #37	; 0x25
 800690a:	d1f9      	bne.n	8006900 <_svfiprintf_r+0x50>
 800690c:	ebba 0b04 	subs.w	fp, sl, r4
 8006910:	d00b      	beq.n	800692a <_svfiprintf_r+0x7a>
 8006912:	465b      	mov	r3, fp
 8006914:	4622      	mov	r2, r4
 8006916:	4629      	mov	r1, r5
 8006918:	4638      	mov	r0, r7
 800691a:	f7ff ff6f 	bl	80067fc <__ssputs_r>
 800691e:	3001      	adds	r0, #1
 8006920:	f000 80a9 	beq.w	8006a76 <_svfiprintf_r+0x1c6>
 8006924:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006926:	445a      	add	r2, fp
 8006928:	9209      	str	r2, [sp, #36]	; 0x24
 800692a:	f89a 3000 	ldrb.w	r3, [sl]
 800692e:	2b00      	cmp	r3, #0
 8006930:	f000 80a1 	beq.w	8006a76 <_svfiprintf_r+0x1c6>
 8006934:	2300      	movs	r3, #0
 8006936:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800693a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800693e:	f10a 0a01 	add.w	sl, sl, #1
 8006942:	9304      	str	r3, [sp, #16]
 8006944:	9307      	str	r3, [sp, #28]
 8006946:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800694a:	931a      	str	r3, [sp, #104]	; 0x68
 800694c:	4654      	mov	r4, sl
 800694e:	2205      	movs	r2, #5
 8006950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006954:	4850      	ldr	r0, [pc, #320]	; (8006a98 <_svfiprintf_r+0x1e8>)
 8006956:	f7f9 fc3b 	bl	80001d0 <memchr>
 800695a:	9a04      	ldr	r2, [sp, #16]
 800695c:	b9d8      	cbnz	r0, 8006996 <_svfiprintf_r+0xe6>
 800695e:	06d0      	lsls	r0, r2, #27
 8006960:	bf44      	itt	mi
 8006962:	2320      	movmi	r3, #32
 8006964:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006968:	0711      	lsls	r1, r2, #28
 800696a:	bf44      	itt	mi
 800696c:	232b      	movmi	r3, #43	; 0x2b
 800696e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006972:	f89a 3000 	ldrb.w	r3, [sl]
 8006976:	2b2a      	cmp	r3, #42	; 0x2a
 8006978:	d015      	beq.n	80069a6 <_svfiprintf_r+0xf6>
 800697a:	9a07      	ldr	r2, [sp, #28]
 800697c:	4654      	mov	r4, sl
 800697e:	2000      	movs	r0, #0
 8006980:	f04f 0c0a 	mov.w	ip, #10
 8006984:	4621      	mov	r1, r4
 8006986:	f811 3b01 	ldrb.w	r3, [r1], #1
 800698a:	3b30      	subs	r3, #48	; 0x30
 800698c:	2b09      	cmp	r3, #9
 800698e:	d94d      	bls.n	8006a2c <_svfiprintf_r+0x17c>
 8006990:	b1b0      	cbz	r0, 80069c0 <_svfiprintf_r+0x110>
 8006992:	9207      	str	r2, [sp, #28]
 8006994:	e014      	b.n	80069c0 <_svfiprintf_r+0x110>
 8006996:	eba0 0308 	sub.w	r3, r0, r8
 800699a:	fa09 f303 	lsl.w	r3, r9, r3
 800699e:	4313      	orrs	r3, r2
 80069a0:	9304      	str	r3, [sp, #16]
 80069a2:	46a2      	mov	sl, r4
 80069a4:	e7d2      	b.n	800694c <_svfiprintf_r+0x9c>
 80069a6:	9b03      	ldr	r3, [sp, #12]
 80069a8:	1d19      	adds	r1, r3, #4
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	9103      	str	r1, [sp, #12]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	bfbb      	ittet	lt
 80069b2:	425b      	neglt	r3, r3
 80069b4:	f042 0202 	orrlt.w	r2, r2, #2
 80069b8:	9307      	strge	r3, [sp, #28]
 80069ba:	9307      	strlt	r3, [sp, #28]
 80069bc:	bfb8      	it	lt
 80069be:	9204      	strlt	r2, [sp, #16]
 80069c0:	7823      	ldrb	r3, [r4, #0]
 80069c2:	2b2e      	cmp	r3, #46	; 0x2e
 80069c4:	d10c      	bne.n	80069e0 <_svfiprintf_r+0x130>
 80069c6:	7863      	ldrb	r3, [r4, #1]
 80069c8:	2b2a      	cmp	r3, #42	; 0x2a
 80069ca:	d134      	bne.n	8006a36 <_svfiprintf_r+0x186>
 80069cc:	9b03      	ldr	r3, [sp, #12]
 80069ce:	1d1a      	adds	r2, r3, #4
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	9203      	str	r2, [sp, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	bfb8      	it	lt
 80069d8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80069dc:	3402      	adds	r4, #2
 80069de:	9305      	str	r3, [sp, #20]
 80069e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006aa8 <_svfiprintf_r+0x1f8>
 80069e4:	7821      	ldrb	r1, [r4, #0]
 80069e6:	2203      	movs	r2, #3
 80069e8:	4650      	mov	r0, sl
 80069ea:	f7f9 fbf1 	bl	80001d0 <memchr>
 80069ee:	b138      	cbz	r0, 8006a00 <_svfiprintf_r+0x150>
 80069f0:	9b04      	ldr	r3, [sp, #16]
 80069f2:	eba0 000a 	sub.w	r0, r0, sl
 80069f6:	2240      	movs	r2, #64	; 0x40
 80069f8:	4082      	lsls	r2, r0
 80069fa:	4313      	orrs	r3, r2
 80069fc:	3401      	adds	r4, #1
 80069fe:	9304      	str	r3, [sp, #16]
 8006a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a04:	4825      	ldr	r0, [pc, #148]	; (8006a9c <_svfiprintf_r+0x1ec>)
 8006a06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a0a:	2206      	movs	r2, #6
 8006a0c:	f7f9 fbe0 	bl	80001d0 <memchr>
 8006a10:	2800      	cmp	r0, #0
 8006a12:	d038      	beq.n	8006a86 <_svfiprintf_r+0x1d6>
 8006a14:	4b22      	ldr	r3, [pc, #136]	; (8006aa0 <_svfiprintf_r+0x1f0>)
 8006a16:	bb1b      	cbnz	r3, 8006a60 <_svfiprintf_r+0x1b0>
 8006a18:	9b03      	ldr	r3, [sp, #12]
 8006a1a:	3307      	adds	r3, #7
 8006a1c:	f023 0307 	bic.w	r3, r3, #7
 8006a20:	3308      	adds	r3, #8
 8006a22:	9303      	str	r3, [sp, #12]
 8006a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a26:	4433      	add	r3, r6
 8006a28:	9309      	str	r3, [sp, #36]	; 0x24
 8006a2a:	e768      	b.n	80068fe <_svfiprintf_r+0x4e>
 8006a2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a30:	460c      	mov	r4, r1
 8006a32:	2001      	movs	r0, #1
 8006a34:	e7a6      	b.n	8006984 <_svfiprintf_r+0xd4>
 8006a36:	2300      	movs	r3, #0
 8006a38:	3401      	adds	r4, #1
 8006a3a:	9305      	str	r3, [sp, #20]
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	f04f 0c0a 	mov.w	ip, #10
 8006a42:	4620      	mov	r0, r4
 8006a44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a48:	3a30      	subs	r2, #48	; 0x30
 8006a4a:	2a09      	cmp	r2, #9
 8006a4c:	d903      	bls.n	8006a56 <_svfiprintf_r+0x1a6>
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d0c6      	beq.n	80069e0 <_svfiprintf_r+0x130>
 8006a52:	9105      	str	r1, [sp, #20]
 8006a54:	e7c4      	b.n	80069e0 <_svfiprintf_r+0x130>
 8006a56:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a5a:	4604      	mov	r4, r0
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e7f0      	b.n	8006a42 <_svfiprintf_r+0x192>
 8006a60:	ab03      	add	r3, sp, #12
 8006a62:	9300      	str	r3, [sp, #0]
 8006a64:	462a      	mov	r2, r5
 8006a66:	4b0f      	ldr	r3, [pc, #60]	; (8006aa4 <_svfiprintf_r+0x1f4>)
 8006a68:	a904      	add	r1, sp, #16
 8006a6a:	4638      	mov	r0, r7
 8006a6c:	f3af 8000 	nop.w
 8006a70:	1c42      	adds	r2, r0, #1
 8006a72:	4606      	mov	r6, r0
 8006a74:	d1d6      	bne.n	8006a24 <_svfiprintf_r+0x174>
 8006a76:	89ab      	ldrh	r3, [r5, #12]
 8006a78:	065b      	lsls	r3, r3, #25
 8006a7a:	f53f af2d 	bmi.w	80068d8 <_svfiprintf_r+0x28>
 8006a7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a80:	b01d      	add	sp, #116	; 0x74
 8006a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a86:	ab03      	add	r3, sp, #12
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	462a      	mov	r2, r5
 8006a8c:	4b05      	ldr	r3, [pc, #20]	; (8006aa4 <_svfiprintf_r+0x1f4>)
 8006a8e:	a904      	add	r1, sp, #16
 8006a90:	4638      	mov	r0, r7
 8006a92:	f000 f879 	bl	8006b88 <_printf_i>
 8006a96:	e7eb      	b.n	8006a70 <_svfiprintf_r+0x1c0>
 8006a98:	08006f14 	.word	0x08006f14
 8006a9c:	08006f1e 	.word	0x08006f1e
 8006aa0:	00000000 	.word	0x00000000
 8006aa4:	080067fd 	.word	0x080067fd
 8006aa8:	08006f1a 	.word	0x08006f1a

08006aac <_printf_common>:
 8006aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ab0:	4616      	mov	r6, r2
 8006ab2:	4699      	mov	r9, r3
 8006ab4:	688a      	ldr	r2, [r1, #8]
 8006ab6:	690b      	ldr	r3, [r1, #16]
 8006ab8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006abc:	4293      	cmp	r3, r2
 8006abe:	bfb8      	it	lt
 8006ac0:	4613      	movlt	r3, r2
 8006ac2:	6033      	str	r3, [r6, #0]
 8006ac4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ac8:	4607      	mov	r7, r0
 8006aca:	460c      	mov	r4, r1
 8006acc:	b10a      	cbz	r2, 8006ad2 <_printf_common+0x26>
 8006ace:	3301      	adds	r3, #1
 8006ad0:	6033      	str	r3, [r6, #0]
 8006ad2:	6823      	ldr	r3, [r4, #0]
 8006ad4:	0699      	lsls	r1, r3, #26
 8006ad6:	bf42      	ittt	mi
 8006ad8:	6833      	ldrmi	r3, [r6, #0]
 8006ada:	3302      	addmi	r3, #2
 8006adc:	6033      	strmi	r3, [r6, #0]
 8006ade:	6825      	ldr	r5, [r4, #0]
 8006ae0:	f015 0506 	ands.w	r5, r5, #6
 8006ae4:	d106      	bne.n	8006af4 <_printf_common+0x48>
 8006ae6:	f104 0a19 	add.w	sl, r4, #25
 8006aea:	68e3      	ldr	r3, [r4, #12]
 8006aec:	6832      	ldr	r2, [r6, #0]
 8006aee:	1a9b      	subs	r3, r3, r2
 8006af0:	42ab      	cmp	r3, r5
 8006af2:	dc26      	bgt.n	8006b42 <_printf_common+0x96>
 8006af4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006af8:	1e13      	subs	r3, r2, #0
 8006afa:	6822      	ldr	r2, [r4, #0]
 8006afc:	bf18      	it	ne
 8006afe:	2301      	movne	r3, #1
 8006b00:	0692      	lsls	r2, r2, #26
 8006b02:	d42b      	bmi.n	8006b5c <_printf_common+0xb0>
 8006b04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b08:	4649      	mov	r1, r9
 8006b0a:	4638      	mov	r0, r7
 8006b0c:	47c0      	blx	r8
 8006b0e:	3001      	adds	r0, #1
 8006b10:	d01e      	beq.n	8006b50 <_printf_common+0xa4>
 8006b12:	6823      	ldr	r3, [r4, #0]
 8006b14:	6922      	ldr	r2, [r4, #16]
 8006b16:	f003 0306 	and.w	r3, r3, #6
 8006b1a:	2b04      	cmp	r3, #4
 8006b1c:	bf02      	ittt	eq
 8006b1e:	68e5      	ldreq	r5, [r4, #12]
 8006b20:	6833      	ldreq	r3, [r6, #0]
 8006b22:	1aed      	subeq	r5, r5, r3
 8006b24:	68a3      	ldr	r3, [r4, #8]
 8006b26:	bf0c      	ite	eq
 8006b28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b2c:	2500      	movne	r5, #0
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	bfc4      	itt	gt
 8006b32:	1a9b      	subgt	r3, r3, r2
 8006b34:	18ed      	addgt	r5, r5, r3
 8006b36:	2600      	movs	r6, #0
 8006b38:	341a      	adds	r4, #26
 8006b3a:	42b5      	cmp	r5, r6
 8006b3c:	d11a      	bne.n	8006b74 <_printf_common+0xc8>
 8006b3e:	2000      	movs	r0, #0
 8006b40:	e008      	b.n	8006b54 <_printf_common+0xa8>
 8006b42:	2301      	movs	r3, #1
 8006b44:	4652      	mov	r2, sl
 8006b46:	4649      	mov	r1, r9
 8006b48:	4638      	mov	r0, r7
 8006b4a:	47c0      	blx	r8
 8006b4c:	3001      	adds	r0, #1
 8006b4e:	d103      	bne.n	8006b58 <_printf_common+0xac>
 8006b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b58:	3501      	adds	r5, #1
 8006b5a:	e7c6      	b.n	8006aea <_printf_common+0x3e>
 8006b5c:	18e1      	adds	r1, r4, r3
 8006b5e:	1c5a      	adds	r2, r3, #1
 8006b60:	2030      	movs	r0, #48	; 0x30
 8006b62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b66:	4422      	add	r2, r4
 8006b68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b70:	3302      	adds	r3, #2
 8006b72:	e7c7      	b.n	8006b04 <_printf_common+0x58>
 8006b74:	2301      	movs	r3, #1
 8006b76:	4622      	mov	r2, r4
 8006b78:	4649      	mov	r1, r9
 8006b7a:	4638      	mov	r0, r7
 8006b7c:	47c0      	blx	r8
 8006b7e:	3001      	adds	r0, #1
 8006b80:	d0e6      	beq.n	8006b50 <_printf_common+0xa4>
 8006b82:	3601      	adds	r6, #1
 8006b84:	e7d9      	b.n	8006b3a <_printf_common+0x8e>
	...

08006b88 <_printf_i>:
 8006b88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b8c:	7e0f      	ldrb	r7, [r1, #24]
 8006b8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b90:	2f78      	cmp	r7, #120	; 0x78
 8006b92:	4691      	mov	r9, r2
 8006b94:	4680      	mov	r8, r0
 8006b96:	460c      	mov	r4, r1
 8006b98:	469a      	mov	sl, r3
 8006b9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b9e:	d807      	bhi.n	8006bb0 <_printf_i+0x28>
 8006ba0:	2f62      	cmp	r7, #98	; 0x62
 8006ba2:	d80a      	bhi.n	8006bba <_printf_i+0x32>
 8006ba4:	2f00      	cmp	r7, #0
 8006ba6:	f000 80d4 	beq.w	8006d52 <_printf_i+0x1ca>
 8006baa:	2f58      	cmp	r7, #88	; 0x58
 8006bac:	f000 80c0 	beq.w	8006d30 <_printf_i+0x1a8>
 8006bb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bb8:	e03a      	b.n	8006c30 <_printf_i+0xa8>
 8006bba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bbe:	2b15      	cmp	r3, #21
 8006bc0:	d8f6      	bhi.n	8006bb0 <_printf_i+0x28>
 8006bc2:	a101      	add	r1, pc, #4	; (adr r1, 8006bc8 <_printf_i+0x40>)
 8006bc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bc8:	08006c21 	.word	0x08006c21
 8006bcc:	08006c35 	.word	0x08006c35
 8006bd0:	08006bb1 	.word	0x08006bb1
 8006bd4:	08006bb1 	.word	0x08006bb1
 8006bd8:	08006bb1 	.word	0x08006bb1
 8006bdc:	08006bb1 	.word	0x08006bb1
 8006be0:	08006c35 	.word	0x08006c35
 8006be4:	08006bb1 	.word	0x08006bb1
 8006be8:	08006bb1 	.word	0x08006bb1
 8006bec:	08006bb1 	.word	0x08006bb1
 8006bf0:	08006bb1 	.word	0x08006bb1
 8006bf4:	08006d39 	.word	0x08006d39
 8006bf8:	08006c61 	.word	0x08006c61
 8006bfc:	08006cf3 	.word	0x08006cf3
 8006c00:	08006bb1 	.word	0x08006bb1
 8006c04:	08006bb1 	.word	0x08006bb1
 8006c08:	08006d5b 	.word	0x08006d5b
 8006c0c:	08006bb1 	.word	0x08006bb1
 8006c10:	08006c61 	.word	0x08006c61
 8006c14:	08006bb1 	.word	0x08006bb1
 8006c18:	08006bb1 	.word	0x08006bb1
 8006c1c:	08006cfb 	.word	0x08006cfb
 8006c20:	682b      	ldr	r3, [r5, #0]
 8006c22:	1d1a      	adds	r2, r3, #4
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	602a      	str	r2, [r5, #0]
 8006c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c30:	2301      	movs	r3, #1
 8006c32:	e09f      	b.n	8006d74 <_printf_i+0x1ec>
 8006c34:	6820      	ldr	r0, [r4, #0]
 8006c36:	682b      	ldr	r3, [r5, #0]
 8006c38:	0607      	lsls	r7, r0, #24
 8006c3a:	f103 0104 	add.w	r1, r3, #4
 8006c3e:	6029      	str	r1, [r5, #0]
 8006c40:	d501      	bpl.n	8006c46 <_printf_i+0xbe>
 8006c42:	681e      	ldr	r6, [r3, #0]
 8006c44:	e003      	b.n	8006c4e <_printf_i+0xc6>
 8006c46:	0646      	lsls	r6, r0, #25
 8006c48:	d5fb      	bpl.n	8006c42 <_printf_i+0xba>
 8006c4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006c4e:	2e00      	cmp	r6, #0
 8006c50:	da03      	bge.n	8006c5a <_printf_i+0xd2>
 8006c52:	232d      	movs	r3, #45	; 0x2d
 8006c54:	4276      	negs	r6, r6
 8006c56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c5a:	485a      	ldr	r0, [pc, #360]	; (8006dc4 <_printf_i+0x23c>)
 8006c5c:	230a      	movs	r3, #10
 8006c5e:	e012      	b.n	8006c86 <_printf_i+0xfe>
 8006c60:	682b      	ldr	r3, [r5, #0]
 8006c62:	6820      	ldr	r0, [r4, #0]
 8006c64:	1d19      	adds	r1, r3, #4
 8006c66:	6029      	str	r1, [r5, #0]
 8006c68:	0605      	lsls	r5, r0, #24
 8006c6a:	d501      	bpl.n	8006c70 <_printf_i+0xe8>
 8006c6c:	681e      	ldr	r6, [r3, #0]
 8006c6e:	e002      	b.n	8006c76 <_printf_i+0xee>
 8006c70:	0641      	lsls	r1, r0, #25
 8006c72:	d5fb      	bpl.n	8006c6c <_printf_i+0xe4>
 8006c74:	881e      	ldrh	r6, [r3, #0]
 8006c76:	4853      	ldr	r0, [pc, #332]	; (8006dc4 <_printf_i+0x23c>)
 8006c78:	2f6f      	cmp	r7, #111	; 0x6f
 8006c7a:	bf0c      	ite	eq
 8006c7c:	2308      	moveq	r3, #8
 8006c7e:	230a      	movne	r3, #10
 8006c80:	2100      	movs	r1, #0
 8006c82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c86:	6865      	ldr	r5, [r4, #4]
 8006c88:	60a5      	str	r5, [r4, #8]
 8006c8a:	2d00      	cmp	r5, #0
 8006c8c:	bfa2      	ittt	ge
 8006c8e:	6821      	ldrge	r1, [r4, #0]
 8006c90:	f021 0104 	bicge.w	r1, r1, #4
 8006c94:	6021      	strge	r1, [r4, #0]
 8006c96:	b90e      	cbnz	r6, 8006c9c <_printf_i+0x114>
 8006c98:	2d00      	cmp	r5, #0
 8006c9a:	d04b      	beq.n	8006d34 <_printf_i+0x1ac>
 8006c9c:	4615      	mov	r5, r2
 8006c9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ca2:	fb03 6711 	mls	r7, r3, r1, r6
 8006ca6:	5dc7      	ldrb	r7, [r0, r7]
 8006ca8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006cac:	4637      	mov	r7, r6
 8006cae:	42bb      	cmp	r3, r7
 8006cb0:	460e      	mov	r6, r1
 8006cb2:	d9f4      	bls.n	8006c9e <_printf_i+0x116>
 8006cb4:	2b08      	cmp	r3, #8
 8006cb6:	d10b      	bne.n	8006cd0 <_printf_i+0x148>
 8006cb8:	6823      	ldr	r3, [r4, #0]
 8006cba:	07de      	lsls	r6, r3, #31
 8006cbc:	d508      	bpl.n	8006cd0 <_printf_i+0x148>
 8006cbe:	6923      	ldr	r3, [r4, #16]
 8006cc0:	6861      	ldr	r1, [r4, #4]
 8006cc2:	4299      	cmp	r1, r3
 8006cc4:	bfde      	ittt	le
 8006cc6:	2330      	movle	r3, #48	; 0x30
 8006cc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ccc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006cd0:	1b52      	subs	r2, r2, r5
 8006cd2:	6122      	str	r2, [r4, #16]
 8006cd4:	f8cd a000 	str.w	sl, [sp]
 8006cd8:	464b      	mov	r3, r9
 8006cda:	aa03      	add	r2, sp, #12
 8006cdc:	4621      	mov	r1, r4
 8006cde:	4640      	mov	r0, r8
 8006ce0:	f7ff fee4 	bl	8006aac <_printf_common>
 8006ce4:	3001      	adds	r0, #1
 8006ce6:	d14a      	bne.n	8006d7e <_printf_i+0x1f6>
 8006ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cec:	b004      	add	sp, #16
 8006cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cf2:	6823      	ldr	r3, [r4, #0]
 8006cf4:	f043 0320 	orr.w	r3, r3, #32
 8006cf8:	6023      	str	r3, [r4, #0]
 8006cfa:	4833      	ldr	r0, [pc, #204]	; (8006dc8 <_printf_i+0x240>)
 8006cfc:	2778      	movs	r7, #120	; 0x78
 8006cfe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006d02:	6823      	ldr	r3, [r4, #0]
 8006d04:	6829      	ldr	r1, [r5, #0]
 8006d06:	061f      	lsls	r7, r3, #24
 8006d08:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d0c:	d402      	bmi.n	8006d14 <_printf_i+0x18c>
 8006d0e:	065f      	lsls	r7, r3, #25
 8006d10:	bf48      	it	mi
 8006d12:	b2b6      	uxthmi	r6, r6
 8006d14:	07df      	lsls	r7, r3, #31
 8006d16:	bf48      	it	mi
 8006d18:	f043 0320 	orrmi.w	r3, r3, #32
 8006d1c:	6029      	str	r1, [r5, #0]
 8006d1e:	bf48      	it	mi
 8006d20:	6023      	strmi	r3, [r4, #0]
 8006d22:	b91e      	cbnz	r6, 8006d2c <_printf_i+0x1a4>
 8006d24:	6823      	ldr	r3, [r4, #0]
 8006d26:	f023 0320 	bic.w	r3, r3, #32
 8006d2a:	6023      	str	r3, [r4, #0]
 8006d2c:	2310      	movs	r3, #16
 8006d2e:	e7a7      	b.n	8006c80 <_printf_i+0xf8>
 8006d30:	4824      	ldr	r0, [pc, #144]	; (8006dc4 <_printf_i+0x23c>)
 8006d32:	e7e4      	b.n	8006cfe <_printf_i+0x176>
 8006d34:	4615      	mov	r5, r2
 8006d36:	e7bd      	b.n	8006cb4 <_printf_i+0x12c>
 8006d38:	682b      	ldr	r3, [r5, #0]
 8006d3a:	6826      	ldr	r6, [r4, #0]
 8006d3c:	6961      	ldr	r1, [r4, #20]
 8006d3e:	1d18      	adds	r0, r3, #4
 8006d40:	6028      	str	r0, [r5, #0]
 8006d42:	0635      	lsls	r5, r6, #24
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	d501      	bpl.n	8006d4c <_printf_i+0x1c4>
 8006d48:	6019      	str	r1, [r3, #0]
 8006d4a:	e002      	b.n	8006d52 <_printf_i+0x1ca>
 8006d4c:	0670      	lsls	r0, r6, #25
 8006d4e:	d5fb      	bpl.n	8006d48 <_printf_i+0x1c0>
 8006d50:	8019      	strh	r1, [r3, #0]
 8006d52:	2300      	movs	r3, #0
 8006d54:	6123      	str	r3, [r4, #16]
 8006d56:	4615      	mov	r5, r2
 8006d58:	e7bc      	b.n	8006cd4 <_printf_i+0x14c>
 8006d5a:	682b      	ldr	r3, [r5, #0]
 8006d5c:	1d1a      	adds	r2, r3, #4
 8006d5e:	602a      	str	r2, [r5, #0]
 8006d60:	681d      	ldr	r5, [r3, #0]
 8006d62:	6862      	ldr	r2, [r4, #4]
 8006d64:	2100      	movs	r1, #0
 8006d66:	4628      	mov	r0, r5
 8006d68:	f7f9 fa32 	bl	80001d0 <memchr>
 8006d6c:	b108      	cbz	r0, 8006d72 <_printf_i+0x1ea>
 8006d6e:	1b40      	subs	r0, r0, r5
 8006d70:	6060      	str	r0, [r4, #4]
 8006d72:	6863      	ldr	r3, [r4, #4]
 8006d74:	6123      	str	r3, [r4, #16]
 8006d76:	2300      	movs	r3, #0
 8006d78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d7c:	e7aa      	b.n	8006cd4 <_printf_i+0x14c>
 8006d7e:	6923      	ldr	r3, [r4, #16]
 8006d80:	462a      	mov	r2, r5
 8006d82:	4649      	mov	r1, r9
 8006d84:	4640      	mov	r0, r8
 8006d86:	47d0      	blx	sl
 8006d88:	3001      	adds	r0, #1
 8006d8a:	d0ad      	beq.n	8006ce8 <_printf_i+0x160>
 8006d8c:	6823      	ldr	r3, [r4, #0]
 8006d8e:	079b      	lsls	r3, r3, #30
 8006d90:	d413      	bmi.n	8006dba <_printf_i+0x232>
 8006d92:	68e0      	ldr	r0, [r4, #12]
 8006d94:	9b03      	ldr	r3, [sp, #12]
 8006d96:	4298      	cmp	r0, r3
 8006d98:	bfb8      	it	lt
 8006d9a:	4618      	movlt	r0, r3
 8006d9c:	e7a6      	b.n	8006cec <_printf_i+0x164>
 8006d9e:	2301      	movs	r3, #1
 8006da0:	4632      	mov	r2, r6
 8006da2:	4649      	mov	r1, r9
 8006da4:	4640      	mov	r0, r8
 8006da6:	47d0      	blx	sl
 8006da8:	3001      	adds	r0, #1
 8006daa:	d09d      	beq.n	8006ce8 <_printf_i+0x160>
 8006dac:	3501      	adds	r5, #1
 8006dae:	68e3      	ldr	r3, [r4, #12]
 8006db0:	9903      	ldr	r1, [sp, #12]
 8006db2:	1a5b      	subs	r3, r3, r1
 8006db4:	42ab      	cmp	r3, r5
 8006db6:	dcf2      	bgt.n	8006d9e <_printf_i+0x216>
 8006db8:	e7eb      	b.n	8006d92 <_printf_i+0x20a>
 8006dba:	2500      	movs	r5, #0
 8006dbc:	f104 0619 	add.w	r6, r4, #25
 8006dc0:	e7f5      	b.n	8006dae <_printf_i+0x226>
 8006dc2:	bf00      	nop
 8006dc4:	08006f25 	.word	0x08006f25
 8006dc8:	08006f36 	.word	0x08006f36

08006dcc <memmove>:
 8006dcc:	4288      	cmp	r0, r1
 8006dce:	b510      	push	{r4, lr}
 8006dd0:	eb01 0402 	add.w	r4, r1, r2
 8006dd4:	d902      	bls.n	8006ddc <memmove+0x10>
 8006dd6:	4284      	cmp	r4, r0
 8006dd8:	4623      	mov	r3, r4
 8006dda:	d807      	bhi.n	8006dec <memmove+0x20>
 8006ddc:	1e43      	subs	r3, r0, #1
 8006dde:	42a1      	cmp	r1, r4
 8006de0:	d008      	beq.n	8006df4 <memmove+0x28>
 8006de2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006de6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006dea:	e7f8      	b.n	8006dde <memmove+0x12>
 8006dec:	4402      	add	r2, r0
 8006dee:	4601      	mov	r1, r0
 8006df0:	428a      	cmp	r2, r1
 8006df2:	d100      	bne.n	8006df6 <memmove+0x2a>
 8006df4:	bd10      	pop	{r4, pc}
 8006df6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006dfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006dfe:	e7f7      	b.n	8006df0 <memmove+0x24>

08006e00 <_realloc_r>:
 8006e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e04:	4680      	mov	r8, r0
 8006e06:	4614      	mov	r4, r2
 8006e08:	460e      	mov	r6, r1
 8006e0a:	b921      	cbnz	r1, 8006e16 <_realloc_r+0x16>
 8006e0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e10:	4611      	mov	r1, r2
 8006e12:	f7ff bb4b 	b.w	80064ac <_malloc_r>
 8006e16:	b92a      	cbnz	r2, 8006e24 <_realloc_r+0x24>
 8006e18:	f7ff fca4 	bl	8006764 <_free_r>
 8006e1c:	4625      	mov	r5, r4
 8006e1e:	4628      	mov	r0, r5
 8006e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e24:	f000 f81b 	bl	8006e5e <_malloc_usable_size_r>
 8006e28:	4284      	cmp	r4, r0
 8006e2a:	4607      	mov	r7, r0
 8006e2c:	d802      	bhi.n	8006e34 <_realloc_r+0x34>
 8006e2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006e32:	d812      	bhi.n	8006e5a <_realloc_r+0x5a>
 8006e34:	4621      	mov	r1, r4
 8006e36:	4640      	mov	r0, r8
 8006e38:	f7ff fb38 	bl	80064ac <_malloc_r>
 8006e3c:	4605      	mov	r5, r0
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	d0ed      	beq.n	8006e1e <_realloc_r+0x1e>
 8006e42:	42bc      	cmp	r4, r7
 8006e44:	4622      	mov	r2, r4
 8006e46:	4631      	mov	r1, r6
 8006e48:	bf28      	it	cs
 8006e4a:	463a      	movcs	r2, r7
 8006e4c:	f7ff fc7c 	bl	8006748 <memcpy>
 8006e50:	4631      	mov	r1, r6
 8006e52:	4640      	mov	r0, r8
 8006e54:	f7ff fc86 	bl	8006764 <_free_r>
 8006e58:	e7e1      	b.n	8006e1e <_realloc_r+0x1e>
 8006e5a:	4635      	mov	r5, r6
 8006e5c:	e7df      	b.n	8006e1e <_realloc_r+0x1e>

08006e5e <_malloc_usable_size_r>:
 8006e5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e62:	1f18      	subs	r0, r3, #4
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	bfbc      	itt	lt
 8006e68:	580b      	ldrlt	r3, [r1, r0]
 8006e6a:	18c0      	addlt	r0, r0, r3
 8006e6c:	4770      	bx	lr
	...

08006e70 <_init>:
 8006e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e72:	bf00      	nop
 8006e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e76:	bc08      	pop	{r3}
 8006e78:	469e      	mov	lr, r3
 8006e7a:	4770      	bx	lr

08006e7c <_fini>:
 8006e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7e:	bf00      	nop
 8006e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e82:	bc08      	pop	{r3}
 8006e84:	469e      	mov	lr, r3
 8006e86:	4770      	bx	lr
