
bms_l152.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b80  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08003cbc  08003cbc  00013cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d00  08003d00  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d00  08003d00  00013d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d08  08003d08  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d08  08003d08  00013d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d0c  08003d0c  00013d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  2000000c  08003d1c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  08003d1c  000204f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000916c  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d39  00000000  00000000  000291e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000810  00000000  00000000  0002af20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000625  00000000  00000000  0002b730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015198  00000000  00000000  0002bd55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a73c  00000000  00000000  00040eed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084a96  00000000  00000000  0004b629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001ed0  00000000  00000000  000d00c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000d1f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08003ca4 	.word	0x08003ca4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08003ca4 	.word	0x08003ca4

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800018c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14c      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d967      	bls.n	8000292 <__udivmoddi4+0xe6>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b153      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	fa01 fe03 	lsl.w	lr, r1, r3
 80001d4:	fa20 f202 	lsr.w	r2, r0, r2
 80001d8:	ea42 0e0e 	orr.w	lr, r2, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001e2:	fbbe f1f7 	udiv	r1, lr, r7
 80001e6:	fa1f f58c 	uxth.w	r5, ip
 80001ea:	fb07 ee11 	mls	lr, r7, r1, lr
 80001ee:	fb01 f005 	mul.w	r0, r1, r5
 80001f2:	0c22      	lsrs	r2, r4, #16
 80001f4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000200:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8000204:	f080 8119 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000208:	4290      	cmp	r0, r2
 800020a:	f240 8116 	bls.w	800043a <__udivmoddi4+0x28e>
 800020e:	3902      	subs	r1, #2
 8000210:	4462      	add	r2, ip
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f7 	udiv	r0, r2, r7
 8000218:	fb07 2210 	mls	r2, r7, r0, r2
 800021c:	fb00 f505 	mul.w	r5, r0, r5
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a5      	cmp	r5, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000232:	f080 8104 	bcs.w	800043e <__udivmoddi4+0x292>
 8000236:	42a5      	cmp	r5, r4
 8000238:	f240 8101 	bls.w	800043e <__udivmoddi4+0x292>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	1b64      	subs	r4, r4, r5
 8000248:	b11e      	cbz	r6, 8000252 <__udivmoddi4+0xa6>
 800024a:	40dc      	lsrs	r4, r3
 800024c:	2300      	movs	r3, #0
 800024e:	e9c6 4300 	strd	r4, r3, [r6]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d908      	bls.n	800026c <__udivmoddi4+0xc0>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80ea 	beq.w	8000434 <__udivmoddi4+0x288>
 8000260:	2100      	movs	r1, #0
 8000262:	e9c6 0500 	strd	r0, r5, [r6]
 8000266:	4608      	mov	r0, r1
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	fab3 f183 	clz	r1, r3
 8000270:	2900      	cmp	r1, #0
 8000272:	d148      	bne.n	8000306 <__udivmoddi4+0x15a>
 8000274:	42ab      	cmp	r3, r5
 8000276:	d302      	bcc.n	800027e <__udivmoddi4+0xd2>
 8000278:	4282      	cmp	r2, r0
 800027a:	f200 80f8 	bhi.w	800046e <__udivmoddi4+0x2c2>
 800027e:	1a84      	subs	r4, r0, r2
 8000280:	eb65 0203 	sbc.w	r2, r5, r3
 8000284:	2001      	movs	r0, #1
 8000286:	4696      	mov	lr, r2
 8000288:	2e00      	cmp	r6, #0
 800028a:	d0e2      	beq.n	8000252 <__udivmoddi4+0xa6>
 800028c:	e9c6 4e00 	strd	r4, lr, [r6]
 8000290:	e7df      	b.n	8000252 <__udivmoddi4+0xa6>
 8000292:	b902      	cbnz	r2, 8000296 <__udivmoddi4+0xea>
 8000294:	deff      	udf	#255	; 0xff
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	2b00      	cmp	r3, #0
 800029c:	f040 808e 	bne.w	80003bc <__udivmoddi4+0x210>
 80002a0:	1a88      	subs	r0, r1, r2
 80002a2:	2101      	movs	r1, #1
 80002a4:	0c17      	lsrs	r7, r2, #16
 80002a6:	fa1f fe82 	uxth.w	lr, r2
 80002aa:	fbb0 f5f7 	udiv	r5, r0, r7
 80002ae:	fb07 0015 	mls	r0, r7, r5, r0
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b8:	fb0e f005 	mul.w	r0, lr, r5
 80002bc:	4290      	cmp	r0, r2
 80002be:	d908      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c0:	eb1c 0202 	adds.w	r2, ip, r2
 80002c4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f200 80cc 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002d0:	4645      	mov	r5, r8
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	fb0e fe00 	mul.w	lr, lr, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e6:	45a6      	cmp	lr, r4
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x150>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x14e>
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	f200 80b4 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002fa:	4610      	mov	r0, r2
 80002fc:	eba4 040e 	sub.w	r4, r4, lr
 8000300:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000304:	e7a0      	b.n	8000248 <__udivmoddi4+0x9c>
 8000306:	f1c1 0720 	rsb	r7, r1, #32
 800030a:	408b      	lsls	r3, r1
 800030c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000310:	ea4c 0c03 	orr.w	ip, ip, r3
 8000314:	fa25 fa07 	lsr.w	sl, r5, r7
 8000318:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800031c:	fbba f8f9 	udiv	r8, sl, r9
 8000320:	408d      	lsls	r5, r1
 8000322:	fa20 f307 	lsr.w	r3, r0, r7
 8000326:	fb09 aa18 	mls	sl, r9, r8, sl
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	432b      	orrs	r3, r5
 8000330:	fa00 f501 	lsl.w	r5, r0, r1
 8000334:	fb08 f00e 	mul.w	r0, r8, lr
 8000338:	0c1c      	lsrs	r4, r3, #16
 800033a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800033e:	42a0      	cmp	r0, r4
 8000340:	fa02 f201 	lsl.w	r2, r2, r1
 8000344:	d90b      	bls.n	800035e <__udivmoddi4+0x1b2>
 8000346:	eb1c 0404 	adds.w	r4, ip, r4
 800034a:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800034e:	f080 8086 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000352:	42a0      	cmp	r0, r4
 8000354:	f240 8083 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000358:	f1a8 0802 	sub.w	r8, r8, #2
 800035c:	4464      	add	r4, ip
 800035e:	1a24      	subs	r4, r4, r0
 8000360:	b298      	uxth	r0, r3
 8000362:	fbb4 f3f9 	udiv	r3, r4, r9
 8000366:	fb09 4413 	mls	r4, r9, r3, r4
 800036a:	fb03 fe0e 	mul.w	lr, r3, lr
 800036e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000372:	45a6      	cmp	lr, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 800037e:	d26a      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 8000380:	45a6      	cmp	lr, r4
 8000382:	d968      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000384:	3b02      	subs	r3, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800038c:	fba0 9302 	umull	r9, r3, r0, r2
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	429c      	cmp	r4, r3
 8000396:	46c8      	mov	r8, r9
 8000398:	469e      	mov	lr, r3
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d067      	beq.n	8000472 <__udivmoddi4+0x2c6>
 80003a2:	ebb5 0308 	subs.w	r3, r5, r8
 80003a6:	eb64 040e 	sbc.w	r4, r4, lr
 80003aa:	40cb      	lsrs	r3, r1
 80003ac:	fa04 f707 	lsl.w	r7, r4, r7
 80003b0:	431f      	orrs	r7, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c6 7400 	strd	r7, r4, [r6]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e74a      	b.n	8000252 <__udivmoddi4+0xa6>
 80003bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c0:	f1c3 0020 	rsb	r0, r3, #32
 80003c4:	40c1      	lsrs	r1, r0
 80003c6:	409d      	lsls	r5, r3
 80003c8:	fa24 f000 	lsr.w	r0, r4, r0
 80003cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d0:	4328      	orrs	r0, r5
 80003d2:	fbb1 f5f7 	udiv	r5, r1, r7
 80003d6:	fb07 1115 	mls	r1, r7, r5, r1
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	0c02      	lsrs	r2, r0, #16
 80003e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003e4:	fb05 f10e 	mul.w	r1, r5, lr
 80003e8:	4291      	cmp	r1, r2
 80003ea:	fa04 f403 	lsl.w	r4, r4, r3
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f0:	eb1c 0202 	adds.w	r2, ip, r2
 80003f4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	4291      	cmp	r1, r2
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3d02      	subs	r5, #2
 8000400:	4462      	add	r2, ip
 8000402:	1a52      	subs	r2, r2, r1
 8000404:	fbb2 f1f7 	udiv	r1, r2, r7
 8000408:	fb07 2211 	mls	r2, r7, r1, r2
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000412:	fb01 f20e 	mul.w	r2, r1, lr
 8000416:	4282      	cmp	r2, r0
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x280>
 800041a:	eb1c 0000 	adds.w	r0, ip, r0
 800041e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000422:	d216      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000424:	4282      	cmp	r2, r0
 8000426:	d914      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000428:	3902      	subs	r1, #2
 800042a:	4460      	add	r0, ip
 800042c:	1a80      	subs	r0, r0, r2
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4631      	mov	r1, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e70b      	b.n	8000252 <__udivmoddi4+0xa6>
 800043a:	4671      	mov	r1, lr
 800043c:	e6e9      	b.n	8000212 <__udivmoddi4+0x66>
 800043e:	4610      	mov	r0, r2
 8000440:	e6fe      	b.n	8000240 <__udivmoddi4+0x94>
 8000442:	454d      	cmp	r5, r9
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb9 0802 	subs.w	r8, r9, r2
 800044a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800044e:	3801      	subs	r0, #1
 8000450:	e7a5      	b.n	800039e <__udivmoddi4+0x1f2>
 8000452:	4641      	mov	r1, r8
 8000454:	e7ea      	b.n	800042c <__udivmoddi4+0x280>
 8000456:	4603      	mov	r3, r0
 8000458:	e796      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045a:	4645      	mov	r5, r8
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	46d0      	mov	r8, sl
 8000460:	e77d      	b.n	800035e <__udivmoddi4+0x1b2>
 8000462:	4464      	add	r4, ip
 8000464:	3802      	subs	r0, #2
 8000466:	e749      	b.n	80002fc <__udivmoddi4+0x150>
 8000468:	3d02      	subs	r5, #2
 800046a:	4462      	add	r2, ip
 800046c:	e731      	b.n	80002d2 <__udivmoddi4+0x126>
 800046e:	4608      	mov	r0, r1
 8000470:	e70a      	b.n	8000288 <__udivmoddi4+0xdc>
 8000472:	4631      	mov	r1, r6
 8000474:	e6ed      	b.n	8000252 <__udivmoddi4+0xa6>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000482:	4b14      	ldr	r3, [pc, #80]	; (80004d4 <HAL_MspInit+0x58>)
 8000484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000486:	4a13      	ldr	r2, [pc, #76]	; (80004d4 <HAL_MspInit+0x58>)
 8000488:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800048c:	6253      	str	r3, [r2, #36]	; 0x24
 800048e:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <HAL_MspInit+0x58>)
 8000490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000492:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800049a:	4b0e      	ldr	r3, [pc, #56]	; (80004d4 <HAL_MspInit+0x58>)
 800049c:	6a1b      	ldr	r3, [r3, #32]
 800049e:	4a0d      	ldr	r2, [pc, #52]	; (80004d4 <HAL_MspInit+0x58>)
 80004a0:	f043 0301 	orr.w	r3, r3, #1
 80004a4:	6213      	str	r3, [r2, #32]
 80004a6:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <HAL_MspInit+0x58>)
 80004a8:	6a1b      	ldr	r3, [r3, #32]
 80004aa:	f003 0301 	and.w	r3, r3, #1
 80004ae:	60bb      	str	r3, [r7, #8]
 80004b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b2:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <HAL_MspInit+0x58>)
 80004b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004b6:	4a07      	ldr	r2, [pc, #28]	; (80004d4 <HAL_MspInit+0x58>)
 80004b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004bc:	6253      	str	r3, [r2, #36]	; 0x24
 80004be:	4b05      	ldr	r3, [pc, #20]	; (80004d4 <HAL_MspInit+0x58>)
 80004c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ca:	bf00      	nop
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr
 80004d4:	40023800 	.word	0x40023800

080004d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08c      	sub	sp, #48	; 0x30
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e0:	f107 031c 	add.w	r3, r7, #28
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
 80004ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a36      	ldr	r2, [pc, #216]	; (80005d0 <HAL_UART_MspInit+0xf8>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d131      	bne.n	800055e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80004fa:	4b36      	ldr	r3, [pc, #216]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 80004fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004fe:	4a35      	ldr	r2, [pc, #212]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 8000500:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000504:	6253      	str	r3, [r2, #36]	; 0x24
 8000506:	4b33      	ldr	r3, [pc, #204]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 8000508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800050a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800050e:	61bb      	str	r3, [r7, #24]
 8000510:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000512:	4b30      	ldr	r3, [pc, #192]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	4a2f      	ldr	r2, [pc, #188]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 8000518:	f043 0304 	orr.w	r3, r3, #4
 800051c:	61d3      	str	r3, [r2, #28]
 800051e:	4b2d      	ldr	r3, [pc, #180]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	f003 0304 	and.w	r3, r3, #4
 8000526:	617b      	str	r3, [r7, #20]
 8000528:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800052a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800052e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000530:	2302      	movs	r3, #2
 8000532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000534:	2301      	movs	r3, #1
 8000536:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000538:	2303      	movs	r3, #3
 800053a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800053c:	2308      	movs	r3, #8
 800053e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000540:	f107 031c 	add.w	r3, r7, #28
 8000544:	4619      	mov	r1, r3
 8000546:	4824      	ldr	r0, [pc, #144]	; (80005d8 <HAL_UART_MspInit+0x100>)
 8000548:	f000 fab6 	bl	8000ab8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800054c:	2200      	movs	r2, #0
 800054e:	2100      	movs	r1, #0
 8000550:	2030      	movs	r0, #48	; 0x30
 8000552:	f000 f9fc 	bl	800094e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000556:	2030      	movs	r0, #48	; 0x30
 8000558:	f000 fa15 	bl	8000986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800055c:	e034      	b.n	80005c8 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a1e      	ldr	r2, [pc, #120]	; (80005dc <HAL_UART_MspInit+0x104>)
 8000564:	4293      	cmp	r3, r2
 8000566:	d12f      	bne.n	80005c8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000568:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 800056a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800056c:	4a19      	ldr	r2, [pc, #100]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 800056e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000572:	6253      	str	r3, [r2, #36]	; 0x24
 8000574:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 8000576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800057c:	613b      	str	r3, [r7, #16]
 800057e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000580:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 8000582:	69db      	ldr	r3, [r3, #28]
 8000584:	4a13      	ldr	r2, [pc, #76]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 8000586:	f043 0301 	orr.w	r3, r3, #1
 800058a:	61d3      	str	r3, [r2, #28]
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 800058e:	69db      	ldr	r3, [r3, #28]
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000598:	230c      	movs	r3, #12
 800059a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800059c:	2302      	movs	r3, #2
 800059e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005a4:	2303      	movs	r3, #3
 80005a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005a8:	2307      	movs	r3, #7
 80005aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ac:	f107 031c 	add.w	r3, r7, #28
 80005b0:	4619      	mov	r1, r3
 80005b2:	480b      	ldr	r0, [pc, #44]	; (80005e0 <HAL_UART_MspInit+0x108>)
 80005b4:	f000 fa80 	bl	8000ab8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2100      	movs	r1, #0
 80005bc:	2026      	movs	r0, #38	; 0x26
 80005be:	f000 f9c6 	bl	800094e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80005c2:	2026      	movs	r0, #38	; 0x26
 80005c4:	f000 f9df 	bl	8000986 <HAL_NVIC_EnableIRQ>
}
 80005c8:	bf00      	nop
 80005ca:	3730      	adds	r7, #48	; 0x30
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40004c00 	.word	0x40004c00
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40020800 	.word	0x40020800
 80005dc:	40004400 	.word	0x40004400
 80005e0:	40020000 	.word	0x40020000

080005e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <NMI_Handler+0x4>

080005ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ee:	e7fe      	b.n	80005ee <HardFault_Handler+0x4>

080005f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <MemManage_Handler+0x4>

080005f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005fa:	e7fe      	b.n	80005fa <BusFault_Handler+0x4>

080005fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <UsageFault_Handler+0x4>

08000602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr

0800060e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr

0800061a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr

08000626 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
	...

08000634 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000634:	f7ff fff7 	bl	8000626 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000638:	480b      	ldr	r0, [pc, #44]	; (8000668 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800063a:	490c      	ldr	r1, [pc, #48]	; (800066c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800063c:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <LoopFillZerobss+0x16>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000640:	e002      	b.n	8000648 <LoopCopyDataInit>

08000642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000646:	3304      	adds	r3, #4

08000648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800064c:	d3f9      	bcc.n	8000642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064e:	4a09      	ldr	r2, [pc, #36]	; (8000674 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000650:	4c09      	ldr	r4, [pc, #36]	; (8000678 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000654:	e001      	b.n	800065a <LoopFillZerobss>

08000656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000658:	3204      	adds	r2, #4

0800065a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800065c:	d3fb      	bcc.n	8000656 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800065e:	f003 fafd 	bl	8003c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000662:	f002 fac5 	bl	8002bf0 <main>
  bx lr
 8000666:	4770      	bx	lr
  ldr r0, =_sdata
 8000668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800066c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000670:	08003d10 	.word	0x08003d10
  ldr r2, =_sbss
 8000674:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000678:	200004f8 	.word	0x200004f8

0800067c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800067c:	e7fe      	b.n	800067c <ADC1_IRQHandler>

0800067e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	b082      	sub	sp, #8
 8000682:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000684:	2300      	movs	r3, #0
 8000686:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000688:	2003      	movs	r0, #3
 800068a:	f000 f955 	bl	8000938 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800068e:	200f      	movs	r0, #15
 8000690:	f000 f80e 	bl	80006b0 <HAL_InitTick>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d002      	beq.n	80006a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800069a:	2301      	movs	r3, #1
 800069c:	71fb      	strb	r3, [r7, #7]
 800069e:	e001      	b.n	80006a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006a0:	f7ff feec 	bl	800047c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006a4:	79fb      	ldrb	r3, [r7, #7]
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006b8:	2300      	movs	r3, #0
 80006ba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80006bc:	4b16      	ldr	r3, [pc, #88]	; (8000718 <HAL_InitTick+0x68>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d022      	beq.n	800070a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80006c4:	4b15      	ldr	r3, [pc, #84]	; (800071c <HAL_InitTick+0x6c>)
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	4b13      	ldr	r3, [pc, #76]	; (8000718 <HAL_InitTick+0x68>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80006d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 f962 	bl	80009a2 <HAL_SYSTICK_Config>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d10f      	bne.n	8000704 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2b0f      	cmp	r3, #15
 80006e8:	d809      	bhi.n	80006fe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006ea:	2200      	movs	r2, #0
 80006ec:	6879      	ldr	r1, [r7, #4]
 80006ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006f2:	f000 f92c 	bl	800094e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006f6:	4a0a      	ldr	r2, [pc, #40]	; (8000720 <HAL_InitTick+0x70>)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	6013      	str	r3, [r2, #0]
 80006fc:	e007      	b.n	800070e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80006fe:	2301      	movs	r3, #1
 8000700:	73fb      	strb	r3, [r7, #15]
 8000702:	e004      	b.n	800070e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000704:	2301      	movs	r3, #1
 8000706:	73fb      	strb	r3, [r7, #15]
 8000708:	e001      	b.n	800070e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800070a:	2301      	movs	r3, #1
 800070c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800070e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000710:	4618      	mov	r0, r3
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000008 	.word	0x20000008
 800071c:	20000000 	.word	0x20000000
 8000720:	20000004 	.word	0x20000004

08000724 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000728:	4b05      	ldr	r3, [pc, #20]	; (8000740 <HAL_IncTick+0x1c>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <HAL_IncTick+0x20>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4413      	add	r3, r2
 8000732:	4a03      	ldr	r2, [pc, #12]	; (8000740 <HAL_IncTick+0x1c>)
 8000734:	6013      	str	r3, [r2, #0]
}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	20000028 	.word	0x20000028
 8000744:	20000008 	.word	0x20000008

08000748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  return uwTick;
 800074c:	4b02      	ldr	r3, [pc, #8]	; (8000758 <HAL_GetTick+0x10>)
 800074e:	681b      	ldr	r3, [r3, #0]
}
 8000750:	4618      	mov	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	20000028 	.word	0x20000028

0800075c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000764:	f7ff fff0 	bl	8000748 <HAL_GetTick>
 8000768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000774:	d004      	beq.n	8000780 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <HAL_Delay+0x40>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	4413      	add	r3, r2
 800077e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000780:	bf00      	nop
 8000782:	f7ff ffe1 	bl	8000748 <HAL_GetTick>
 8000786:	4602      	mov	r2, r0
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	1ad3      	subs	r3, r2, r3
 800078c:	68fa      	ldr	r2, [r7, #12]
 800078e:	429a      	cmp	r2, r3
 8000790:	d8f7      	bhi.n	8000782 <HAL_Delay+0x26>
  {
  }
}
 8000792:	bf00      	nop
 8000794:	bf00      	nop
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000008 	.word	0x20000008

080007a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <__NVIC_SetPriorityGrouping+0x44>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007b6:	68ba      	ldr	r2, [r7, #8]
 80007b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007bc:	4013      	ands	r3, r2
 80007be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007d2:	4a04      	ldr	r2, [pc, #16]	; (80007e4 <__NVIC_SetPriorityGrouping+0x44>)
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	60d3      	str	r3, [r2, #12]
}
 80007d8:	bf00      	nop
 80007da:	3714      	adds	r7, #20
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007ec:	4b04      	ldr	r3, [pc, #16]	; (8000800 <__NVIC_GetPriorityGrouping+0x18>)
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	0a1b      	lsrs	r3, r3, #8
 80007f2:	f003 0307 	and.w	r3, r3, #7
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800080e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000812:	2b00      	cmp	r3, #0
 8000814:	db0b      	blt.n	800082e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	f003 021f 	and.w	r2, r3, #31
 800081c:	4906      	ldr	r1, [pc, #24]	; (8000838 <__NVIC_EnableIRQ+0x34>)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	095b      	lsrs	r3, r3, #5
 8000824:	2001      	movs	r0, #1
 8000826:	fa00 f202 	lsl.w	r2, r0, r2
 800082a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr
 8000838:	e000e100 	.word	0xe000e100

0800083c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	6039      	str	r1, [r7, #0]
 8000846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084c:	2b00      	cmp	r3, #0
 800084e:	db0a      	blt.n	8000866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	b2da      	uxtb	r2, r3
 8000854:	490c      	ldr	r1, [pc, #48]	; (8000888 <__NVIC_SetPriority+0x4c>)
 8000856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085a:	0112      	lsls	r2, r2, #4
 800085c:	b2d2      	uxtb	r2, r2
 800085e:	440b      	add	r3, r1
 8000860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000864:	e00a      	b.n	800087c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4908      	ldr	r1, [pc, #32]	; (800088c <__NVIC_SetPriority+0x50>)
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	f003 030f 	and.w	r3, r3, #15
 8000872:	3b04      	subs	r3, #4
 8000874:	0112      	lsls	r2, r2, #4
 8000876:	b2d2      	uxtb	r2, r2
 8000878:	440b      	add	r3, r1
 800087a:	761a      	strb	r2, [r3, #24]
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000e100 	.word	0xe000e100
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000890:	b480      	push	{r7}
 8000892:	b089      	sub	sp, #36	; 0x24
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	f1c3 0307 	rsb	r3, r3, #7
 80008aa:	2b04      	cmp	r3, #4
 80008ac:	bf28      	it	cs
 80008ae:	2304      	movcs	r3, #4
 80008b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	3304      	adds	r3, #4
 80008b6:	2b06      	cmp	r3, #6
 80008b8:	d902      	bls.n	80008c0 <NVIC_EncodePriority+0x30>
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	3b03      	subs	r3, #3
 80008be:	e000      	b.n	80008c2 <NVIC_EncodePriority+0x32>
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	43da      	mvns	r2, r3
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	401a      	ands	r2, r3
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	fa01 f303 	lsl.w	r3, r1, r3
 80008e2:	43d9      	mvns	r1, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e8:	4313      	orrs	r3, r2
         );
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3724      	adds	r7, #36	; 0x24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr

080008f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3b01      	subs	r3, #1
 8000900:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000904:	d301      	bcc.n	800090a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000906:	2301      	movs	r3, #1
 8000908:	e00f      	b.n	800092a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800090a:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <SysTick_Config+0x40>)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3b01      	subs	r3, #1
 8000910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000912:	210f      	movs	r1, #15
 8000914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000918:	f7ff ff90 	bl	800083c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800091c:	4b05      	ldr	r3, [pc, #20]	; (8000934 <SysTick_Config+0x40>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000922:	4b04      	ldr	r3, [pc, #16]	; (8000934 <SysTick_Config+0x40>)
 8000924:	2207      	movs	r2, #7
 8000926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	e000e010 	.word	0xe000e010

08000938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff ff2d 	bl	80007a0 <__NVIC_SetPriorityGrouping>
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b086      	sub	sp, #24
 8000952:	af00      	add	r7, sp, #0
 8000954:	4603      	mov	r3, r0
 8000956:	60b9      	str	r1, [r7, #8]
 8000958:	607a      	str	r2, [r7, #4]
 800095a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000960:	f7ff ff42 	bl	80007e8 <__NVIC_GetPriorityGrouping>
 8000964:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	68b9      	ldr	r1, [r7, #8]
 800096a:	6978      	ldr	r0, [r7, #20]
 800096c:	f7ff ff90 	bl	8000890 <NVIC_EncodePriority>
 8000970:	4602      	mov	r2, r0
 8000972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000976:	4611      	mov	r1, r2
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ff5f 	bl	800083c <__NVIC_SetPriority>
}
 800097e:	bf00      	nop
 8000980:	3718      	adds	r7, #24
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b082      	sub	sp, #8
 800098a:	af00      	add	r7, sp, #0
 800098c:	4603      	mov	r3, r0
 800098e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff ff35 	bl	8000804 <__NVIC_EnableIRQ>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b082      	sub	sp, #8
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff ffa2 	bl	80008f4 <SysTick_Config>
 80009b0:	4603      	mov	r3, r0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80009ba:	b480      	push	{r7}
 80009bc:	b085      	sub	sp, #20
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009c2:	2300      	movs	r3, #0
 80009c4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	d008      	beq.n	80009e4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2204      	movs	r2, #4
 80009d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2200      	movs	r2, #0
 80009dc:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80009e0:	2301      	movs	r3, #1
 80009e2:	e022      	b.n	8000a2a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f022 020e 	bic.w	r2, r2, #14
 80009f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f022 0201 	bic.w	r2, r2, #1
 8000a02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a08:	f003 021c 	and.w	r2, r3, #28
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a10:	2101      	movs	r1, #1
 8000a12:	fa01 f202 	lsl.w	r2, r1, r2
 8000a16:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2200      	movs	r2, #0
 8000a24:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr

08000a34 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d005      	beq.n	8000a58 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2204      	movs	r2, #4
 8000a50:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	73fb      	strb	r3, [r7, #15]
 8000a56:	e029      	b.n	8000aac <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f022 020e 	bic.w	r2, r2, #14
 8000a66:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f022 0201 	bic.w	r2, r2, #1
 8000a76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	f003 021c 	and.w	r2, r3, #28
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a84:	2101      	movs	r1, #1
 8000a86:	fa01 f202 	lsl.w	r2, r1, r2
 8000a8a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2200      	movs	r2, #0
 8000a98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d003      	beq.n	8000aac <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	4798      	blx	r3
    }
  }
  return status;
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b087      	sub	sp, #28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ace:	e160      	b.n	8000d92 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8000adc:	4013      	ands	r3, r2
 8000ade:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	f000 8152 	beq.w	8000d8c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f003 0303 	and.w	r3, r3, #3
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d005      	beq.n	8000b00 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000afc:	2b02      	cmp	r3, #2
 8000afe:	d130      	bne.n	8000b62 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	2203      	movs	r2, #3
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	43db      	mvns	r3, r3
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4013      	ands	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	68da      	ldr	r2, [r3, #12]
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000b36:	2201      	movs	r2, #1
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	4013      	ands	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	091b      	lsrs	r3, r3, #4
 8000b4c:	f003 0201 	and.w	r2, r3, #1
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f003 0303 	and.w	r3, r3, #3
 8000b6a:	2b03      	cmp	r3, #3
 8000b6c:	d017      	beq.n	8000b9e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	2203      	movs	r2, #3
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	4013      	ands	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	689a      	ldr	r2, [r3, #8]
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f003 0303 	and.w	r3, r3, #3
 8000ba6:	2b02      	cmp	r3, #2
 8000ba8:	d123      	bne.n	8000bf2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	08da      	lsrs	r2, r3, #3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	3208      	adds	r2, #8
 8000bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bb6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	220f      	movs	r2, #15
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	691a      	ldr	r2, [r3, #16]
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	f003 0307 	and.w	r3, r3, #7
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	08da      	lsrs	r2, r3, #3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3208      	adds	r2, #8
 8000bec:	6939      	ldr	r1, [r7, #16]
 8000bee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43db      	mvns	r3, r3
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	4013      	ands	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f003 0203 	and.w	r2, r3, #3
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	f000 80ac 	beq.w	8000d8c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c34:	4b5e      	ldr	r3, [pc, #376]	; (8000db0 <HAL_GPIO_Init+0x2f8>)
 8000c36:	6a1b      	ldr	r3, [r3, #32]
 8000c38:	4a5d      	ldr	r2, [pc, #372]	; (8000db0 <HAL_GPIO_Init+0x2f8>)
 8000c3a:	f043 0301 	orr.w	r3, r3, #1
 8000c3e:	6213      	str	r3, [r2, #32]
 8000c40:	4b5b      	ldr	r3, [pc, #364]	; (8000db0 <HAL_GPIO_Init+0x2f8>)
 8000c42:	6a1b      	ldr	r3, [r3, #32]
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000c4c:	4a59      	ldr	r2, [pc, #356]	; (8000db4 <HAL_GPIO_Init+0x2fc>)
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	089b      	lsrs	r3, r3, #2
 8000c52:	3302      	adds	r3, #2
 8000c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c58:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	f003 0303 	and.w	r3, r3, #3
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	220f      	movs	r2, #15
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a51      	ldr	r2, [pc, #324]	; (8000db8 <HAL_GPIO_Init+0x300>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d025      	beq.n	8000cc4 <HAL_GPIO_Init+0x20c>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a50      	ldr	r2, [pc, #320]	; (8000dbc <HAL_GPIO_Init+0x304>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d01f      	beq.n	8000cc0 <HAL_GPIO_Init+0x208>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a4f      	ldr	r2, [pc, #316]	; (8000dc0 <HAL_GPIO_Init+0x308>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d019      	beq.n	8000cbc <HAL_GPIO_Init+0x204>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a4e      	ldr	r2, [pc, #312]	; (8000dc4 <HAL_GPIO_Init+0x30c>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d013      	beq.n	8000cb8 <HAL_GPIO_Init+0x200>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a4d      	ldr	r2, [pc, #308]	; (8000dc8 <HAL_GPIO_Init+0x310>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d00d      	beq.n	8000cb4 <HAL_GPIO_Init+0x1fc>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a4c      	ldr	r2, [pc, #304]	; (8000dcc <HAL_GPIO_Init+0x314>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d007      	beq.n	8000cb0 <HAL_GPIO_Init+0x1f8>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a4b      	ldr	r2, [pc, #300]	; (8000dd0 <HAL_GPIO_Init+0x318>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d101      	bne.n	8000cac <HAL_GPIO_Init+0x1f4>
 8000ca8:	2306      	movs	r3, #6
 8000caa:	e00c      	b.n	8000cc6 <HAL_GPIO_Init+0x20e>
 8000cac:	2307      	movs	r3, #7
 8000cae:	e00a      	b.n	8000cc6 <HAL_GPIO_Init+0x20e>
 8000cb0:	2305      	movs	r3, #5
 8000cb2:	e008      	b.n	8000cc6 <HAL_GPIO_Init+0x20e>
 8000cb4:	2304      	movs	r3, #4
 8000cb6:	e006      	b.n	8000cc6 <HAL_GPIO_Init+0x20e>
 8000cb8:	2303      	movs	r3, #3
 8000cba:	e004      	b.n	8000cc6 <HAL_GPIO_Init+0x20e>
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	e002      	b.n	8000cc6 <HAL_GPIO_Init+0x20e>
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e000      	b.n	8000cc6 <HAL_GPIO_Init+0x20e>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	f002 0203 	and.w	r2, r2, #3
 8000ccc:	0092      	lsls	r2, r2, #2
 8000cce:	4093      	lsls	r3, r2
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000cd6:	4937      	ldr	r1, [pc, #220]	; (8000db4 <HAL_GPIO_Init+0x2fc>)
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	089b      	lsrs	r3, r3, #2
 8000cdc:	3302      	adds	r3, #2
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ce4:	4b3b      	ldr	r3, [pc, #236]	; (8000dd4 <HAL_GPIO_Init+0x31c>)
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	43db      	mvns	r3, r3
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d003      	beq.n	8000d08 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d08:	4a32      	ldr	r2, [pc, #200]	; (8000dd4 <HAL_GPIO_Init+0x31c>)
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d0e:	4b31      	ldr	r3, [pc, #196]	; (8000dd4 <HAL_GPIO_Init+0x31c>)
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	43db      	mvns	r3, r3
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d003      	beq.n	8000d32 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d32:	4a28      	ldr	r2, [pc, #160]	; (8000dd4 <HAL_GPIO_Init+0x31c>)
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d38:	4b26      	ldr	r3, [pc, #152]	; (8000dd4 <HAL_GPIO_Init+0x31c>)
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	43db      	mvns	r3, r3
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d003      	beq.n	8000d5c <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d5c:	4a1d      	ldr	r2, [pc, #116]	; (8000dd4 <HAL_GPIO_Init+0x31c>)
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d62:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <HAL_GPIO_Init+0x31c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d003      	beq.n	8000d86 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d86:	4a13      	ldr	r2, [pc, #76]	; (8000dd4 <HAL_GPIO_Init+0x31c>)
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	fa22 f303 	lsr.w	r3, r2, r3
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	f47f ae97 	bne.w	8000ad0 <HAL_GPIO_Init+0x18>
  }
}
 8000da2:	bf00      	nop
 8000da4:	bf00      	nop
 8000da6:	371c      	adds	r7, #28
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40010000 	.word	0x40010000
 8000db8:	40020000 	.word	0x40020000
 8000dbc:	40020400 	.word	0x40020400
 8000dc0:	40020800 	.word	0x40020800
 8000dc4:	40020c00 	.word	0x40020c00
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	40021400 	.word	0x40021400
 8000dd0:	40021800 	.word	0x40021800
 8000dd4:	40010400 	.word	0x40010400

08000dd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	460b      	mov	r3, r1
 8000de2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	691a      	ldr	r2, [r3, #16]
 8000de8:	887b      	ldrh	r3, [r7, #2]
 8000dea:	4013      	ands	r3, r2
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d002      	beq.n	8000df6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000df0:	2301      	movs	r3, #1
 8000df2:	73fb      	strb	r3, [r7, #15]
 8000df4:	e001      	b.n	8000dfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000df6:	2300      	movs	r3, #0
 8000df8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr

08000e06 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b083      	sub	sp, #12
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
 8000e0e:	460b      	mov	r3, r1
 8000e10:	807b      	strh	r3, [r7, #2]
 8000e12:	4613      	mov	r3, r2
 8000e14:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e16:	787b      	ldrb	r3, [r7, #1]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d003      	beq.n	8000e24 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e1c:	887a      	ldrh	r2, [r7, #2]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000e22:	e003      	b.n	8000e2c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000e24:	887b      	ldrh	r3, [r7, #2]
 8000e26:	041a      	lsls	r2, r3, #16
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	619a      	str	r2, [r3, #24]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr
	...

08000e38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d101      	bne.n	8000e4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e31d      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e4a:	4b94      	ldr	r3, [pc, #592]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	f003 030c 	and.w	r3, r3, #12
 8000e52:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e54:	4b91      	ldr	r3, [pc, #580]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e5c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d07b      	beq.n	8000f62 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	2b08      	cmp	r3, #8
 8000e6e:	d006      	beq.n	8000e7e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	2b0c      	cmp	r3, #12
 8000e74:	d10f      	bne.n	8000e96 <HAL_RCC_OscConfig+0x5e>
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e7c:	d10b      	bne.n	8000e96 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e7e:	4b87      	ldr	r3, [pc, #540]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d06a      	beq.n	8000f60 <HAL_RCC_OscConfig+0x128>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d166      	bne.n	8000f60 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e2f7      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d106      	bne.n	8000eac <HAL_RCC_OscConfig+0x74>
 8000e9e:	4b7f      	ldr	r3, [pc, #508]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a7e      	ldr	r2, [pc, #504]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ea8:	6013      	str	r3, [r2, #0]
 8000eaa:	e02d      	b.n	8000f08 <HAL_RCC_OscConfig+0xd0>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d10c      	bne.n	8000ece <HAL_RCC_OscConfig+0x96>
 8000eb4:	4b79      	ldr	r3, [pc, #484]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a78      	ldr	r2, [pc, #480]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ebe:	6013      	str	r3, [r2, #0]
 8000ec0:	4b76      	ldr	r3, [pc, #472]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a75      	ldr	r2, [pc, #468]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	e01c      	b.n	8000f08 <HAL_RCC_OscConfig+0xd0>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	2b05      	cmp	r3, #5
 8000ed4:	d10c      	bne.n	8000ef0 <HAL_RCC_OscConfig+0xb8>
 8000ed6:	4b71      	ldr	r3, [pc, #452]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a70      	ldr	r2, [pc, #448]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	4b6e      	ldr	r3, [pc, #440]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a6d      	ldr	r2, [pc, #436]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eec:	6013      	str	r3, [r2, #0]
 8000eee:	e00b      	b.n	8000f08 <HAL_RCC_OscConfig+0xd0>
 8000ef0:	4b6a      	ldr	r3, [pc, #424]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a69      	ldr	r2, [pc, #420]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	4b67      	ldr	r3, [pc, #412]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a66      	ldr	r2, [pc, #408]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d013      	beq.n	8000f38 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f10:	f7ff fc1a 	bl	8000748 <HAL_GetTick>
 8000f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f16:	e008      	b.n	8000f2a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f18:	f7ff fc16 	bl	8000748 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b64      	cmp	r3, #100	; 0x64
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e2ad      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f2a:	4b5c      	ldr	r3, [pc, #368]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0f0      	beq.n	8000f18 <HAL_RCC_OscConfig+0xe0>
 8000f36:	e014      	b.n	8000f62 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f38:	f7ff fc06 	bl	8000748 <HAL_GetTick>
 8000f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f3e:	e008      	b.n	8000f52 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f40:	f7ff fc02 	bl	8000748 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b64      	cmp	r3, #100	; 0x64
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e299      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f52:	4b52      	ldr	r3, [pc, #328]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1f0      	bne.n	8000f40 <HAL_RCC_OscConfig+0x108>
 8000f5e:	e000      	b.n	8000f62 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d05a      	beq.n	8001024 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	2b04      	cmp	r3, #4
 8000f72:	d005      	beq.n	8000f80 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	2b0c      	cmp	r3, #12
 8000f78:	d119      	bne.n	8000fae <HAL_RCC_OscConfig+0x176>
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d116      	bne.n	8000fae <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f80:	4b46      	ldr	r3, [pc, #280]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d005      	beq.n	8000f98 <HAL_RCC_OscConfig+0x160>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d001      	beq.n	8000f98 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e276      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f98:	4b40      	ldr	r3, [pc, #256]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	021b      	lsls	r3, r3, #8
 8000fa6:	493d      	ldr	r1, [pc, #244]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fac:	e03a      	b.n	8001024 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d020      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fb6:	4b3a      	ldr	r3, [pc, #232]	; (80010a0 <HAL_RCC_OscConfig+0x268>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbc:	f7ff fbc4 	bl	8000748 <HAL_GetTick>
 8000fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000fc2:	e008      	b.n	8000fd6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fc4:	f7ff fbc0 	bl	8000748 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e257      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000fd6:	4b31      	ldr	r3, [pc, #196]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d0f0      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe2:	4b2e      	ldr	r3, [pc, #184]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	691b      	ldr	r3, [r3, #16]
 8000fee:	021b      	lsls	r3, r3, #8
 8000ff0:	492a      	ldr	r1, [pc, #168]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	604b      	str	r3, [r1, #4]
 8000ff6:	e015      	b.n	8001024 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ff8:	4b29      	ldr	r3, [pc, #164]	; (80010a0 <HAL_RCC_OscConfig+0x268>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffe:	f7ff fba3 	bl	8000748 <HAL_GetTick>
 8001002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001004:	e008      	b.n	8001018 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001006:	f7ff fb9f 	bl	8000748 <HAL_GetTick>
 800100a:	4602      	mov	r2, r0
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	2b02      	cmp	r3, #2
 8001012:	d901      	bls.n	8001018 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001014:	2303      	movs	r3, #3
 8001016:	e236      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001018:	4b20      	ldr	r3, [pc, #128]	; (800109c <HAL_RCC_OscConfig+0x264>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0302 	and.w	r3, r3, #2
 8001020:	2b00      	cmp	r3, #0
 8001022:	d1f0      	bne.n	8001006 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0310 	and.w	r3, r3, #16
 800102c:	2b00      	cmp	r3, #0
 800102e:	f000 80b8 	beq.w	80011a2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d170      	bne.n	800111a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001038:	4b18      	ldr	r3, [pc, #96]	; (800109c <HAL_RCC_OscConfig+0x264>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001040:	2b00      	cmp	r3, #0
 8001042:	d005      	beq.n	8001050 <HAL_RCC_OscConfig+0x218>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d101      	bne.n	8001050 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e21a      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a1a      	ldr	r2, [r3, #32]
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800105c:	429a      	cmp	r2, r3
 800105e:	d921      	bls.n	80010a4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	4618      	mov	r0, r3
 8001066:	f000 fc3b 	bl	80018e0 <RCC_SetFlashLatencyFromMSIRange>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e208      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a1b      	ldr	r3, [r3, #32]
 8001080:	4906      	ldr	r1, [pc, #24]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8001082:	4313      	orrs	r3, r2
 8001084:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001086:	4b05      	ldr	r3, [pc, #20]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	061b      	lsls	r3, r3, #24
 8001094:	4901      	ldr	r1, [pc, #4]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8001096:	4313      	orrs	r3, r2
 8001098:	604b      	str	r3, [r1, #4]
 800109a:	e020      	b.n	80010de <HAL_RCC_OscConfig+0x2a6>
 800109c:	40023800 	.word	0x40023800
 80010a0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010a4:	4b99      	ldr	r3, [pc, #612]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a1b      	ldr	r3, [r3, #32]
 80010b0:	4996      	ldr	r1, [pc, #600]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80010b2:	4313      	orrs	r3, r2
 80010b4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010b6:	4b95      	ldr	r3, [pc, #596]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	061b      	lsls	r3, r3, #24
 80010c4:	4991      	ldr	r1, [pc, #580]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80010c6:	4313      	orrs	r3, r2
 80010c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a1b      	ldr	r3, [r3, #32]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 fc06 	bl	80018e0 <RCC_SetFlashLatencyFromMSIRange>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e1d3      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a1b      	ldr	r3, [r3, #32]
 80010e2:	0b5b      	lsrs	r3, r3, #13
 80010e4:	3301      	adds	r3, #1
 80010e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80010ee:	4a87      	ldr	r2, [pc, #540]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80010f0:	6892      	ldr	r2, [r2, #8]
 80010f2:	0912      	lsrs	r2, r2, #4
 80010f4:	f002 020f 	and.w	r2, r2, #15
 80010f8:	4985      	ldr	r1, [pc, #532]	; (8001310 <HAL_RCC_OscConfig+0x4d8>)
 80010fa:	5c8a      	ldrb	r2, [r1, r2]
 80010fc:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80010fe:	4a85      	ldr	r2, [pc, #532]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 8001100:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001102:	4b85      	ldr	r3, [pc, #532]	; (8001318 <HAL_RCC_OscConfig+0x4e0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fad2 	bl	80006b0 <HAL_InitTick>
 800110c:	4603      	mov	r3, r0
 800110e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d045      	beq.n	80011a2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	e1b5      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d029      	beq.n	8001176 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001122:	4b7e      	ldr	r3, [pc, #504]	; (800131c <HAL_RCC_OscConfig+0x4e4>)
 8001124:	2201      	movs	r2, #1
 8001126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001128:	f7ff fb0e 	bl	8000748 <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001130:	f7ff fb0a 	bl	8000748 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e1a1      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001142:	4b72      	ldr	r3, [pc, #456]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0f0      	beq.n	8001130 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800114e:	4b6f      	ldr	r3, [pc, #444]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a1b      	ldr	r3, [r3, #32]
 800115a:	496c      	ldr	r1, [pc, #432]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 800115c:	4313      	orrs	r3, r2
 800115e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001160:	4b6a      	ldr	r3, [pc, #424]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69db      	ldr	r3, [r3, #28]
 800116c:	061b      	lsls	r3, r3, #24
 800116e:	4967      	ldr	r1, [pc, #412]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 8001170:	4313      	orrs	r3, r2
 8001172:	604b      	str	r3, [r1, #4]
 8001174:	e015      	b.n	80011a2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001176:	4b69      	ldr	r3, [pc, #420]	; (800131c <HAL_RCC_OscConfig+0x4e4>)
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117c:	f7ff fae4 	bl	8000748 <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001184:	f7ff fae0 	bl	8000748 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e177      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001196:	4b5d      	ldr	r3, [pc, #372]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f0      	bne.n	8001184 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d030      	beq.n	8001210 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d016      	beq.n	80011e4 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011b6:	4b5a      	ldr	r3, [pc, #360]	; (8001320 <HAL_RCC_OscConfig+0x4e8>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011bc:	f7ff fac4 	bl	8000748 <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011c2:	e008      	b.n	80011d6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011c4:	f7ff fac0 	bl	8000748 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e157      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011d6:	4b4d      	ldr	r3, [pc, #308]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80011d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0f0      	beq.n	80011c4 <HAL_RCC_OscConfig+0x38c>
 80011e2:	e015      	b.n	8001210 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011e4:	4b4e      	ldr	r3, [pc, #312]	; (8001320 <HAL_RCC_OscConfig+0x4e8>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ea:	f7ff faad 	bl	8000748 <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011f2:	f7ff faa9 	bl	8000748 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e140      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001204:	4b41      	ldr	r3, [pc, #260]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 8001206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1f0      	bne.n	80011f2 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	2b00      	cmp	r3, #0
 800121a:	f000 80b5 	beq.w	8001388 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800121e:	2300      	movs	r3, #0
 8001220:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001222:	4b3a      	ldr	r3, [pc, #232]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 8001224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d10d      	bne.n	800124a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800122e:	4b37      	ldr	r3, [pc, #220]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 8001230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001232:	4a36      	ldr	r2, [pc, #216]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001238:	6253      	str	r3, [r2, #36]	; 0x24
 800123a:	4b34      	ldr	r3, [pc, #208]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 800123c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001246:	2301      	movs	r3, #1
 8001248:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800124a:	4b36      	ldr	r3, [pc, #216]	; (8001324 <HAL_RCC_OscConfig+0x4ec>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001252:	2b00      	cmp	r3, #0
 8001254:	d118      	bne.n	8001288 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001256:	4b33      	ldr	r3, [pc, #204]	; (8001324 <HAL_RCC_OscConfig+0x4ec>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a32      	ldr	r2, [pc, #200]	; (8001324 <HAL_RCC_OscConfig+0x4ec>)
 800125c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001262:	f7ff fa71 	bl	8000748 <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800126a:	f7ff fa6d 	bl	8000748 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b64      	cmp	r3, #100	; 0x64
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e104      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800127c:	4b29      	ldr	r3, [pc, #164]	; (8001324 <HAL_RCC_OscConfig+0x4ec>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0f0      	beq.n	800126a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d106      	bne.n	800129e <HAL_RCC_OscConfig+0x466>
 8001290:	4b1e      	ldr	r3, [pc, #120]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 8001292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001294:	4a1d      	ldr	r2, [pc, #116]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 8001296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129a:	6353      	str	r3, [r2, #52]	; 0x34
 800129c:	e02d      	b.n	80012fa <HAL_RCC_OscConfig+0x4c2>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d10c      	bne.n	80012c0 <HAL_RCC_OscConfig+0x488>
 80012a6:	4b19      	ldr	r3, [pc, #100]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80012a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012aa:	4a18      	ldr	r2, [pc, #96]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80012ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012b0:	6353      	str	r3, [r2, #52]	; 0x34
 80012b2:	4b16      	ldr	r3, [pc, #88]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80012b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012b6:	4a15      	ldr	r2, [pc, #84]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80012b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80012bc:	6353      	str	r3, [r2, #52]	; 0x34
 80012be:	e01c      	b.n	80012fa <HAL_RCC_OscConfig+0x4c2>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	2b05      	cmp	r3, #5
 80012c6:	d10c      	bne.n	80012e2 <HAL_RCC_OscConfig+0x4aa>
 80012c8:	4b10      	ldr	r3, [pc, #64]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80012ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012cc:	4a0f      	ldr	r2, [pc, #60]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80012ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012d2:	6353      	str	r3, [r2, #52]	; 0x34
 80012d4:	4b0d      	ldr	r3, [pc, #52]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80012d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d8:	4a0c      	ldr	r2, [pc, #48]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80012da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012de:	6353      	str	r3, [r2, #52]	; 0x34
 80012e0:	e00b      	b.n	80012fa <HAL_RCC_OscConfig+0x4c2>
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80012e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e6:	4a09      	ldr	r2, [pc, #36]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80012e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012ec:	6353      	str	r3, [r2, #52]	; 0x34
 80012ee:	4b07      	ldr	r3, [pc, #28]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80012f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f2:	4a06      	ldr	r2, [pc, #24]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80012f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80012f8:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d024      	beq.n	800134c <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001302:	f7ff fa21 	bl	8000748 <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001308:	e019      	b.n	800133e <HAL_RCC_OscConfig+0x506>
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800
 8001310:	08003cc8 	.word	0x08003cc8
 8001314:	20000000 	.word	0x20000000
 8001318:	20000004 	.word	0x20000004
 800131c:	42470020 	.word	0x42470020
 8001320:	42470680 	.word	0x42470680
 8001324:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001328:	f7ff fa0e 	bl	8000748 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	f241 3288 	movw	r2, #5000	; 0x1388
 8001336:	4293      	cmp	r3, r2
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e0a3      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800133e:	4b54      	ldr	r3, [pc, #336]	; (8001490 <HAL_RCC_OscConfig+0x658>)
 8001340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001342:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001346:	2b00      	cmp	r3, #0
 8001348:	d0ee      	beq.n	8001328 <HAL_RCC_OscConfig+0x4f0>
 800134a:	e014      	b.n	8001376 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800134c:	f7ff f9fc 	bl	8000748 <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001352:	e00a      	b.n	800136a <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001354:	f7ff f9f8 	bl	8000748 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001362:	4293      	cmp	r3, r2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e08d      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800136a:	4b49      	ldr	r3, [pc, #292]	; (8001490 <HAL_RCC_OscConfig+0x658>)
 800136c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800136e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1ee      	bne.n	8001354 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001376:	7ffb      	ldrb	r3, [r7, #31]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d105      	bne.n	8001388 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800137c:	4b44      	ldr	r3, [pc, #272]	; (8001490 <HAL_RCC_OscConfig+0x658>)
 800137e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001380:	4a43      	ldr	r2, [pc, #268]	; (8001490 <HAL_RCC_OscConfig+0x658>)
 8001382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001386:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138c:	2b00      	cmp	r3, #0
 800138e:	d079      	beq.n	8001484 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	2b0c      	cmp	r3, #12
 8001394:	d056      	beq.n	8001444 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139a:	2b02      	cmp	r3, #2
 800139c:	d13b      	bne.n	8001416 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800139e:	4b3d      	ldr	r3, [pc, #244]	; (8001494 <HAL_RCC_OscConfig+0x65c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff f9d0 	bl	8000748 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ac:	f7ff f9cc 	bl	8000748 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e063      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80013be:	4b34      	ldr	r3, [pc, #208]	; (8001490 <HAL_RCC_OscConfig+0x658>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013ca:	4b31      	ldr	r3, [pc, #196]	; (8001490 <HAL_RCC_OscConfig+0x658>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013da:	4319      	orrs	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e0:	430b      	orrs	r3, r1
 80013e2:	492b      	ldr	r1, [pc, #172]	; (8001490 <HAL_RCC_OscConfig+0x658>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013e8:	4b2a      	ldr	r3, [pc, #168]	; (8001494 <HAL_RCC_OscConfig+0x65c>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ee:	f7ff f9ab 	bl	8000748 <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f6:	f7ff f9a7 	bl	8000748 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e03e      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001408:	4b21      	ldr	r3, [pc, #132]	; (8001490 <HAL_RCC_OscConfig+0x658>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0f0      	beq.n	80013f6 <HAL_RCC_OscConfig+0x5be>
 8001414:	e036      	b.n	8001484 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001416:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <HAL_RCC_OscConfig+0x65c>)
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141c:	f7ff f994 	bl	8000748 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001424:	f7ff f990 	bl	8000748 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e027      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001436:	4b16      	ldr	r3, [pc, #88]	; (8001490 <HAL_RCC_OscConfig+0x658>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f0      	bne.n	8001424 <HAL_RCC_OscConfig+0x5ec>
 8001442:	e01f      	b.n	8001484 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001448:	2b01      	cmp	r3, #1
 800144a:	d101      	bne.n	8001450 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e01a      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001450:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <HAL_RCC_OscConfig+0x658>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001460:	429a      	cmp	r2, r3
 8001462:	d10d      	bne.n	8001480 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800146e:	429a      	cmp	r2, r3
 8001470:	d106      	bne.n	8001480 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800147c:	429a      	cmp	r2, r3
 800147e:	d001      	beq.n	8001484 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e000      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3720      	adds	r7, #32
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	42470060 	.word	0x42470060

08001498 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e11a      	b.n	80016e2 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014ac:	4b8f      	ldr	r3, [pc, #572]	; (80016ec <HAL_RCC_ClockConfig+0x254>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d919      	bls.n	80014ee <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d105      	bne.n	80014cc <HAL_RCC_ClockConfig+0x34>
 80014c0:	4b8a      	ldr	r3, [pc, #552]	; (80016ec <HAL_RCC_ClockConfig+0x254>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a89      	ldr	r2, [pc, #548]	; (80016ec <HAL_RCC_ClockConfig+0x254>)
 80014c6:	f043 0304 	orr.w	r3, r3, #4
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b87      	ldr	r3, [pc, #540]	; (80016ec <HAL_RCC_ClockConfig+0x254>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f023 0201 	bic.w	r2, r3, #1
 80014d4:	4985      	ldr	r1, [pc, #532]	; (80016ec <HAL_RCC_ClockConfig+0x254>)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	4313      	orrs	r3, r2
 80014da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014dc:	4b83      	ldr	r3, [pc, #524]	; (80016ec <HAL_RCC_ClockConfig+0x254>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d001      	beq.n	80014ee <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e0f9      	b.n	80016e2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d008      	beq.n	800150c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014fa:	4b7d      	ldr	r3, [pc, #500]	; (80016f0 <HAL_RCC_ClockConfig+0x258>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	497a      	ldr	r1, [pc, #488]	; (80016f0 <HAL_RCC_ClockConfig+0x258>)
 8001508:	4313      	orrs	r3, r2
 800150a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 808e 	beq.w	8001636 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b02      	cmp	r3, #2
 8001520:	d107      	bne.n	8001532 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001522:	4b73      	ldr	r3, [pc, #460]	; (80016f0 <HAL_RCC_ClockConfig+0x258>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d121      	bne.n	8001572 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e0d7      	b.n	80016e2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b03      	cmp	r3, #3
 8001538:	d107      	bne.n	800154a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800153a:	4b6d      	ldr	r3, [pc, #436]	; (80016f0 <HAL_RCC_ClockConfig+0x258>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d115      	bne.n	8001572 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e0cb      	b.n	80016e2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d107      	bne.n	8001562 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001552:	4b67      	ldr	r3, [pc, #412]	; (80016f0 <HAL_RCC_ClockConfig+0x258>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d109      	bne.n	8001572 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e0bf      	b.n	80016e2 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001562:	4b63      	ldr	r3, [pc, #396]	; (80016f0 <HAL_RCC_ClockConfig+0x258>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e0b7      	b.n	80016e2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001572:	4b5f      	ldr	r3, [pc, #380]	; (80016f0 <HAL_RCC_ClockConfig+0x258>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f023 0203 	bic.w	r2, r3, #3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	495c      	ldr	r1, [pc, #368]	; (80016f0 <HAL_RCC_ClockConfig+0x258>)
 8001580:	4313      	orrs	r3, r2
 8001582:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001584:	f7ff f8e0 	bl	8000748 <HAL_GetTick>
 8001588:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d112      	bne.n	80015b8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001592:	e00a      	b.n	80015aa <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001594:	f7ff f8d8 	bl	8000748 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e09b      	b.n	80016e2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015aa:	4b51      	ldr	r3, [pc, #324]	; (80016f0 <HAL_RCC_ClockConfig+0x258>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 030c 	and.w	r3, r3, #12
 80015b2:	2b08      	cmp	r3, #8
 80015b4:	d1ee      	bne.n	8001594 <HAL_RCC_ClockConfig+0xfc>
 80015b6:	e03e      	b.n	8001636 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b03      	cmp	r3, #3
 80015be:	d112      	bne.n	80015e6 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015c0:	e00a      	b.n	80015d8 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c2:	f7ff f8c1 	bl	8000748 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e084      	b.n	80016e2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015d8:	4b45      	ldr	r3, [pc, #276]	; (80016f0 <HAL_RCC_ClockConfig+0x258>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 030c 	and.w	r3, r3, #12
 80015e0:	2b0c      	cmp	r3, #12
 80015e2:	d1ee      	bne.n	80015c2 <HAL_RCC_ClockConfig+0x12a>
 80015e4:	e027      	b.n	8001636 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d11d      	bne.n	800162a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80015ee:	e00a      	b.n	8001606 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f0:	f7ff f8aa 	bl	8000748 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fe:	4293      	cmp	r3, r2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e06d      	b.n	80016e2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001606:	4b3a      	ldr	r3, [pc, #232]	; (80016f0 <HAL_RCC_ClockConfig+0x258>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 030c 	and.w	r3, r3, #12
 800160e:	2b04      	cmp	r3, #4
 8001610:	d1ee      	bne.n	80015f0 <HAL_RCC_ClockConfig+0x158>
 8001612:	e010      	b.n	8001636 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001614:	f7ff f898 	bl	8000748 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001622:	4293      	cmp	r3, r2
 8001624:	d901      	bls.n	800162a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e05b      	b.n	80016e2 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800162a:	4b31      	ldr	r3, [pc, #196]	; (80016f0 <HAL_RCC_ClockConfig+0x258>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 030c 	and.w	r3, r3, #12
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1ee      	bne.n	8001614 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001636:	4b2d      	ldr	r3, [pc, #180]	; (80016ec <HAL_RCC_ClockConfig+0x254>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	429a      	cmp	r2, r3
 8001642:	d219      	bcs.n	8001678 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d105      	bne.n	8001656 <HAL_RCC_ClockConfig+0x1be>
 800164a:	4b28      	ldr	r3, [pc, #160]	; (80016ec <HAL_RCC_ClockConfig+0x254>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a27      	ldr	r2, [pc, #156]	; (80016ec <HAL_RCC_ClockConfig+0x254>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	4b25      	ldr	r3, [pc, #148]	; (80016ec <HAL_RCC_ClockConfig+0x254>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f023 0201 	bic.w	r2, r3, #1
 800165e:	4923      	ldr	r1, [pc, #140]	; (80016ec <HAL_RCC_ClockConfig+0x254>)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	4313      	orrs	r3, r2
 8001664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001666:	4b21      	ldr	r3, [pc, #132]	; (80016ec <HAL_RCC_ClockConfig+0x254>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	429a      	cmp	r2, r3
 8001672:	d001      	beq.n	8001678 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e034      	b.n	80016e2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	d008      	beq.n	8001696 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001684:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <HAL_RCC_ClockConfig+0x258>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	4917      	ldr	r1, [pc, #92]	; (80016f0 <HAL_RCC_ClockConfig+0x258>)
 8001692:	4313      	orrs	r3, r2
 8001694:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0308 	and.w	r3, r3, #8
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d009      	beq.n	80016b6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <HAL_RCC_ClockConfig+0x258>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	490f      	ldr	r1, [pc, #60]	; (80016f0 <HAL_RCC_ClockConfig+0x258>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016b6:	f000 f823 	bl	8001700 <HAL_RCC_GetSysClockFreq>
 80016ba:	4602      	mov	r2, r0
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <HAL_RCC_ClockConfig+0x258>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	091b      	lsrs	r3, r3, #4
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	490b      	ldr	r1, [pc, #44]	; (80016f4 <HAL_RCC_ClockConfig+0x25c>)
 80016c8:	5ccb      	ldrb	r3, [r1, r3]
 80016ca:	fa22 f303 	lsr.w	r3, r2, r3
 80016ce:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <HAL_RCC_ClockConfig+0x260>)
 80016d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016d2:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <HAL_RCC_ClockConfig+0x264>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe ffea 	bl	80006b0 <HAL_InitTick>
 80016dc:	4603      	mov	r3, r0
 80016de:	72fb      	strb	r3, [r7, #11]

  return status;
 80016e0:	7afb      	ldrb	r3, [r7, #11]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023c00 	.word	0x40023c00
 80016f0:	40023800 	.word	0x40023800
 80016f4:	08003cc8 	.word	0x08003cc8
 80016f8:	20000000 	.word	0x20000000
 80016fc:	20000004 	.word	0x20000004

08001700 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001704:	b08e      	sub	sp, #56	; 0x38
 8001706:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001708:	4b58      	ldr	r3, [pc, #352]	; (800186c <HAL_RCC_GetSysClockFreq+0x16c>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800170e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	2b0c      	cmp	r3, #12
 8001716:	d00d      	beq.n	8001734 <HAL_RCC_GetSysClockFreq+0x34>
 8001718:	2b0c      	cmp	r3, #12
 800171a:	f200 8092 	bhi.w	8001842 <HAL_RCC_GetSysClockFreq+0x142>
 800171e:	2b04      	cmp	r3, #4
 8001720:	d002      	beq.n	8001728 <HAL_RCC_GetSysClockFreq+0x28>
 8001722:	2b08      	cmp	r3, #8
 8001724:	d003      	beq.n	800172e <HAL_RCC_GetSysClockFreq+0x2e>
 8001726:	e08c      	b.n	8001842 <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001728:	4b51      	ldr	r3, [pc, #324]	; (8001870 <HAL_RCC_GetSysClockFreq+0x170>)
 800172a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800172c:	e097      	b.n	800185e <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800172e:	4b51      	ldr	r3, [pc, #324]	; (8001874 <HAL_RCC_GetSysClockFreq+0x174>)
 8001730:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001732:	e094      	b.n	800185e <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001736:	0c9b      	lsrs	r3, r3, #18
 8001738:	f003 020f 	and.w	r2, r3, #15
 800173c:	4b4e      	ldr	r3, [pc, #312]	; (8001878 <HAL_RCC_GetSysClockFreq+0x178>)
 800173e:	5c9b      	ldrb	r3, [r3, r2]
 8001740:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001744:	0d9b      	lsrs	r3, r3, #22
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	3301      	adds	r3, #1
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800174e:	4b47      	ldr	r3, [pc, #284]	; (800186c <HAL_RCC_GetSysClockFreq+0x16c>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d021      	beq.n	800179e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800175a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800175c:	2200      	movs	r2, #0
 800175e:	61bb      	str	r3, [r7, #24]
 8001760:	61fa      	str	r2, [r7, #28]
 8001762:	4b44      	ldr	r3, [pc, #272]	; (8001874 <HAL_RCC_GetSysClockFreq+0x174>)
 8001764:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001768:	464a      	mov	r2, r9
 800176a:	fb03 f202 	mul.w	r2, r3, r2
 800176e:	2300      	movs	r3, #0
 8001770:	4644      	mov	r4, r8
 8001772:	fb04 f303 	mul.w	r3, r4, r3
 8001776:	4413      	add	r3, r2
 8001778:	4a3e      	ldr	r2, [pc, #248]	; (8001874 <HAL_RCC_GetSysClockFreq+0x174>)
 800177a:	4644      	mov	r4, r8
 800177c:	fba4 0102 	umull	r0, r1, r4, r2
 8001780:	440b      	add	r3, r1
 8001782:	4619      	mov	r1, r3
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	2200      	movs	r2, #0
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	617a      	str	r2, [r7, #20]
 800178c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001790:	f7fe fcf4 	bl	800017c <__aeabi_uldivmod>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4613      	mov	r3, r2
 800179a:	637b      	str	r3, [r7, #52]	; 0x34
 800179c:	e04e      	b.n	800183c <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800179e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a0:	2200      	movs	r2, #0
 80017a2:	469a      	mov	sl, r3
 80017a4:	4693      	mov	fp, r2
 80017a6:	4652      	mov	r2, sl
 80017a8:	465b      	mov	r3, fp
 80017aa:	f04f 0000 	mov.w	r0, #0
 80017ae:	f04f 0100 	mov.w	r1, #0
 80017b2:	0159      	lsls	r1, r3, #5
 80017b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017b8:	0150      	lsls	r0, r2, #5
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	ebb2 080a 	subs.w	r8, r2, sl
 80017c2:	eb63 090b 	sbc.w	r9, r3, fp
 80017c6:	f04f 0200 	mov.w	r2, #0
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80017d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80017d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80017da:	ebb2 0408 	subs.w	r4, r2, r8
 80017de:	eb63 0509 	sbc.w	r5, r3, r9
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	00eb      	lsls	r3, r5, #3
 80017ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017f0:	00e2      	lsls	r2, r4, #3
 80017f2:	4614      	mov	r4, r2
 80017f4:	461d      	mov	r5, r3
 80017f6:	eb14 030a 	adds.w	r3, r4, sl
 80017fa:	603b      	str	r3, [r7, #0]
 80017fc:	eb45 030b 	adc.w	r3, r5, fp
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800180e:	4629      	mov	r1, r5
 8001810:	028b      	lsls	r3, r1, #10
 8001812:	4620      	mov	r0, r4
 8001814:	4629      	mov	r1, r5
 8001816:	4604      	mov	r4, r0
 8001818:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800181c:	4601      	mov	r1, r0
 800181e:	028a      	lsls	r2, r1, #10
 8001820:	4610      	mov	r0, r2
 8001822:	4619      	mov	r1, r3
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	2200      	movs	r2, #0
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	60fa      	str	r2, [r7, #12]
 800182c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001830:	f7fe fca4 	bl	800017c <__aeabi_uldivmod>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4613      	mov	r3, r2
 800183a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 800183c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800183e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001840:	e00d      	b.n	800185e <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_RCC_GetSysClockFreq+0x16c>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	0b5b      	lsrs	r3, r3, #13
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800184e:	6a3b      	ldr	r3, [r7, #32]
 8001850:	3301      	adds	r3, #1
 8001852:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800185c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800185e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001860:	4618      	mov	r0, r3
 8001862:	3738      	adds	r7, #56	; 0x38
 8001864:	46bd      	mov	sp, r7
 8001866:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800
 8001870:	00f42400 	.word	0x00f42400
 8001874:	016e3600 	.word	0x016e3600
 8001878:	08003cbc 	.word	0x08003cbc

0800187c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001880:	4b02      	ldr	r3, [pc, #8]	; (800188c <HAL_RCC_GetHCLKFreq+0x10>)
 8001882:	681b      	ldr	r3, [r3, #0]
}
 8001884:	4618      	mov	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr
 800188c:	20000000 	.word	0x20000000

08001890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001894:	f7ff fff2 	bl	800187c <HAL_RCC_GetHCLKFreq>
 8001898:	4602      	mov	r2, r0
 800189a:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	0a1b      	lsrs	r3, r3, #8
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	4903      	ldr	r1, [pc, #12]	; (80018b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018a6:	5ccb      	ldrb	r3, [r1, r3]
 80018a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40023800 	.word	0x40023800
 80018b4:	08003cd8 	.word	0x08003cd8

080018b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018bc:	f7ff ffde 	bl	800187c <HAL_RCC_GetHCLKFreq>
 80018c0:	4602      	mov	r2, r0
 80018c2:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	0adb      	lsrs	r3, r3, #11
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	4903      	ldr	r1, [pc, #12]	; (80018dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80018ce:	5ccb      	ldrb	r3, [r1, r3]
 80018d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40023800 	.word	0x40023800
 80018dc:	08003cd8 	.word	0x08003cd8

080018e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80018e8:	2300      	movs	r3, #0
 80018ea:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80018ec:	4b29      	ldr	r3, [pc, #164]	; (8001994 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d12c      	bne.n	8001952 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80018f8:	4b26      	ldr	r3, [pc, #152]	; (8001994 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80018fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d005      	beq.n	8001910 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001904:	4b24      	ldr	r3, [pc, #144]	; (8001998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	e016      	b.n	800193e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001910:	4b20      	ldr	r3, [pc, #128]	; (8001994 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001914:	4a1f      	ldr	r2, [pc, #124]	; (8001994 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800191a:	6253      	str	r3, [r2, #36]	; 0x24
 800191c:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001928:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001930:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001932:	4b18      	ldr	r3, [pc, #96]	; (8001994 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	4a17      	ldr	r2, [pc, #92]	; (8001994 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800193c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001944:	d105      	bne.n	8001952 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800194c:	d101      	bne.n	8001952 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800194e:	2301      	movs	r3, #1
 8001950:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d105      	bne.n	8001964 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001958:	4b10      	ldr	r3, [pc, #64]	; (800199c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0f      	ldr	r2, [pc, #60]	; (800199c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800195e:	f043 0304 	orr.w	r3, r3, #4
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	4b0d      	ldr	r3, [pc, #52]	; (800199c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f023 0201 	bic.w	r2, r3, #1
 800196c:	490b      	ldr	r1, [pc, #44]	; (800199c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	429a      	cmp	r2, r3
 8001980:	d001      	beq.n	8001986 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	371c      	adds	r7, #28
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800
 8001998:	40007000 	.word	0x40007000
 800199c:	40023c00 	.word	0x40023c00

080019a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e042      	b.n	8001a38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d106      	bne.n	80019cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7fe fd86 	bl	80004d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2224      	movs	r2, #36	; 0x24
 80019d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 fcdd 	bl	80023a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	691a      	ldr	r2, [r3, #16]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	695a      	ldr	r2, [r3, #20]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68da      	ldr	r2, [r3, #12]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2220      	movs	r2, #32
 8001a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b20      	cmp	r3, #32
 8001a58:	d112      	bne.n	8001a80 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d002      	beq.n	8001a66 <HAL_UART_Receive_IT+0x26>
 8001a60:	88fb      	ldrh	r3, [r7, #6]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e00b      	b.n	8001a82 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001a70:	88fb      	ldrh	r3, [r7, #6]
 8001a72:	461a      	mov	r2, r3
 8001a74:	68b9      	ldr	r1, [r7, #8]
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f000 fac0 	bl	8001ffc <UART_Start_Receive_IT>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	e000      	b.n	8001a82 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001a80:	2302      	movs	r3, #2
  }
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b0ba      	sub	sp, #232	; 0xe8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001aca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10f      	bne.n	8001af2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ad6:	f003 0320 	and.w	r3, r3, #32
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d009      	beq.n	8001af2 <HAL_UART_IRQHandler+0x66>
 8001ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ae2:	f003 0320 	and.w	r3, r3, #32
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 fb9c 	bl	8002228 <UART_Receive_IT>
      return;
 8001af0:	e25b      	b.n	8001faa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001af2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 80de 	beq.w	8001cb8 <HAL_UART_IRQHandler+0x22c>
 8001afc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d106      	bne.n	8001b16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001b0c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 80d1 	beq.w	8001cb8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00b      	beq.n	8001b3a <HAL_UART_IRQHandler+0xae>
 8001b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d005      	beq.n	8001b3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b32:	f043 0201 	orr.w	r2, r3, #1
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00b      	beq.n	8001b5e <HAL_UART_IRQHandler+0xd2>
 8001b46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d005      	beq.n	8001b5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	f043 0202 	orr.w	r2, r3, #2
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00b      	beq.n	8001b82 <HAL_UART_IRQHandler+0xf6>
 8001b6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d005      	beq.n	8001b82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	f043 0204 	orr.w	r2, r3, #4
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d011      	beq.n	8001bb2 <HAL_UART_IRQHandler+0x126>
 8001b8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001b92:	f003 0320 	and.w	r3, r3, #32
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d105      	bne.n	8001ba6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001b9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d005      	beq.n	8001bb2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	f043 0208 	orr.w	r2, r3, #8
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 81f2 	beq.w	8001fa0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bc0:	f003 0320 	and.w	r3, r3, #32
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d008      	beq.n	8001bda <HAL_UART_IRQHandler+0x14e>
 8001bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001bcc:	f003 0320 	and.w	r3, r3, #32
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d002      	beq.n	8001bda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 fb27 	bl	8002228 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be4:	2b40      	cmp	r3, #64	; 0x40
 8001be6:	bf0c      	ite	eq
 8001be8:	2301      	moveq	r3, #1
 8001bea:	2300      	movne	r3, #0
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	f003 0308 	and.w	r3, r3, #8
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d103      	bne.n	8001c06 <HAL_UART_IRQHandler+0x17a>
 8001bfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d04f      	beq.n	8001ca6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 fa31 	bl	800206e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c16:	2b40      	cmp	r3, #64	; 0x40
 8001c18:	d141      	bne.n	8001c9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	3314      	adds	r3, #20
 8001c20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c28:	e853 3f00 	ldrex	r3, [r3]
 8001c2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001c30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	3314      	adds	r3, #20
 8001c42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001c46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001c4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001c52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001c56:	e841 2300 	strex	r3, r2, [r1]
 8001c5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001c5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1d9      	bne.n	8001c1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d013      	beq.n	8001c96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c72:	4a7e      	ldr	r2, [pc, #504]	; (8001e6c <HAL_UART_IRQHandler+0x3e0>)
 8001c74:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe feda 	bl	8000a34 <HAL_DMA_Abort_IT>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d016      	beq.n	8001cb4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c90:	4610      	mov	r0, r2
 8001c92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c94:	e00e      	b.n	8001cb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f99c 	bl	8001fd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c9c:	e00a      	b.n	8001cb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f998 	bl	8001fd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ca4:	e006      	b.n	8001cb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f994 	bl	8001fd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8001cb2:	e175      	b.n	8001fa0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cb4:	bf00      	nop
    return;
 8001cb6:	e173      	b.n	8001fa0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	f040 814f 	bne.w	8001f60 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001cc6:	f003 0310 	and.w	r3, r3, #16
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 8148 	beq.w	8001f60 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001cd4:	f003 0310 	and.w	r3, r3, #16
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 8141 	beq.w	8001f60 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cfe:	2b40      	cmp	r3, #64	; 0x40
 8001d00:	f040 80b6 	bne.w	8001e70 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001d10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 8145 	beq.w	8001fa4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001d1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001d22:	429a      	cmp	r2, r3
 8001d24:	f080 813e 	bcs.w	8001fa4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001d2e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	2b20      	cmp	r3, #32
 8001d38:	f000 8088 	beq.w	8001e4c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	330c      	adds	r3, #12
 8001d42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d4a:	e853 3f00 	ldrex	r3, [r3]
 8001d4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001d52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	330c      	adds	r3, #12
 8001d64:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001d68:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001d6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d70:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001d74:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001d78:	e841 2300 	strex	r3, r2, [r1]
 8001d7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001d80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1d9      	bne.n	8001d3c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	3314      	adds	r3, #20
 8001d8e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d92:	e853 3f00 	ldrex	r3, [r3]
 8001d96:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001d98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d9a:	f023 0301 	bic.w	r3, r3, #1
 8001d9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	3314      	adds	r3, #20
 8001da8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001dac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001db0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001db2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001db4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001db8:	e841 2300 	strex	r3, r2, [r1]
 8001dbc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001dbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1e1      	bne.n	8001d88 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	3314      	adds	r3, #20
 8001dca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dce:	e853 3f00 	ldrex	r3, [r3]
 8001dd2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001dd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001dda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	3314      	adds	r3, #20
 8001de4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001de8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001dea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001dee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001df0:	e841 2300 	strex	r3, r2, [r1]
 8001df4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001df6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1e3      	bne.n	8001dc4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2220      	movs	r2, #32
 8001e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	330c      	adds	r3, #12
 8001e10:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e14:	e853 3f00 	ldrex	r3, [r3]
 8001e18:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001e1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e1c:	f023 0310 	bic.w	r3, r3, #16
 8001e20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	330c      	adds	r3, #12
 8001e2a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001e2e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e30:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e32:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e36:	e841 2300 	strex	r3, r2, [r1]
 8001e3a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001e3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1e3      	bne.n	8001e0a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe fdb7 	bl	80009ba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2202      	movs	r2, #2
 8001e50:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	4619      	mov	r1, r3
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f8bf 	bl	8001fe6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001e68:	e09c      	b.n	8001fa4 <HAL_UART_IRQHandler+0x518>
 8001e6a:	bf00      	nop
 8001e6c:	08002133 	.word	0x08002133
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 808e 	beq.w	8001fa8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001e8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 8089 	beq.w	8001fa8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	330c      	adds	r3, #12
 8001e9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ea0:	e853 3f00 	ldrex	r3, [r3]
 8001ea4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001eac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	330c      	adds	r3, #12
 8001eb6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001eba:	647a      	str	r2, [r7, #68]	; 0x44
 8001ebc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ebe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001ec0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001ec2:	e841 2300 	strex	r3, r2, [r1]
 8001ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1e3      	bne.n	8001e96 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	3314      	adds	r3, #20
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	e853 3f00 	ldrex	r3, [r3]
 8001edc:	623b      	str	r3, [r7, #32]
   return(result);
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	f023 0301 	bic.w	r3, r3, #1
 8001ee4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	3314      	adds	r3, #20
 8001eee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001ef2:	633a      	str	r2, [r7, #48]	; 0x30
 8001ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ef6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001efa:	e841 2300 	strex	r3, r2, [r1]
 8001efe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1e3      	bne.n	8001ece <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2220      	movs	r2, #32
 8001f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	330c      	adds	r3, #12
 8001f1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	e853 3f00 	ldrex	r3, [r3]
 8001f22:	60fb      	str	r3, [r7, #12]
   return(result);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f023 0310 	bic.w	r3, r3, #16
 8001f2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	330c      	adds	r3, #12
 8001f34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001f38:	61fa      	str	r2, [r7, #28]
 8001f3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f3c:	69b9      	ldr	r1, [r7, #24]
 8001f3e:	69fa      	ldr	r2, [r7, #28]
 8001f40:	e841 2300 	strex	r3, r2, [r1]
 8001f44:	617b      	str	r3, [r7, #20]
   return(result);
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1e3      	bne.n	8001f14 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2202      	movs	r2, #2
 8001f50:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001f52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001f56:	4619      	mov	r1, r3
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f844 	bl	8001fe6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001f5e:	e023      	b.n	8001fa8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d009      	beq.n	8001f80 <HAL_UART_IRQHandler+0x4f4>
 8001f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 f8ee 	bl	800215a <UART_Transmit_IT>
    return;
 8001f7e:	e014      	b.n	8001faa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00e      	beq.n	8001faa <HAL_UART_IRQHandler+0x51e>
 8001f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d008      	beq.n	8001faa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f92d 	bl	80021f8 <UART_EndTransmit_IT>
    return;
 8001f9e:	e004      	b.n	8001faa <HAL_UART_IRQHandler+0x51e>
    return;
 8001fa0:	bf00      	nop
 8001fa2:	e002      	b.n	8001faa <HAL_UART_IRQHandler+0x51e>
      return;
 8001fa4:	bf00      	nop
 8001fa6:	e000      	b.n	8001faa <HAL_UART_IRQHandler+0x51e>
      return;
 8001fa8:	bf00      	nop
  }
}
 8001faa:	37e8      	adds	r7, #232	; 0xe8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc80      	pop	{r7}
 8001fe4:	4770      	bx	lr

08001fe6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr

08001ffc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	4613      	mov	r3, r2
 8002008:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	88fa      	ldrh	r2, [r7, #6]
 8002014:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	88fa      	ldrh	r2, [r7, #6]
 800201a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2222      	movs	r2, #34	; 0x22
 8002026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d007      	beq.n	8002042 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002040:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	695a      	ldr	r2, [r3, #20]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f042 0201 	orr.w	r2, r2, #1
 8002050:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f042 0220 	orr.w	r2, r2, #32
 8002060:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr

0800206e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800206e:	b480      	push	{r7}
 8002070:	b095      	sub	sp, #84	; 0x54
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	330c      	adds	r3, #12
 800207c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800207e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002080:	e853 3f00 	ldrex	r3, [r3]
 8002084:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002088:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800208c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	330c      	adds	r3, #12
 8002094:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002096:	643a      	str	r2, [r7, #64]	; 0x40
 8002098:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800209a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800209c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800209e:	e841 2300 	strex	r3, r2, [r1]
 80020a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80020a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1e5      	bne.n	8002076 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	3314      	adds	r3, #20
 80020b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020b2:	6a3b      	ldr	r3, [r7, #32]
 80020b4:	e853 3f00 	ldrex	r3, [r3]
 80020b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	f023 0301 	bic.w	r3, r3, #1
 80020c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	3314      	adds	r3, #20
 80020c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80020ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020d2:	e841 2300 	strex	r3, r2, [r1]
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1e5      	bne.n	80020aa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d119      	bne.n	800211a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	330c      	adds	r3, #12
 80020ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	e853 3f00 	ldrex	r3, [r3]
 80020f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	f023 0310 	bic.w	r3, r3, #16
 80020fc:	647b      	str	r3, [r7, #68]	; 0x44
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	330c      	adds	r3, #12
 8002104:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002106:	61ba      	str	r2, [r7, #24]
 8002108:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800210a:	6979      	ldr	r1, [r7, #20]
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	e841 2300 	strex	r3, r2, [r1]
 8002112:	613b      	str	r3, [r7, #16]
   return(result);
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1e5      	bne.n	80020e6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2220      	movs	r2, #32
 800211e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002128:	bf00      	nop
 800212a:	3754      	adds	r7, #84	; 0x54
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr

08002132 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b084      	sub	sp, #16
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f7ff ff41 	bl	8001fd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002152:	bf00      	nop
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800215a:	b480      	push	{r7}
 800215c:	b085      	sub	sp, #20
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b21      	cmp	r3, #33	; 0x21
 800216c:	d13e      	bne.n	80021ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002176:	d114      	bne.n	80021a2 <UART_Transmit_IT+0x48>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d110      	bne.n	80021a2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002194:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	1c9a      	adds	r2, r3, #2
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	621a      	str	r2, [r3, #32]
 80021a0:	e008      	b.n	80021b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	1c59      	adds	r1, r3, #1
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6211      	str	r1, [r2, #32]
 80021ac:	781a      	ldrb	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	3b01      	subs	r3, #1
 80021bc:	b29b      	uxth	r3, r3
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	4619      	mov	r1, r3
 80021c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10f      	bne.n	80021e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80021e8:	2300      	movs	r3, #0
 80021ea:	e000      	b.n	80021ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80021ec:	2302      	movs	r3, #2
  }
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr

080021f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800220e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2220      	movs	r2, #32
 8002214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7ff fec9 	bl	8001fb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b08c      	sub	sp, #48	; 0x30
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b22      	cmp	r3, #34	; 0x22
 800223a:	f040 80ae 	bne.w	800239a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002246:	d117      	bne.n	8002278 <UART_Receive_IT+0x50>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d113      	bne.n	8002278 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002250:	2300      	movs	r3, #0
 8002252:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002258:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	b29b      	uxth	r3, r3
 8002262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002266:	b29a      	uxth	r2, r3
 8002268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002270:	1c9a      	adds	r2, r3, #2
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	629a      	str	r2, [r3, #40]	; 0x28
 8002276:	e026      	b.n	80022c6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800227e:	2300      	movs	r3, #0
 8002280:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800228a:	d007      	beq.n	800229c <UART_Receive_IT+0x74>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10a      	bne.n	80022aa <UART_Receive_IT+0x82>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d106      	bne.n	80022aa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a6:	701a      	strb	r2, [r3, #0]
 80022a8:	e008      	b.n	80022bc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ba:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c0:	1c5a      	adds	r2, r3, #1
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	3b01      	subs	r3, #1
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	4619      	mov	r1, r3
 80022d4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d15d      	bne.n	8002396 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68da      	ldr	r2, [r3, #12]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0220 	bic.w	r2, r2, #32
 80022e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	695a      	ldr	r2, [r3, #20]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0201 	bic.w	r2, r2, #1
 8002308:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2220      	movs	r2, #32
 800230e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231c:	2b01      	cmp	r3, #1
 800231e:	d135      	bne.n	800238c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	330c      	adds	r3, #12
 800232c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	e853 3f00 	ldrex	r3, [r3]
 8002334:	613b      	str	r3, [r7, #16]
   return(result);
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	f023 0310 	bic.w	r3, r3, #16
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	330c      	adds	r3, #12
 8002344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002346:	623a      	str	r2, [r7, #32]
 8002348:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800234a:	69f9      	ldr	r1, [r7, #28]
 800234c:	6a3a      	ldr	r2, [r7, #32]
 800234e:	e841 2300 	strex	r3, r2, [r1]
 8002352:	61bb      	str	r3, [r7, #24]
   return(result);
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1e5      	bne.n	8002326 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0310 	and.w	r3, r3, #16
 8002364:	2b10      	cmp	r3, #16
 8002366:	d10a      	bne.n	800237e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002368:	2300      	movs	r3, #0
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002382:	4619      	mov	r1, r3
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff fe2e 	bl	8001fe6 <HAL_UARTEx_RxEventCallback>
 800238a:	e002      	b.n	8002392 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff fe18 	bl	8001fc2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	e002      	b.n	800239c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	e000      	b.n	800239c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800239a:	2302      	movs	r3, #2
  }
}
 800239c:	4618      	mov	r0, r3
 800239e:	3730      	adds	r7, #48	; 0x30
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	431a      	orrs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	431a      	orrs	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80023e4:	f023 030c 	bic.w	r3, r3, #12
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	68b9      	ldr	r1, [r7, #8]
 80023ee:	430b      	orrs	r3, r1
 80023f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	699a      	ldr	r2, [r3, #24]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a55      	ldr	r2, [pc, #340]	; (8002564 <UART_SetConfig+0x1c0>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d103      	bne.n	800241a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002412:	f7ff fa51 	bl	80018b8 <HAL_RCC_GetPCLK2Freq>
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	e002      	b.n	8002420 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800241a:	f7ff fa39 	bl	8001890 <HAL_RCC_GetPCLK1Freq>
 800241e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002428:	d14c      	bne.n	80024c4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	4613      	mov	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	009a      	lsls	r2, r3, #2
 8002434:	441a      	add	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002440:	4a49      	ldr	r2, [pc, #292]	; (8002568 <UART_SetConfig+0x1c4>)
 8002442:	fba2 2303 	umull	r2, r3, r2, r3
 8002446:	095b      	lsrs	r3, r3, #5
 8002448:	0119      	lsls	r1, r3, #4
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	4613      	mov	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	009a      	lsls	r2, r3, #2
 8002454:	441a      	add	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002460:	4b41      	ldr	r3, [pc, #260]	; (8002568 <UART_SetConfig+0x1c4>)
 8002462:	fba3 0302 	umull	r0, r3, r3, r2
 8002466:	095b      	lsrs	r3, r3, #5
 8002468:	2064      	movs	r0, #100	; 0x64
 800246a:	fb00 f303 	mul.w	r3, r0, r3
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	3332      	adds	r3, #50	; 0x32
 8002474:	4a3c      	ldr	r2, [pc, #240]	; (8002568 <UART_SetConfig+0x1c4>)
 8002476:	fba2 2303 	umull	r2, r3, r2, r3
 800247a:	095b      	lsrs	r3, r3, #5
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002482:	4419      	add	r1, r3
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	009a      	lsls	r2, r3, #2
 800248e:	441a      	add	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	fbb2 f2f3 	udiv	r2, r2, r3
 800249a:	4b33      	ldr	r3, [pc, #204]	; (8002568 <UART_SetConfig+0x1c4>)
 800249c:	fba3 0302 	umull	r0, r3, r3, r2
 80024a0:	095b      	lsrs	r3, r3, #5
 80024a2:	2064      	movs	r0, #100	; 0x64
 80024a4:	fb00 f303 	mul.w	r3, r0, r3
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	3332      	adds	r3, #50	; 0x32
 80024ae:	4a2e      	ldr	r2, [pc, #184]	; (8002568 <UART_SetConfig+0x1c4>)
 80024b0:	fba2 2303 	umull	r2, r3, r2, r3
 80024b4:	095b      	lsrs	r3, r3, #5
 80024b6:	f003 0207 	and.w	r2, r3, #7
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	440a      	add	r2, r1
 80024c0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80024c2:	e04a      	b.n	800255a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	009a      	lsls	r2, r3, #2
 80024ce:	441a      	add	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024da:	4a23      	ldr	r2, [pc, #140]	; (8002568 <UART_SetConfig+0x1c4>)
 80024dc:	fba2 2303 	umull	r2, r3, r2, r3
 80024e0:	095b      	lsrs	r3, r3, #5
 80024e2:	0119      	lsls	r1, r3, #4
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	009a      	lsls	r2, r3, #2
 80024ee:	441a      	add	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80024fa:	4b1b      	ldr	r3, [pc, #108]	; (8002568 <UART_SetConfig+0x1c4>)
 80024fc:	fba3 0302 	umull	r0, r3, r3, r2
 8002500:	095b      	lsrs	r3, r3, #5
 8002502:	2064      	movs	r0, #100	; 0x64
 8002504:	fb00 f303 	mul.w	r3, r0, r3
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	011b      	lsls	r3, r3, #4
 800250c:	3332      	adds	r3, #50	; 0x32
 800250e:	4a16      	ldr	r2, [pc, #88]	; (8002568 <UART_SetConfig+0x1c4>)
 8002510:	fba2 2303 	umull	r2, r3, r2, r3
 8002514:	095b      	lsrs	r3, r3, #5
 8002516:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800251a:	4419      	add	r1, r3
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	009a      	lsls	r2, r3, #2
 8002526:	441a      	add	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002532:	4b0d      	ldr	r3, [pc, #52]	; (8002568 <UART_SetConfig+0x1c4>)
 8002534:	fba3 0302 	umull	r0, r3, r3, r2
 8002538:	095b      	lsrs	r3, r3, #5
 800253a:	2064      	movs	r0, #100	; 0x64
 800253c:	fb00 f303 	mul.w	r3, r0, r3
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	011b      	lsls	r3, r3, #4
 8002544:	3332      	adds	r3, #50	; 0x32
 8002546:	4a08      	ldr	r2, [pc, #32]	; (8002568 <UART_SetConfig+0x1c4>)
 8002548:	fba2 2303 	umull	r2, r3, r2, r3
 800254c:	095b      	lsrs	r3, r3, #5
 800254e:	f003 020f 	and.w	r2, r3, #15
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	440a      	add	r2, r1
 8002558:	609a      	str	r2, [r3, #8]
}
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40013800 	.word	0x40013800
 8002568:	51eb851f 	.word	0x51eb851f

0800256c <TM1637_ClkHigh>:
	0x77, 0x7c, 0x39, 0x5E, 0x79, 0x71, 0x5C, 0x3e, 0x73, 0x08, // A-F (d = 13, o = 16, u = 17, p = 18 _ = 19
    0x00, 0b0111000, 0b0111110, 1 , 1<<3, 1<<1, 1<<4, 1<<2, 1<<5, 1<<4, 1<<1
};

void TM1637_ClkHigh(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_SET);
 8002570:	2201      	movs	r2, #1
 8002572:	2108      	movs	r1, #8
 8002574:	4802      	ldr	r0, [pc, #8]	; (8002580 <TM1637_ClkHigh+0x14>)
 8002576:	f7fe fc46 	bl	8000e06 <HAL_GPIO_WritePin>
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40020800 	.word	0x40020800

08002584 <TM1637_ClkLow>:

void TM1637_ClkLow(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_RESET);
 8002588:	2200      	movs	r2, #0
 800258a:	2108      	movs	r1, #8
 800258c:	4802      	ldr	r0, [pc, #8]	; (8002598 <TM1637_ClkLow+0x14>)
 800258e:	f7fe fc3a 	bl	8000e06 <HAL_GPIO_WritePin>
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40020800 	.word	0x40020800

0800259c <TM1637_DataHigh>:

void TM1637_DataHigh(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_SET);
 80025a0:	2201      	movs	r2, #1
 80025a2:	2104      	movs	r1, #4
 80025a4:	4802      	ldr	r0, [pc, #8]	; (80025b0 <TM1637_DataHigh+0x14>)
 80025a6:	f7fe fc2e 	bl	8000e06 <HAL_GPIO_WritePin>
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40020800 	.word	0x40020800

080025b4 <TM1637_DataLow>:

void TM1637_DataLow(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_RESET);
 80025b8:	2200      	movs	r2, #0
 80025ba:	2104      	movs	r1, #4
 80025bc:	4802      	ldr	r0, [pc, #8]	; (80025c8 <TM1637_DataLow+0x14>)
 80025be:	f7fe fc22 	bl	8000e06 <HAL_GPIO_WritePin>
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40020800 	.word	0x40020800

080025cc <TM1637_Display_4_char>:
{
    TM1637_SetBrightness(8);
}

void TM1637_Display_4_char(uint8_t char1,uint8_t char2, uint8_t char3, uint8_t char4, int displaySeparator)
{
 80025cc:	b590      	push	{r4, r7, lr}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4604      	mov	r4, r0
 80025d4:	4608      	mov	r0, r1
 80025d6:	4611      	mov	r1, r2
 80025d8:	461a      	mov	r2, r3
 80025da:	4623      	mov	r3, r4
 80025dc:	71fb      	strb	r3, [r7, #7]
 80025de:	4603      	mov	r3, r0
 80025e0:	71bb      	strb	r3, [r7, #6]
 80025e2:	460b      	mov	r3, r1
 80025e4:	717b      	strb	r3, [r7, #5]
 80025e6:	4613      	mov	r3, r2
 80025e8:	713b      	strb	r3, [r7, #4]
    unsigned char digitArr[4];

    digitArr[0] = segmentMap[char1];
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	4a20      	ldr	r2, [pc, #128]	; (8002670 <TM1637_Display_4_char+0xa4>)
 80025ee:	5cd3      	ldrb	r3, [r2, r3]
 80025f0:	723b      	strb	r3, [r7, #8]
    digitArr[1] = segmentMap[char2];
 80025f2:	79bb      	ldrb	r3, [r7, #6]
 80025f4:	4a1e      	ldr	r2, [pc, #120]	; (8002670 <TM1637_Display_4_char+0xa4>)
 80025f6:	5cd3      	ldrb	r3, [r2, r3]
 80025f8:	727b      	strb	r3, [r7, #9]
    digitArr[2] = segmentMap[char3];
 80025fa:	797b      	ldrb	r3, [r7, #5]
 80025fc:	4a1c      	ldr	r2, [pc, #112]	; (8002670 <TM1637_Display_4_char+0xa4>)
 80025fe:	5cd3      	ldrb	r3, [r2, r3]
 8002600:	72bb      	strb	r3, [r7, #10]
    digitArr[3] = segmentMap[char4];
 8002602:	793b      	ldrb	r3, [r7, #4]
 8002604:	4a1a      	ldr	r2, [pc, #104]	; (8002670 <TM1637_Display_4_char+0xa4>)
 8002606:	5cd3      	ldrb	r3, [r2, r3]
 8002608:	72fb      	strb	r3, [r7, #11]

    if(displaySeparator){
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d004      	beq.n	800261a <TM1637_Display_4_char+0x4e>
        digitArr[2] |= 1 << 7;
 8002610:	7abb      	ldrb	r3, [r7, #10]
 8002612:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002616:	b2db      	uxtb	r3, r3
 8002618:	72bb      	strb	r3, [r7, #10]
    }

    TM1637_Start();
 800261a:	f000 f840 	bl	800269e <TM1637_Start>
    TM1637_WriteByte(0x40);
 800261e:	2040      	movs	r0, #64	; 0x40
 8002620:	f000 f86f 	bl	8002702 <TM1637_WriteByte>
    TM1637_ReadResult();
 8002624:	f000 f85d 	bl	80026e2 <TM1637_ReadResult>
    TM1637_Stop();
 8002628:	f000 f846 	bl	80026b8 <TM1637_Stop>

    TM1637_Start();
 800262c:	f000 f837 	bl	800269e <TM1637_Start>
    TM1637_WriteByte(0xc0);
 8002630:	20c0      	movs	r0, #192	; 0xc0
 8002632:	f000 f866 	bl	8002702 <TM1637_WriteByte>
    TM1637_ReadResult();
 8002636:	f000 f854 	bl	80026e2 <TM1637_ReadResult>

    for (int i = 0; i < 4; ++i) {
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	e00e      	b.n	800265e <TM1637_Display_4_char+0x92>
        TM1637_WriteByte(digitArr[3 - i]);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f1c3 0303 	rsb	r3, r3, #3
 8002646:	3310      	adds	r3, #16
 8002648:	443b      	add	r3, r7
 800264a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800264e:	4618      	mov	r0, r3
 8002650:	f000 f857 	bl	8002702 <TM1637_WriteByte>
        TM1637_ReadResult();
 8002654:	f000 f845 	bl	80026e2 <TM1637_ReadResult>
    for (int i = 0; i < 4; ++i) {
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	3301      	adds	r3, #1
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2b03      	cmp	r3, #3
 8002662:	dded      	ble.n	8002640 <TM1637_Display_4_char+0x74>
    }

    TM1637_Stop();
 8002664:	f000 f828 	bl	80026b8 <TM1637_Stop>
}
 8002668:	bf00      	nop
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	bd90      	pop	{r4, r7, pc}
 8002670:	08003ce0 	.word	0x08003ce0

08002674 <TM1637_SetBrightness>:
}

// Valid brightness values: 0 - 8.
// 0 = display off.
void TM1637_SetBrightness(char brightness)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	71fb      	strb	r3, [r7, #7]
    // Brightness command:
    // 1000 0XXX = display off
    // 1000 1BBB = display on, brightness 0-7
    // X = don't care
    // B = brightness
    TM1637_Start();
 800267e:	f000 f80e 	bl	800269e <TM1637_Start>
    TM1637_WriteByte(0x87 + brightness);
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	3b79      	subs	r3, #121	; 0x79
 8002686:	b2db      	uxtb	r3, r3
 8002688:	4618      	mov	r0, r3
 800268a:	f000 f83a 	bl	8002702 <TM1637_WriteByte>
    TM1637_ReadResult();
 800268e:	f000 f828 	bl	80026e2 <TM1637_ReadResult>
    TM1637_Stop();
 8002692:	f000 f811 	bl	80026b8 <TM1637_Stop>
}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <TM1637_Start>:

void TM1637_Start(void)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	af00      	add	r7, sp, #0
    TM1637_ClkHigh();
 80026a2:	f7ff ff63 	bl	800256c <TM1637_ClkHigh>
    TM1637_DataHigh();
 80026a6:	f7ff ff79 	bl	800259c <TM1637_DataHigh>
    TM1637_DelayUsec(2);
 80026aa:	2002      	movs	r0, #2
 80026ac:	f000 f853 	bl	8002756 <TM1637_DelayUsec>
    TM1637_DataLow();
 80026b0:	f7ff ff80 	bl	80025b4 <TM1637_DataLow>
}
 80026b4:	bf00      	nop
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <TM1637_Stop>:

void TM1637_Stop(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
    TM1637_ClkLow();
 80026bc:	f7ff ff62 	bl	8002584 <TM1637_ClkLow>
    TM1637_DelayUsec(2);
 80026c0:	2002      	movs	r0, #2
 80026c2:	f000 f848 	bl	8002756 <TM1637_DelayUsec>
    TM1637_DataLow();
 80026c6:	f7ff ff75 	bl	80025b4 <TM1637_DataLow>
    TM1637_DelayUsec(2);
 80026ca:	2002      	movs	r0, #2
 80026cc:	f000 f843 	bl	8002756 <TM1637_DelayUsec>
    TM1637_ClkHigh();
 80026d0:	f7ff ff4c 	bl	800256c <TM1637_ClkHigh>
    TM1637_DelayUsec(2);
 80026d4:	2002      	movs	r0, #2
 80026d6:	f000 f83e 	bl	8002756 <TM1637_DelayUsec>
    TM1637_DataHigh();
 80026da:	f7ff ff5f 	bl	800259c <TM1637_DataHigh>
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <TM1637_ReadResult>:

void TM1637_ReadResult(void)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	af00      	add	r7, sp, #0
    TM1637_ClkLow();
 80026e6:	f7ff ff4d 	bl	8002584 <TM1637_ClkLow>
    TM1637_DelayUsec(5);
 80026ea:	2005      	movs	r0, #5
 80026ec:	f000 f833 	bl	8002756 <TM1637_DelayUsec>

    TM1637_ClkHigh();
 80026f0:	f7ff ff3c 	bl	800256c <TM1637_ClkHigh>
    TM1637_DelayUsec(2);
 80026f4:	2002      	movs	r0, #2
 80026f6:	f000 f82e 	bl	8002756 <TM1637_DelayUsec>
    TM1637_ClkLow();
 80026fa:	f7ff ff43 	bl	8002584 <TM1637_ClkLow>
}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}

08002702 <TM1637_WriteByte>:

void TM1637_WriteByte(unsigned char b)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b084      	sub	sp, #16
 8002706:	af00      	add	r7, sp, #0
 8002708:	4603      	mov	r3, r0
 800270a:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 8; ++i) {
 800270c:	2300      	movs	r3, #0
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	e019      	b.n	8002746 <TM1637_WriteByte+0x44>
		TM1637_ClkLow();
 8002712:	f7ff ff37 	bl	8002584 <TM1637_ClkLow>
		if (b & 0x01) {
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b00      	cmp	r3, #0
 800271e:	d002      	beq.n	8002726 <TM1637_WriteByte+0x24>
			TM1637_DataHigh();
 8002720:	f7ff ff3c 	bl	800259c <TM1637_DataHigh>
 8002724:	e001      	b.n	800272a <TM1637_WriteByte+0x28>
		}
		else {
			TM1637_DataLow();
 8002726:	f7ff ff45 	bl	80025b4 <TM1637_DataLow>
		}
		TM1637_DelayUsec(3);
 800272a:	2003      	movs	r0, #3
 800272c:	f000 f813 	bl	8002756 <TM1637_DelayUsec>
		b >>= 1;
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	085b      	lsrs	r3, r3, #1
 8002734:	71fb      	strb	r3, [r7, #7]
		TM1637_ClkHigh();
 8002736:	f7ff ff19 	bl	800256c <TM1637_ClkHigh>
		TM1637_DelayUsec(3);
 800273a:	2003      	movs	r0, #3
 800273c:	f000 f80b 	bl	8002756 <TM1637_DelayUsec>
	for (int i = 0; i < 8; ++i) {
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	3301      	adds	r3, #1
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2b07      	cmp	r3, #7
 800274a:	dde2      	ble.n	8002712 <TM1637_WriteByte+0x10>
	}
}
 800274c:	bf00      	nop
 800274e:	bf00      	nop
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <TM1637_DelayUsec>:

void TM1637_DelayUsec(unsigned int i)
{
 8002756:	b480      	push	{r7}
 8002758:	b085      	sub	sp, #20
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
    for (; i>0; i--) {
 800275e:	e00c      	b.n	800277a <TM1637_DelayUsec+0x24>
        for (int j = 0; j < 100; ++j) {
 8002760:	2300      	movs	r3, #0
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	e003      	b.n	800276e <TM1637_DelayUsec+0x18>
					__NOP();
 8002766:	bf00      	nop
        for (int j = 0; j < 100; ++j) {
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	3301      	adds	r3, #1
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2b63      	cmp	r3, #99	; 0x63
 8002772:	ddf8      	ble.n	8002766 <TM1637_DelayUsec+0x10>
    for (; i>0; i--) {
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3b01      	subs	r3, #1
 8002778:	607b      	str	r3, [r7, #4]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1ef      	bne.n	8002760 <TM1637_DelayUsec+0xa>
        }
    }
}
 8002780:	bf00      	nop
 8002782:	bf00      	nop
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr

0800278c <GPIO_sensor_init>:
	  HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_SET);
	  HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_SET);
}


void GPIO_sensor_init(void){
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af00      	add	r7, sp, #0

	 __HAL_RCC_GPIOC_CLK_ENABLE();
 8002792:	4b33      	ldr	r3, [pc, #204]	; (8002860 <GPIO_sensor_init+0xd4>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	4a32      	ldr	r2, [pc, #200]	; (8002860 <GPIO_sensor_init+0xd4>)
 8002798:	f043 0304 	orr.w	r3, r3, #4
 800279c:	61d3      	str	r3, [r2, #28]
 800279e:	4b30      	ldr	r3, [pc, #192]	; (8002860 <GPIO_sensor_init+0xd4>)
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	60bb      	str	r3, [r7, #8]
 80027a8:	68bb      	ldr	r3, [r7, #8]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 80027aa:	4b2d      	ldr	r3, [pc, #180]	; (8002860 <GPIO_sensor_init+0xd4>)
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	4a2c      	ldr	r2, [pc, #176]	; (8002860 <GPIO_sensor_init+0xd4>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	61d3      	str	r3, [r2, #28]
 80027b6:	4b2a      	ldr	r3, [pc, #168]	; (8002860 <GPIO_sensor_init+0xd4>)
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	607b      	str	r3, [r7, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c2:	4b27      	ldr	r3, [pc, #156]	; (8002860 <GPIO_sensor_init+0xd4>)
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	4a26      	ldr	r2, [pc, #152]	; (8002860 <GPIO_sensor_init+0xd4>)
 80027c8:	f043 0302 	orr.w	r3, r3, #2
 80027cc:	61d3      	str	r3, [r2, #28]
 80027ce:	4b24      	ldr	r3, [pc, #144]	; (8002860 <GPIO_sensor_init+0xd4>)
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	603b      	str	r3, [r7, #0]
 80027d8:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027da:	f107 030c 	add.w	r3, r7, #12
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	605a      	str	r2, [r3, #4]
 80027e4:	609a      	str	r2, [r3, #8]
 80027e6:	60da      	str	r2, [r3, #12]
 80027e8:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ea:	2300      	movs	r3, #0
 80027ec:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027f2:	2302      	movs	r3, #2
 80027f4:	61bb      	str	r3, [r7, #24]

	  GPIO_InitStruct.Pin = SENSOR_1_PIN;
 80027f6:	2301      	movs	r3, #1
 80027f8:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(SENSOR_1_PORT, &GPIO_InitStruct);
 80027fa:	f107 030c 	add.w	r3, r7, #12
 80027fe:	4619      	mov	r1, r3
 8002800:	4818      	ldr	r0, [pc, #96]	; (8002864 <GPIO_sensor_init+0xd8>)
 8002802:	f7fe f959 	bl	8000ab8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = SENSOR_2_PIN;
 8002806:	2302      	movs	r3, #2
 8002808:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(SENSOR_2_PORT, &GPIO_InitStruct);
 800280a:	f107 030c 	add.w	r3, r7, #12
 800280e:	4619      	mov	r1, r3
 8002810:	4814      	ldr	r0, [pc, #80]	; (8002864 <GPIO_sensor_init+0xd8>)
 8002812:	f7fe f951 	bl	8000ab8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = SENSOR_3_PIN;
 8002816:	2301      	movs	r3, #1
 8002818:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(SENSOR_3_PORT, &GPIO_InitStruct);
 800281a:	f107 030c 	add.w	r3, r7, #12
 800281e:	4619      	mov	r1, r3
 8002820:	4811      	ldr	r0, [pc, #68]	; (8002868 <GPIO_sensor_init+0xdc>)
 8002822:	f7fe f949 	bl	8000ab8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = SENSOR_4_PIN;
 8002826:	2310      	movs	r3, #16
 8002828:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(SENSOR_4_PORT, &GPIO_InitStruct);
 800282a:	f107 030c 	add.w	r3, r7, #12
 800282e:	4619      	mov	r1, r3
 8002830:	480e      	ldr	r0, [pc, #56]	; (800286c <GPIO_sensor_init+0xe0>)
 8002832:	f7fe f941 	bl	8000ab8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = SENSOR_5_PIN;
 8002836:	2302      	movs	r3, #2
 8002838:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(SENSOR_5_PORT, &GPIO_InitStruct);
 800283a:	f107 030c 	add.w	r3, r7, #12
 800283e:	4619      	mov	r1, r3
 8002840:	480a      	ldr	r0, [pc, #40]	; (800286c <GPIO_sensor_init+0xe0>)
 8002842:	f7fe f939 	bl	8000ab8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = SENSOR_6_PIN;
 8002846:	2301      	movs	r3, #1
 8002848:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(SENSOR_6_PORT, &GPIO_InitStruct);
 800284a:	f107 030c 	add.w	r3, r7, #12
 800284e:	4619      	mov	r1, r3
 8002850:	4806      	ldr	r0, [pc, #24]	; (800286c <GPIO_sensor_init+0xe0>)
 8002852:	f7fe f931 	bl	8000ab8 <HAL_GPIO_Init>

}
 8002856:	bf00      	nop
 8002858:	3720      	adds	r7, #32
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40023800 	.word	0x40023800
 8002864:	40020800 	.word	0x40020800
 8002868:	40020400 	.word	0x40020400
 800286c:	40020000 	.word	0x40020000

08002870 <get_current_level>:


LEVEL_T get_current_level(void){
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0

	ss_arr[0] = SS0;
 8002874:	2101      	movs	r1, #1
 8002876:	4855      	ldr	r0, [pc, #340]	; (80029cc <get_current_level+0x15c>)
 8002878:	f7fe faae 	bl	8000dd8 <HAL_GPIO_ReadPin>
 800287c:	4603      	mov	r3, r0
 800287e:	461a      	mov	r2, r3
 8002880:	4b53      	ldr	r3, [pc, #332]	; (80029d0 <get_current_level+0x160>)
 8002882:	701a      	strb	r2, [r3, #0]
	ss_arr[1] = SS1_2;
 8002884:	2102      	movs	r1, #2
 8002886:	4851      	ldr	r0, [pc, #324]	; (80029cc <get_current_level+0x15c>)
 8002888:	f7fe faa6 	bl	8000dd8 <HAL_GPIO_ReadPin>
 800288c:	4603      	mov	r3, r0
 800288e:	461a      	mov	r2, r3
 8002890:	4b4f      	ldr	r3, [pc, #316]	; (80029d0 <get_current_level+0x160>)
 8002892:	705a      	strb	r2, [r3, #1]
	ss_arr[2] = SS2_3;
 8002894:	2101      	movs	r1, #1
 8002896:	484f      	ldr	r0, [pc, #316]	; (80029d4 <get_current_level+0x164>)
 8002898:	f7fe fa9e 	bl	8000dd8 <HAL_GPIO_ReadPin>
 800289c:	4603      	mov	r3, r0
 800289e:	461a      	mov	r2, r3
 80028a0:	4b4b      	ldr	r3, [pc, #300]	; (80029d0 <get_current_level+0x160>)
 80028a2:	709a      	strb	r2, [r3, #2]
	ss_arr[3] = SS3_4;
 80028a4:	2110      	movs	r1, #16
 80028a6:	484c      	ldr	r0, [pc, #304]	; (80029d8 <get_current_level+0x168>)
 80028a8:	f7fe fa96 	bl	8000dd8 <HAL_GPIO_ReadPin>
 80028ac:	4603      	mov	r3, r0
 80028ae:	461a      	mov	r2, r3
 80028b0:	4b47      	ldr	r3, [pc, #284]	; (80029d0 <get_current_level+0x160>)
 80028b2:	70da      	strb	r2, [r3, #3]
	ss_arr[4] = SS4_A;
 80028b4:	2102      	movs	r1, #2
 80028b6:	4848      	ldr	r0, [pc, #288]	; (80029d8 <get_current_level+0x168>)
 80028b8:	f7fe fa8e 	bl	8000dd8 <HAL_GPIO_ReadPin>
 80028bc:	4603      	mov	r3, r0
 80028be:	461a      	mov	r2, r3
 80028c0:	4b43      	ldr	r3, [pc, #268]	; (80029d0 <get_current_level+0x160>)
 80028c2:	711a      	strb	r2, [r3, #4]
	ss_arr[5] = SS4_B;
 80028c4:	2101      	movs	r1, #1
 80028c6:	4844      	ldr	r0, [pc, #272]	; (80029d8 <get_current_level+0x168>)
 80028c8:	f7fe fa86 	bl	8000dd8 <HAL_GPIO_ReadPin>
 80028cc:	4603      	mov	r3, r0
 80028ce:	461a      	mov	r2, r3
 80028d0:	4b3f      	ldr	r3, [pc, #252]	; (80029d0 <get_current_level+0x160>)
 80028d2:	715a      	strb	r2, [r3, #5]


	if((SS4_B == ON) || (SS4_A == ON)){
 80028d4:	2101      	movs	r1, #1
 80028d6:	4840      	ldr	r0, [pc, #256]	; (80029d8 <get_current_level+0x168>)
 80028d8:	f7fe fa7e 	bl	8000dd8 <HAL_GPIO_ReadPin>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d006      	beq.n	80028f0 <get_current_level+0x80>
 80028e2:	2102      	movs	r1, #2
 80028e4:	483c      	ldr	r0, [pc, #240]	; (80029d8 <get_current_level+0x168>)
 80028e6:	f7fe fa77 	bl	8000dd8 <HAL_GPIO_ReadPin>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <get_current_level+0x84>
		return LEVEL_4;
 80028f0:	2328      	movs	r3, #40	; 0x28
 80028f2:	e069      	b.n	80029c8 <get_current_level+0x158>
	}

	if(SS0 == ON){
 80028f4:	2101      	movs	r1, #1
 80028f6:	4835      	ldr	r0, [pc, #212]	; (80029cc <get_current_level+0x15c>)
 80028f8:	f7fe fa6e 	bl	8000dd8 <HAL_GPIO_ReadPin>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <get_current_level+0x96>
		return LEVEL_1;
 8002902:	230a      	movs	r3, #10
 8002904:	e060      	b.n	80029c8 <get_current_level+0x158>
	}

	if((SS1_2 == ON) && (SS2_3 == OFF) ){
 8002906:	2102      	movs	r1, #2
 8002908:	4830      	ldr	r0, [pc, #192]	; (80029cc <get_current_level+0x15c>)
 800290a:	f7fe fa65 	bl	8000dd8 <HAL_GPIO_ReadPin>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d108      	bne.n	8002926 <get_current_level+0xb6>
 8002914:	2101      	movs	r1, #1
 8002916:	482f      	ldr	r0, [pc, #188]	; (80029d4 <get_current_level+0x164>)
 8002918:	f7fe fa5e 	bl	8000dd8 <HAL_GPIO_ReadPin>
 800291c:	4603      	mov	r3, r0
 800291e:	2b01      	cmp	r3, #1
 8002920:	d101      	bne.n	8002926 <get_current_level+0xb6>
		return LEVEL_1_2;
 8002922:	230f      	movs	r3, #15
 8002924:	e050      	b.n	80029c8 <get_current_level+0x158>
	}

	if((SS1_2 == ON) && (SS2_3 == ON) ){
 8002926:	2102      	movs	r1, #2
 8002928:	4828      	ldr	r0, [pc, #160]	; (80029cc <get_current_level+0x15c>)
 800292a:	f7fe fa55 	bl	8000dd8 <HAL_GPIO_ReadPin>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d108      	bne.n	8002946 <get_current_level+0xd6>
 8002934:	2101      	movs	r1, #1
 8002936:	4827      	ldr	r0, [pc, #156]	; (80029d4 <get_current_level+0x164>)
 8002938:	f7fe fa4e 	bl	8000dd8 <HAL_GPIO_ReadPin>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <get_current_level+0xd6>
		return LEVEL_2;
 8002942:	2314      	movs	r3, #20
 8002944:	e040      	b.n	80029c8 <get_current_level+0x158>
	}

	if((SS2_3 == ON) && (SS3_4 == OFF) ){
 8002946:	2101      	movs	r1, #1
 8002948:	4822      	ldr	r0, [pc, #136]	; (80029d4 <get_current_level+0x164>)
 800294a:	f7fe fa45 	bl	8000dd8 <HAL_GPIO_ReadPin>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d108      	bne.n	8002966 <get_current_level+0xf6>
 8002954:	2110      	movs	r1, #16
 8002956:	4820      	ldr	r0, [pc, #128]	; (80029d8 <get_current_level+0x168>)
 8002958:	f7fe fa3e 	bl	8000dd8 <HAL_GPIO_ReadPin>
 800295c:	4603      	mov	r3, r0
 800295e:	2b01      	cmp	r3, #1
 8002960:	d101      	bne.n	8002966 <get_current_level+0xf6>
		return LEVEL_2_3;
 8002962:	2319      	movs	r3, #25
 8002964:	e030      	b.n	80029c8 <get_current_level+0x158>
	}

	if((SS2_3 == ON) && (SS3_4 == ON) ){
 8002966:	2101      	movs	r1, #1
 8002968:	481a      	ldr	r0, [pc, #104]	; (80029d4 <get_current_level+0x164>)
 800296a:	f7fe fa35 	bl	8000dd8 <HAL_GPIO_ReadPin>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d108      	bne.n	8002986 <get_current_level+0x116>
 8002974:	2110      	movs	r1, #16
 8002976:	4818      	ldr	r0, [pc, #96]	; (80029d8 <get_current_level+0x168>)
 8002978:	f7fe fa2e 	bl	8000dd8 <HAL_GPIO_ReadPin>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <get_current_level+0x116>
		return LEVEL_3;
 8002982:	231e      	movs	r3, #30
 8002984:	e020      	b.n	80029c8 <get_current_level+0x158>
	}

	if((SS3_4 == ON) && (SS4_A == OFF) ){
 8002986:	2110      	movs	r1, #16
 8002988:	4813      	ldr	r0, [pc, #76]	; (80029d8 <get_current_level+0x168>)
 800298a:	f7fe fa25 	bl	8000dd8 <HAL_GPIO_ReadPin>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d108      	bne.n	80029a6 <get_current_level+0x136>
 8002994:	2102      	movs	r1, #2
 8002996:	4810      	ldr	r0, [pc, #64]	; (80029d8 <get_current_level+0x168>)
 8002998:	f7fe fa1e 	bl	8000dd8 <HAL_GPIO_ReadPin>
 800299c:	4603      	mov	r3, r0
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <get_current_level+0x136>
		return LEVEL_3_4;
 80029a2:	2323      	movs	r3, #35	; 0x23
 80029a4:	e010      	b.n	80029c8 <get_current_level+0x158>
	}

	if((SS3_4 == ON) && (SS4_B == OFF)){
 80029a6:	2110      	movs	r1, #16
 80029a8:	480b      	ldr	r0, [pc, #44]	; (80029d8 <get_current_level+0x168>)
 80029aa:	f7fe fa15 	bl	8000dd8 <HAL_GPIO_ReadPin>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d108      	bne.n	80029c6 <get_current_level+0x156>
 80029b4:	2101      	movs	r1, #1
 80029b6:	4808      	ldr	r0, [pc, #32]	; (80029d8 <get_current_level+0x168>)
 80029b8:	f7fe fa0e 	bl	8000dd8 <HAL_GPIO_ReadPin>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <get_current_level+0x156>
		return LEVEL_4;
 80029c2:	2328      	movs	r3, #40	; 0x28
 80029c4:	e000      	b.n	80029c8 <get_current_level+0x158>
	}

	return LEVEL_ERROR;
 80029c6:	2363      	movs	r3, #99	; 0x63

}
 80029c8:	4618      	mov	r0, r3
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40020800 	.word	0x40020800
 80029d0:	200000bc 	.word	0x200000bc
 80029d4:	40020400 	.word	0x40020400
 80029d8:	40020000 	.word	0x40020000

080029dc <board_init>:

void board_init(void){
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
	  HAL_Init();
 80029e0:	f7fd fe4d 	bl	800067e <HAL_Init>
	  SystemClock_Config();
 80029e4:	f000 f81a 	bl	8002a1c <SystemClock_Config>
	  MX_GPIO_Init();
 80029e8:	f000 f8ba 	bl	8002b60 <MX_GPIO_Init>
	  MX_UART4_Init();
 80029ec:	f000 f864 	bl	8002ab8 <MX_UART4_Init>
	  MX_USART2_UART_Init();
 80029f0:	f000 f88c 	bl	8002b0c <MX_USART2_UART_Init>
	  HAL_UART_Receive_IT(&huart2, &buff_rx, 1);
 80029f4:	2201      	movs	r2, #1
 80029f6:	4905      	ldr	r1, [pc, #20]	; (8002a0c <board_init+0x30>)
 80029f8:	4805      	ldr	r0, [pc, #20]	; (8002a10 <board_init+0x34>)
 80029fa:	f7ff f821 	bl	8001a40 <HAL_UART_Receive_IT>
	  HAL_UART_Receive_IT(&huart4, &buff_rx_mqtt, 1);
 80029fe:	2201      	movs	r2, #1
 8002a00:	4904      	ldr	r1, [pc, #16]	; (8002a14 <board_init+0x38>)
 8002a02:	4805      	ldr	r0, [pc, #20]	; (8002a18 <board_init+0x3c>)
 8002a04:	f7ff f81c 	bl	8001a40 <HAL_UART_Receive_IT>
}
 8002a08:	bf00      	nop
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	200000f0 	.word	0x200000f0
 8002a10:	20000074 	.word	0x20000074
 8002a14:	200000f1 	.word	0x200000f1
 8002a18:	2000002c 	.word	0x2000002c

08002a1c <SystemClock_Config>:

void SystemClock_Config(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b092      	sub	sp, #72	; 0x48
 8002a20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a22:	f107 0314 	add.w	r3, r7, #20
 8002a26:	2234      	movs	r2, #52	; 0x34
 8002a28:	2100      	movs	r1, #0
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f001 f90e 	bl	8003c4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a30:	463b      	mov	r3, r7
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	605a      	str	r2, [r3, #4]
 8002a38:	609a      	str	r2, [r3, #8]
 8002a3a:	60da      	str	r2, [r3, #12]
 8002a3c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a3e:	4b1d      	ldr	r3, [pc, #116]	; (8002ab4 <SystemClock_Config+0x98>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8002a46:	4a1b      	ldr	r2, [pc, #108]	; (8002ab4 <SystemClock_Config+0x98>)
 8002a48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a4c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a52:	2301      	movs	r3, #1
 8002a54:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a56:	2310      	movs	r3, #16
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002a62:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8002a68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a6c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a6e:	f107 0314 	add.w	r3, r7, #20
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fe f9e0 	bl	8000e38 <HAL_RCC_OscConfig>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002a7e:	f000 f8b1 	bl	8002be4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a82:	230f      	movs	r3, #15
 8002a84:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a86:	2303      	movs	r3, #3
 8002a88:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a92:	2300      	movs	r3, #0
 8002a94:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002a96:	463b      	mov	r3, r7
 8002a98:	2101      	movs	r1, #1
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fe fcfc 	bl	8001498 <HAL_RCC_ClockConfig>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002aa6:	f000 f89d 	bl	8002be4 <Error_Handler>
  }
}
 8002aaa:	bf00      	nop
 8002aac:	3748      	adds	r7, #72	; 0x48
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40007000 	.word	0x40007000

08002ab8 <MX_UART4_Init>:


static void MX_UART4_Init(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0


  huart4.Instance = UART4;
 8002abc:	4b11      	ldr	r3, [pc, #68]	; (8002b04 <MX_UART4_Init+0x4c>)
 8002abe:	4a12      	ldr	r2, [pc, #72]	; (8002b08 <MX_UART4_Init+0x50>)
 8002ac0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002ac2:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <MX_UART4_Init+0x4c>)
 8002ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ac8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002aca:	4b0e      	ldr	r3, [pc, #56]	; (8002b04 <MX_UART4_Init+0x4c>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002ad0:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <MX_UART4_Init+0x4c>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002ad6:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <MX_UART4_Init+0x4c>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002adc:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <MX_UART4_Init+0x4c>)
 8002ade:	220c      	movs	r2, #12
 8002ae0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ae2:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <MX_UART4_Init+0x4c>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ae8:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <MX_UART4_Init+0x4c>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002aee:	4805      	ldr	r0, [pc, #20]	; (8002b04 <MX_UART4_Init+0x4c>)
 8002af0:	f7fe ff56 	bl	80019a0 <HAL_UART_Init>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002afa:	f000 f873 	bl	8002be4 <Error_Handler>
  }


}
 8002afe:	bf00      	nop
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	2000002c 	.word	0x2000002c
 8002b08:	40004c00 	.word	0x40004c00

08002b0c <MX_USART2_UART_Init>:


static void MX_USART2_UART_Init(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0


  huart2.Instance = USART2;
 8002b10:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <MX_USART2_UART_Init+0x4c>)
 8002b12:	4a12      	ldr	r2, [pc, #72]	; (8002b5c <MX_USART2_UART_Init+0x50>)
 8002b14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b16:	4b10      	ldr	r3, [pc, #64]	; (8002b58 <MX_USART2_UART_Init+0x4c>)
 8002b18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b1e:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <MX_USART2_UART_Init+0x4c>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <MX_USART2_UART_Init+0x4c>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b2a:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <MX_USART2_UART_Init+0x4c>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b30:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <MX_USART2_UART_Init+0x4c>)
 8002b32:	220c      	movs	r2, #12
 8002b34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b36:	4b08      	ldr	r3, [pc, #32]	; (8002b58 <MX_USART2_UART_Init+0x4c>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <MX_USART2_UART_Init+0x4c>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b42:	4805      	ldr	r0, [pc, #20]	; (8002b58 <MX_USART2_UART_Init+0x4c>)
 8002b44:	f7fe ff2c 	bl	80019a0 <HAL_UART_Init>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002b4e:	f000 f849 	bl	8002be4 <Error_Handler>
  }


}
 8002b52:	bf00      	nop
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	20000074 	.word	0x20000074
 8002b5c:	40004400 	.word	0x40004400

08002b60 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af00      	add	r7, sp, #0

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b66:	4b1d      	ldr	r3, [pc, #116]	; (8002bdc <MX_GPIO_Init+0x7c>)
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	4a1c      	ldr	r2, [pc, #112]	; (8002bdc <MX_GPIO_Init+0x7c>)
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	61d3      	str	r3, [r2, #28]
 8002b72:	4b1a      	ldr	r3, [pc, #104]	; (8002bdc <MX_GPIO_Init+0x7c>)
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	60bb      	str	r3, [r7, #8]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b7e:	4b17      	ldr	r3, [pc, #92]	; (8002bdc <MX_GPIO_Init+0x7c>)
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	4a16      	ldr	r2, [pc, #88]	; (8002bdc <MX_GPIO_Init+0x7c>)
 8002b84:	f043 0304 	orr.w	r3, r3, #4
 8002b88:	61d3      	str	r3, [r2, #28]
 8002b8a:	4b14      	ldr	r3, [pc, #80]	; (8002bdc <MX_GPIO_Init+0x7c>)
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	607b      	str	r3, [r7, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]


  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b96:	f107 030c 	add.w	r3, r7, #12
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	605a      	str	r2, [r3, #4]
 8002ba0:	609a      	str	r2, [r3, #8]
 8002ba2:	60da      	str	r2, [r3, #12]
 8002ba4:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	61bb      	str	r3, [r7, #24]

  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002bb2:	2304      	movs	r3, #4
 8002bb4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bb6:	f107 030c 	add.w	r3, r7, #12
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4808      	ldr	r0, [pc, #32]	; (8002be0 <MX_GPIO_Init+0x80>)
 8002bbe:	f7fd ff7b 	bl	8000ab8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002bc2:	2308      	movs	r3, #8
 8002bc4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bc6:	f107 030c 	add.w	r3, r7, #12
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4804      	ldr	r0, [pc, #16]	; (8002be0 <MX_GPIO_Init+0x80>)
 8002bce:	f7fd ff73 	bl	8000ab8 <HAL_GPIO_Init>


}
 8002bd2:	bf00      	nop
 8002bd4:	3720      	adds	r7, #32
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	40020800 	.word	0x40020800

08002be4 <Error_Handler>:

void Error_Handler(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002be8:	b672      	cpsid	i
}
 8002bea:	bf00      	nop
  __disable_irq();
  while (1)
 8002bec:	e7fe      	b.n	8002bec <Error_Handler+0x8>
	...

08002bf0 <main>:
void blink_led_delay(uint8_t type);



int main(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
   board_init();
 8002bf4:	f7ff fef2 	bl	80029dc <board_init>
  matrix_init();
 8002bf8:	f000 fc9a 	bl	8003530 <matrix_init>
  GPIO_sensor_init();
 8002bfc:	f7ff fdc6 	bl	800278c <GPIO_sensor_init>
  lkv_stepmotor_gpio_init();
 8002c00:	f000 ff9a 	bl	8003b38 <lkv_stepmotor_gpio_init>
//  modbus_sever_init();

	current_level = get_current_level();
 8002c04:	f7ff fe34 	bl	8002870 <get_current_level>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	4b56      	ldr	r3, [pc, #344]	; (8002d68 <main+0x178>)
 8002c0e:	701a      	strb	r2, [r3, #0]

   if((current_level % 10) == 0){
 8002c10:	4b55      	ldr	r3, [pc, #340]	; (8002d68 <main+0x178>)
 8002c12:	781a      	ldrb	r2, [r3, #0]
 8002c14:	4b55      	ldr	r3, [pc, #340]	; (8002d6c <main+0x17c>)
 8002c16:	fba3 1302 	umull	r1, r3, r3, r2
 8002c1a:	08d9      	lsrs	r1, r3, #3
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d104      	bne.n	8002c36 <main+0x46>
	   target_level = current_level;
 8002c2c:	4b4e      	ldr	r3, [pc, #312]	; (8002d68 <main+0x178>)
 8002c2e:	781a      	ldrb	r2, [r3, #0]
 8002c30:	4b4f      	ldr	r3, [pc, #316]	; (8002d70 <main+0x180>)
 8002c32:	701a      	strb	r2, [r3, #0]
 8002c34:	e005      	b.n	8002c42 <main+0x52>
   }else{
	   target_level = current_level - 5;
 8002c36:	4b4c      	ldr	r3, [pc, #304]	; (8002d68 <main+0x178>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	3b05      	subs	r3, #5
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	4b4c      	ldr	r3, [pc, #304]	; (8002d70 <main+0x180>)
 8002c40:	701a      	strb	r2, [r3, #0]
   }

      elevator_process_force(STEP_MOTOR_SPEED_NOR);
 8002c42:	f640 2028 	movw	r0, #2600	; 0xa28
 8002c46:	f000 fb93 	bl	8003370 <elevator_process_force>

	    blink_led_delay(BLINK_START);
 8002c4a:	2002      	movs	r0, #2
 8002c4c:	f000 fa7a 	bl	8003144 <blink_led_delay>
		  status_cabin = WAIT_USER_FIST_CALL;
 8002c50:	4b48      	ldr	r3, [pc, #288]	; (8002d74 <main+0x184>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	701a      	strb	r2, [r3, #0]

  while (1)
  {
	  switch (status_cabin) {
 8002c56:	4b47      	ldr	r3, [pc, #284]	; (8002d74 <main+0x184>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d87c      	bhi.n	8002d58 <main+0x168>
 8002c5e:	a201      	add	r2, pc, #4	; (adr r2, 8002c64 <main+0x74>)
 8002c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c64:	08002c79 	.word	0x08002c79
 8002c68:	08002c8d 	.word	0x08002c8d
 8002c6c:	08002d59 	.word	0x08002d59
 8002c70:	08002d03 	.word	0x08002d03
 8002c74:	08002d1f 	.word	0x08002d1f
		case WAIT_USER_FIST_CALL:
			if(target_level != current_level){
 8002c78:	4b3d      	ldr	r3, [pc, #244]	; (8002d70 <main+0x180>)
 8002c7a:	781a      	ldrb	r2, [r3, #0]
 8002c7c:	4b3a      	ldr	r3, [pc, #232]	; (8002d68 <main+0x178>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d06b      	beq.n	8002d5c <main+0x16c>
				status_cabin = RUN_TO_TAKE_USER;
 8002c84:	4b3b      	ldr	r3, [pc, #236]	; (8002d74 <main+0x184>)
 8002c86:	2201      	movs	r2, #1
 8002c88:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002c8a:	e067      	b.n	8002d5c <main+0x16c>
		case RUN_TO_TAKE_USER:
			  if(target_level > current_level){
 8002c8c:	4b38      	ldr	r3, [pc, #224]	; (8002d70 <main+0x180>)
 8002c8e:	781a      	ldrb	r2, [r3, #0]
 8002c90:	4b35      	ldr	r3, [pc, #212]	; (8002d68 <main+0x178>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d90a      	bls.n	8002cae <main+0xbe>
				  show_display(LED_UP, target_level/10);
 8002c98:	4b35      	ldr	r3, [pc, #212]	; (8002d70 <main+0x180>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	4a33      	ldr	r2, [pc, #204]	; (8002d6c <main+0x17c>)
 8002c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca2:	08db      	lsrs	r3, r3, #3
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	2001      	movs	r0, #1
 8002caa:	f000 fb91 	bl	80033d0 <show_display>
			  }
			  if(target_level< current_level){
 8002cae:	4b30      	ldr	r3, [pc, #192]	; (8002d70 <main+0x180>)
 8002cb0:	781a      	ldrb	r2, [r3, #0]
 8002cb2:	4b2d      	ldr	r3, [pc, #180]	; (8002d68 <main+0x178>)
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d20a      	bcs.n	8002cd0 <main+0xe0>
				  show_display(LED_DWN, target_level/10);
 8002cba:	4b2d      	ldr	r3, [pc, #180]	; (8002d70 <main+0x180>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	4a2b      	ldr	r2, [pc, #172]	; (8002d6c <main+0x17c>)
 8002cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc4:	08db      	lsrs	r3, r3, #3
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	4619      	mov	r1, r3
 8002cca:	2000      	movs	r0, #0
 8002ccc:	f000 fb80 	bl	80033d0 <show_display>
			  }
			elevator_process_force(STEP_MOTOR_SPEED_NOR);
 8002cd0:	f640 2028 	movw	r0, #2600	; 0xa28
 8002cd4:	f000 fb4c 	bl	8003370 <elevator_process_force>
			if(current_level == target_level){
 8002cd8:	4b23      	ldr	r3, [pc, #140]	; (8002d68 <main+0x178>)
 8002cda:	781a      	ldrb	r2, [r3, #0]
 8002cdc:	4b24      	ldr	r3, [pc, #144]	; (8002d70 <main+0x180>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d13d      	bne.n	8002d60 <main+0x170>
				status_cabin = WAIT_USER_ODER_CALL;
 8002ce4:	4b23      	ldr	r3, [pc, #140]	; (8002d74 <main+0x184>)
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	701a      	strb	r2, [r3, #0]
				  show_display(LED_WAIT, current_level/10);
 8002cea:	4b1f      	ldr	r3, [pc, #124]	; (8002d68 <main+0x178>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	4a1f      	ldr	r2, [pc, #124]	; (8002d6c <main+0x17c>)
 8002cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf4:	08db      	lsrs	r3, r3, #3
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	2003      	movs	r0, #3
 8002cfc:	f000 fb68 	bl	80033d0 <show_display>
			}
			break;
 8002d00:	e02e      	b.n	8002d60 <main+0x170>
		case WAIT_USER_ODER_CALL:
			break;
		case RUN_TO_USER_ODER:
			elevator_process_force(STEP_MOTOR_SPEED_NOR);
 8002d02:	f640 2028 	movw	r0, #2600	; 0xa28
 8002d06:	f000 fb33 	bl	8003370 <elevator_process_force>
			if(current_level == target_level){
 8002d0a:	4b17      	ldr	r3, [pc, #92]	; (8002d68 <main+0x178>)
 8002d0c:	781a      	ldrb	r2, [r3, #0]
 8002d0e:	4b18      	ldr	r3, [pc, #96]	; (8002d70 <main+0x180>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d126      	bne.n	8002d64 <main+0x174>
				status_cabin = DONE_USER_ODER;
 8002d16:	4b17      	ldr	r3, [pc, #92]	; (8002d74 <main+0x184>)
 8002d18:	2204      	movs	r2, #4
 8002d1a:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002d1c:	e022      	b.n	8002d64 <main+0x174>
		case DONE_USER_ODER:
			blink_led_delay(BLINK_DONE);
 8002d1e:	2001      	movs	r0, #1
 8002d20:	f000 fa10 	bl	8003144 <blink_led_delay>
			  if(target_level_next_time != 0){
 8002d24:	4b14      	ldr	r3, [pc, #80]	; (8002d78 <main+0x188>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d006      	beq.n	8002d3a <main+0x14a>
				  target_level = target_level_next_time;
 8002d2c:	4b12      	ldr	r3, [pc, #72]	; (8002d78 <main+0x188>)
 8002d2e:	781a      	ldrb	r2, [r3, #0]
 8002d30:	4b0f      	ldr	r3, [pc, #60]	; (8002d70 <main+0x180>)
 8002d32:	701a      	strb	r2, [r3, #0]
				  target_level_next_time = 0;
 8002d34:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <main+0x188>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	701a      	strb	r2, [r3, #0]
			  }
			status_cabin = WAIT_USER_FIST_CALL;
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <main+0x184>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	701a      	strb	r2, [r3, #0]
			  show_display(LED_START, current_level/10);
 8002d40:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <main+0x178>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	4a09      	ldr	r2, [pc, #36]	; (8002d6c <main+0x17c>)
 8002d46:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4a:	08db      	lsrs	r3, r3, #3
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	4619      	mov	r1, r3
 8002d50:	2008      	movs	r0, #8
 8002d52:	f000 fb3d 	bl	80033d0 <show_display>
			break;
 8002d56:	e006      	b.n	8002d66 <main+0x176>
		default:
			break;
 8002d58:	bf00      	nop
 8002d5a:	e77c      	b.n	8002c56 <main+0x66>
			break;
 8002d5c:	bf00      	nop
 8002d5e:	e77a      	b.n	8002c56 <main+0x66>
			break;
 8002d60:	bf00      	nop
 8002d62:	e778      	b.n	8002c56 <main+0x66>
			break;
 8002d64:	bf00      	nop
	  switch (status_cabin) {
 8002d66:	e776      	b.n	8002c56 <main+0x66>
 8002d68:	200000c6 	.word	0x200000c6
 8002d6c:	cccccccd 	.word	0xcccccccd
 8002d70:	200000c8 	.word	0x200000c8
 8002d74:	200000c3 	.word	0x200000c3
 8002d78:	200000c7 	.word	0x200000c7

08002d7c <SysTick_Handler>:
	}
  }
}

void SysTick_Handler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
	g_sys_time = g_sys_time + 10;
 8002d80:	4b9e      	ldr	r3, [pc, #632]	; (8002ffc <SysTick_Handler+0x280>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	330a      	adds	r3, #10
 8002d86:	4a9d      	ldr	r2, [pc, #628]	; (8002ffc <SysTick_Handler+0x280>)
 8002d88:	6013      	str	r3, [r2, #0]
  HAL_IncTick();
 8002d8a:	f7fd fccb 	bl	8000724 <HAL_IncTick>
  current_level = get_current_level();
 8002d8e:	f7ff fd6f 	bl	8002870 <get_current_level>
 8002d92:	4603      	mov	r3, r0
 8002d94:	461a      	mov	r2, r3
 8002d96:	4b9a      	ldr	r3, [pc, #616]	; (8003000 <SysTick_Handler+0x284>)
 8002d98:	701a      	strb	r2, [r3, #0]
  		  user_char = get_char_user();
 8002d9a:	f000 fd1f 	bl	80037dc <get_char_user>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	461a      	mov	r2, r3
 8002da2:	4b98      	ldr	r3, [pc, #608]	; (8003004 <SysTick_Handler+0x288>)
 8002da4:	701a      	strb	r2, [r3, #0]

  		  switch(status_cabin){
 8002da6:	4b98      	ldr	r3, [pc, #608]	; (8003008 <SysTick_Handler+0x28c>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	f200 814c 	bhi.w	8003048 <SysTick_Handler+0x2cc>
 8002db0:	a201      	add	r2, pc, #4	; (adr r2, 8002db8 <SysTick_Handler+0x3c>)
 8002db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db6:	bf00      	nop
 8002db8:	08002dcd 	.word	0x08002dcd
 8002dbc:	08002e7b 	.word	0x08002e7b
 8002dc0:	08002ef7 	.word	0x08002ef7
 8002dc4:	08002f89 	.word	0x08002f89
 8002dc8:	08003019 	.word	0x08003019
		  case WAIT_USER_FIST_CALL:
			  if((user_char >= '1') && (user_char <= '4')){
 8002dcc:	4b8d      	ldr	r3, [pc, #564]	; (8003004 <SysTick_Handler+0x288>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b30      	cmp	r3, #48	; 0x30
 8002dd2:	f240 813b 	bls.w	800304c <SysTick_Handler+0x2d0>
 8002dd6:	4b8b      	ldr	r3, [pc, #556]	; (8003004 <SysTick_Handler+0x288>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b34      	cmp	r3, #52	; 0x34
 8002ddc:	f200 8136 	bhi.w	800304c <SysTick_Handler+0x2d0>
				  while(get_char_user() != 0);
 8002de0:	bf00      	nop
 8002de2:	f000 fcfb 	bl	80037dc <get_char_user>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1fa      	bne.n	8002de2 <SysTick_Handler+0x66>
				  target_level = (user_char - '0') * 10;
 8002dec:	4b85      	ldr	r3, [pc, #532]	; (8003004 <SysTick_Handler+0x288>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	461a      	mov	r2, r3
 8002df2:	0092      	lsls	r2, r2, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	3320      	adds	r3, #32
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	4b83      	ldr	r3, [pc, #524]	; (800300c <SysTick_Handler+0x290>)
 8002e00:	701a      	strb	r2, [r3, #0]
				  if(target_level > current_level){
 8002e02:	4b82      	ldr	r3, [pc, #520]	; (800300c <SysTick_Handler+0x290>)
 8002e04:	781a      	ldrb	r2, [r3, #0]
 8002e06:	4b7e      	ldr	r3, [pc, #504]	; (8003000 <SysTick_Handler+0x284>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d90e      	bls.n	8002e2c <SysTick_Handler+0xb0>
					  status_cabin = RUN_TO_TAKE_USER;
 8002e0e:	4b7e      	ldr	r3, [pc, #504]	; (8003008 <SysTick_Handler+0x28c>)
 8002e10:	2201      	movs	r2, #1
 8002e12:	701a      	strb	r2, [r3, #0]
					  show_display(LED_UP, target_level/10);
 8002e14:	4b7d      	ldr	r3, [pc, #500]	; (800300c <SysTick_Handler+0x290>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	4a7d      	ldr	r2, [pc, #500]	; (8003010 <SysTick_Handler+0x294>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	08db      	lsrs	r3, r3, #3
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	4619      	mov	r1, r3
 8002e24:	2001      	movs	r0, #1
 8002e26:	f000 fad3 	bl	80033d0 <show_display>
					  status_cabin = RUN_TO_TAKE_USER;
					  show_display(LED_WAIT, target_level/10);\
					  status_cabin = WAIT_USER_ODER_CALL;
				  }
			  }
			  break;
 8002e2a:	e10f      	b.n	800304c <SysTick_Handler+0x2d0>
				  else if(target_level< current_level){
 8002e2c:	4b77      	ldr	r3, [pc, #476]	; (800300c <SysTick_Handler+0x290>)
 8002e2e:	781a      	ldrb	r2, [r3, #0]
 8002e30:	4b73      	ldr	r3, [pc, #460]	; (8003000 <SysTick_Handler+0x284>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d20e      	bcs.n	8002e56 <SysTick_Handler+0xda>
					  status_cabin = RUN_TO_TAKE_USER;
 8002e38:	4b73      	ldr	r3, [pc, #460]	; (8003008 <SysTick_Handler+0x28c>)
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	701a      	strb	r2, [r3, #0]
					  show_display(LED_DWN, target_level/10);
 8002e3e:	4b73      	ldr	r3, [pc, #460]	; (800300c <SysTick_Handler+0x290>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	4a73      	ldr	r2, [pc, #460]	; (8003010 <SysTick_Handler+0x294>)
 8002e44:	fba2 2303 	umull	r2, r3, r2, r3
 8002e48:	08db      	lsrs	r3, r3, #3
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	2000      	movs	r0, #0
 8002e50:	f000 fabe 	bl	80033d0 <show_display>
			  break;
 8002e54:	e0fa      	b.n	800304c <SysTick_Handler+0x2d0>
					  status_cabin = RUN_TO_TAKE_USER;
 8002e56:	4b6c      	ldr	r3, [pc, #432]	; (8003008 <SysTick_Handler+0x28c>)
 8002e58:	2201      	movs	r2, #1
 8002e5a:	701a      	strb	r2, [r3, #0]
					  show_display(LED_WAIT, target_level/10);\
 8002e5c:	4b6b      	ldr	r3, [pc, #428]	; (800300c <SysTick_Handler+0x290>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	4a6b      	ldr	r2, [pc, #428]	; (8003010 <SysTick_Handler+0x294>)
 8002e62:	fba2 2303 	umull	r2, r3, r2, r3
 8002e66:	08db      	lsrs	r3, r3, #3
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	2003      	movs	r0, #3
 8002e6e:	f000 faaf 	bl	80033d0 <show_display>
					  status_cabin = WAIT_USER_ODER_CALL;
 8002e72:	4b65      	ldr	r3, [pc, #404]	; (8003008 <SysTick_Handler+0x28c>)
 8002e74:	2202      	movs	r2, #2
 8002e76:	701a      	strb	r2, [r3, #0]
			  break;
 8002e78:	e0e8      	b.n	800304c <SysTick_Handler+0x2d0>
		  case RUN_TO_TAKE_USER:
			  if((user_char >= '1') && (user_char <= '4')){
 8002e7a:	4b62      	ldr	r3, [pc, #392]	; (8003004 <SysTick_Handler+0x288>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b30      	cmp	r3, #48	; 0x30
 8002e80:	f240 80e6 	bls.w	8003050 <SysTick_Handler+0x2d4>
 8002e84:	4b5f      	ldr	r3, [pc, #380]	; (8003004 <SysTick_Handler+0x288>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b34      	cmp	r3, #52	; 0x34
 8002e8a:	f200 80e1 	bhi.w	8003050 <SysTick_Handler+0x2d4>
				  if(!target_level_next_time){
 8002e8e:	4b61      	ldr	r3, [pc, #388]	; (8003014 <SysTick_Handler+0x298>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f040 80dc 	bne.w	8003050 <SysTick_Handler+0x2d4>
					  target_level_next_time = (user_char - '0') * 10;
 8002e98:	4b5a      	ldr	r3, [pc, #360]	; (8003004 <SysTick_Handler+0x288>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	0092      	lsls	r2, r2, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	3320      	adds	r3, #32
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	4b5a      	ldr	r3, [pc, #360]	; (8003014 <SysTick_Handler+0x298>)
 8002eac:	701a      	strb	r2, [r3, #0]
					  if(target_level > current_level){
 8002eae:	4b57      	ldr	r3, [pc, #348]	; (800300c <SysTick_Handler+0x290>)
 8002eb0:	781a      	ldrb	r2, [r3, #0]
 8002eb2:	4b53      	ldr	r3, [pc, #332]	; (8003000 <SysTick_Handler+0x284>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d90a      	bls.n	8002ed0 <SysTick_Handler+0x154>
						  show_display(LED_UP, target_level/10);
 8002eba:	4b54      	ldr	r3, [pc, #336]	; (800300c <SysTick_Handler+0x290>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	4a54      	ldr	r2, [pc, #336]	; (8003010 <SysTick_Handler+0x294>)
 8002ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec4:	08db      	lsrs	r3, r3, #3
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	4619      	mov	r1, r3
 8002eca:	2001      	movs	r0, #1
 8002ecc:	f000 fa80 	bl	80033d0 <show_display>
					  }
					  if(target_level< current_level){
 8002ed0:	4b4e      	ldr	r3, [pc, #312]	; (800300c <SysTick_Handler+0x290>)
 8002ed2:	781a      	ldrb	r2, [r3, #0]
 8002ed4:	4b4a      	ldr	r3, [pc, #296]	; (8003000 <SysTick_Handler+0x284>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	f080 80b9 	bcs.w	8003050 <SysTick_Handler+0x2d4>
						  show_display(LED_DWN, target_level/10);
 8002ede:	4b4b      	ldr	r3, [pc, #300]	; (800300c <SysTick_Handler+0x290>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	4a4b      	ldr	r2, [pc, #300]	; (8003010 <SysTick_Handler+0x294>)
 8002ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee8:	08db      	lsrs	r3, r3, #3
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	4619      	mov	r1, r3
 8002eee:	2000      	movs	r0, #0
 8002ef0:	f000 fa6e 	bl	80033d0 <show_display>
					  }
				  }
			  }
			  break;
 8002ef4:	e0ac      	b.n	8003050 <SysTick_Handler+0x2d4>
		  case WAIT_USER_ODER_CALL:
			  if((user_char >= '1') && (user_char <= '4')){
 8002ef6:	4b43      	ldr	r3, [pc, #268]	; (8003004 <SysTick_Handler+0x288>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b30      	cmp	r3, #48	; 0x30
 8002efc:	f240 80aa 	bls.w	8003054 <SysTick_Handler+0x2d8>
 8002f00:	4b40      	ldr	r3, [pc, #256]	; (8003004 <SysTick_Handler+0x288>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b34      	cmp	r3, #52	; 0x34
 8002f06:	f200 80a5 	bhi.w	8003054 <SysTick_Handler+0x2d8>
				  while(get_char_user() != 0);
 8002f0a:	bf00      	nop
 8002f0c:	f000 fc66 	bl	80037dc <get_char_user>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1fa      	bne.n	8002f0c <SysTick_Handler+0x190>
				  target_level = (user_char - '0') * 10;
 8002f16:	4b3b      	ldr	r3, [pc, #236]	; (8003004 <SysTick_Handler+0x288>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	0092      	lsls	r2, r2, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	3320      	adds	r3, #32
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	4b38      	ldr	r3, [pc, #224]	; (800300c <SysTick_Handler+0x290>)
 8002f2a:	701a      	strb	r2, [r3, #0]

				  if(target_level > current_level){
 8002f2c:	4b37      	ldr	r3, [pc, #220]	; (800300c <SysTick_Handler+0x290>)
 8002f2e:	781a      	ldrb	r2, [r3, #0]
 8002f30:	4b33      	ldr	r3, [pc, #204]	; (8003000 <SysTick_Handler+0x284>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d90e      	bls.n	8002f56 <SysTick_Handler+0x1da>
					  status_cabin = RUN_TO_USER_ODER;
 8002f38:	4b33      	ldr	r3, [pc, #204]	; (8003008 <SysTick_Handler+0x28c>)
 8002f3a:	2203      	movs	r2, #3
 8002f3c:	701a      	strb	r2, [r3, #0]
					  show_display(LED_UP, target_level/10);
 8002f3e:	4b33      	ldr	r3, [pc, #204]	; (800300c <SysTick_Handler+0x290>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	4a33      	ldr	r2, [pc, #204]	; (8003010 <SysTick_Handler+0x294>)
 8002f44:	fba2 2303 	umull	r2, r3, r2, r3
 8002f48:	08db      	lsrs	r3, r3, #3
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	2001      	movs	r0, #1
 8002f50:	f000 fa3e 	bl	80033d0 <show_display>
					  show_display(LED_DWN, target_level/10);
				  }else{
					  status_cabin = DONE_USER_ODER;
				  }
			  }
			  break;
 8002f54:	e07e      	b.n	8003054 <SysTick_Handler+0x2d8>
				  else if(target_level< current_level){
 8002f56:	4b2d      	ldr	r3, [pc, #180]	; (800300c <SysTick_Handler+0x290>)
 8002f58:	781a      	ldrb	r2, [r3, #0]
 8002f5a:	4b29      	ldr	r3, [pc, #164]	; (8003000 <SysTick_Handler+0x284>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d20e      	bcs.n	8002f80 <SysTick_Handler+0x204>
					  status_cabin = RUN_TO_USER_ODER;
 8002f62:	4b29      	ldr	r3, [pc, #164]	; (8003008 <SysTick_Handler+0x28c>)
 8002f64:	2203      	movs	r2, #3
 8002f66:	701a      	strb	r2, [r3, #0]
					  show_display(LED_DWN, target_level/10);
 8002f68:	4b28      	ldr	r3, [pc, #160]	; (800300c <SysTick_Handler+0x290>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	4a28      	ldr	r2, [pc, #160]	; (8003010 <SysTick_Handler+0x294>)
 8002f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f72:	08db      	lsrs	r3, r3, #3
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	4619      	mov	r1, r3
 8002f78:	2000      	movs	r0, #0
 8002f7a:	f000 fa29 	bl	80033d0 <show_display>
			  break;
 8002f7e:	e069      	b.n	8003054 <SysTick_Handler+0x2d8>
					  status_cabin = DONE_USER_ODER;
 8002f80:	4b21      	ldr	r3, [pc, #132]	; (8003008 <SysTick_Handler+0x28c>)
 8002f82:	2204      	movs	r2, #4
 8002f84:	701a      	strb	r2, [r3, #0]
			  break;
 8002f86:	e065      	b.n	8003054 <SysTick_Handler+0x2d8>
		  case RUN_TO_USER_ODER:
			  if((user_char >= '1') && (user_char <= '4')){
 8002f88:	4b1e      	ldr	r3, [pc, #120]	; (8003004 <SysTick_Handler+0x288>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b30      	cmp	r3, #48	; 0x30
 8002f8e:	d963      	bls.n	8003058 <SysTick_Handler+0x2dc>
 8002f90:	4b1c      	ldr	r3, [pc, #112]	; (8003004 <SysTick_Handler+0x288>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	2b34      	cmp	r3, #52	; 0x34
 8002f96:	d85f      	bhi.n	8003058 <SysTick_Handler+0x2dc>
				  if(!target_level_next_time){
 8002f98:	4b1e      	ldr	r3, [pc, #120]	; (8003014 <SysTick_Handler+0x298>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d15b      	bne.n	8003058 <SysTick_Handler+0x2dc>
					  target_level_next_time = (user_char - '0') * 10;
 8002fa0:	4b18      	ldr	r3, [pc, #96]	; (8003004 <SysTick_Handler+0x288>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	0092      	lsls	r2, r2, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	3320      	adds	r3, #32
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	4b18      	ldr	r3, [pc, #96]	; (8003014 <SysTick_Handler+0x298>)
 8002fb4:	701a      	strb	r2, [r3, #0]
					  if(target_level > current_level){
 8002fb6:	4b15      	ldr	r3, [pc, #84]	; (800300c <SysTick_Handler+0x290>)
 8002fb8:	781a      	ldrb	r2, [r3, #0]
 8002fba:	4b11      	ldr	r3, [pc, #68]	; (8003000 <SysTick_Handler+0x284>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d90a      	bls.n	8002fd8 <SysTick_Handler+0x25c>
						  show_display(LED_UP, target_level/10);
 8002fc2:	4b12      	ldr	r3, [pc, #72]	; (800300c <SysTick_Handler+0x290>)
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	4a12      	ldr	r2, [pc, #72]	; (8003010 <SysTick_Handler+0x294>)
 8002fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fcc:	08db      	lsrs	r3, r3, #3
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	2001      	movs	r0, #1
 8002fd4:	f000 f9fc 	bl	80033d0 <show_display>
					  }
					  if(target_level< current_level){
 8002fd8:	4b0c      	ldr	r3, [pc, #48]	; (800300c <SysTick_Handler+0x290>)
 8002fda:	781a      	ldrb	r2, [r3, #0]
 8002fdc:	4b08      	ldr	r3, [pc, #32]	; (8003000 <SysTick_Handler+0x284>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d239      	bcs.n	8003058 <SysTick_Handler+0x2dc>
						  show_display(LED_DWN, target_level/10);
 8002fe4:	4b09      	ldr	r3, [pc, #36]	; (800300c <SysTick_Handler+0x290>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	4a09      	ldr	r2, [pc, #36]	; (8003010 <SysTick_Handler+0x294>)
 8002fea:	fba2 2303 	umull	r2, r3, r2, r3
 8002fee:	08db      	lsrs	r3, r3, #3
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f000 f9eb 	bl	80033d0 <show_display>
					  }
				  }
			  }
			  break;
 8002ffa:	e02d      	b.n	8003058 <SysTick_Handler+0x2dc>
 8002ffc:	200000ec 	.word	0x200000ec
 8003000:	200000c6 	.word	0x200000c6
 8003004:	200000c2 	.word	0x200000c2
 8003008:	200000c3 	.word	0x200000c3
 800300c:	200000c8 	.word	0x200000c8
 8003010:	cccccccd 	.word	0xcccccccd
 8003014:	200000c7 	.word	0x200000c7
		  case DONE_USER_ODER:
			  if((user_char >= '1') && (user_char <= '4')){
 8003018:	4b12      	ldr	r3, [pc, #72]	; (8003064 <SysTick_Handler+0x2e8>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b30      	cmp	r3, #48	; 0x30
 800301e:	d91d      	bls.n	800305c <SysTick_Handler+0x2e0>
 8003020:	4b10      	ldr	r3, [pc, #64]	; (8003064 <SysTick_Handler+0x2e8>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b34      	cmp	r3, #52	; 0x34
 8003026:	d819      	bhi.n	800305c <SysTick_Handler+0x2e0>
				  if(!target_level_next_time){
 8003028:	4b0f      	ldr	r3, [pc, #60]	; (8003068 <SysTick_Handler+0x2ec>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d115      	bne.n	800305c <SysTick_Handler+0x2e0>
					  target_level_next_time = (user_char - '0') * 10;
 8003030:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <SysTick_Handler+0x2e8>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	461a      	mov	r2, r3
 8003036:	0092      	lsls	r2, r2, #2
 8003038:	4413      	add	r3, r2
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	b2db      	uxtb	r3, r3
 800303e:	3320      	adds	r3, #32
 8003040:	b2da      	uxtb	r2, r3
 8003042:	4b09      	ldr	r3, [pc, #36]	; (8003068 <SysTick_Handler+0x2ec>)
 8003044:	701a      	strb	r2, [r3, #0]
				  }
			  }
			  break;
 8003046:	e009      	b.n	800305c <SysTick_Handler+0x2e0>
		  default:
			  break;
 8003048:	bf00      	nop
 800304a:	e008      	b.n	800305e <SysTick_Handler+0x2e2>
			  break;
 800304c:	bf00      	nop
 800304e:	e006      	b.n	800305e <SysTick_Handler+0x2e2>
			  break;
 8003050:	bf00      	nop
 8003052:	e004      	b.n	800305e <SysTick_Handler+0x2e2>
			  break;
 8003054:	bf00      	nop
 8003056:	e002      	b.n	800305e <SysTick_Handler+0x2e2>
			  break;
 8003058:	bf00      	nop
 800305a:	e000      	b.n	800305e <SysTick_Handler+0x2e2>
			  break;
 800305c:	bf00      	nop
		  }
}
 800305e:	bf00      	nop
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	200000c2 	.word	0x200000c2
 8003068:	200000c7 	.word	0x200000c7

0800306c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 8003070:	4810      	ldr	r0, [pc, #64]	; (80030b4 <USART2_IRQHandler+0x48>)
 8003072:	f7fe fd0b 	bl	8001a8c <HAL_UART_IRQHandler>
	HAL_UART_Receive_IT(&huart2, &buff_rx, 1);
 8003076:	2201      	movs	r2, #1
 8003078:	490f      	ldr	r1, [pc, #60]	; (80030b8 <USART2_IRQHandler+0x4c>)
 800307a:	480e      	ldr	r0, [pc, #56]	; (80030b4 <USART2_IRQHandler+0x48>)
 800307c:	f7fe fce0 	bl	8001a40 <HAL_UART_Receive_IT>
	ring_buffer[front_index] = buff_rx;
 8003080:	4b0e      	ldr	r3, [pc, #56]	; (80030bc <USART2_IRQHandler+0x50>)
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	b29b      	uxth	r3, r3
 8003086:	461a      	mov	r2, r3
 8003088:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <USART2_IRQHandler+0x4c>)
 800308a:	7819      	ldrb	r1, [r3, #0]
 800308c:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <USART2_IRQHandler+0x54>)
 800308e:	5499      	strb	r1, [r3, r2]
	front_index++;
 8003090:	4b0a      	ldr	r3, [pc, #40]	; (80030bc <USART2_IRQHandler+0x50>)
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	b29b      	uxth	r3, r3
 8003096:	3301      	adds	r3, #1
 8003098:	b29a      	uxth	r2, r3
 800309a:	4b08      	ldr	r3, [pc, #32]	; (80030bc <USART2_IRQHandler+0x50>)
 800309c:	801a      	strh	r2, [r3, #0]
	if(front_index >= 1024){
 800309e:	4b07      	ldr	r3, [pc, #28]	; (80030bc <USART2_IRQHandler+0x50>)
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030a8:	d302      	bcc.n	80030b0 <USART2_IRQHandler+0x44>
		front_index = 0;
 80030aa:	4b04      	ldr	r3, [pc, #16]	; (80030bc <USART2_IRQHandler+0x50>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	801a      	strh	r2, [r3, #0]
	}
}
 80030b0:	bf00      	nop
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	20000074 	.word	0x20000074
 80030b8:	200000f0 	.word	0x200000f0
 80030bc:	200004f4 	.word	0x200004f4
 80030c0:	200000f4 	.word	0x200000f4

080030c4 <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart4);
 80030c8:	4819      	ldr	r0, [pc, #100]	; (8003130 <UART4_IRQHandler+0x6c>)
 80030ca:	f7fe fcdf 	bl	8001a8c <HAL_UART_IRQHandler>
  HAL_UART_Receive_IT(&huart4, &buff_rx_mqtt, 1);
 80030ce:	2201      	movs	r2, #1
 80030d0:	4918      	ldr	r1, [pc, #96]	; (8003134 <UART4_IRQHandler+0x70>)
 80030d2:	4817      	ldr	r0, [pc, #92]	; (8003130 <UART4_IRQHandler+0x6c>)
 80030d4:	f7fe fcb4 	bl	8001a40 <HAL_UART_Receive_IT>
	if(buff_rx_mqtt == '*'){
 80030d8:	4b16      	ldr	r3, [pc, #88]	; (8003134 <UART4_IRQHandler+0x70>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b2a      	cmp	r3, #42	; 0x2a
 80030de:	d103      	bne.n	80030e8 <UART4_IRQHandler+0x24>
		mqtt_index = 0;
 80030e0:	4b15      	ldr	r3, [pc, #84]	; (8003138 <UART4_IRQHandler+0x74>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	701a      	strb	r2, [r3, #0]
		mqtt_index++;
		if(mqtt_index >= 32){
			mqtt_index = 0;
		}
	}
}
 80030e6:	e021      	b.n	800312c <UART4_IRQHandler+0x68>
	} else if(buff_rx_mqtt == ';'){
 80030e8:	4b12      	ldr	r3, [pc, #72]	; (8003134 <UART4_IRQHandler+0x70>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b3b      	cmp	r3, #59	; 0x3b
 80030ee:	d109      	bne.n	8003104 <UART4_IRQHandler+0x40>
		buff_mqtt_slave[mqtt_index] = '\0';
 80030f0:	4b11      	ldr	r3, [pc, #68]	; (8003138 <UART4_IRQHandler+0x74>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	461a      	mov	r2, r3
 80030f6:	4b11      	ldr	r3, [pc, #68]	; (800313c <UART4_IRQHandler+0x78>)
 80030f8:	2100      	movs	r1, #0
 80030fa:	5499      	strb	r1, [r3, r2]
		is_new_linux_msg = 1;
 80030fc:	4b10      	ldr	r3, [pc, #64]	; (8003140 <UART4_IRQHandler+0x7c>)
 80030fe:	2201      	movs	r2, #1
 8003100:	701a      	strb	r2, [r3, #0]
}
 8003102:	e013      	b.n	800312c <UART4_IRQHandler+0x68>
		buff_mqtt_slave[mqtt_index] = buff_rx_mqtt;
 8003104:	4b0c      	ldr	r3, [pc, #48]	; (8003138 <UART4_IRQHandler+0x74>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <UART4_IRQHandler+0x70>)
 800310c:	7819      	ldrb	r1, [r3, #0]
 800310e:	4b0b      	ldr	r3, [pc, #44]	; (800313c <UART4_IRQHandler+0x78>)
 8003110:	5499      	strb	r1, [r3, r2]
		mqtt_index++;
 8003112:	4b09      	ldr	r3, [pc, #36]	; (8003138 <UART4_IRQHandler+0x74>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	3301      	adds	r3, #1
 8003118:	b2da      	uxtb	r2, r3
 800311a:	4b07      	ldr	r3, [pc, #28]	; (8003138 <UART4_IRQHandler+0x74>)
 800311c:	701a      	strb	r2, [r3, #0]
		if(mqtt_index >= 32){
 800311e:	4b06      	ldr	r3, [pc, #24]	; (8003138 <UART4_IRQHandler+0x74>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b1f      	cmp	r3, #31
 8003124:	d902      	bls.n	800312c <UART4_IRQHandler+0x68>
			mqtt_index = 0;
 8003126:	4b04      	ldr	r3, [pc, #16]	; (8003138 <UART4_IRQHandler+0x74>)
 8003128:	2200      	movs	r2, #0
 800312a:	701a      	strb	r2, [r3, #0]
}
 800312c:	bf00      	nop
 800312e:	bd80      	pop	{r7, pc}
 8003130:	2000002c 	.word	0x2000002c
 8003134:	200000f1 	.word	0x200000f1
 8003138:	200000c4 	.word	0x200000c4
 800313c:	200000cc 	.word	0x200000cc
 8003140:	200000c5 	.word	0x200000c5

08003144 <blink_led_delay>:

void blink_led_delay(uint8_t type){
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af02      	add	r7, sp, #8
 800314a:	4603      	mov	r3, r0
 800314c:	71fb      	strb	r3, [r7, #7]
    TM1637_SetBrightness(3);
 800314e:	2003      	movs	r0, #3
 8003150:	f7ff fa90 	bl	8002674 <TM1637_SetBrightness>

    switch (type) {
 8003154:	79fb      	ldrb	r3, [r7, #7]
 8003156:	2b01      	cmp	r3, #1
 8003158:	f000 80bf 	beq.w	80032da <blink_led_delay+0x196>
 800315c:	2b02      	cmp	r3, #2
 800315e:	f040 80fe 	bne.w	800335e <blink_led_delay+0x21a>
		case BLINK_START:
			for(int i = 0; i < 3; i++){
 8003162:	2300      	movs	r3, #0
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	e03a      	b.n	80031de <blink_led_delay+0x9a>
				  show_display(LED_START1, current_level/10);
 8003168:	4b7f      	ldr	r3, [pc, #508]	; (8003368 <blink_led_delay+0x224>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	4a7f      	ldr	r2, [pc, #508]	; (800336c <blink_led_delay+0x228>)
 800316e:	fba2 2303 	umull	r2, r3, r2, r3
 8003172:	08db      	lsrs	r3, r3, #3
 8003174:	b2db      	uxtb	r3, r3
 8003176:	4619      	mov	r1, r3
 8003178:	2009      	movs	r0, #9
 800317a:	f000 f929 	bl	80033d0 <show_display>
				  HAL_Delay(1);
 800317e:	2001      	movs	r0, #1
 8003180:	f7fd faec 	bl	800075c <HAL_Delay>
				  show_display(LED_START2, current_level/10);
 8003184:	4b78      	ldr	r3, [pc, #480]	; (8003368 <blink_led_delay+0x224>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	4a78      	ldr	r2, [pc, #480]	; (800336c <blink_led_delay+0x228>)
 800318a:	fba2 2303 	umull	r2, r3, r2, r3
 800318e:	08db      	lsrs	r3, r3, #3
 8003190:	b2db      	uxtb	r3, r3
 8003192:	4619      	mov	r1, r3
 8003194:	200a      	movs	r0, #10
 8003196:	f000 f91b 	bl	80033d0 <show_display>
				  HAL_Delay(1);
 800319a:	2001      	movs	r0, #1
 800319c:	f7fd fade 	bl	800075c <HAL_Delay>
				  show_display(LED_START3, current_level/10);
 80031a0:	4b71      	ldr	r3, [pc, #452]	; (8003368 <blink_led_delay+0x224>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	4a71      	ldr	r2, [pc, #452]	; (800336c <blink_led_delay+0x228>)
 80031a6:	fba2 2303 	umull	r2, r3, r2, r3
 80031aa:	08db      	lsrs	r3, r3, #3
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	4619      	mov	r1, r3
 80031b0:	200b      	movs	r0, #11
 80031b2:	f000 f90d 	bl	80033d0 <show_display>
				  HAL_Delay(1);
 80031b6:	2001      	movs	r0, #1
 80031b8:	f7fd fad0 	bl	800075c <HAL_Delay>
				  show_display(LED_START4, current_level/10);
 80031bc:	4b6a      	ldr	r3, [pc, #424]	; (8003368 <blink_led_delay+0x224>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	4a6a      	ldr	r2, [pc, #424]	; (800336c <blink_led_delay+0x228>)
 80031c2:	fba2 2303 	umull	r2, r3, r2, r3
 80031c6:	08db      	lsrs	r3, r3, #3
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	4619      	mov	r1, r3
 80031cc:	200c      	movs	r0, #12
 80031ce:	f000 f8ff 	bl	80033d0 <show_display>
				  HAL_Delay(1);
 80031d2:	2001      	movs	r0, #1
 80031d4:	f7fd fac2 	bl	800075c <HAL_Delay>
			for(int i = 0; i < 3; i++){
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	3301      	adds	r3, #1
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	ddc1      	ble.n	8003168 <blink_led_delay+0x24>
			}
			TM1637_Display_4_char(0, 0, 0, 0, 1);
 80031e4:	2301      	movs	r3, #1
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	2300      	movs	r3, #0
 80031ea:	2200      	movs	r2, #0
 80031ec:	2100      	movs	r1, #0
 80031ee:	2000      	movs	r0, #0
 80031f0:	f7ff f9ec 	bl	80025cc <TM1637_Display_4_char>
			HAL_Delay(100);
 80031f4:	2064      	movs	r0, #100	; 0x64
 80031f6:	f7fd fab1 	bl	800075c <HAL_Delay>
			TM1637_Display_4_char(20, 20, 20, 20, 0);
 80031fa:	2300      	movs	r3, #0
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	2314      	movs	r3, #20
 8003200:	2214      	movs	r2, #20
 8003202:	2114      	movs	r1, #20
 8003204:	2014      	movs	r0, #20
 8003206:	f7ff f9e1 	bl	80025cc <TM1637_Display_4_char>
			HAL_Delay(100);
 800320a:	2064      	movs	r0, #100	; 0x64
 800320c:	f7fd faa6 	bl	800075c <HAL_Delay>
			TM1637_Display_4_char(0, 0, 0, 0, 1);
 8003210:	2301      	movs	r3, #1
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	2300      	movs	r3, #0
 8003216:	2200      	movs	r2, #0
 8003218:	2100      	movs	r1, #0
 800321a:	2000      	movs	r0, #0
 800321c:	f7ff f9d6 	bl	80025cc <TM1637_Display_4_char>
			HAL_Delay(100);
 8003220:	2064      	movs	r0, #100	; 0x64
 8003222:	f7fd fa9b 	bl	800075c <HAL_Delay>
			TM1637_Display_4_char(20, 20, 20, 20, 0);
 8003226:	2300      	movs	r3, #0
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	2314      	movs	r3, #20
 800322c:	2214      	movs	r2, #20
 800322e:	2114      	movs	r1, #20
 8003230:	2014      	movs	r0, #20
 8003232:	f7ff f9cb 	bl	80025cc <TM1637_Display_4_char>
			HAL_Delay(100);
 8003236:	2064      	movs	r0, #100	; 0x64
 8003238:	f7fd fa90 	bl	800075c <HAL_Delay>
			TM1637_Display_4_char(0, 0, 0, 0, 1);
 800323c:	2301      	movs	r3, #1
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	2300      	movs	r3, #0
 8003242:	2200      	movs	r2, #0
 8003244:	2100      	movs	r1, #0
 8003246:	2000      	movs	r0, #0
 8003248:	f7ff f9c0 	bl	80025cc <TM1637_Display_4_char>
			HAL_Delay(100);
 800324c:	2064      	movs	r0, #100	; 0x64
 800324e:	f7fd fa85 	bl	800075c <HAL_Delay>
			TM1637_Display_4_char(20, 20, 20, 20, 0);
 8003252:	2300      	movs	r3, #0
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	2314      	movs	r3, #20
 8003258:	2214      	movs	r2, #20
 800325a:	2114      	movs	r1, #20
 800325c:	2014      	movs	r0, #20
 800325e:	f7ff f9b5 	bl	80025cc <TM1637_Display_4_char>
			HAL_Delay(100);
 8003262:	2064      	movs	r0, #100	; 0x64
 8003264:	f7fd fa7a 	bl	800075c <HAL_Delay>
			TM1637_Display_4_char(0, 0, 0, 0, 1);
 8003268:	2301      	movs	r3, #1
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	2300      	movs	r3, #0
 800326e:	2200      	movs	r2, #0
 8003270:	2100      	movs	r1, #0
 8003272:	2000      	movs	r0, #0
 8003274:	f7ff f9aa 	bl	80025cc <TM1637_Display_4_char>
			HAL_Delay(100);
 8003278:	2064      	movs	r0, #100	; 0x64
 800327a:	f7fd fa6f 	bl	800075c <HAL_Delay>
			TM1637_Display_4_char(20, 20, 20, 20, 0);
 800327e:	2300      	movs	r3, #0
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	2314      	movs	r3, #20
 8003284:	2214      	movs	r2, #20
 8003286:	2114      	movs	r1, #20
 8003288:	2014      	movs	r0, #20
 800328a:	f7ff f99f 	bl	80025cc <TM1637_Display_4_char>
			HAL_Delay(100);
 800328e:	2064      	movs	r0, #100	; 0x64
 8003290:	f7fd fa64 	bl	800075c <HAL_Delay>
			TM1637_Display_4_char(0, 0, 0, 0, 1);
 8003294:	2301      	movs	r3, #1
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	2300      	movs	r3, #0
 800329a:	2200      	movs	r2, #0
 800329c:	2100      	movs	r1, #0
 800329e:	2000      	movs	r0, #0
 80032a0:	f7ff f994 	bl	80025cc <TM1637_Display_4_char>
			HAL_Delay(100);
 80032a4:	2064      	movs	r0, #100	; 0x64
 80032a6:	f7fd fa59 	bl	800075c <HAL_Delay>
			TM1637_Display_4_char(20, 20, 20, 20, 0);
 80032aa:	2300      	movs	r3, #0
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	2314      	movs	r3, #20
 80032b0:	2214      	movs	r2, #20
 80032b2:	2114      	movs	r1, #20
 80032b4:	2014      	movs	r0, #20
 80032b6:	f7ff f989 	bl	80025cc <TM1637_Display_4_char>
			HAL_Delay(1000);
 80032ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032be:	f7fd fa4d 	bl	800075c <HAL_Delay>
			show_display(LED_START, current_level/10);
 80032c2:	4b29      	ldr	r3, [pc, #164]	; (8003368 <blink_led_delay+0x224>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	4a29      	ldr	r2, [pc, #164]	; (800336c <blink_led_delay+0x228>)
 80032c8:	fba2 2303 	umull	r2, r3, r2, r3
 80032cc:	08db      	lsrs	r3, r3, #3
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	4619      	mov	r1, r3
 80032d2:	2008      	movs	r0, #8
 80032d4:	f000 f87c 	bl	80033d0 <show_display>
			break;
 80032d8:	e042      	b.n	8003360 <blink_led_delay+0x21c>
		case BLINK_DONE:
			for(int i = 0; i < 7; i++){
 80032da:	2300      	movs	r3, #0
 80032dc:	60bb      	str	r3, [r7, #8]
 80032de:	e03a      	b.n	8003356 <blink_led_delay+0x212>
				  show_display(LED_DONE1, current_level/10);
 80032e0:	4b21      	ldr	r3, [pc, #132]	; (8003368 <blink_led_delay+0x224>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	4a21      	ldr	r2, [pc, #132]	; (800336c <blink_led_delay+0x228>)
 80032e6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ea:	08db      	lsrs	r3, r3, #3
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	4619      	mov	r1, r3
 80032f0:	2004      	movs	r0, #4
 80032f2:	f000 f86d 	bl	80033d0 <show_display>
				  HAL_Delay(5);
 80032f6:	2005      	movs	r0, #5
 80032f8:	f7fd fa30 	bl	800075c <HAL_Delay>
				  show_display(LED_DONE2, current_level/10);
 80032fc:	4b1a      	ldr	r3, [pc, #104]	; (8003368 <blink_led_delay+0x224>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	4a1a      	ldr	r2, [pc, #104]	; (800336c <blink_led_delay+0x228>)
 8003302:	fba2 2303 	umull	r2, r3, r2, r3
 8003306:	08db      	lsrs	r3, r3, #3
 8003308:	b2db      	uxtb	r3, r3
 800330a:	4619      	mov	r1, r3
 800330c:	2005      	movs	r0, #5
 800330e:	f000 f85f 	bl	80033d0 <show_display>
				  HAL_Delay(5);
 8003312:	2005      	movs	r0, #5
 8003314:	f7fd fa22 	bl	800075c <HAL_Delay>
				  show_display(LED_DONE3, current_level/10);
 8003318:	4b13      	ldr	r3, [pc, #76]	; (8003368 <blink_led_delay+0x224>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	4a13      	ldr	r2, [pc, #76]	; (800336c <blink_led_delay+0x228>)
 800331e:	fba2 2303 	umull	r2, r3, r2, r3
 8003322:	08db      	lsrs	r3, r3, #3
 8003324:	b2db      	uxtb	r3, r3
 8003326:	4619      	mov	r1, r3
 8003328:	2006      	movs	r0, #6
 800332a:	f000 f851 	bl	80033d0 <show_display>
				  HAL_Delay(5);
 800332e:	2005      	movs	r0, #5
 8003330:	f7fd fa14 	bl	800075c <HAL_Delay>
				  show_display(LED_DONE4, current_level/10);
 8003334:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <blink_led_delay+0x224>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	4a0c      	ldr	r2, [pc, #48]	; (800336c <blink_led_delay+0x228>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	08db      	lsrs	r3, r3, #3
 8003340:	b2db      	uxtb	r3, r3
 8003342:	4619      	mov	r1, r3
 8003344:	2007      	movs	r0, #7
 8003346:	f000 f843 	bl	80033d0 <show_display>
				  HAL_Delay(5);
 800334a:	2005      	movs	r0, #5
 800334c:	f7fd fa06 	bl	800075c <HAL_Delay>
			for(int i = 0; i < 7; i++){
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	3301      	adds	r3, #1
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2b06      	cmp	r3, #6
 800335a:	ddc1      	ble.n	80032e0 <blink_led_delay+0x19c>
			}
			break;
 800335c:	e000      	b.n	8003360 <blink_led_delay+0x21c>
		default:
			break;
 800335e:	bf00      	nop
	}


}
 8003360:	bf00      	nop
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	200000c6 	.word	0x200000c6
 800336c:	cccccccd 	.word	0xcccccccd

08003370 <elevator_process_force>:
	  }
	  nmbs_set_read_timeout(&nmbs, 5);
	  nmbs_set_byte_timeout(&nmbs, 50);
}

void elevator_process_force(uint32_t _speed){
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
	  while(target_level != current_level){
 8003378:	e01b      	b.n	80033b2 <elevator_process_force+0x42>
		  if(target_level > current_level){
 800337a:	4b13      	ldr	r3, [pc, #76]	; (80033c8 <elevator_process_force+0x58>)
 800337c:	781a      	ldrb	r2, [r3, #0]
 800337e:	4b13      	ldr	r3, [pc, #76]	; (80033cc <elevator_process_force+0x5c>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	429a      	cmp	r2, r3
 8003384:	d904      	bls.n	8003390 <elevator_process_force+0x20>
			  lkv_stepmotor_process(STEP_DIR_DOWN, _speed, 1);
 8003386:	2201      	movs	r2, #1
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	2001      	movs	r0, #1
 800338c:	f000 fc28 	bl	8003be0 <lkv_stepmotor_process>
		  }
		  if(target_level < current_level){
 8003390:	4b0d      	ldr	r3, [pc, #52]	; (80033c8 <elevator_process_force+0x58>)
 8003392:	781a      	ldrb	r2, [r3, #0]
 8003394:	4b0d      	ldr	r3, [pc, #52]	; (80033cc <elevator_process_force+0x5c>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	429a      	cmp	r2, r3
 800339a:	d204      	bcs.n	80033a6 <elevator_process_force+0x36>
			  lkv_stepmotor_process(STEP_DIR_UP, _speed, 1);
 800339c:	2201      	movs	r2, #1
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	2000      	movs	r0, #0
 80033a2:	f000 fc1d 	bl	8003be0 <lkv_stepmotor_process>
		  }
		  if(target_level == current_level){
 80033a6:	4b08      	ldr	r3, [pc, #32]	; (80033c8 <elevator_process_force+0x58>)
 80033a8:	781a      	ldrb	r2, [r3, #0]
 80033aa:	4b08      	ldr	r3, [pc, #32]	; (80033cc <elevator_process_force+0x5c>)
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d006      	beq.n	80033c0 <elevator_process_force+0x50>
	  while(target_level != current_level){
 80033b2:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <elevator_process_force+0x58>)
 80033b4:	781a      	ldrb	r2, [r3, #0]
 80033b6:	4b05      	ldr	r3, [pc, #20]	; (80033cc <elevator_process_force+0x5c>)
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d1dd      	bne.n	800337a <elevator_process_force+0xa>
 80033be:	e000      	b.n	80033c2 <elevator_process_force+0x52>
			  return;
 80033c0:	bf00      	nop
		  }
	  }
}
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	200000c8 	.word	0x200000c8
 80033cc:	200000c6 	.word	0x200000c6

080033d0 <show_display>:
		  is_new_linux_msg = 0;
		  memset(buff_mqtt_slave,0,32);
	  }
}

void show_display(uint8_t _dir, uint8_t _level ){
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af02      	add	r7, sp, #8
 80033d6:	4603      	mov	r3, r0
 80033d8:	460a      	mov	r2, r1
 80033da:	71fb      	strb	r3, [r7, #7]
 80033dc:	4613      	mov	r3, r2
 80033de:	71bb      	strb	r3, [r7, #6]
	uint8_t special_char = 19;
 80033e0:	2313      	movs	r3, #19
 80033e2:	73fb      	strb	r3, [r7, #15]
	if(!target_level_next_time){
 80033e4:	4b4f      	ldr	r3, [pc, #316]	; (8003524 <show_display+0x154>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <show_display+0x20>
		special_char = 20;
 80033ec:	2314      	movs	r3, #20
 80033ee:	73fb      	strb	r3, [r7, #15]
	}

	switch (_dir) {
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	2b0c      	cmp	r3, #12
 80033f4:	f200 8090 	bhi.w	8003518 <show_display+0x148>
 80033f8:	a201      	add	r2, pc, #4	; (adr r2, 8003400 <show_display+0x30>)
 80033fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fe:	bf00      	nop
 8003400:	08003435 	.word	0x08003435
 8003404:	08003447 	.word	0x08003447
 8003408:	08003519 	.word	0x08003519
 800340c:	08003459 	.word	0x08003459
 8003410:	0800346b 	.word	0x0800346b
 8003414:	0800347d 	.word	0x0800347d
 8003418:	0800348f 	.word	0x0800348f
 800341c:	080034a1 	.word	0x080034a1
 8003420:	080034b3 	.word	0x080034b3
 8003424:	080034d1 	.word	0x080034d1
 8003428:	080034e3 	.word	0x080034e3
 800342c:	080034f5 	.word	0x080034f5
 8003430:	08003507 	.word	0x08003507
		case LED_DWN:
			TM1637_Display_4_char(16, 13, special_char, _level, 1);
 8003434:	79bb      	ldrb	r3, [r7, #6]
 8003436:	7bfa      	ldrb	r2, [r7, #15]
 8003438:	2101      	movs	r1, #1
 800343a:	9100      	str	r1, [sp, #0]
 800343c:	210d      	movs	r1, #13
 800343e:	2010      	movs	r0, #16
 8003440:	f7ff f8c4 	bl	80025cc <TM1637_Display_4_char>
			break;
 8003444:	e069      	b.n	800351a <show_display+0x14a>
		case LED_UP:
			TM1637_Display_4_char(18, 17, special_char, _level, 1);
 8003446:	79bb      	ldrb	r3, [r7, #6]
 8003448:	7bfa      	ldrb	r2, [r7, #15]
 800344a:	2101      	movs	r1, #1
 800344c:	9100      	str	r1, [sp, #0]
 800344e:	2111      	movs	r1, #17
 8003450:	2012      	movs	r0, #18
 8003452:	f7ff f8bb 	bl	80025cc <TM1637_Display_4_char>
			break;
 8003456:	e060      	b.n	800351a <show_display+0x14a>
		case LED_WAIT:
			TM1637_Display_4_char(22, 22, special_char, _level, 1);
 8003458:	79bb      	ldrb	r3, [r7, #6]
 800345a:	7bfa      	ldrb	r2, [r7, #15]
 800345c:	2101      	movs	r1, #1
 800345e:	9100      	str	r1, [sp, #0]
 8003460:	2116      	movs	r1, #22
 8003462:	2016      	movs	r0, #22
 8003464:	f7ff f8b2 	bl	80025cc <TM1637_Display_4_char>
			break;
 8003468:	e057      	b.n	800351a <show_display+0x14a>
		case LED_DONE1:
			TM1637_Display_4_char(24, 23, special_char, _level, 1);
 800346a:	79bb      	ldrb	r3, [r7, #6]
 800346c:	7bfa      	ldrb	r2, [r7, #15]
 800346e:	2101      	movs	r1, #1
 8003470:	9100      	str	r1, [sp, #0]
 8003472:	2117      	movs	r1, #23
 8003474:	2018      	movs	r0, #24
 8003476:	f7ff f8a9 	bl	80025cc <TM1637_Display_4_char>
			break;
 800347a:	e04e      	b.n	800351a <show_display+0x14a>
		case LED_DONE2:
			TM1637_Display_4_char(26, 25, special_char, _level, 1);
 800347c:	79bb      	ldrb	r3, [r7, #6]
 800347e:	7bfa      	ldrb	r2, [r7, #15]
 8003480:	2101      	movs	r1, #1
 8003482:	9100      	str	r1, [sp, #0]
 8003484:	2119      	movs	r1, #25
 8003486:	201a      	movs	r0, #26
 8003488:	f7ff f8a0 	bl	80025cc <TM1637_Display_4_char>
			break;
 800348c:	e045      	b.n	800351a <show_display+0x14a>
		case LED_DONE3:
			TM1637_Display_4_char(28, 27, special_char, _level, 1);
 800348e:	79bb      	ldrb	r3, [r7, #6]
 8003490:	7bfa      	ldrb	r2, [r7, #15]
 8003492:	2101      	movs	r1, #1
 8003494:	9100      	str	r1, [sp, #0]
 8003496:	211b      	movs	r1, #27
 8003498:	201c      	movs	r0, #28
 800349a:	f7ff f897 	bl	80025cc <TM1637_Display_4_char>
			break;
 800349e:	e03c      	b.n	800351a <show_display+0x14a>
		case LED_DONE4:
			TM1637_Display_4_char(30, 29, special_char, _level, 1);
 80034a0:	79bb      	ldrb	r3, [r7, #6]
 80034a2:	7bfa      	ldrb	r2, [r7, #15]
 80034a4:	2101      	movs	r1, #1
 80034a6:	9100      	str	r1, [sp, #0]
 80034a8:	211d      	movs	r1, #29
 80034aa:	201e      	movs	r0, #30
 80034ac:	f7ff f88e 	bl	80025cc <TM1637_Display_4_char>
			break;
 80034b0:	e033      	b.n	800351a <show_display+0x14a>
		case LED_START:
			TM1637_Display_4_char(19, 19, 20, current_level/10, 1);
 80034b2:	4b1d      	ldr	r3, [pc, #116]	; (8003528 <show_display+0x158>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	4a1d      	ldr	r2, [pc, #116]	; (800352c <show_display+0x15c>)
 80034b8:	fba2 2303 	umull	r2, r3, r2, r3
 80034bc:	08db      	lsrs	r3, r3, #3
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2201      	movs	r2, #1
 80034c2:	9200      	str	r2, [sp, #0]
 80034c4:	2214      	movs	r2, #20
 80034c6:	2113      	movs	r1, #19
 80034c8:	2013      	movs	r0, #19
 80034ca:	f7ff f87f 	bl	80025cc <TM1637_Display_4_char>
			break;
 80034ce:	e024      	b.n	800351a <show_display+0x14a>
		case LED_START1:
			TM1637_Display_4_char(24, 23, 24, 23, 0);
 80034d0:	2300      	movs	r3, #0
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	2317      	movs	r3, #23
 80034d6:	2218      	movs	r2, #24
 80034d8:	2117      	movs	r1, #23
 80034da:	2018      	movs	r0, #24
 80034dc:	f7ff f876 	bl	80025cc <TM1637_Display_4_char>
			break;
 80034e0:	e01b      	b.n	800351a <show_display+0x14a>
		case LED_START2:
			TM1637_Display_4_char(26, 25, 26, 25, 0);
 80034e2:	2300      	movs	r3, #0
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	2319      	movs	r3, #25
 80034e8:	221a      	movs	r2, #26
 80034ea:	2119      	movs	r1, #25
 80034ec:	201a      	movs	r0, #26
 80034ee:	f7ff f86d 	bl	80025cc <TM1637_Display_4_char>
			break;
 80034f2:	e012      	b.n	800351a <show_display+0x14a>
		case LED_START3:
			TM1637_Display_4_char(28, 27, 28, 27, 0);
 80034f4:	2300      	movs	r3, #0
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	231b      	movs	r3, #27
 80034fa:	221c      	movs	r2, #28
 80034fc:	211b      	movs	r1, #27
 80034fe:	201c      	movs	r0, #28
 8003500:	f7ff f864 	bl	80025cc <TM1637_Display_4_char>
			break;
 8003504:	e009      	b.n	800351a <show_display+0x14a>
		case LED_START4:
			TM1637_Display_4_char(30, 29, 30, 29, 0);
 8003506:	2300      	movs	r3, #0
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	231d      	movs	r3, #29
 800350c:	221e      	movs	r2, #30
 800350e:	211d      	movs	r1, #29
 8003510:	201e      	movs	r0, #30
 8003512:	f7ff f85b 	bl	80025cc <TM1637_Display_4_char>
			break;
 8003516:	e000      	b.n	800351a <show_display+0x14a>
		default:
			break;
 8003518:	bf00      	nop
	}
}
 800351a:	bf00      	nop
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	200000c7 	.word	0x200000c7
 8003528:	200000c6 	.word	0x200000c6
 800352c:	cccccccd 	.word	0xcccccccd

08003530 <matrix_init>:
 */


#include "../../User/matric_button/lkv_matrix_button.h"

void matrix_init(void){
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af00      	add	r7, sp, #0
	 __HAL_RCC_GPIOC_CLK_ENABLE();
 8003536:	4b3b      	ldr	r3, [pc, #236]	; (8003624 <matrix_init+0xf4>)
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	4a3a      	ldr	r2, [pc, #232]	; (8003624 <matrix_init+0xf4>)
 800353c:	f043 0304 	orr.w	r3, r3, #4
 8003540:	61d3      	str	r3, [r2, #28]
 8003542:	4b38      	ldr	r3, [pc, #224]	; (8003624 <matrix_init+0xf4>)
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	f003 0304 	and.w	r3, r3, #4
 800354a:	60bb      	str	r3, [r7, #8]
 800354c:	68bb      	ldr	r3, [r7, #8]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 800354e:	4b35      	ldr	r3, [pc, #212]	; (8003624 <matrix_init+0xf4>)
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	4a34      	ldr	r2, [pc, #208]	; (8003624 <matrix_init+0xf4>)
 8003554:	f043 0301 	orr.w	r3, r3, #1
 8003558:	61d3      	str	r3, [r2, #28]
 800355a:	4b32      	ldr	r3, [pc, #200]	; (8003624 <matrix_init+0xf4>)
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	607b      	str	r3, [r7, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 8003566:	4b2f      	ldr	r3, [pc, #188]	; (8003624 <matrix_init+0xf4>)
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	4a2e      	ldr	r2, [pc, #184]	; (8003624 <matrix_init+0xf4>)
 800356c:	f043 0302 	orr.w	r3, r3, #2
 8003570:	61d3      	str	r3, [r2, #28]
 8003572:	4b2c      	ldr	r3, [pc, #176]	; (8003624 <matrix_init+0xf4>)
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	603b      	str	r3, [r7, #0]
 800357c:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800357e:	f107 030c 	add.w	r3, r7, #12
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	605a      	str	r2, [r3, #4]
 8003588:	609a      	str	r2, [r3, #8]
 800358a:	60da      	str	r2, [r3, #12]
 800358c:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800358e:	2300      	movs	r3, #0
 8003590:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003592:	2302      	movs	r3, #2
 8003594:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003596:	2302      	movs	r3, #2
 8003598:	61bb      	str	r3, [r7, #24]

	  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800359a:	2340      	movs	r3, #64	; 0x40
 800359c:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800359e:	f107 030c 	add.w	r3, r7, #12
 80035a2:	4619      	mov	r1, r3
 80035a4:	4820      	ldr	r0, [pc, #128]	; (8003628 <matrix_init+0xf8>)
 80035a6:	f7fd fa87 	bl	8000ab8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80035aa:	2380      	movs	r3, #128	; 0x80
 80035ac:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ae:	f107 030c 	add.w	r3, r7, #12
 80035b2:	4619      	mov	r1, r3
 80035b4:	481c      	ldr	r0, [pc, #112]	; (8003628 <matrix_init+0xf8>)
 80035b6:	f7fd fa7f 	bl	8000ab8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80035ba:	2340      	movs	r3, #64	; 0x40
 80035bc:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035be:	f107 030c 	add.w	r3, r7, #12
 80035c2:	4619      	mov	r1, r3
 80035c4:	4819      	ldr	r0, [pc, #100]	; (800362c <matrix_init+0xfc>)
 80035c6:	f7fd fa77 	bl	8000ab8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80035ca:	2380      	movs	r3, #128	; 0x80
 80035cc:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035ce:	f107 030c 	add.w	r3, r7, #12
 80035d2:	4619      	mov	r1, r3
 80035d4:	4816      	ldr	r0, [pc, #88]	; (8003630 <matrix_init+0x100>)
 80035d6:	f7fd fa6f 	bl	8000ab8 <HAL_GPIO_Init>


	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035da:	2301      	movs	r3, #1
 80035dc:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035de:	2300      	movs	r3, #0
 80035e0:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035e2:	2302      	movs	r3, #2
 80035e4:	61bb      	str	r3, [r7, #24]


	  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80035e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035ea:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ec:	f107 030c 	add.w	r3, r7, #12
 80035f0:	4619      	mov	r1, r3
 80035f2:	480d      	ldr	r0, [pc, #52]	; (8003628 <matrix_init+0xf8>)
 80035f4:	f7fd fa60 	bl	8000ab8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80035f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035fc:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035fe:	f107 030c 	add.w	r3, r7, #12
 8003602:	4619      	mov	r1, r3
 8003604:	4808      	ldr	r0, [pc, #32]	; (8003628 <matrix_init+0xf8>)
 8003606:	f7fd fa57 	bl	8000ab8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800360a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800360e:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003610:	f107 030c 	add.w	r3, r7, #12
 8003614:	4619      	mov	r1, r3
 8003616:	4805      	ldr	r0, [pc, #20]	; (800362c <matrix_init+0xfc>)
 8003618:	f7fd fa4e 	bl	8000ab8 <HAL_GPIO_Init>

}
 800361c:	bf00      	nop
 800361e:	3720      	adds	r7, #32
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40023800 	.word	0x40023800
 8003628:	40020000 	.word	0x40020000
 800362c:	40020400 	.word	0x40020400
 8003630:	40020800 	.word	0x40020800

08003634 <get_row>:


uint8_t get_row(void){
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 1 ){
 8003638:	2140      	movs	r1, #64	; 0x40
 800363a:	4821      	ldr	r0, [pc, #132]	; (80036c0 <get_row+0x8c>)
 800363c:	f7fd fbcc 	bl	8000dd8 <HAL_GPIO_ReadPin>
 8003640:	4603      	mov	r3, r0
 8003642:	2b01      	cmp	r3, #1
 8003644:	d108      	bne.n	8003658 <get_row+0x24>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 1) return 1;
 8003646:	2140      	movs	r1, #64	; 0x40
 8003648:	481d      	ldr	r0, [pc, #116]	; (80036c0 <get_row+0x8c>)
 800364a:	f7fd fbc5 	bl	8000dd8 <HAL_GPIO_ReadPin>
 800364e:	4603      	mov	r3, r0
 8003650:	2b01      	cmp	r3, #1
 8003652:	d131      	bne.n	80036b8 <get_row+0x84>
 8003654:	2301      	movs	r3, #1
 8003656:	e030      	b.n	80036ba <get_row+0x86>
	}
	else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 1 ){
 8003658:	2180      	movs	r1, #128	; 0x80
 800365a:	4819      	ldr	r0, [pc, #100]	; (80036c0 <get_row+0x8c>)
 800365c:	f7fd fbbc 	bl	8000dd8 <HAL_GPIO_ReadPin>
 8003660:	4603      	mov	r3, r0
 8003662:	2b01      	cmp	r3, #1
 8003664:	d108      	bne.n	8003678 <get_row+0x44>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 1) return 2;
 8003666:	2180      	movs	r1, #128	; 0x80
 8003668:	4815      	ldr	r0, [pc, #84]	; (80036c0 <get_row+0x8c>)
 800366a:	f7fd fbb5 	bl	8000dd8 <HAL_GPIO_ReadPin>
 800366e:	4603      	mov	r3, r0
 8003670:	2b01      	cmp	r3, #1
 8003672:	d121      	bne.n	80036b8 <get_row+0x84>
 8003674:	2302      	movs	r3, #2
 8003676:	e020      	b.n	80036ba <get_row+0x86>
	}
	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 1 ){
 8003678:	2140      	movs	r1, #64	; 0x40
 800367a:	4812      	ldr	r0, [pc, #72]	; (80036c4 <get_row+0x90>)
 800367c:	f7fd fbac 	bl	8000dd8 <HAL_GPIO_ReadPin>
 8003680:	4603      	mov	r3, r0
 8003682:	2b01      	cmp	r3, #1
 8003684:	d108      	bne.n	8003698 <get_row+0x64>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 1) return 3;
 8003686:	2140      	movs	r1, #64	; 0x40
 8003688:	480e      	ldr	r0, [pc, #56]	; (80036c4 <get_row+0x90>)
 800368a:	f7fd fba5 	bl	8000dd8 <HAL_GPIO_ReadPin>
 800368e:	4603      	mov	r3, r0
 8003690:	2b01      	cmp	r3, #1
 8003692:	d111      	bne.n	80036b8 <get_row+0x84>
 8003694:	2303      	movs	r3, #3
 8003696:	e010      	b.n	80036ba <get_row+0x86>
	}
	else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == 1 ){
 8003698:	2180      	movs	r1, #128	; 0x80
 800369a:	480b      	ldr	r0, [pc, #44]	; (80036c8 <get_row+0x94>)
 800369c:	f7fd fb9c 	bl	8000dd8 <HAL_GPIO_ReadPin>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d108      	bne.n	80036b8 <get_row+0x84>
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == 1) return 4;
 80036a6:	2180      	movs	r1, #128	; 0x80
 80036a8:	4807      	ldr	r0, [pc, #28]	; (80036c8 <get_row+0x94>)
 80036aa:	f7fd fb95 	bl	8000dd8 <HAL_GPIO_ReadPin>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d101      	bne.n	80036b8 <get_row+0x84>
 80036b4:	2304      	movs	r3, #4
 80036b6:	e000      	b.n	80036ba <get_row+0x86>
	}


	return 0;
 80036b8:	2300      	movs	r3, #0

}
 80036ba:	4618      	mov	r0, r3
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40020000 	.word	0x40020000
 80036c4:	40020400 	.word	0x40020400
 80036c8:	40020800 	.word	0x40020800

080036cc <set_colum>:

void set_colum(uint8_t id){
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b088      	sub	sp, #32
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	4603      	mov	r3, r0
 80036d4:	71fb      	strb	r3, [r7, #7]
	switch(id){
 80036d6:	79fb      	ldrb	r3, [r7, #7]
 80036d8:	2b03      	cmp	r3, #3
 80036da:	d050      	beq.n	800377e <set_colum+0xb2>
 80036dc:	2b03      	cmp	r3, #3
 80036de:	dc73      	bgt.n	80037c8 <set_colum+0xfc>
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d002      	beq.n	80036ea <set_colum+0x1e>
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d025      	beq.n	8003734 <set_colum+0x68>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
		for(int i = 0; i < 50; i++);
		break;

	default:
		break;
 80036e8:	e06e      	b.n	80037c8 <set_colum+0xfc>
		for(int i = 0; i < 50; i++);
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
 80036ee:	e002      	b.n	80036f6 <set_colum+0x2a>
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	3301      	adds	r3, #1
 80036f4:	61fb      	str	r3, [r7, #28]
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	2b31      	cmp	r3, #49	; 0x31
 80036fa:	ddf9      	ble.n	80036f0 <set_colum+0x24>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  1);
 80036fc:	2201      	movs	r2, #1
 80036fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003702:	4834      	ldr	r0, [pc, #208]	; (80037d4 <set_colum+0x108>)
 8003704:	f7fd fb7f 	bl	8000e06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  0);
 8003708:	2200      	movs	r2, #0
 800370a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800370e:	4831      	ldr	r0, [pc, #196]	; (80037d4 <set_colum+0x108>)
 8003710:	f7fd fb79 	bl	8000e06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8003714:	2200      	movs	r2, #0
 8003716:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800371a:	482f      	ldr	r0, [pc, #188]	; (80037d8 <set_colum+0x10c>)
 800371c:	f7fd fb73 	bl	8000e06 <HAL_GPIO_WritePin>
		for(int i = 0; i < 50; i++);
 8003720:	2300      	movs	r3, #0
 8003722:	61bb      	str	r3, [r7, #24]
 8003724:	e002      	b.n	800372c <set_colum+0x60>
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	3301      	adds	r3, #1
 800372a:	61bb      	str	r3, [r7, #24]
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	2b31      	cmp	r3, #49	; 0x31
 8003730:	ddf9      	ble.n	8003726 <set_colum+0x5a>
		break;
 8003732:	e04a      	b.n	80037ca <set_colum+0xfe>
		for(int i = 0; i < 50; i++);
 8003734:	2300      	movs	r3, #0
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	e002      	b.n	8003740 <set_colum+0x74>
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	3301      	adds	r3, #1
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	2b31      	cmp	r3, #49	; 0x31
 8003744:	ddf9      	ble.n	800373a <set_colum+0x6e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  0);
 8003746:	2200      	movs	r2, #0
 8003748:	f44f 7100 	mov.w	r1, #512	; 0x200
 800374c:	4821      	ldr	r0, [pc, #132]	; (80037d4 <set_colum+0x108>)
 800374e:	f7fd fb5a 	bl	8000e06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  1);
 8003752:	2201      	movs	r2, #1
 8003754:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003758:	481e      	ldr	r0, [pc, #120]	; (80037d4 <set_colum+0x108>)
 800375a:	f7fd fb54 	bl	8000e06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 800375e:	2200      	movs	r2, #0
 8003760:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003764:	481c      	ldr	r0, [pc, #112]	; (80037d8 <set_colum+0x10c>)
 8003766:	f7fd fb4e 	bl	8000e06 <HAL_GPIO_WritePin>
		for(int i = 0; i < 50; i++);
 800376a:	2300      	movs	r3, #0
 800376c:	613b      	str	r3, [r7, #16]
 800376e:	e002      	b.n	8003776 <set_colum+0xaa>
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	3301      	adds	r3, #1
 8003774:	613b      	str	r3, [r7, #16]
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	2b31      	cmp	r3, #49	; 0x31
 800377a:	ddf9      	ble.n	8003770 <set_colum+0xa4>
		break;
 800377c:	e025      	b.n	80037ca <set_colum+0xfe>
		for(int i = 0; i < 50; i++);
 800377e:	2300      	movs	r3, #0
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	e002      	b.n	800378a <set_colum+0xbe>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	3301      	adds	r3, #1
 8003788:	60fb      	str	r3, [r7, #12]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2b31      	cmp	r3, #49	; 0x31
 800378e:	ddf9      	ble.n	8003784 <set_colum+0xb8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  0);
 8003790:	2200      	movs	r2, #0
 8003792:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003796:	480f      	ldr	r0, [pc, #60]	; (80037d4 <set_colum+0x108>)
 8003798:	f7fd fb35 	bl	8000e06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  0);
 800379c:	2200      	movs	r2, #0
 800379e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037a2:	480c      	ldr	r0, [pc, #48]	; (80037d4 <set_colum+0x108>)
 80037a4:	f7fd fb2f 	bl	8000e06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 80037a8:	2201      	movs	r2, #1
 80037aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80037ae:	480a      	ldr	r0, [pc, #40]	; (80037d8 <set_colum+0x10c>)
 80037b0:	f7fd fb29 	bl	8000e06 <HAL_GPIO_WritePin>
		for(int i = 0; i < 50; i++);
 80037b4:	2300      	movs	r3, #0
 80037b6:	60bb      	str	r3, [r7, #8]
 80037b8:	e002      	b.n	80037c0 <set_colum+0xf4>
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	3301      	adds	r3, #1
 80037be:	60bb      	str	r3, [r7, #8]
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	2b31      	cmp	r3, #49	; 0x31
 80037c4:	ddf9      	ble.n	80037ba <set_colum+0xee>
		break;
 80037c6:	e000      	b.n	80037ca <set_colum+0xfe>
		break;
 80037c8:	bf00      	nop
	}
}
 80037ca:	bf00      	nop
 80037cc:	3720      	adds	r7, #32
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	40020000 	.word	0x40020000
 80037d8:	40020400 	.word	0x40020400

080037dc <get_char_user>:

	 return num;
}


 uint8_t get_char_user(void){
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0

	 uint8_t num = 0;
 80037e2:	2300      	movs	r3, #0
 80037e4:	71fb      	strb	r3, [r7, #7]

	        set_colum(1);
 80037e6:	2001      	movs	r0, #1
 80037e8:	f7ff ff70 	bl	80036cc <set_colum>
	 			 if(get_row() == 1){
 80037ec:	f7ff ff22 	bl	8003634 <get_row>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d103      	bne.n	80037fe <get_char_user+0x22>
	 				 num = '1';
 80037f6:	2331      	movs	r3, #49	; 0x31
 80037f8:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 80037fa:	79fb      	ldrb	r3, [r7, #7]
 80037fc:	e06c      	b.n	80038d8 <get_char_user+0xfc>
	 			 }
	 			 if(get_row() == 2){
 80037fe:	f7ff ff19 	bl	8003634 <get_row>
 8003802:	4603      	mov	r3, r0
 8003804:	2b02      	cmp	r3, #2
 8003806:	d103      	bne.n	8003810 <get_char_user+0x34>
	 				 num = '4';
 8003808:	2334      	movs	r3, #52	; 0x34
 800380a:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 800380c:	79fb      	ldrb	r3, [r7, #7]
 800380e:	e063      	b.n	80038d8 <get_char_user+0xfc>
	 			 }
	 			 if(get_row() == 3){
 8003810:	f7ff ff10 	bl	8003634 <get_row>
 8003814:	4603      	mov	r3, r0
 8003816:	2b03      	cmp	r3, #3
 8003818:	d103      	bne.n	8003822 <get_char_user+0x46>
	 				 num = '7';
 800381a:	2337      	movs	r3, #55	; 0x37
 800381c:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 800381e:	79fb      	ldrb	r3, [r7, #7]
 8003820:	e05a      	b.n	80038d8 <get_char_user+0xfc>
	 			 }


	 		 set_colum(2);
 8003822:	2002      	movs	r0, #2
 8003824:	f7ff ff52 	bl	80036cc <set_colum>
	 			 if(get_row() == 1){
 8003828:	f7ff ff04 	bl	8003634 <get_row>
 800382c:	4603      	mov	r3, r0
 800382e:	2b01      	cmp	r3, #1
 8003830:	d103      	bne.n	800383a <get_char_user+0x5e>
	 				 num = '2';
 8003832:	2332      	movs	r3, #50	; 0x32
 8003834:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	e04e      	b.n	80038d8 <get_char_user+0xfc>
	 			 }
	 			 if(get_row() == 2){
 800383a:	f7ff fefb 	bl	8003634 <get_row>
 800383e:	4603      	mov	r3, r0
 8003840:	2b02      	cmp	r3, #2
 8003842:	d103      	bne.n	800384c <get_char_user+0x70>
	 				 num = '5';
 8003844:	2335      	movs	r3, #53	; 0x35
 8003846:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 8003848:	79fb      	ldrb	r3, [r7, #7]
 800384a:	e045      	b.n	80038d8 <get_char_user+0xfc>
	 			 }
	 			 if(get_row() == 3){
 800384c:	f7ff fef2 	bl	8003634 <get_row>
 8003850:	4603      	mov	r3, r0
 8003852:	2b03      	cmp	r3, #3
 8003854:	d103      	bne.n	800385e <get_char_user+0x82>
	 				 num = '8';
 8003856:	2338      	movs	r3, #56	; 0x38
 8003858:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 800385a:	79fb      	ldrb	r3, [r7, #7]
 800385c:	e03c      	b.n	80038d8 <get_char_user+0xfc>
	 			 }


	 		 set_colum(3);
 800385e:	2003      	movs	r0, #3
 8003860:	f7ff ff34 	bl	80036cc <set_colum>
	 			 if(get_row() == 1){
 8003864:	f7ff fee6 	bl	8003634 <get_row>
 8003868:	4603      	mov	r3, r0
 800386a:	2b01      	cmp	r3, #1
 800386c:	d103      	bne.n	8003876 <get_char_user+0x9a>
	 				 num = '3';
 800386e:	2333      	movs	r3, #51	; 0x33
 8003870:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 8003872:	79fb      	ldrb	r3, [r7, #7]
 8003874:	e030      	b.n	80038d8 <get_char_user+0xfc>
	 			 }
	 			 if(get_row() == 2){
 8003876:	f7ff fedd 	bl	8003634 <get_row>
 800387a:	4603      	mov	r3, r0
 800387c:	2b02      	cmp	r3, #2
 800387e:	d103      	bne.n	8003888 <get_char_user+0xac>
	 				 num = '6';
 8003880:	2336      	movs	r3, #54	; 0x36
 8003882:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 8003884:	79fb      	ldrb	r3, [r7, #7]
 8003886:	e027      	b.n	80038d8 <get_char_user+0xfc>
	 			 }
	 			 if(get_row() == 3){
 8003888:	f7ff fed4 	bl	8003634 <get_row>
 800388c:	4603      	mov	r3, r0
 800388e:	2b03      	cmp	r3, #3
 8003890:	d103      	bne.n	800389a <get_char_user+0xbe>
	 				 num = '9';
 8003892:	2339      	movs	r3, #57	; 0x39
 8003894:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 8003896:	79fb      	ldrb	r3, [r7, #7]
 8003898:	e01e      	b.n	80038d8 <get_char_user+0xfc>
	 			 }


	 		 set_colum(4);
 800389a:	2004      	movs	r0, #4
 800389c:	f7ff ff16 	bl	80036cc <set_colum>
	 			 if(get_row() == 1){
 80038a0:	f7ff fec8 	bl	8003634 <get_row>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d103      	bne.n	80038b2 <get_char_user+0xd6>
	 				 num = 'A';
 80038aa:	2341      	movs	r3, #65	; 0x41
 80038ac:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 80038ae:	79fb      	ldrb	r3, [r7, #7]
 80038b0:	e012      	b.n	80038d8 <get_char_user+0xfc>
	 			 }
	 			 if(get_row() == 2){
 80038b2:	f7ff febf 	bl	8003634 <get_row>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d103      	bne.n	80038c4 <get_char_user+0xe8>
	 				 num = 'B';
 80038bc:	2342      	movs	r3, #66	; 0x42
 80038be:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 80038c0:	79fb      	ldrb	r3, [r7, #7]
 80038c2:	e009      	b.n	80038d8 <get_char_user+0xfc>
	 			 }
	 			 if(get_row() == 3){
 80038c4:	f7ff feb6 	bl	8003634 <get_row>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b03      	cmp	r3, #3
 80038cc:	d103      	bne.n	80038d6 <get_char_user+0xfa>
	 				 num = '0';
 80038ce:	2330      	movs	r3, #48	; 0x30
 80038d0:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 80038d2:	79fb      	ldrb	r3, [r7, #7]
 80038d4:	e000      	b.n	80038d8 <get_char_user+0xfc>
	 			 }


	 		return 0;
 80038d6:	2300      	movs	r3, #0

 }
 80038d8:	4618      	mov	r0, r3
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <lkv_stepmotor_coil_setval>:

#define DRIVER_PIN_4_PORT    GPIOB
#define DRIVER_PIN_4         GPIO_PIN_4


void lkv_stepmotor_coil_setval(uint8_t _valin1, uint8_t _valin2, uint8_t _valin3, uint8_t _valin4){
 80038e0:	b590      	push	{r4, r7, lr}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	4604      	mov	r4, r0
 80038e8:	4608      	mov	r0, r1
 80038ea:	4611      	mov	r1, r2
 80038ec:	461a      	mov	r2, r3
 80038ee:	4623      	mov	r3, r4
 80038f0:	71fb      	strb	r3, [r7, #7]
 80038f2:	4603      	mov	r3, r0
 80038f4:	71bb      	strb	r3, [r7, #6]
 80038f6:	460b      	mov	r3, r1
 80038f8:	717b      	strb	r3, [r7, #5]
 80038fa:	4613      	mov	r3, r2
 80038fc:	713b      	strb	r3, [r7, #4]
	HAL_GPIO_WritePin(DRIVER_PIN_1_PORT, DRIVER_PIN_1, _valin1);
 80038fe:	79fb      	ldrb	r3, [r7, #7]
 8003900:	461a      	mov	r2, r3
 8003902:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003906:	480c      	ldr	r0, [pc, #48]	; (8003938 <lkv_stepmotor_coil_setval+0x58>)
 8003908:	f7fd fa7d 	bl	8000e06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRIVER_PIN_2_PORT, DRIVER_PIN_2, _valin2);
 800390c:	79bb      	ldrb	r3, [r7, #6]
 800390e:	461a      	mov	r2, r3
 8003910:	2108      	movs	r1, #8
 8003912:	480a      	ldr	r0, [pc, #40]	; (800393c <lkv_stepmotor_coil_setval+0x5c>)
 8003914:	f7fd fa77 	bl	8000e06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRIVER_PIN_3_PORT, DRIVER_PIN_3, _valin3);
 8003918:	797b      	ldrb	r3, [r7, #5]
 800391a:	461a      	mov	r2, r3
 800391c:	2120      	movs	r1, #32
 800391e:	4807      	ldr	r0, [pc, #28]	; (800393c <lkv_stepmotor_coil_setval+0x5c>)
 8003920:	f7fd fa71 	bl	8000e06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRIVER_PIN_4_PORT, DRIVER_PIN_4, _valin4);
 8003924:	793b      	ldrb	r3, [r7, #4]
 8003926:	461a      	mov	r2, r3
 8003928:	2110      	movs	r1, #16
 800392a:	4804      	ldr	r0, [pc, #16]	; (800393c <lkv_stepmotor_coil_setval+0x5c>)
 800392c:	f7fd fa6b 	bl	8000e06 <HAL_GPIO_WritePin>
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	bd90      	pop	{r4, r7, pc}
 8003938:	40020000 	.word	0x40020000
 800393c:	40020400 	.word	0x40020400

08003940 <lkv_stepmotor_run_up>:


void lkv_stepmotor_run_up(uint32_t _speed){
 8003940:	b580      	push	{r7, lr}
 8003942:	b08a      	sub	sp, #40	; 0x28
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
	lkv_stepmotor_coil_setval(1,0,0,0);
 8003948:	2300      	movs	r3, #0
 800394a:	2200      	movs	r2, #0
 800394c:	2100      	movs	r1, #0
 800394e:	2001      	movs	r0, #1
 8003950:	f7ff ffc6 	bl	80038e0 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 8003954:	2300      	movs	r3, #0
 8003956:	627b      	str	r3, [r7, #36]	; 0x24
 8003958:	e002      	b.n	8003960 <lkv_stepmotor_run_up+0x20>
 800395a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395c:	3301      	adds	r3, #1
 800395e:	627b      	str	r3, [r7, #36]	; 0x24
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	429a      	cmp	r2, r3
 8003966:	d8f8      	bhi.n	800395a <lkv_stepmotor_run_up+0x1a>
	lkv_stepmotor_coil_setval(1,1,0,0);
 8003968:	2300      	movs	r3, #0
 800396a:	2200      	movs	r2, #0
 800396c:	2101      	movs	r1, #1
 800396e:	2001      	movs	r0, #1
 8003970:	f7ff ffb6 	bl	80038e0 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 8003974:	2300      	movs	r3, #0
 8003976:	623b      	str	r3, [r7, #32]
 8003978:	e002      	b.n	8003980 <lkv_stepmotor_run_up+0x40>
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	3301      	adds	r3, #1
 800397e:	623b      	str	r3, [r7, #32]
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	429a      	cmp	r2, r3
 8003986:	d8f8      	bhi.n	800397a <lkv_stepmotor_run_up+0x3a>
	lkv_stepmotor_coil_setval(0,1,0,0);
 8003988:	2300      	movs	r3, #0
 800398a:	2200      	movs	r2, #0
 800398c:	2101      	movs	r1, #1
 800398e:	2000      	movs	r0, #0
 8003990:	f7ff ffa6 	bl	80038e0 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 8003994:	2300      	movs	r3, #0
 8003996:	61fb      	str	r3, [r7, #28]
 8003998:	e002      	b.n	80039a0 <lkv_stepmotor_run_up+0x60>
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	3301      	adds	r3, #1
 800399e:	61fb      	str	r3, [r7, #28]
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d8f8      	bhi.n	800399a <lkv_stepmotor_run_up+0x5a>
	lkv_stepmotor_coil_setval(0,1,1,0);
 80039a8:	2300      	movs	r3, #0
 80039aa:	2201      	movs	r2, #1
 80039ac:	2101      	movs	r1, #1
 80039ae:	2000      	movs	r0, #0
 80039b0:	f7ff ff96 	bl	80038e0 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 80039b4:	2300      	movs	r3, #0
 80039b6:	61bb      	str	r3, [r7, #24]
 80039b8:	e002      	b.n	80039c0 <lkv_stepmotor_run_up+0x80>
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	3301      	adds	r3, #1
 80039be:	61bb      	str	r3, [r7, #24]
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d8f8      	bhi.n	80039ba <lkv_stepmotor_run_up+0x7a>
	lkv_stepmotor_coil_setval(0,0,1,0);
 80039c8:	2300      	movs	r3, #0
 80039ca:	2201      	movs	r2, #1
 80039cc:	2100      	movs	r1, #0
 80039ce:	2000      	movs	r0, #0
 80039d0:	f7ff ff86 	bl	80038e0 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	e002      	b.n	80039e0 <lkv_stepmotor_run_up+0xa0>
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	3301      	adds	r3, #1
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d8f8      	bhi.n	80039da <lkv_stepmotor_run_up+0x9a>
	lkv_stepmotor_coil_setval(0,0,1,1);
 80039e8:	2301      	movs	r3, #1
 80039ea:	2201      	movs	r2, #1
 80039ec:	2100      	movs	r1, #0
 80039ee:	2000      	movs	r0, #0
 80039f0:	f7ff ff76 	bl	80038e0 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 80039f4:	2300      	movs	r3, #0
 80039f6:	613b      	str	r3, [r7, #16]
 80039f8:	e002      	b.n	8003a00 <lkv_stepmotor_run_up+0xc0>
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	3301      	adds	r3, #1
 80039fe:	613b      	str	r3, [r7, #16]
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d8f8      	bhi.n	80039fa <lkv_stepmotor_run_up+0xba>
	lkv_stepmotor_coil_setval(0,0,0,1);
 8003a08:	2301      	movs	r3, #1
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	2000      	movs	r0, #0
 8003a10:	f7ff ff66 	bl	80038e0 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 8003a14:	2300      	movs	r3, #0
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	e002      	b.n	8003a20 <lkv_stepmotor_run_up+0xe0>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d8f8      	bhi.n	8003a1a <lkv_stepmotor_run_up+0xda>
	lkv_stepmotor_coil_setval(1,0,0,1);
 8003a28:	2301      	movs	r3, #1
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	2001      	movs	r0, #1
 8003a30:	f7ff ff56 	bl	80038e0 <lkv_stepmotor_coil_setval>
}
 8003a34:	bf00      	nop
 8003a36:	3728      	adds	r7, #40	; 0x28
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <lkv_stepmotor_run_down>:


void lkv_stepmotor_run_down(uint32_t _speed){
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08a      	sub	sp, #40	; 0x28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
	lkv_stepmotor_coil_setval(0,0,0,1);
 8003a44:	2301      	movs	r3, #1
 8003a46:	2200      	movs	r2, #0
 8003a48:	2100      	movs	r1, #0
 8003a4a:	2000      	movs	r0, #0
 8003a4c:	f7ff ff48 	bl	80038e0 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 8003a50:	2300      	movs	r3, #0
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24
 8003a54:	e002      	b.n	8003a5c <lkv_stepmotor_run_down+0x20>
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	3301      	adds	r3, #1
 8003a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d8f8      	bhi.n	8003a56 <lkv_stepmotor_run_down+0x1a>
	lkv_stepmotor_coil_setval(0,0,1,1);
 8003a64:	2301      	movs	r3, #1
 8003a66:	2201      	movs	r2, #1
 8003a68:	2100      	movs	r1, #0
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	f7ff ff38 	bl	80038e0 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 8003a70:	2300      	movs	r3, #0
 8003a72:	623b      	str	r3, [r7, #32]
 8003a74:	e002      	b.n	8003a7c <lkv_stepmotor_run_down+0x40>
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	623b      	str	r3, [r7, #32]
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d8f8      	bhi.n	8003a76 <lkv_stepmotor_run_down+0x3a>
	lkv_stepmotor_coil_setval(0,0,1,0);
 8003a84:	2300      	movs	r3, #0
 8003a86:	2201      	movs	r2, #1
 8003a88:	2100      	movs	r1, #0
 8003a8a:	2000      	movs	r0, #0
 8003a8c:	f7ff ff28 	bl	80038e0 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 8003a90:	2300      	movs	r3, #0
 8003a92:	61fb      	str	r3, [r7, #28]
 8003a94:	e002      	b.n	8003a9c <lkv_stepmotor_run_down+0x60>
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	61fb      	str	r3, [r7, #28]
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d8f8      	bhi.n	8003a96 <lkv_stepmotor_run_down+0x5a>
	lkv_stepmotor_coil_setval(0,1,1,0);
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	2000      	movs	r0, #0
 8003aac:	f7ff ff18 	bl	80038e0 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	61bb      	str	r3, [r7, #24]
 8003ab4:	e002      	b.n	8003abc <lkv_stepmotor_run_down+0x80>
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	61bb      	str	r3, [r7, #24]
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d8f8      	bhi.n	8003ab6 <lkv_stepmotor_run_down+0x7a>
	lkv_stepmotor_coil_setval(0,1,0,0);
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	2101      	movs	r1, #1
 8003aca:	2000      	movs	r0, #0
 8003acc:	f7ff ff08 	bl	80038e0 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	617b      	str	r3, [r7, #20]
 8003ad4:	e002      	b.n	8003adc <lkv_stepmotor_run_down+0xa0>
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d8f8      	bhi.n	8003ad6 <lkv_stepmotor_run_down+0x9a>
	lkv_stepmotor_coil_setval(1,1,0,0);
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	2101      	movs	r1, #1
 8003aea:	2001      	movs	r0, #1
 8003aec:	f7ff fef8 	bl	80038e0 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 8003af0:	2300      	movs	r3, #0
 8003af2:	613b      	str	r3, [r7, #16]
 8003af4:	e002      	b.n	8003afc <lkv_stepmotor_run_down+0xc0>
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	3301      	adds	r3, #1
 8003afa:	613b      	str	r3, [r7, #16]
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d8f8      	bhi.n	8003af6 <lkv_stepmotor_run_down+0xba>
	lkv_stepmotor_coil_setval(1,0,0,0);
 8003b04:	2300      	movs	r3, #0
 8003b06:	2200      	movs	r2, #0
 8003b08:	2100      	movs	r1, #0
 8003b0a:	2001      	movs	r0, #1
 8003b0c:	f7ff fee8 	bl	80038e0 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 8003b10:	2300      	movs	r3, #0
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	e002      	b.n	8003b1c <lkv_stepmotor_run_down+0xe0>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d8f8      	bhi.n	8003b16 <lkv_stepmotor_run_down+0xda>
	lkv_stepmotor_coil_setval(1,0,0,1);
 8003b24:	2301      	movs	r3, #1
 8003b26:	2200      	movs	r2, #0
 8003b28:	2100      	movs	r1, #0
 8003b2a:	2001      	movs	r0, #1
 8003b2c:	f7ff fed8 	bl	80038e0 <lkv_stepmotor_coil_setval>
}
 8003b30:	bf00      	nop
 8003b32:	3728      	adds	r7, #40	; 0x28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <lkv_stepmotor_gpio_init>:




void lkv_stepmotor_gpio_init(void){
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b088      	sub	sp, #32
 8003b3c:	af00      	add	r7, sp, #0

	/* enable GPIO LCD PORTs clock */

	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b3e:	4b25      	ldr	r3, [pc, #148]	; (8003bd4 <lkv_stepmotor_gpio_init+0x9c>)
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	4a24      	ldr	r2, [pc, #144]	; (8003bd4 <lkv_stepmotor_gpio_init+0x9c>)
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	61d3      	str	r3, [r2, #28]
 8003b4a:	4b22      	ldr	r3, [pc, #136]	; (8003bd4 <lkv_stepmotor_gpio_init+0x9c>)
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	60bb      	str	r3, [r7, #8]
 8003b54:	68bb      	ldr	r3, [r7, #8]
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b56:	4b1f      	ldr	r3, [pc, #124]	; (8003bd4 <lkv_stepmotor_gpio_init+0x9c>)
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	4a1e      	ldr	r2, [pc, #120]	; (8003bd4 <lkv_stepmotor_gpio_init+0x9c>)
 8003b5c:	f043 0302 	orr.w	r3, r3, #2
 8003b60:	61d3      	str	r3, [r2, #28]
 8003b62:	4b1c      	ldr	r3, [pc, #112]	; (8003bd4 <lkv_stepmotor_gpio_init+0x9c>)
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	607b      	str	r3, [r7, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]

	/* enable GPIO LCD PINs */

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b6e:	f107 030c 	add.w	r3, r7, #12
 8003b72:	2200      	movs	r2, #0
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	605a      	str	r2, [r3, #4]
 8003b78:	609a      	str	r2, [r3, #8]
 8003b7a:	60da      	str	r2, [r3, #12]
 8003b7c:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b82:	2300      	movs	r3, #0
 8003b84:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b86:	2302      	movs	r3, #2
 8003b88:	61bb      	str	r3, [r7, #24]

	  GPIO_InitStruct.Pin = DRIVER_PIN_1;
 8003b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b8e:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(DRIVER_PIN_1_PORT, &GPIO_InitStruct);
 8003b90:	f107 030c 	add.w	r3, r7, #12
 8003b94:	4619      	mov	r1, r3
 8003b96:	4810      	ldr	r0, [pc, #64]	; (8003bd8 <lkv_stepmotor_gpio_init+0xa0>)
 8003b98:	f7fc ff8e 	bl	8000ab8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = DRIVER_PIN_2;
 8003b9c:	2308      	movs	r3, #8
 8003b9e:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(DRIVER_PIN_2_PORT, &GPIO_InitStruct);
 8003ba0:	f107 030c 	add.w	r3, r7, #12
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	480d      	ldr	r0, [pc, #52]	; (8003bdc <lkv_stepmotor_gpio_init+0xa4>)
 8003ba8:	f7fc ff86 	bl	8000ab8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = DRIVER_PIN_3;
 8003bac:	2320      	movs	r3, #32
 8003bae:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(DRIVER_PIN_3_PORT, &GPIO_InitStruct);
 8003bb0:	f107 030c 	add.w	r3, r7, #12
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4809      	ldr	r0, [pc, #36]	; (8003bdc <lkv_stepmotor_gpio_init+0xa4>)
 8003bb8:	f7fc ff7e 	bl	8000ab8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = DRIVER_PIN_4;
 8003bbc:	2310      	movs	r3, #16
 8003bbe:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(DRIVER_PIN_4_PORT, &GPIO_InitStruct);
 8003bc0:	f107 030c 	add.w	r3, r7, #12
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4805      	ldr	r0, [pc, #20]	; (8003bdc <lkv_stepmotor_gpio_init+0xa4>)
 8003bc8:	f7fc ff76 	bl	8000ab8 <HAL_GPIO_Init>

}
 8003bcc:	bf00      	nop
 8003bce:	3720      	adds	r7, #32
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	40020000 	.word	0x40020000
 8003bdc:	40020400 	.word	0x40020400

08003be0 <lkv_stepmotor_process>:




void lkv_stepmotor_process(uint8_t _direction, uint32_t _speed, uint32_t _number_step){
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	4603      	mov	r3, r0
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
 8003bec:	73fb      	strb	r3, [r7, #15]

	if(_direction == STEP_DIR_DOWN){
 8003bee:	7bfb      	ldrb	r3, [r7, #15]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d10d      	bne.n	8003c10 <lkv_stepmotor_process+0x30>

		for(int i = 0; i < _number_step; i++){
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	e005      	b.n	8003c06 <lkv_stepmotor_process+0x26>
			lkv_stepmotor_run_down(_speed);
 8003bfa:	68b8      	ldr	r0, [r7, #8]
 8003bfc:	f7ff ff1e 	bl	8003a3c <lkv_stepmotor_run_down>
		for(int i = 0; i < _number_step; i++){
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	3301      	adds	r3, #1
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d8f5      	bhi.n	8003bfa <lkv_stepmotor_process+0x1a>
		}

		return;
 8003c0e:	e01a      	b.n	8003c46 <lkv_stepmotor_process+0x66>
	}

	if(_direction == STEP_DIR_UP){
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10d      	bne.n	8003c32 <lkv_stepmotor_process+0x52>
		for(int i = 0; i < _number_step; i++){
 8003c16:	2300      	movs	r3, #0
 8003c18:	613b      	str	r3, [r7, #16]
 8003c1a:	e005      	b.n	8003c28 <lkv_stepmotor_process+0x48>
			lkv_stepmotor_run_up(_speed);
 8003c1c:	68b8      	ldr	r0, [r7, #8]
 8003c1e:	f7ff fe8f 	bl	8003940 <lkv_stepmotor_run_up>
		for(int i = 0; i < _number_step; i++){
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	3301      	adds	r3, #1
 8003c26:	613b      	str	r3, [r7, #16]
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d8f5      	bhi.n	8003c1c <lkv_stepmotor_process+0x3c>
		}
		return;
 8003c30:	e009      	b.n	8003c46 <lkv_stepmotor_process+0x66>
	}

	if(_direction == STEP_STOP){
 8003c32:	7bfb      	ldrb	r3, [r7, #15]
 8003c34:	2b03      	cmp	r3, #3
 8003c36:	d105      	bne.n	8003c44 <lkv_stepmotor_process+0x64>
		lkv_stepmotor_coil_setval(0,0,0,0);
 8003c38:	2300      	movs	r3, #0
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	2000      	movs	r0, #0
 8003c40:	f7ff fe4e 	bl	80038e0 <lkv_stepmotor_coil_setval>
	}


return;
 8003c44:	bf00      	nop
}
 8003c46:	3718      	adds	r7, #24
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <memset>:
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	4402      	add	r2, r0
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d100      	bne.n	8003c56 <memset+0xa>
 8003c54:	4770      	bx	lr
 8003c56:	f803 1b01 	strb.w	r1, [r3], #1
 8003c5a:	e7f9      	b.n	8003c50 <memset+0x4>

08003c5c <__libc_init_array>:
 8003c5c:	b570      	push	{r4, r5, r6, lr}
 8003c5e:	2600      	movs	r6, #0
 8003c60:	4d0c      	ldr	r5, [pc, #48]	; (8003c94 <__libc_init_array+0x38>)
 8003c62:	4c0d      	ldr	r4, [pc, #52]	; (8003c98 <__libc_init_array+0x3c>)
 8003c64:	1b64      	subs	r4, r4, r5
 8003c66:	10a4      	asrs	r4, r4, #2
 8003c68:	42a6      	cmp	r6, r4
 8003c6a:	d109      	bne.n	8003c80 <__libc_init_array+0x24>
 8003c6c:	f000 f81a 	bl	8003ca4 <_init>
 8003c70:	2600      	movs	r6, #0
 8003c72:	4d0a      	ldr	r5, [pc, #40]	; (8003c9c <__libc_init_array+0x40>)
 8003c74:	4c0a      	ldr	r4, [pc, #40]	; (8003ca0 <__libc_init_array+0x44>)
 8003c76:	1b64      	subs	r4, r4, r5
 8003c78:	10a4      	asrs	r4, r4, #2
 8003c7a:	42a6      	cmp	r6, r4
 8003c7c:	d105      	bne.n	8003c8a <__libc_init_array+0x2e>
 8003c7e:	bd70      	pop	{r4, r5, r6, pc}
 8003c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c84:	4798      	blx	r3
 8003c86:	3601      	adds	r6, #1
 8003c88:	e7ee      	b.n	8003c68 <__libc_init_array+0xc>
 8003c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c8e:	4798      	blx	r3
 8003c90:	3601      	adds	r6, #1
 8003c92:	e7f2      	b.n	8003c7a <__libc_init_array+0x1e>
 8003c94:	08003d08 	.word	0x08003d08
 8003c98:	08003d08 	.word	0x08003d08
 8003c9c:	08003d08 	.word	0x08003d08
 8003ca0:	08003d0c 	.word	0x08003d0c

08003ca4 <_init>:
 8003ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ca6:	bf00      	nop
 8003ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003caa:	bc08      	pop	{r3}
 8003cac:	469e      	mov	lr, r3
 8003cae:	4770      	bx	lr

08003cb0 <_fini>:
 8003cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb2:	bf00      	nop
 8003cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cb6:	bc08      	pop	{r3}
 8003cb8:	469e      	mov	lr, r3
 8003cba:	4770      	bx	lr
