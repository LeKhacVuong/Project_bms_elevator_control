
bms_l152.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ff4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08006130  08006130  00016130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006154  08006154  00020038  2**0
                  CONTENTS
  4 .ARM          00000008  08006154  08006154  00016154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800615c  0800615c  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800615c  0800615c  0001615c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006160  08006160  00016160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08006164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000718  20000038  0800619c  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000750  0800619c  00020750  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b602  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020b0  00000000  00000000  0002b6a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a00  00000000  00000000  0002d758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007ae  00000000  00000000  0002e158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015318  00000000  00000000  0002e906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c019  00000000  00000000  00043c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084e7b  00000000  00000000  0004fc37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002884  00000000  00000000  000d4ab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000d7338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000038 	.word	0x20000038
 8000158:	00000000 	.word	0x00000000
 800015c:	08006118 	.word	0x08006118

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000003c 	.word	0x2000003c
 8000178:	08006118 	.word	0x08006118

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800018c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14c      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d967      	bls.n	8000292 <__udivmoddi4+0xe6>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b153      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	fa01 fe03 	lsl.w	lr, r1, r3
 80001d4:	fa20 f202 	lsr.w	r2, r0, r2
 80001d8:	ea42 0e0e 	orr.w	lr, r2, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001e2:	fbbe f1f7 	udiv	r1, lr, r7
 80001e6:	fa1f f58c 	uxth.w	r5, ip
 80001ea:	fb07 ee11 	mls	lr, r7, r1, lr
 80001ee:	fb01 f005 	mul.w	r0, r1, r5
 80001f2:	0c22      	lsrs	r2, r4, #16
 80001f4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000200:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8000204:	f080 8119 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000208:	4290      	cmp	r0, r2
 800020a:	f240 8116 	bls.w	800043a <__udivmoddi4+0x28e>
 800020e:	3902      	subs	r1, #2
 8000210:	4462      	add	r2, ip
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f7 	udiv	r0, r2, r7
 8000218:	fb07 2210 	mls	r2, r7, r0, r2
 800021c:	fb00 f505 	mul.w	r5, r0, r5
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a5      	cmp	r5, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000232:	f080 8104 	bcs.w	800043e <__udivmoddi4+0x292>
 8000236:	42a5      	cmp	r5, r4
 8000238:	f240 8101 	bls.w	800043e <__udivmoddi4+0x292>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	1b64      	subs	r4, r4, r5
 8000248:	b11e      	cbz	r6, 8000252 <__udivmoddi4+0xa6>
 800024a:	40dc      	lsrs	r4, r3
 800024c:	2300      	movs	r3, #0
 800024e:	e9c6 4300 	strd	r4, r3, [r6]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d908      	bls.n	800026c <__udivmoddi4+0xc0>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80ea 	beq.w	8000434 <__udivmoddi4+0x288>
 8000260:	2100      	movs	r1, #0
 8000262:	e9c6 0500 	strd	r0, r5, [r6]
 8000266:	4608      	mov	r0, r1
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	fab3 f183 	clz	r1, r3
 8000270:	2900      	cmp	r1, #0
 8000272:	d148      	bne.n	8000306 <__udivmoddi4+0x15a>
 8000274:	42ab      	cmp	r3, r5
 8000276:	d302      	bcc.n	800027e <__udivmoddi4+0xd2>
 8000278:	4282      	cmp	r2, r0
 800027a:	f200 80f8 	bhi.w	800046e <__udivmoddi4+0x2c2>
 800027e:	1a84      	subs	r4, r0, r2
 8000280:	eb65 0203 	sbc.w	r2, r5, r3
 8000284:	2001      	movs	r0, #1
 8000286:	4696      	mov	lr, r2
 8000288:	2e00      	cmp	r6, #0
 800028a:	d0e2      	beq.n	8000252 <__udivmoddi4+0xa6>
 800028c:	e9c6 4e00 	strd	r4, lr, [r6]
 8000290:	e7df      	b.n	8000252 <__udivmoddi4+0xa6>
 8000292:	b902      	cbnz	r2, 8000296 <__udivmoddi4+0xea>
 8000294:	deff      	udf	#255	; 0xff
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	2b00      	cmp	r3, #0
 800029c:	f040 808e 	bne.w	80003bc <__udivmoddi4+0x210>
 80002a0:	1a88      	subs	r0, r1, r2
 80002a2:	2101      	movs	r1, #1
 80002a4:	0c17      	lsrs	r7, r2, #16
 80002a6:	fa1f fe82 	uxth.w	lr, r2
 80002aa:	fbb0 f5f7 	udiv	r5, r0, r7
 80002ae:	fb07 0015 	mls	r0, r7, r5, r0
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b8:	fb0e f005 	mul.w	r0, lr, r5
 80002bc:	4290      	cmp	r0, r2
 80002be:	d908      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c0:	eb1c 0202 	adds.w	r2, ip, r2
 80002c4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f200 80cc 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002d0:	4645      	mov	r5, r8
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	fb0e fe00 	mul.w	lr, lr, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e6:	45a6      	cmp	lr, r4
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x150>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x14e>
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	f200 80b4 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002fa:	4610      	mov	r0, r2
 80002fc:	eba4 040e 	sub.w	r4, r4, lr
 8000300:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000304:	e7a0      	b.n	8000248 <__udivmoddi4+0x9c>
 8000306:	f1c1 0720 	rsb	r7, r1, #32
 800030a:	408b      	lsls	r3, r1
 800030c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000310:	ea4c 0c03 	orr.w	ip, ip, r3
 8000314:	fa25 fa07 	lsr.w	sl, r5, r7
 8000318:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800031c:	fbba f8f9 	udiv	r8, sl, r9
 8000320:	408d      	lsls	r5, r1
 8000322:	fa20 f307 	lsr.w	r3, r0, r7
 8000326:	fb09 aa18 	mls	sl, r9, r8, sl
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	432b      	orrs	r3, r5
 8000330:	fa00 f501 	lsl.w	r5, r0, r1
 8000334:	fb08 f00e 	mul.w	r0, r8, lr
 8000338:	0c1c      	lsrs	r4, r3, #16
 800033a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800033e:	42a0      	cmp	r0, r4
 8000340:	fa02 f201 	lsl.w	r2, r2, r1
 8000344:	d90b      	bls.n	800035e <__udivmoddi4+0x1b2>
 8000346:	eb1c 0404 	adds.w	r4, ip, r4
 800034a:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800034e:	f080 8086 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000352:	42a0      	cmp	r0, r4
 8000354:	f240 8083 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000358:	f1a8 0802 	sub.w	r8, r8, #2
 800035c:	4464      	add	r4, ip
 800035e:	1a24      	subs	r4, r4, r0
 8000360:	b298      	uxth	r0, r3
 8000362:	fbb4 f3f9 	udiv	r3, r4, r9
 8000366:	fb09 4413 	mls	r4, r9, r3, r4
 800036a:	fb03 fe0e 	mul.w	lr, r3, lr
 800036e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000372:	45a6      	cmp	lr, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 800037e:	d26a      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 8000380:	45a6      	cmp	lr, r4
 8000382:	d968      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000384:	3b02      	subs	r3, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800038c:	fba0 9302 	umull	r9, r3, r0, r2
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	429c      	cmp	r4, r3
 8000396:	46c8      	mov	r8, r9
 8000398:	469e      	mov	lr, r3
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d067      	beq.n	8000472 <__udivmoddi4+0x2c6>
 80003a2:	ebb5 0308 	subs.w	r3, r5, r8
 80003a6:	eb64 040e 	sbc.w	r4, r4, lr
 80003aa:	40cb      	lsrs	r3, r1
 80003ac:	fa04 f707 	lsl.w	r7, r4, r7
 80003b0:	431f      	orrs	r7, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c6 7400 	strd	r7, r4, [r6]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e74a      	b.n	8000252 <__udivmoddi4+0xa6>
 80003bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c0:	f1c3 0020 	rsb	r0, r3, #32
 80003c4:	40c1      	lsrs	r1, r0
 80003c6:	409d      	lsls	r5, r3
 80003c8:	fa24 f000 	lsr.w	r0, r4, r0
 80003cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d0:	4328      	orrs	r0, r5
 80003d2:	fbb1 f5f7 	udiv	r5, r1, r7
 80003d6:	fb07 1115 	mls	r1, r7, r5, r1
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	0c02      	lsrs	r2, r0, #16
 80003e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003e4:	fb05 f10e 	mul.w	r1, r5, lr
 80003e8:	4291      	cmp	r1, r2
 80003ea:	fa04 f403 	lsl.w	r4, r4, r3
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f0:	eb1c 0202 	adds.w	r2, ip, r2
 80003f4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	4291      	cmp	r1, r2
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3d02      	subs	r5, #2
 8000400:	4462      	add	r2, ip
 8000402:	1a52      	subs	r2, r2, r1
 8000404:	fbb2 f1f7 	udiv	r1, r2, r7
 8000408:	fb07 2211 	mls	r2, r7, r1, r2
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000412:	fb01 f20e 	mul.w	r2, r1, lr
 8000416:	4282      	cmp	r2, r0
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x280>
 800041a:	eb1c 0000 	adds.w	r0, ip, r0
 800041e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000422:	d216      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000424:	4282      	cmp	r2, r0
 8000426:	d914      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000428:	3902      	subs	r1, #2
 800042a:	4460      	add	r0, ip
 800042c:	1a80      	subs	r0, r0, r2
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4631      	mov	r1, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e70b      	b.n	8000252 <__udivmoddi4+0xa6>
 800043a:	4671      	mov	r1, lr
 800043c:	e6e9      	b.n	8000212 <__udivmoddi4+0x66>
 800043e:	4610      	mov	r0, r2
 8000440:	e6fe      	b.n	8000240 <__udivmoddi4+0x94>
 8000442:	454d      	cmp	r5, r9
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb9 0802 	subs.w	r8, r9, r2
 800044a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800044e:	3801      	subs	r0, #1
 8000450:	e7a5      	b.n	800039e <__udivmoddi4+0x1f2>
 8000452:	4641      	mov	r1, r8
 8000454:	e7ea      	b.n	800042c <__udivmoddi4+0x280>
 8000456:	4603      	mov	r3, r0
 8000458:	e796      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045a:	4645      	mov	r5, r8
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	46d0      	mov	r8, sl
 8000460:	e77d      	b.n	800035e <__udivmoddi4+0x1b2>
 8000462:	4464      	add	r4, ip
 8000464:	3802      	subs	r0, #2
 8000466:	e749      	b.n	80002fc <__udivmoddi4+0x150>
 8000468:	3d02      	subs	r5, #2
 800046a:	4462      	add	r2, ip
 800046c:	e731      	b.n	80002d2 <__udivmoddi4+0x126>
 800046e:	4608      	mov	r0, r1
 8000470:	e70a      	b.n	8000288 <__udivmoddi4+0xdc>
 8000472:	4631      	mov	r1, r6
 8000474:	e6ed      	b.n	8000252 <__udivmoddi4+0xa6>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000482:	4b14      	ldr	r3, [pc, #80]	; (80004d4 <HAL_MspInit+0x58>)
 8000484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000486:	4a13      	ldr	r2, [pc, #76]	; (80004d4 <HAL_MspInit+0x58>)
 8000488:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800048c:	6253      	str	r3, [r2, #36]	; 0x24
 800048e:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <HAL_MspInit+0x58>)
 8000490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000492:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800049a:	4b0e      	ldr	r3, [pc, #56]	; (80004d4 <HAL_MspInit+0x58>)
 800049c:	6a1b      	ldr	r3, [r3, #32]
 800049e:	4a0d      	ldr	r2, [pc, #52]	; (80004d4 <HAL_MspInit+0x58>)
 80004a0:	f043 0301 	orr.w	r3, r3, #1
 80004a4:	6213      	str	r3, [r2, #32]
 80004a6:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <HAL_MspInit+0x58>)
 80004a8:	6a1b      	ldr	r3, [r3, #32]
 80004aa:	f003 0301 	and.w	r3, r3, #1
 80004ae:	60bb      	str	r3, [r7, #8]
 80004b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b2:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <HAL_MspInit+0x58>)
 80004b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004b6:	4a07      	ldr	r2, [pc, #28]	; (80004d4 <HAL_MspInit+0x58>)
 80004b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004bc:	6253      	str	r3, [r2, #36]	; 0x24
 80004be:	4b05      	ldr	r3, [pc, #20]	; (80004d4 <HAL_MspInit+0x58>)
 80004c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ca:	bf00      	nop
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr
 80004d4:	40023800 	.word	0x40023800

080004d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08c      	sub	sp, #48	; 0x30
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e0:	f107 031c 	add.w	r3, r7, #28
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
 80004ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a36      	ldr	r2, [pc, #216]	; (80005d0 <HAL_UART_MspInit+0xf8>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d131      	bne.n	800055e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80004fa:	4b36      	ldr	r3, [pc, #216]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 80004fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004fe:	4a35      	ldr	r2, [pc, #212]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 8000500:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000504:	6253      	str	r3, [r2, #36]	; 0x24
 8000506:	4b33      	ldr	r3, [pc, #204]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 8000508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800050a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800050e:	61bb      	str	r3, [r7, #24]
 8000510:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000512:	4b30      	ldr	r3, [pc, #192]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	4a2f      	ldr	r2, [pc, #188]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 8000518:	f043 0304 	orr.w	r3, r3, #4
 800051c:	61d3      	str	r3, [r2, #28]
 800051e:	4b2d      	ldr	r3, [pc, #180]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	f003 0304 	and.w	r3, r3, #4
 8000526:	617b      	str	r3, [r7, #20]
 8000528:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800052a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800052e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000530:	2302      	movs	r3, #2
 8000532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000534:	2301      	movs	r3, #1
 8000536:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000538:	2303      	movs	r3, #3
 800053a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800053c:	2308      	movs	r3, #8
 800053e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000540:	f107 031c 	add.w	r3, r7, #28
 8000544:	4619      	mov	r1, r3
 8000546:	4824      	ldr	r0, [pc, #144]	; (80005d8 <HAL_UART_MspInit+0x100>)
 8000548:	f000 fab6 	bl	8000ab8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800054c:	2200      	movs	r2, #0
 800054e:	2100      	movs	r1, #0
 8000550:	2030      	movs	r0, #48	; 0x30
 8000552:	f000 f9fc 	bl	800094e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000556:	2030      	movs	r0, #48	; 0x30
 8000558:	f000 fa15 	bl	8000986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800055c:	e034      	b.n	80005c8 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a1e      	ldr	r2, [pc, #120]	; (80005dc <HAL_UART_MspInit+0x104>)
 8000564:	4293      	cmp	r3, r2
 8000566:	d12f      	bne.n	80005c8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000568:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 800056a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800056c:	4a19      	ldr	r2, [pc, #100]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 800056e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000572:	6253      	str	r3, [r2, #36]	; 0x24
 8000574:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 8000576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800057c:	613b      	str	r3, [r7, #16]
 800057e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000580:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 8000582:	69db      	ldr	r3, [r3, #28]
 8000584:	4a13      	ldr	r2, [pc, #76]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 8000586:	f043 0301 	orr.w	r3, r3, #1
 800058a:	61d3      	str	r3, [r2, #28]
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <HAL_UART_MspInit+0xfc>)
 800058e:	69db      	ldr	r3, [r3, #28]
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000598:	230c      	movs	r3, #12
 800059a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800059c:	2302      	movs	r3, #2
 800059e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005a4:	2303      	movs	r3, #3
 80005a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005a8:	2307      	movs	r3, #7
 80005aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ac:	f107 031c 	add.w	r3, r7, #28
 80005b0:	4619      	mov	r1, r3
 80005b2:	480b      	ldr	r0, [pc, #44]	; (80005e0 <HAL_UART_MspInit+0x108>)
 80005b4:	f000 fa80 	bl	8000ab8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2100      	movs	r1, #0
 80005bc:	2026      	movs	r0, #38	; 0x26
 80005be:	f000 f9c6 	bl	800094e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80005c2:	2026      	movs	r0, #38	; 0x26
 80005c4:	f000 f9df 	bl	8000986 <HAL_NVIC_EnableIRQ>
}
 80005c8:	bf00      	nop
 80005ca:	3730      	adds	r7, #48	; 0x30
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40004c00 	.word	0x40004c00
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40020800 	.word	0x40020800
 80005dc:	40004400 	.word	0x40004400
 80005e0:	40020000 	.word	0x40020000

080005e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <NMI_Handler+0x4>

080005ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ee:	e7fe      	b.n	80005ee <HardFault_Handler+0x4>

080005f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <MemManage_Handler+0x4>

080005f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005fa:	e7fe      	b.n	80005fa <BusFault_Handler+0x4>

080005fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <UsageFault_Handler+0x4>

08000602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr

0800060e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr

0800061a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr

08000626 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
	...

08000634 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000634:	f7ff fff7 	bl	8000626 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000638:	480b      	ldr	r0, [pc, #44]	; (8000668 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800063a:	490c      	ldr	r1, [pc, #48]	; (800066c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800063c:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <LoopFillZerobss+0x16>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000640:	e002      	b.n	8000648 <LoopCopyDataInit>

08000642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000646:	3304      	adds	r3, #4

08000648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800064c:	d3f9      	bcc.n	8000642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064e:	4a09      	ldr	r2, [pc, #36]	; (8000674 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000650:	4c09      	ldr	r4, [pc, #36]	; (8000678 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000654:	e001      	b.n	800065a <LoopFillZerobss>

08000656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000658:	3204      	adds	r2, #4

0800065a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800065c:	d3fb      	bcc.n	8000656 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800065e:	f005 fd29 	bl	80060b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000662:	f002 fa7d 	bl	8002b60 <main>
  bx lr
 8000666:	4770      	bx	lr
  ldr r0, =_sdata
 8000668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800066c:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8000670:	08006164 	.word	0x08006164
  ldr r2, =_sbss
 8000674:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8000678:	20000750 	.word	0x20000750

0800067c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800067c:	e7fe      	b.n	800067c <ADC1_IRQHandler>

0800067e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	b082      	sub	sp, #8
 8000682:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000684:	2300      	movs	r3, #0
 8000686:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000688:	2003      	movs	r0, #3
 800068a:	f000 f955 	bl	8000938 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800068e:	200f      	movs	r0, #15
 8000690:	f000 f80e 	bl	80006b0 <HAL_InitTick>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d002      	beq.n	80006a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800069a:	2301      	movs	r3, #1
 800069c:	71fb      	strb	r3, [r7, #7]
 800069e:	e001      	b.n	80006a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006a0:	f7ff feec 	bl	800047c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006a4:	79fb      	ldrb	r3, [r7, #7]
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006b8:	2300      	movs	r3, #0
 80006ba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80006bc:	4b16      	ldr	r3, [pc, #88]	; (8000718 <HAL_InitTick+0x68>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d022      	beq.n	800070a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80006c4:	4b15      	ldr	r3, [pc, #84]	; (800071c <HAL_InitTick+0x6c>)
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	4b13      	ldr	r3, [pc, #76]	; (8000718 <HAL_InitTick+0x68>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80006d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 f962 	bl	80009a2 <HAL_SYSTICK_Config>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d10f      	bne.n	8000704 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2b0f      	cmp	r3, #15
 80006e8:	d809      	bhi.n	80006fe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006ea:	2200      	movs	r2, #0
 80006ec:	6879      	ldr	r1, [r7, #4]
 80006ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006f2:	f000 f92c 	bl	800094e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006f6:	4a0a      	ldr	r2, [pc, #40]	; (8000720 <HAL_InitTick+0x70>)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	6013      	str	r3, [r2, #0]
 80006fc:	e007      	b.n	800070e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80006fe:	2301      	movs	r3, #1
 8000700:	73fb      	strb	r3, [r7, #15]
 8000702:	e004      	b.n	800070e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000704:	2301      	movs	r3, #1
 8000706:	73fb      	strb	r3, [r7, #15]
 8000708:	e001      	b.n	800070e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800070a:	2301      	movs	r3, #1
 800070c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800070e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000710:	4618      	mov	r0, r3
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000008 	.word	0x20000008
 800071c:	20000000 	.word	0x20000000
 8000720:	20000004 	.word	0x20000004

08000724 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000728:	4b05      	ldr	r3, [pc, #20]	; (8000740 <HAL_IncTick+0x1c>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <HAL_IncTick+0x20>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4413      	add	r3, r2
 8000732:	4a03      	ldr	r2, [pc, #12]	; (8000740 <HAL_IncTick+0x1c>)
 8000734:	6013      	str	r3, [r2, #0]
}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	20000054 	.word	0x20000054
 8000744:	20000008 	.word	0x20000008

08000748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  return uwTick;
 800074c:	4b02      	ldr	r3, [pc, #8]	; (8000758 <HAL_GetTick+0x10>)
 800074e:	681b      	ldr	r3, [r3, #0]
}
 8000750:	4618      	mov	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	20000054 	.word	0x20000054

0800075c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000764:	f7ff fff0 	bl	8000748 <HAL_GetTick>
 8000768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000774:	d004      	beq.n	8000780 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <HAL_Delay+0x40>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	4413      	add	r3, r2
 800077e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000780:	bf00      	nop
 8000782:	f7ff ffe1 	bl	8000748 <HAL_GetTick>
 8000786:	4602      	mov	r2, r0
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	1ad3      	subs	r3, r2, r3
 800078c:	68fa      	ldr	r2, [r7, #12]
 800078e:	429a      	cmp	r2, r3
 8000790:	d8f7      	bhi.n	8000782 <HAL_Delay+0x26>
  {
  }
}
 8000792:	bf00      	nop
 8000794:	bf00      	nop
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000008 	.word	0x20000008

080007a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <__NVIC_SetPriorityGrouping+0x44>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007b6:	68ba      	ldr	r2, [r7, #8]
 80007b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007bc:	4013      	ands	r3, r2
 80007be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007d2:	4a04      	ldr	r2, [pc, #16]	; (80007e4 <__NVIC_SetPriorityGrouping+0x44>)
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	60d3      	str	r3, [r2, #12]
}
 80007d8:	bf00      	nop
 80007da:	3714      	adds	r7, #20
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007ec:	4b04      	ldr	r3, [pc, #16]	; (8000800 <__NVIC_GetPriorityGrouping+0x18>)
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	0a1b      	lsrs	r3, r3, #8
 80007f2:	f003 0307 	and.w	r3, r3, #7
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800080e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000812:	2b00      	cmp	r3, #0
 8000814:	db0b      	blt.n	800082e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	f003 021f 	and.w	r2, r3, #31
 800081c:	4906      	ldr	r1, [pc, #24]	; (8000838 <__NVIC_EnableIRQ+0x34>)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	095b      	lsrs	r3, r3, #5
 8000824:	2001      	movs	r0, #1
 8000826:	fa00 f202 	lsl.w	r2, r0, r2
 800082a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr
 8000838:	e000e100 	.word	0xe000e100

0800083c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	6039      	str	r1, [r7, #0]
 8000846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084c:	2b00      	cmp	r3, #0
 800084e:	db0a      	blt.n	8000866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	b2da      	uxtb	r2, r3
 8000854:	490c      	ldr	r1, [pc, #48]	; (8000888 <__NVIC_SetPriority+0x4c>)
 8000856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085a:	0112      	lsls	r2, r2, #4
 800085c:	b2d2      	uxtb	r2, r2
 800085e:	440b      	add	r3, r1
 8000860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000864:	e00a      	b.n	800087c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4908      	ldr	r1, [pc, #32]	; (800088c <__NVIC_SetPriority+0x50>)
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	f003 030f 	and.w	r3, r3, #15
 8000872:	3b04      	subs	r3, #4
 8000874:	0112      	lsls	r2, r2, #4
 8000876:	b2d2      	uxtb	r2, r2
 8000878:	440b      	add	r3, r1
 800087a:	761a      	strb	r2, [r3, #24]
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000e100 	.word	0xe000e100
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000890:	b480      	push	{r7}
 8000892:	b089      	sub	sp, #36	; 0x24
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	f1c3 0307 	rsb	r3, r3, #7
 80008aa:	2b04      	cmp	r3, #4
 80008ac:	bf28      	it	cs
 80008ae:	2304      	movcs	r3, #4
 80008b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	3304      	adds	r3, #4
 80008b6:	2b06      	cmp	r3, #6
 80008b8:	d902      	bls.n	80008c0 <NVIC_EncodePriority+0x30>
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	3b03      	subs	r3, #3
 80008be:	e000      	b.n	80008c2 <NVIC_EncodePriority+0x32>
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	43da      	mvns	r2, r3
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	401a      	ands	r2, r3
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	fa01 f303 	lsl.w	r3, r1, r3
 80008e2:	43d9      	mvns	r1, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e8:	4313      	orrs	r3, r2
         );
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3724      	adds	r7, #36	; 0x24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr

080008f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3b01      	subs	r3, #1
 8000900:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000904:	d301      	bcc.n	800090a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000906:	2301      	movs	r3, #1
 8000908:	e00f      	b.n	800092a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800090a:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <SysTick_Config+0x40>)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3b01      	subs	r3, #1
 8000910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000912:	210f      	movs	r1, #15
 8000914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000918:	f7ff ff90 	bl	800083c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800091c:	4b05      	ldr	r3, [pc, #20]	; (8000934 <SysTick_Config+0x40>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000922:	4b04      	ldr	r3, [pc, #16]	; (8000934 <SysTick_Config+0x40>)
 8000924:	2207      	movs	r2, #7
 8000926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	e000e010 	.word	0xe000e010

08000938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff ff2d 	bl	80007a0 <__NVIC_SetPriorityGrouping>
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b086      	sub	sp, #24
 8000952:	af00      	add	r7, sp, #0
 8000954:	4603      	mov	r3, r0
 8000956:	60b9      	str	r1, [r7, #8]
 8000958:	607a      	str	r2, [r7, #4]
 800095a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000960:	f7ff ff42 	bl	80007e8 <__NVIC_GetPriorityGrouping>
 8000964:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	68b9      	ldr	r1, [r7, #8]
 800096a:	6978      	ldr	r0, [r7, #20]
 800096c:	f7ff ff90 	bl	8000890 <NVIC_EncodePriority>
 8000970:	4602      	mov	r2, r0
 8000972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000976:	4611      	mov	r1, r2
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ff5f 	bl	800083c <__NVIC_SetPriority>
}
 800097e:	bf00      	nop
 8000980:	3718      	adds	r7, #24
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b082      	sub	sp, #8
 800098a:	af00      	add	r7, sp, #0
 800098c:	4603      	mov	r3, r0
 800098e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff ff35 	bl	8000804 <__NVIC_EnableIRQ>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b082      	sub	sp, #8
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff ffa2 	bl	80008f4 <SysTick_Config>
 80009b0:	4603      	mov	r3, r0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80009ba:	b480      	push	{r7}
 80009bc:	b085      	sub	sp, #20
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009c2:	2300      	movs	r3, #0
 80009c4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	d008      	beq.n	80009e4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2204      	movs	r2, #4
 80009d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2200      	movs	r2, #0
 80009dc:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80009e0:	2301      	movs	r3, #1
 80009e2:	e022      	b.n	8000a2a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f022 020e 	bic.w	r2, r2, #14
 80009f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f022 0201 	bic.w	r2, r2, #1
 8000a02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a08:	f003 021c 	and.w	r2, r3, #28
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a10:	2101      	movs	r1, #1
 8000a12:	fa01 f202 	lsl.w	r2, r1, r2
 8000a16:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2200      	movs	r2, #0
 8000a24:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr

08000a34 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d005      	beq.n	8000a58 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2204      	movs	r2, #4
 8000a50:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	73fb      	strb	r3, [r7, #15]
 8000a56:	e029      	b.n	8000aac <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f022 020e 	bic.w	r2, r2, #14
 8000a66:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f022 0201 	bic.w	r2, r2, #1
 8000a76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	f003 021c 	and.w	r2, r3, #28
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a84:	2101      	movs	r1, #1
 8000a86:	fa01 f202 	lsl.w	r2, r1, r2
 8000a8a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2200      	movs	r2, #0
 8000a98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d003      	beq.n	8000aac <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	4798      	blx	r3
    }
  }
  return status;
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b087      	sub	sp, #28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ace:	e160      	b.n	8000d92 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8000adc:	4013      	ands	r3, r2
 8000ade:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	f000 8152 	beq.w	8000d8c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f003 0303 	and.w	r3, r3, #3
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d005      	beq.n	8000b00 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000afc:	2b02      	cmp	r3, #2
 8000afe:	d130      	bne.n	8000b62 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	2203      	movs	r2, #3
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	43db      	mvns	r3, r3
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4013      	ands	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	68da      	ldr	r2, [r3, #12]
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000b36:	2201      	movs	r2, #1
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	4013      	ands	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	091b      	lsrs	r3, r3, #4
 8000b4c:	f003 0201 	and.w	r2, r3, #1
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f003 0303 	and.w	r3, r3, #3
 8000b6a:	2b03      	cmp	r3, #3
 8000b6c:	d017      	beq.n	8000b9e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	2203      	movs	r2, #3
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	4013      	ands	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	689a      	ldr	r2, [r3, #8]
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f003 0303 	and.w	r3, r3, #3
 8000ba6:	2b02      	cmp	r3, #2
 8000ba8:	d123      	bne.n	8000bf2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	08da      	lsrs	r2, r3, #3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	3208      	adds	r2, #8
 8000bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bb6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	220f      	movs	r2, #15
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	691a      	ldr	r2, [r3, #16]
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	f003 0307 	and.w	r3, r3, #7
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	08da      	lsrs	r2, r3, #3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3208      	adds	r2, #8
 8000bec:	6939      	ldr	r1, [r7, #16]
 8000bee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43db      	mvns	r3, r3
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	4013      	ands	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f003 0203 	and.w	r2, r3, #3
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	f000 80ac 	beq.w	8000d8c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c34:	4b5e      	ldr	r3, [pc, #376]	; (8000db0 <HAL_GPIO_Init+0x2f8>)
 8000c36:	6a1b      	ldr	r3, [r3, #32]
 8000c38:	4a5d      	ldr	r2, [pc, #372]	; (8000db0 <HAL_GPIO_Init+0x2f8>)
 8000c3a:	f043 0301 	orr.w	r3, r3, #1
 8000c3e:	6213      	str	r3, [r2, #32]
 8000c40:	4b5b      	ldr	r3, [pc, #364]	; (8000db0 <HAL_GPIO_Init+0x2f8>)
 8000c42:	6a1b      	ldr	r3, [r3, #32]
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000c4c:	4a59      	ldr	r2, [pc, #356]	; (8000db4 <HAL_GPIO_Init+0x2fc>)
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	089b      	lsrs	r3, r3, #2
 8000c52:	3302      	adds	r3, #2
 8000c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c58:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	f003 0303 	and.w	r3, r3, #3
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	220f      	movs	r2, #15
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a51      	ldr	r2, [pc, #324]	; (8000db8 <HAL_GPIO_Init+0x300>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d025      	beq.n	8000cc4 <HAL_GPIO_Init+0x20c>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a50      	ldr	r2, [pc, #320]	; (8000dbc <HAL_GPIO_Init+0x304>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d01f      	beq.n	8000cc0 <HAL_GPIO_Init+0x208>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a4f      	ldr	r2, [pc, #316]	; (8000dc0 <HAL_GPIO_Init+0x308>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d019      	beq.n	8000cbc <HAL_GPIO_Init+0x204>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a4e      	ldr	r2, [pc, #312]	; (8000dc4 <HAL_GPIO_Init+0x30c>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d013      	beq.n	8000cb8 <HAL_GPIO_Init+0x200>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a4d      	ldr	r2, [pc, #308]	; (8000dc8 <HAL_GPIO_Init+0x310>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d00d      	beq.n	8000cb4 <HAL_GPIO_Init+0x1fc>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a4c      	ldr	r2, [pc, #304]	; (8000dcc <HAL_GPIO_Init+0x314>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d007      	beq.n	8000cb0 <HAL_GPIO_Init+0x1f8>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a4b      	ldr	r2, [pc, #300]	; (8000dd0 <HAL_GPIO_Init+0x318>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d101      	bne.n	8000cac <HAL_GPIO_Init+0x1f4>
 8000ca8:	2306      	movs	r3, #6
 8000caa:	e00c      	b.n	8000cc6 <HAL_GPIO_Init+0x20e>
 8000cac:	2307      	movs	r3, #7
 8000cae:	e00a      	b.n	8000cc6 <HAL_GPIO_Init+0x20e>
 8000cb0:	2305      	movs	r3, #5
 8000cb2:	e008      	b.n	8000cc6 <HAL_GPIO_Init+0x20e>
 8000cb4:	2304      	movs	r3, #4
 8000cb6:	e006      	b.n	8000cc6 <HAL_GPIO_Init+0x20e>
 8000cb8:	2303      	movs	r3, #3
 8000cba:	e004      	b.n	8000cc6 <HAL_GPIO_Init+0x20e>
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	e002      	b.n	8000cc6 <HAL_GPIO_Init+0x20e>
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e000      	b.n	8000cc6 <HAL_GPIO_Init+0x20e>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	f002 0203 	and.w	r2, r2, #3
 8000ccc:	0092      	lsls	r2, r2, #2
 8000cce:	4093      	lsls	r3, r2
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000cd6:	4937      	ldr	r1, [pc, #220]	; (8000db4 <HAL_GPIO_Init+0x2fc>)
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	089b      	lsrs	r3, r3, #2
 8000cdc:	3302      	adds	r3, #2
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ce4:	4b3b      	ldr	r3, [pc, #236]	; (8000dd4 <HAL_GPIO_Init+0x31c>)
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	43db      	mvns	r3, r3
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d003      	beq.n	8000d08 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d08:	4a32      	ldr	r2, [pc, #200]	; (8000dd4 <HAL_GPIO_Init+0x31c>)
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d0e:	4b31      	ldr	r3, [pc, #196]	; (8000dd4 <HAL_GPIO_Init+0x31c>)
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	43db      	mvns	r3, r3
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d003      	beq.n	8000d32 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d32:	4a28      	ldr	r2, [pc, #160]	; (8000dd4 <HAL_GPIO_Init+0x31c>)
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d38:	4b26      	ldr	r3, [pc, #152]	; (8000dd4 <HAL_GPIO_Init+0x31c>)
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	43db      	mvns	r3, r3
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d003      	beq.n	8000d5c <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d5c:	4a1d      	ldr	r2, [pc, #116]	; (8000dd4 <HAL_GPIO_Init+0x31c>)
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d62:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <HAL_GPIO_Init+0x31c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d003      	beq.n	8000d86 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d86:	4a13      	ldr	r2, [pc, #76]	; (8000dd4 <HAL_GPIO_Init+0x31c>)
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	fa22 f303 	lsr.w	r3, r2, r3
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	f47f ae97 	bne.w	8000ad0 <HAL_GPIO_Init+0x18>
  }
}
 8000da2:	bf00      	nop
 8000da4:	bf00      	nop
 8000da6:	371c      	adds	r7, #28
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40010000 	.word	0x40010000
 8000db8:	40020000 	.word	0x40020000
 8000dbc:	40020400 	.word	0x40020400
 8000dc0:	40020800 	.word	0x40020800
 8000dc4:	40020c00 	.word	0x40020c00
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	40021400 	.word	0x40021400
 8000dd0:	40021800 	.word	0x40021800
 8000dd4:	40010400 	.word	0x40010400

08000dd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	460b      	mov	r3, r1
 8000de2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	691a      	ldr	r2, [r3, #16]
 8000de8:	887b      	ldrh	r3, [r7, #2]
 8000dea:	4013      	ands	r3, r2
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d002      	beq.n	8000df6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000df0:	2301      	movs	r3, #1
 8000df2:	73fb      	strb	r3, [r7, #15]
 8000df4:	e001      	b.n	8000dfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000df6:	2300      	movs	r3, #0
 8000df8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr

08000e06 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b083      	sub	sp, #12
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
 8000e0e:	460b      	mov	r3, r1
 8000e10:	807b      	strh	r3, [r7, #2]
 8000e12:	4613      	mov	r3, r2
 8000e14:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e16:	787b      	ldrb	r3, [r7, #1]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d003      	beq.n	8000e24 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e1c:	887a      	ldrh	r2, [r7, #2]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000e22:	e003      	b.n	8000e2c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000e24:	887b      	ldrh	r3, [r7, #2]
 8000e26:	041a      	lsls	r2, r3, #16
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	619a      	str	r2, [r3, #24]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr
	...

08000e38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d101      	bne.n	8000e4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e31d      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e4a:	4b94      	ldr	r3, [pc, #592]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	f003 030c 	and.w	r3, r3, #12
 8000e52:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e54:	4b91      	ldr	r3, [pc, #580]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e5c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d07b      	beq.n	8000f62 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	2b08      	cmp	r3, #8
 8000e6e:	d006      	beq.n	8000e7e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	2b0c      	cmp	r3, #12
 8000e74:	d10f      	bne.n	8000e96 <HAL_RCC_OscConfig+0x5e>
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e7c:	d10b      	bne.n	8000e96 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e7e:	4b87      	ldr	r3, [pc, #540]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d06a      	beq.n	8000f60 <HAL_RCC_OscConfig+0x128>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d166      	bne.n	8000f60 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e2f7      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d106      	bne.n	8000eac <HAL_RCC_OscConfig+0x74>
 8000e9e:	4b7f      	ldr	r3, [pc, #508]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a7e      	ldr	r2, [pc, #504]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ea8:	6013      	str	r3, [r2, #0]
 8000eaa:	e02d      	b.n	8000f08 <HAL_RCC_OscConfig+0xd0>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d10c      	bne.n	8000ece <HAL_RCC_OscConfig+0x96>
 8000eb4:	4b79      	ldr	r3, [pc, #484]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a78      	ldr	r2, [pc, #480]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ebe:	6013      	str	r3, [r2, #0]
 8000ec0:	4b76      	ldr	r3, [pc, #472]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a75      	ldr	r2, [pc, #468]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	e01c      	b.n	8000f08 <HAL_RCC_OscConfig+0xd0>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	2b05      	cmp	r3, #5
 8000ed4:	d10c      	bne.n	8000ef0 <HAL_RCC_OscConfig+0xb8>
 8000ed6:	4b71      	ldr	r3, [pc, #452]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a70      	ldr	r2, [pc, #448]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	4b6e      	ldr	r3, [pc, #440]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a6d      	ldr	r2, [pc, #436]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eec:	6013      	str	r3, [r2, #0]
 8000eee:	e00b      	b.n	8000f08 <HAL_RCC_OscConfig+0xd0>
 8000ef0:	4b6a      	ldr	r3, [pc, #424]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a69      	ldr	r2, [pc, #420]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	4b67      	ldr	r3, [pc, #412]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a66      	ldr	r2, [pc, #408]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d013      	beq.n	8000f38 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f10:	f7ff fc1a 	bl	8000748 <HAL_GetTick>
 8000f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f16:	e008      	b.n	8000f2a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f18:	f7ff fc16 	bl	8000748 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b64      	cmp	r3, #100	; 0x64
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e2ad      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f2a:	4b5c      	ldr	r3, [pc, #368]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0f0      	beq.n	8000f18 <HAL_RCC_OscConfig+0xe0>
 8000f36:	e014      	b.n	8000f62 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f38:	f7ff fc06 	bl	8000748 <HAL_GetTick>
 8000f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f3e:	e008      	b.n	8000f52 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f40:	f7ff fc02 	bl	8000748 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b64      	cmp	r3, #100	; 0x64
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e299      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f52:	4b52      	ldr	r3, [pc, #328]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1f0      	bne.n	8000f40 <HAL_RCC_OscConfig+0x108>
 8000f5e:	e000      	b.n	8000f62 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d05a      	beq.n	8001024 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	2b04      	cmp	r3, #4
 8000f72:	d005      	beq.n	8000f80 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	2b0c      	cmp	r3, #12
 8000f78:	d119      	bne.n	8000fae <HAL_RCC_OscConfig+0x176>
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d116      	bne.n	8000fae <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f80:	4b46      	ldr	r3, [pc, #280]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d005      	beq.n	8000f98 <HAL_RCC_OscConfig+0x160>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d001      	beq.n	8000f98 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e276      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f98:	4b40      	ldr	r3, [pc, #256]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	021b      	lsls	r3, r3, #8
 8000fa6:	493d      	ldr	r1, [pc, #244]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fac:	e03a      	b.n	8001024 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d020      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fb6:	4b3a      	ldr	r3, [pc, #232]	; (80010a0 <HAL_RCC_OscConfig+0x268>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbc:	f7ff fbc4 	bl	8000748 <HAL_GetTick>
 8000fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000fc2:	e008      	b.n	8000fd6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fc4:	f7ff fbc0 	bl	8000748 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e257      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000fd6:	4b31      	ldr	r3, [pc, #196]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d0f0      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe2:	4b2e      	ldr	r3, [pc, #184]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	691b      	ldr	r3, [r3, #16]
 8000fee:	021b      	lsls	r3, r3, #8
 8000ff0:	492a      	ldr	r1, [pc, #168]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	604b      	str	r3, [r1, #4]
 8000ff6:	e015      	b.n	8001024 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ff8:	4b29      	ldr	r3, [pc, #164]	; (80010a0 <HAL_RCC_OscConfig+0x268>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffe:	f7ff fba3 	bl	8000748 <HAL_GetTick>
 8001002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001004:	e008      	b.n	8001018 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001006:	f7ff fb9f 	bl	8000748 <HAL_GetTick>
 800100a:	4602      	mov	r2, r0
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	2b02      	cmp	r3, #2
 8001012:	d901      	bls.n	8001018 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001014:	2303      	movs	r3, #3
 8001016:	e236      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001018:	4b20      	ldr	r3, [pc, #128]	; (800109c <HAL_RCC_OscConfig+0x264>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0302 	and.w	r3, r3, #2
 8001020:	2b00      	cmp	r3, #0
 8001022:	d1f0      	bne.n	8001006 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0310 	and.w	r3, r3, #16
 800102c:	2b00      	cmp	r3, #0
 800102e:	f000 80b8 	beq.w	80011a2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d170      	bne.n	800111a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001038:	4b18      	ldr	r3, [pc, #96]	; (800109c <HAL_RCC_OscConfig+0x264>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001040:	2b00      	cmp	r3, #0
 8001042:	d005      	beq.n	8001050 <HAL_RCC_OscConfig+0x218>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d101      	bne.n	8001050 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e21a      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a1a      	ldr	r2, [r3, #32]
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800105c:	429a      	cmp	r2, r3
 800105e:	d921      	bls.n	80010a4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	4618      	mov	r0, r3
 8001066:	f000 fc3b 	bl	80018e0 <RCC_SetFlashLatencyFromMSIRange>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e208      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a1b      	ldr	r3, [r3, #32]
 8001080:	4906      	ldr	r1, [pc, #24]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8001082:	4313      	orrs	r3, r2
 8001084:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001086:	4b05      	ldr	r3, [pc, #20]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	061b      	lsls	r3, r3, #24
 8001094:	4901      	ldr	r1, [pc, #4]	; (800109c <HAL_RCC_OscConfig+0x264>)
 8001096:	4313      	orrs	r3, r2
 8001098:	604b      	str	r3, [r1, #4]
 800109a:	e020      	b.n	80010de <HAL_RCC_OscConfig+0x2a6>
 800109c:	40023800 	.word	0x40023800
 80010a0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010a4:	4b99      	ldr	r3, [pc, #612]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a1b      	ldr	r3, [r3, #32]
 80010b0:	4996      	ldr	r1, [pc, #600]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80010b2:	4313      	orrs	r3, r2
 80010b4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010b6:	4b95      	ldr	r3, [pc, #596]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	061b      	lsls	r3, r3, #24
 80010c4:	4991      	ldr	r1, [pc, #580]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80010c6:	4313      	orrs	r3, r2
 80010c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a1b      	ldr	r3, [r3, #32]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 fc06 	bl	80018e0 <RCC_SetFlashLatencyFromMSIRange>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e1d3      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a1b      	ldr	r3, [r3, #32]
 80010e2:	0b5b      	lsrs	r3, r3, #13
 80010e4:	3301      	adds	r3, #1
 80010e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80010ee:	4a87      	ldr	r2, [pc, #540]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80010f0:	6892      	ldr	r2, [r2, #8]
 80010f2:	0912      	lsrs	r2, r2, #4
 80010f4:	f002 020f 	and.w	r2, r2, #15
 80010f8:	4985      	ldr	r1, [pc, #532]	; (8001310 <HAL_RCC_OscConfig+0x4d8>)
 80010fa:	5c8a      	ldrb	r2, [r1, r2]
 80010fc:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80010fe:	4a85      	ldr	r2, [pc, #532]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 8001100:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001102:	4b85      	ldr	r3, [pc, #532]	; (8001318 <HAL_RCC_OscConfig+0x4e0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fad2 	bl	80006b0 <HAL_InitTick>
 800110c:	4603      	mov	r3, r0
 800110e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d045      	beq.n	80011a2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	e1b5      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d029      	beq.n	8001176 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001122:	4b7e      	ldr	r3, [pc, #504]	; (800131c <HAL_RCC_OscConfig+0x4e4>)
 8001124:	2201      	movs	r2, #1
 8001126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001128:	f7ff fb0e 	bl	8000748 <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001130:	f7ff fb0a 	bl	8000748 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e1a1      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001142:	4b72      	ldr	r3, [pc, #456]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0f0      	beq.n	8001130 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800114e:	4b6f      	ldr	r3, [pc, #444]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a1b      	ldr	r3, [r3, #32]
 800115a:	496c      	ldr	r1, [pc, #432]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 800115c:	4313      	orrs	r3, r2
 800115e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001160:	4b6a      	ldr	r3, [pc, #424]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69db      	ldr	r3, [r3, #28]
 800116c:	061b      	lsls	r3, r3, #24
 800116e:	4967      	ldr	r1, [pc, #412]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 8001170:	4313      	orrs	r3, r2
 8001172:	604b      	str	r3, [r1, #4]
 8001174:	e015      	b.n	80011a2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001176:	4b69      	ldr	r3, [pc, #420]	; (800131c <HAL_RCC_OscConfig+0x4e4>)
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117c:	f7ff fae4 	bl	8000748 <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001184:	f7ff fae0 	bl	8000748 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e177      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001196:	4b5d      	ldr	r3, [pc, #372]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f0      	bne.n	8001184 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d030      	beq.n	8001210 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d016      	beq.n	80011e4 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011b6:	4b5a      	ldr	r3, [pc, #360]	; (8001320 <HAL_RCC_OscConfig+0x4e8>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011bc:	f7ff fac4 	bl	8000748 <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011c2:	e008      	b.n	80011d6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011c4:	f7ff fac0 	bl	8000748 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e157      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011d6:	4b4d      	ldr	r3, [pc, #308]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80011d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0f0      	beq.n	80011c4 <HAL_RCC_OscConfig+0x38c>
 80011e2:	e015      	b.n	8001210 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011e4:	4b4e      	ldr	r3, [pc, #312]	; (8001320 <HAL_RCC_OscConfig+0x4e8>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ea:	f7ff faad 	bl	8000748 <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011f2:	f7ff faa9 	bl	8000748 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e140      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001204:	4b41      	ldr	r3, [pc, #260]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 8001206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1f0      	bne.n	80011f2 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	2b00      	cmp	r3, #0
 800121a:	f000 80b5 	beq.w	8001388 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800121e:	2300      	movs	r3, #0
 8001220:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001222:	4b3a      	ldr	r3, [pc, #232]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 8001224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d10d      	bne.n	800124a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800122e:	4b37      	ldr	r3, [pc, #220]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 8001230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001232:	4a36      	ldr	r2, [pc, #216]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001238:	6253      	str	r3, [r2, #36]	; 0x24
 800123a:	4b34      	ldr	r3, [pc, #208]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 800123c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001246:	2301      	movs	r3, #1
 8001248:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800124a:	4b36      	ldr	r3, [pc, #216]	; (8001324 <HAL_RCC_OscConfig+0x4ec>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001252:	2b00      	cmp	r3, #0
 8001254:	d118      	bne.n	8001288 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001256:	4b33      	ldr	r3, [pc, #204]	; (8001324 <HAL_RCC_OscConfig+0x4ec>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a32      	ldr	r2, [pc, #200]	; (8001324 <HAL_RCC_OscConfig+0x4ec>)
 800125c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001262:	f7ff fa71 	bl	8000748 <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800126a:	f7ff fa6d 	bl	8000748 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b64      	cmp	r3, #100	; 0x64
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e104      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800127c:	4b29      	ldr	r3, [pc, #164]	; (8001324 <HAL_RCC_OscConfig+0x4ec>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0f0      	beq.n	800126a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d106      	bne.n	800129e <HAL_RCC_OscConfig+0x466>
 8001290:	4b1e      	ldr	r3, [pc, #120]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 8001292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001294:	4a1d      	ldr	r2, [pc, #116]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 8001296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129a:	6353      	str	r3, [r2, #52]	; 0x34
 800129c:	e02d      	b.n	80012fa <HAL_RCC_OscConfig+0x4c2>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d10c      	bne.n	80012c0 <HAL_RCC_OscConfig+0x488>
 80012a6:	4b19      	ldr	r3, [pc, #100]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80012a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012aa:	4a18      	ldr	r2, [pc, #96]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80012ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012b0:	6353      	str	r3, [r2, #52]	; 0x34
 80012b2:	4b16      	ldr	r3, [pc, #88]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80012b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012b6:	4a15      	ldr	r2, [pc, #84]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80012b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80012bc:	6353      	str	r3, [r2, #52]	; 0x34
 80012be:	e01c      	b.n	80012fa <HAL_RCC_OscConfig+0x4c2>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	2b05      	cmp	r3, #5
 80012c6:	d10c      	bne.n	80012e2 <HAL_RCC_OscConfig+0x4aa>
 80012c8:	4b10      	ldr	r3, [pc, #64]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80012ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012cc:	4a0f      	ldr	r2, [pc, #60]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80012ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012d2:	6353      	str	r3, [r2, #52]	; 0x34
 80012d4:	4b0d      	ldr	r3, [pc, #52]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80012d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d8:	4a0c      	ldr	r2, [pc, #48]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80012da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012de:	6353      	str	r3, [r2, #52]	; 0x34
 80012e0:	e00b      	b.n	80012fa <HAL_RCC_OscConfig+0x4c2>
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80012e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e6:	4a09      	ldr	r2, [pc, #36]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80012e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012ec:	6353      	str	r3, [r2, #52]	; 0x34
 80012ee:	4b07      	ldr	r3, [pc, #28]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80012f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f2:	4a06      	ldr	r2, [pc, #24]	; (800130c <HAL_RCC_OscConfig+0x4d4>)
 80012f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80012f8:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d024      	beq.n	800134c <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001302:	f7ff fa21 	bl	8000748 <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001308:	e019      	b.n	800133e <HAL_RCC_OscConfig+0x506>
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800
 8001310:	0800613c 	.word	0x0800613c
 8001314:	20000000 	.word	0x20000000
 8001318:	20000004 	.word	0x20000004
 800131c:	42470020 	.word	0x42470020
 8001320:	42470680 	.word	0x42470680
 8001324:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001328:	f7ff fa0e 	bl	8000748 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	f241 3288 	movw	r2, #5000	; 0x1388
 8001336:	4293      	cmp	r3, r2
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e0a3      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800133e:	4b54      	ldr	r3, [pc, #336]	; (8001490 <HAL_RCC_OscConfig+0x658>)
 8001340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001342:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001346:	2b00      	cmp	r3, #0
 8001348:	d0ee      	beq.n	8001328 <HAL_RCC_OscConfig+0x4f0>
 800134a:	e014      	b.n	8001376 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800134c:	f7ff f9fc 	bl	8000748 <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001352:	e00a      	b.n	800136a <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001354:	f7ff f9f8 	bl	8000748 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001362:	4293      	cmp	r3, r2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e08d      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800136a:	4b49      	ldr	r3, [pc, #292]	; (8001490 <HAL_RCC_OscConfig+0x658>)
 800136c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800136e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1ee      	bne.n	8001354 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001376:	7ffb      	ldrb	r3, [r7, #31]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d105      	bne.n	8001388 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800137c:	4b44      	ldr	r3, [pc, #272]	; (8001490 <HAL_RCC_OscConfig+0x658>)
 800137e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001380:	4a43      	ldr	r2, [pc, #268]	; (8001490 <HAL_RCC_OscConfig+0x658>)
 8001382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001386:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138c:	2b00      	cmp	r3, #0
 800138e:	d079      	beq.n	8001484 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	2b0c      	cmp	r3, #12
 8001394:	d056      	beq.n	8001444 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139a:	2b02      	cmp	r3, #2
 800139c:	d13b      	bne.n	8001416 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800139e:	4b3d      	ldr	r3, [pc, #244]	; (8001494 <HAL_RCC_OscConfig+0x65c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff f9d0 	bl	8000748 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ac:	f7ff f9cc 	bl	8000748 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e063      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80013be:	4b34      	ldr	r3, [pc, #208]	; (8001490 <HAL_RCC_OscConfig+0x658>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013ca:	4b31      	ldr	r3, [pc, #196]	; (8001490 <HAL_RCC_OscConfig+0x658>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013da:	4319      	orrs	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e0:	430b      	orrs	r3, r1
 80013e2:	492b      	ldr	r1, [pc, #172]	; (8001490 <HAL_RCC_OscConfig+0x658>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013e8:	4b2a      	ldr	r3, [pc, #168]	; (8001494 <HAL_RCC_OscConfig+0x65c>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ee:	f7ff f9ab 	bl	8000748 <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f6:	f7ff f9a7 	bl	8000748 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e03e      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001408:	4b21      	ldr	r3, [pc, #132]	; (8001490 <HAL_RCC_OscConfig+0x658>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0f0      	beq.n	80013f6 <HAL_RCC_OscConfig+0x5be>
 8001414:	e036      	b.n	8001484 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001416:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <HAL_RCC_OscConfig+0x65c>)
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141c:	f7ff f994 	bl	8000748 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001424:	f7ff f990 	bl	8000748 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e027      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001436:	4b16      	ldr	r3, [pc, #88]	; (8001490 <HAL_RCC_OscConfig+0x658>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f0      	bne.n	8001424 <HAL_RCC_OscConfig+0x5ec>
 8001442:	e01f      	b.n	8001484 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001448:	2b01      	cmp	r3, #1
 800144a:	d101      	bne.n	8001450 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e01a      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001450:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <HAL_RCC_OscConfig+0x658>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001460:	429a      	cmp	r2, r3
 8001462:	d10d      	bne.n	8001480 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800146e:	429a      	cmp	r2, r3
 8001470:	d106      	bne.n	8001480 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800147c:	429a      	cmp	r2, r3
 800147e:	d001      	beq.n	8001484 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e000      	b.n	8001486 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3720      	adds	r7, #32
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	42470060 	.word	0x42470060

08001498 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e11a      	b.n	80016e2 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014ac:	4b8f      	ldr	r3, [pc, #572]	; (80016ec <HAL_RCC_ClockConfig+0x254>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d919      	bls.n	80014ee <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d105      	bne.n	80014cc <HAL_RCC_ClockConfig+0x34>
 80014c0:	4b8a      	ldr	r3, [pc, #552]	; (80016ec <HAL_RCC_ClockConfig+0x254>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a89      	ldr	r2, [pc, #548]	; (80016ec <HAL_RCC_ClockConfig+0x254>)
 80014c6:	f043 0304 	orr.w	r3, r3, #4
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b87      	ldr	r3, [pc, #540]	; (80016ec <HAL_RCC_ClockConfig+0x254>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f023 0201 	bic.w	r2, r3, #1
 80014d4:	4985      	ldr	r1, [pc, #532]	; (80016ec <HAL_RCC_ClockConfig+0x254>)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	4313      	orrs	r3, r2
 80014da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014dc:	4b83      	ldr	r3, [pc, #524]	; (80016ec <HAL_RCC_ClockConfig+0x254>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d001      	beq.n	80014ee <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e0f9      	b.n	80016e2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d008      	beq.n	800150c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014fa:	4b7d      	ldr	r3, [pc, #500]	; (80016f0 <HAL_RCC_ClockConfig+0x258>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	497a      	ldr	r1, [pc, #488]	; (80016f0 <HAL_RCC_ClockConfig+0x258>)
 8001508:	4313      	orrs	r3, r2
 800150a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 808e 	beq.w	8001636 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b02      	cmp	r3, #2
 8001520:	d107      	bne.n	8001532 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001522:	4b73      	ldr	r3, [pc, #460]	; (80016f0 <HAL_RCC_ClockConfig+0x258>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d121      	bne.n	8001572 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e0d7      	b.n	80016e2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b03      	cmp	r3, #3
 8001538:	d107      	bne.n	800154a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800153a:	4b6d      	ldr	r3, [pc, #436]	; (80016f0 <HAL_RCC_ClockConfig+0x258>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d115      	bne.n	8001572 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e0cb      	b.n	80016e2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d107      	bne.n	8001562 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001552:	4b67      	ldr	r3, [pc, #412]	; (80016f0 <HAL_RCC_ClockConfig+0x258>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d109      	bne.n	8001572 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e0bf      	b.n	80016e2 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001562:	4b63      	ldr	r3, [pc, #396]	; (80016f0 <HAL_RCC_ClockConfig+0x258>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e0b7      	b.n	80016e2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001572:	4b5f      	ldr	r3, [pc, #380]	; (80016f0 <HAL_RCC_ClockConfig+0x258>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f023 0203 	bic.w	r2, r3, #3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	495c      	ldr	r1, [pc, #368]	; (80016f0 <HAL_RCC_ClockConfig+0x258>)
 8001580:	4313      	orrs	r3, r2
 8001582:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001584:	f7ff f8e0 	bl	8000748 <HAL_GetTick>
 8001588:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d112      	bne.n	80015b8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001592:	e00a      	b.n	80015aa <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001594:	f7ff f8d8 	bl	8000748 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e09b      	b.n	80016e2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015aa:	4b51      	ldr	r3, [pc, #324]	; (80016f0 <HAL_RCC_ClockConfig+0x258>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 030c 	and.w	r3, r3, #12
 80015b2:	2b08      	cmp	r3, #8
 80015b4:	d1ee      	bne.n	8001594 <HAL_RCC_ClockConfig+0xfc>
 80015b6:	e03e      	b.n	8001636 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b03      	cmp	r3, #3
 80015be:	d112      	bne.n	80015e6 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015c0:	e00a      	b.n	80015d8 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c2:	f7ff f8c1 	bl	8000748 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e084      	b.n	80016e2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015d8:	4b45      	ldr	r3, [pc, #276]	; (80016f0 <HAL_RCC_ClockConfig+0x258>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 030c 	and.w	r3, r3, #12
 80015e0:	2b0c      	cmp	r3, #12
 80015e2:	d1ee      	bne.n	80015c2 <HAL_RCC_ClockConfig+0x12a>
 80015e4:	e027      	b.n	8001636 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d11d      	bne.n	800162a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80015ee:	e00a      	b.n	8001606 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f0:	f7ff f8aa 	bl	8000748 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fe:	4293      	cmp	r3, r2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e06d      	b.n	80016e2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001606:	4b3a      	ldr	r3, [pc, #232]	; (80016f0 <HAL_RCC_ClockConfig+0x258>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 030c 	and.w	r3, r3, #12
 800160e:	2b04      	cmp	r3, #4
 8001610:	d1ee      	bne.n	80015f0 <HAL_RCC_ClockConfig+0x158>
 8001612:	e010      	b.n	8001636 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001614:	f7ff f898 	bl	8000748 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001622:	4293      	cmp	r3, r2
 8001624:	d901      	bls.n	800162a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e05b      	b.n	80016e2 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800162a:	4b31      	ldr	r3, [pc, #196]	; (80016f0 <HAL_RCC_ClockConfig+0x258>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 030c 	and.w	r3, r3, #12
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1ee      	bne.n	8001614 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001636:	4b2d      	ldr	r3, [pc, #180]	; (80016ec <HAL_RCC_ClockConfig+0x254>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	429a      	cmp	r2, r3
 8001642:	d219      	bcs.n	8001678 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d105      	bne.n	8001656 <HAL_RCC_ClockConfig+0x1be>
 800164a:	4b28      	ldr	r3, [pc, #160]	; (80016ec <HAL_RCC_ClockConfig+0x254>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a27      	ldr	r2, [pc, #156]	; (80016ec <HAL_RCC_ClockConfig+0x254>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	4b25      	ldr	r3, [pc, #148]	; (80016ec <HAL_RCC_ClockConfig+0x254>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f023 0201 	bic.w	r2, r3, #1
 800165e:	4923      	ldr	r1, [pc, #140]	; (80016ec <HAL_RCC_ClockConfig+0x254>)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	4313      	orrs	r3, r2
 8001664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001666:	4b21      	ldr	r3, [pc, #132]	; (80016ec <HAL_RCC_ClockConfig+0x254>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	429a      	cmp	r2, r3
 8001672:	d001      	beq.n	8001678 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e034      	b.n	80016e2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	d008      	beq.n	8001696 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001684:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <HAL_RCC_ClockConfig+0x258>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	4917      	ldr	r1, [pc, #92]	; (80016f0 <HAL_RCC_ClockConfig+0x258>)
 8001692:	4313      	orrs	r3, r2
 8001694:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0308 	and.w	r3, r3, #8
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d009      	beq.n	80016b6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <HAL_RCC_ClockConfig+0x258>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	490f      	ldr	r1, [pc, #60]	; (80016f0 <HAL_RCC_ClockConfig+0x258>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016b6:	f000 f823 	bl	8001700 <HAL_RCC_GetSysClockFreq>
 80016ba:	4602      	mov	r2, r0
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <HAL_RCC_ClockConfig+0x258>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	091b      	lsrs	r3, r3, #4
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	490b      	ldr	r1, [pc, #44]	; (80016f4 <HAL_RCC_ClockConfig+0x25c>)
 80016c8:	5ccb      	ldrb	r3, [r1, r3]
 80016ca:	fa22 f303 	lsr.w	r3, r2, r3
 80016ce:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <HAL_RCC_ClockConfig+0x260>)
 80016d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016d2:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <HAL_RCC_ClockConfig+0x264>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe ffea 	bl	80006b0 <HAL_InitTick>
 80016dc:	4603      	mov	r3, r0
 80016de:	72fb      	strb	r3, [r7, #11]

  return status;
 80016e0:	7afb      	ldrb	r3, [r7, #11]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023c00 	.word	0x40023c00
 80016f0:	40023800 	.word	0x40023800
 80016f4:	0800613c 	.word	0x0800613c
 80016f8:	20000000 	.word	0x20000000
 80016fc:	20000004 	.word	0x20000004

08001700 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001704:	b08e      	sub	sp, #56	; 0x38
 8001706:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001708:	4b58      	ldr	r3, [pc, #352]	; (800186c <HAL_RCC_GetSysClockFreq+0x16c>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800170e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	2b0c      	cmp	r3, #12
 8001716:	d00d      	beq.n	8001734 <HAL_RCC_GetSysClockFreq+0x34>
 8001718:	2b0c      	cmp	r3, #12
 800171a:	f200 8092 	bhi.w	8001842 <HAL_RCC_GetSysClockFreq+0x142>
 800171e:	2b04      	cmp	r3, #4
 8001720:	d002      	beq.n	8001728 <HAL_RCC_GetSysClockFreq+0x28>
 8001722:	2b08      	cmp	r3, #8
 8001724:	d003      	beq.n	800172e <HAL_RCC_GetSysClockFreq+0x2e>
 8001726:	e08c      	b.n	8001842 <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001728:	4b51      	ldr	r3, [pc, #324]	; (8001870 <HAL_RCC_GetSysClockFreq+0x170>)
 800172a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800172c:	e097      	b.n	800185e <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800172e:	4b51      	ldr	r3, [pc, #324]	; (8001874 <HAL_RCC_GetSysClockFreq+0x174>)
 8001730:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001732:	e094      	b.n	800185e <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001736:	0c9b      	lsrs	r3, r3, #18
 8001738:	f003 020f 	and.w	r2, r3, #15
 800173c:	4b4e      	ldr	r3, [pc, #312]	; (8001878 <HAL_RCC_GetSysClockFreq+0x178>)
 800173e:	5c9b      	ldrb	r3, [r3, r2]
 8001740:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001744:	0d9b      	lsrs	r3, r3, #22
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	3301      	adds	r3, #1
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800174e:	4b47      	ldr	r3, [pc, #284]	; (800186c <HAL_RCC_GetSysClockFreq+0x16c>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d021      	beq.n	800179e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800175a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800175c:	2200      	movs	r2, #0
 800175e:	61bb      	str	r3, [r7, #24]
 8001760:	61fa      	str	r2, [r7, #28]
 8001762:	4b44      	ldr	r3, [pc, #272]	; (8001874 <HAL_RCC_GetSysClockFreq+0x174>)
 8001764:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001768:	464a      	mov	r2, r9
 800176a:	fb03 f202 	mul.w	r2, r3, r2
 800176e:	2300      	movs	r3, #0
 8001770:	4644      	mov	r4, r8
 8001772:	fb04 f303 	mul.w	r3, r4, r3
 8001776:	4413      	add	r3, r2
 8001778:	4a3e      	ldr	r2, [pc, #248]	; (8001874 <HAL_RCC_GetSysClockFreq+0x174>)
 800177a:	4644      	mov	r4, r8
 800177c:	fba4 0102 	umull	r0, r1, r4, r2
 8001780:	440b      	add	r3, r1
 8001782:	4619      	mov	r1, r3
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	2200      	movs	r2, #0
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	617a      	str	r2, [r7, #20]
 800178c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001790:	f7fe fcf4 	bl	800017c <__aeabi_uldivmod>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4613      	mov	r3, r2
 800179a:	637b      	str	r3, [r7, #52]	; 0x34
 800179c:	e04e      	b.n	800183c <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800179e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a0:	2200      	movs	r2, #0
 80017a2:	469a      	mov	sl, r3
 80017a4:	4693      	mov	fp, r2
 80017a6:	4652      	mov	r2, sl
 80017a8:	465b      	mov	r3, fp
 80017aa:	f04f 0000 	mov.w	r0, #0
 80017ae:	f04f 0100 	mov.w	r1, #0
 80017b2:	0159      	lsls	r1, r3, #5
 80017b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017b8:	0150      	lsls	r0, r2, #5
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	ebb2 080a 	subs.w	r8, r2, sl
 80017c2:	eb63 090b 	sbc.w	r9, r3, fp
 80017c6:	f04f 0200 	mov.w	r2, #0
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80017d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80017d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80017da:	ebb2 0408 	subs.w	r4, r2, r8
 80017de:	eb63 0509 	sbc.w	r5, r3, r9
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	00eb      	lsls	r3, r5, #3
 80017ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017f0:	00e2      	lsls	r2, r4, #3
 80017f2:	4614      	mov	r4, r2
 80017f4:	461d      	mov	r5, r3
 80017f6:	eb14 030a 	adds.w	r3, r4, sl
 80017fa:	603b      	str	r3, [r7, #0]
 80017fc:	eb45 030b 	adc.w	r3, r5, fp
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800180e:	4629      	mov	r1, r5
 8001810:	028b      	lsls	r3, r1, #10
 8001812:	4620      	mov	r0, r4
 8001814:	4629      	mov	r1, r5
 8001816:	4604      	mov	r4, r0
 8001818:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800181c:	4601      	mov	r1, r0
 800181e:	028a      	lsls	r2, r1, #10
 8001820:	4610      	mov	r0, r2
 8001822:	4619      	mov	r1, r3
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	2200      	movs	r2, #0
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	60fa      	str	r2, [r7, #12]
 800182c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001830:	f7fe fca4 	bl	800017c <__aeabi_uldivmod>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4613      	mov	r3, r2
 800183a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 800183c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800183e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001840:	e00d      	b.n	800185e <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_RCC_GetSysClockFreq+0x16c>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	0b5b      	lsrs	r3, r3, #13
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800184e:	6a3b      	ldr	r3, [r7, #32]
 8001850:	3301      	adds	r3, #1
 8001852:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800185c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800185e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001860:	4618      	mov	r0, r3
 8001862:	3738      	adds	r7, #56	; 0x38
 8001864:	46bd      	mov	sp, r7
 8001866:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800
 8001870:	00f42400 	.word	0x00f42400
 8001874:	016e3600 	.word	0x016e3600
 8001878:	08006130 	.word	0x08006130

0800187c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001880:	4b02      	ldr	r3, [pc, #8]	; (800188c <HAL_RCC_GetHCLKFreq+0x10>)
 8001882:	681b      	ldr	r3, [r3, #0]
}
 8001884:	4618      	mov	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr
 800188c:	20000000 	.word	0x20000000

08001890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001894:	f7ff fff2 	bl	800187c <HAL_RCC_GetHCLKFreq>
 8001898:	4602      	mov	r2, r0
 800189a:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	0a1b      	lsrs	r3, r3, #8
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	4903      	ldr	r1, [pc, #12]	; (80018b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018a6:	5ccb      	ldrb	r3, [r1, r3]
 80018a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40023800 	.word	0x40023800
 80018b4:	0800614c 	.word	0x0800614c

080018b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018bc:	f7ff ffde 	bl	800187c <HAL_RCC_GetHCLKFreq>
 80018c0:	4602      	mov	r2, r0
 80018c2:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	0adb      	lsrs	r3, r3, #11
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	4903      	ldr	r1, [pc, #12]	; (80018dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80018ce:	5ccb      	ldrb	r3, [r1, r3]
 80018d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40023800 	.word	0x40023800
 80018dc:	0800614c 	.word	0x0800614c

080018e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80018e8:	2300      	movs	r3, #0
 80018ea:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80018ec:	4b29      	ldr	r3, [pc, #164]	; (8001994 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d12c      	bne.n	8001952 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80018f8:	4b26      	ldr	r3, [pc, #152]	; (8001994 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80018fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d005      	beq.n	8001910 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001904:	4b24      	ldr	r3, [pc, #144]	; (8001998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	e016      	b.n	800193e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001910:	4b20      	ldr	r3, [pc, #128]	; (8001994 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001914:	4a1f      	ldr	r2, [pc, #124]	; (8001994 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800191a:	6253      	str	r3, [r2, #36]	; 0x24
 800191c:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001928:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001930:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001932:	4b18      	ldr	r3, [pc, #96]	; (8001994 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	4a17      	ldr	r2, [pc, #92]	; (8001994 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800193c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001944:	d105      	bne.n	8001952 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800194c:	d101      	bne.n	8001952 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800194e:	2301      	movs	r3, #1
 8001950:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d105      	bne.n	8001964 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001958:	4b10      	ldr	r3, [pc, #64]	; (800199c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0f      	ldr	r2, [pc, #60]	; (800199c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800195e:	f043 0304 	orr.w	r3, r3, #4
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	4b0d      	ldr	r3, [pc, #52]	; (800199c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f023 0201 	bic.w	r2, r3, #1
 800196c:	490b      	ldr	r1, [pc, #44]	; (800199c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	429a      	cmp	r2, r3
 8001980:	d001      	beq.n	8001986 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	371c      	adds	r7, #28
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800
 8001998:	40007000 	.word	0x40007000
 800199c:	40023c00 	.word	0x40023c00

080019a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e042      	b.n	8001a38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d106      	bne.n	80019cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7fe fd86 	bl	80004d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2224      	movs	r2, #36	; 0x24
 80019d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 fdcd 	bl	8002584 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	691a      	ldr	r2, [r3, #16]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	695a      	ldr	r2, [r3, #20]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68da      	ldr	r2, [r3, #12]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2220      	movs	r2, #32
 8001a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08a      	sub	sp, #40	; 0x28
 8001a44:	af02      	add	r7, sp, #8
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b20      	cmp	r3, #32
 8001a5e:	d16d      	bne.n	8001b3c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d002      	beq.n	8001a6c <HAL_UART_Transmit+0x2c>
 8001a66:	88fb      	ldrh	r3, [r7, #6]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e066      	b.n	8001b3e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2221      	movs	r2, #33	; 0x21
 8001a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a7e:	f7fe fe63 	bl	8000748 <HAL_GetTick>
 8001a82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	88fa      	ldrh	r2, [r7, #6]
 8001a88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	88fa      	ldrh	r2, [r7, #6]
 8001a8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a98:	d108      	bne.n	8001aac <HAL_UART_Transmit+0x6c>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d104      	bne.n	8001aac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	61bb      	str	r3, [r7, #24]
 8001aaa:	e003      	b.n	8001ab4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ab4:	e02a      	b.n	8001b0c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	2200      	movs	r2, #0
 8001abe:	2180      	movs	r1, #128	; 0x80
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f000 fb1d 	bl	8002100 <UART_WaitOnFlagUntilTimeout>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e036      	b.n	8001b3e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10b      	bne.n	8001aee <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ae4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	3302      	adds	r3, #2
 8001aea:	61bb      	str	r3, [r7, #24]
 8001aec:	e007      	b.n	8001afe <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	781a      	ldrb	r2, [r3, #0]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	3301      	adds	r3, #1
 8001afc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	3b01      	subs	r3, #1
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1cf      	bne.n	8001ab6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2140      	movs	r1, #64	; 0x40
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f000 faed 	bl	8002100 <UART_WaitOnFlagUntilTimeout>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e006      	b.n	8001b3e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2220      	movs	r2, #32
 8001b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	e000      	b.n	8001b3e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001b3c:	2302      	movs	r3, #2
  }
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3720      	adds	r7, #32
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b084      	sub	sp, #16
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	60f8      	str	r0, [r7, #12]
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	4613      	mov	r3, r2
 8001b52:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b20      	cmp	r3, #32
 8001b5e:	d112      	bne.n	8001b86 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d002      	beq.n	8001b6c <HAL_UART_Receive_IT+0x26>
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e00b      	b.n	8001b88 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	68b9      	ldr	r1, [r7, #8]
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f000 fb2d 	bl	80021dc <UART_Start_Receive_IT>
 8001b82:	4603      	mov	r3, r0
 8001b84:	e000      	b.n	8001b88 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001b86:	2302      	movs	r3, #2
  }
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b0ba      	sub	sp, #232	; 0xe8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001bce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10f      	bne.n	8001bf6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bda:	f003 0320 	and.w	r3, r3, #32
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d009      	beq.n	8001bf6 <HAL_UART_IRQHandler+0x66>
 8001be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001be6:	f003 0320 	and.w	r3, r3, #32
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 fc0a 	bl	8002408 <UART_Receive_IT>
      return;
 8001bf4:	e25b      	b.n	80020ae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001bf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 80de 	beq.w	8001dbc <HAL_UART_IRQHandler+0x22c>
 8001c00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d106      	bne.n	8001c1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c10:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 80d1 	beq.w	8001dbc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00b      	beq.n	8001c3e <HAL_UART_IRQHandler+0xae>
 8001c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d005      	beq.n	8001c3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	f043 0201 	orr.w	r2, r3, #1
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00b      	beq.n	8001c62 <HAL_UART_IRQHandler+0xd2>
 8001c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d005      	beq.n	8001c62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	f043 0202 	orr.w	r2, r3, #2
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00b      	beq.n	8001c86 <HAL_UART_IRQHandler+0xf6>
 8001c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d005      	beq.n	8001c86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	f043 0204 	orr.w	r2, r3, #4
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d011      	beq.n	8001cb6 <HAL_UART_IRQHandler+0x126>
 8001c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c96:	f003 0320 	and.w	r3, r3, #32
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d105      	bne.n	8001caa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d005      	beq.n	8001cb6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	f043 0208 	orr.w	r2, r3, #8
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 81f2 	beq.w	80020a4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001cc4:	f003 0320 	and.w	r3, r3, #32
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d008      	beq.n	8001cde <HAL_UART_IRQHandler+0x14e>
 8001ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001cd0:	f003 0320 	and.w	r3, r3, #32
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d002      	beq.n	8001cde <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 fb95 	bl	8002408 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce8:	2b40      	cmp	r3, #64	; 0x40
 8001cea:	bf0c      	ite	eq
 8001cec:	2301      	moveq	r3, #1
 8001cee:	2300      	movne	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d103      	bne.n	8001d0a <HAL_UART_IRQHandler+0x17a>
 8001d02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d04f      	beq.n	8001daa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 fa9f 	bl	800224e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d1a:	2b40      	cmp	r3, #64	; 0x40
 8001d1c:	d141      	bne.n	8001da2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	3314      	adds	r3, #20
 8001d24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d2c:	e853 3f00 	ldrex	r3, [r3]
 8001d30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001d34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	3314      	adds	r3, #20
 8001d46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001d4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001d4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001d56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001d5a:	e841 2300 	strex	r3, r2, [r1]
 8001d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001d62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1d9      	bne.n	8001d1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d013      	beq.n	8001d9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d76:	4a7e      	ldr	r2, [pc, #504]	; (8001f70 <HAL_UART_IRQHandler+0x3e0>)
 8001d78:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe fe58 	bl	8000a34 <HAL_DMA_Abort_IT>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d016      	beq.n	8001db8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d94:	4610      	mov	r0, r2
 8001d96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d98:	e00e      	b.n	8001db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f99c 	bl	80020d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001da0:	e00a      	b.n	8001db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f998 	bl	80020d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001da8:	e006      	b.n	8001db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f994 	bl	80020d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8001db6:	e175      	b.n	80020a4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001db8:	bf00      	nop
    return;
 8001dba:	e173      	b.n	80020a4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	f040 814f 	bne.w	8002064 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dca:	f003 0310 	and.w	r3, r3, #16
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 8148 	beq.w	8002064 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001dd8:	f003 0310 	and.w	r3, r3, #16
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 8141 	beq.w	8002064 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001de2:	2300      	movs	r3, #0
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e02:	2b40      	cmp	r3, #64	; 0x40
 8001e04:	f040 80b6 	bne.w	8001f74 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001e14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 8145 	beq.w	80020a8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001e22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001e26:	429a      	cmp	r2, r3
 8001e28:	f080 813e 	bcs.w	80020a8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001e32:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	2b20      	cmp	r3, #32
 8001e3c:	f000 8088 	beq.w	8001f50 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	330c      	adds	r3, #12
 8001e46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e4e:	e853 3f00 	ldrex	r3, [r3]
 8001e52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001e56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	330c      	adds	r3, #12
 8001e68:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001e6c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001e70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e74:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001e78:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001e7c:	e841 2300 	strex	r3, r2, [r1]
 8001e80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001e84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1d9      	bne.n	8001e40 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	3314      	adds	r3, #20
 8001e92:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e96:	e853 3f00 	ldrex	r3, [r3]
 8001e9a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001e9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e9e:	f023 0301 	bic.w	r3, r3, #1
 8001ea2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	3314      	adds	r3, #20
 8001eac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001eb0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001eb4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eb6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001eb8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001ebc:	e841 2300 	strex	r3, r2, [r1]
 8001ec0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001ec2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1e1      	bne.n	8001e8c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	3314      	adds	r3, #20
 8001ece:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ed0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ed2:	e853 3f00 	ldrex	r3, [r3]
 8001ed6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001ed8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ede:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	3314      	adds	r3, #20
 8001ee8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001eec:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001eee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ef0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001ef2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001ef4:	e841 2300 	strex	r3, r2, [r1]
 8001ef8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001efa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1e3      	bne.n	8001ec8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2220      	movs	r2, #32
 8001f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	330c      	adds	r3, #12
 8001f14:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f18:	e853 3f00 	ldrex	r3, [r3]
 8001f1c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f20:	f023 0310 	bic.w	r3, r3, #16
 8001f24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	330c      	adds	r3, #12
 8001f2e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001f32:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f34:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f3a:	e841 2300 	strex	r3, r2, [r1]
 8001f3e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001f40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1e3      	bne.n	8001f0e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe fd35 	bl	80009ba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2202      	movs	r2, #2
 8001f54:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	4619      	mov	r1, r3
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f8bf 	bl	80020ea <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001f6c:	e09c      	b.n	80020a8 <HAL_UART_IRQHandler+0x518>
 8001f6e:	bf00      	nop
 8001f70:	08002313 	.word	0x08002313
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 808e 	beq.w	80020ac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001f90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 8089 	beq.w	80020ac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	330c      	adds	r3, #12
 8001fa0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa4:	e853 3f00 	ldrex	r3, [r3]
 8001fa8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001fb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	330c      	adds	r3, #12
 8001fba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001fbe:	647a      	str	r2, [r7, #68]	; 0x44
 8001fc0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fc2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001fc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001fc6:	e841 2300 	strex	r3, r2, [r1]
 8001fca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1e3      	bne.n	8001f9a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	3314      	adds	r3, #20
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	e853 3f00 	ldrex	r3, [r3]
 8001fe0:	623b      	str	r3, [r7, #32]
   return(result);
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	f023 0301 	bic.w	r3, r3, #1
 8001fe8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	3314      	adds	r3, #20
 8001ff2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001ff6:	633a      	str	r2, [r7, #48]	; 0x30
 8001ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ffa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ffe:	e841 2300 	strex	r3, r2, [r1]
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1e3      	bne.n	8001fd2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2220      	movs	r2, #32
 800200e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	330c      	adds	r3, #12
 800201e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	e853 3f00 	ldrex	r3, [r3]
 8002026:	60fb      	str	r3, [r7, #12]
   return(result);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f023 0310 	bic.w	r3, r3, #16
 800202e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	330c      	adds	r3, #12
 8002038:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800203c:	61fa      	str	r2, [r7, #28]
 800203e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002040:	69b9      	ldr	r1, [r7, #24]
 8002042:	69fa      	ldr	r2, [r7, #28]
 8002044:	e841 2300 	strex	r3, r2, [r1]
 8002048:	617b      	str	r3, [r7, #20]
   return(result);
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1e3      	bne.n	8002018 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2202      	movs	r2, #2
 8002054:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002056:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800205a:	4619      	mov	r1, r3
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f844 	bl	80020ea <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002062:	e023      	b.n	80020ac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206c:	2b00      	cmp	r3, #0
 800206e:	d009      	beq.n	8002084 <HAL_UART_IRQHandler+0x4f4>
 8002070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f95c 	bl	800233a <UART_Transmit_IT>
    return;
 8002082:	e014      	b.n	80020ae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00e      	beq.n	80020ae <HAL_UART_IRQHandler+0x51e>
 8002090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002098:	2b00      	cmp	r3, #0
 800209a:	d008      	beq.n	80020ae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f99b 	bl	80023d8 <UART_EndTransmit_IT>
    return;
 80020a2:	e004      	b.n	80020ae <HAL_UART_IRQHandler+0x51e>
    return;
 80020a4:	bf00      	nop
 80020a6:	e002      	b.n	80020ae <HAL_UART_IRQHandler+0x51e>
      return;
 80020a8:	bf00      	nop
 80020aa:	e000      	b.n	80020ae <HAL_UART_IRQHandler+0x51e>
      return;
 80020ac:	bf00      	nop
  }
}
 80020ae:	37e8      	adds	r7, #232	; 0xe8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr

080020c6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr

080020d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr

080020ea <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	460b      	mov	r3, r1
 80020f4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr

08002100 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b090      	sub	sp, #64	; 0x40
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	603b      	str	r3, [r7, #0]
 800210c:	4613      	mov	r3, r2
 800210e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002110:	e050      	b.n	80021b4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002114:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002118:	d04c      	beq.n	80021b4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800211a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800211c:	2b00      	cmp	r3, #0
 800211e:	d007      	beq.n	8002130 <UART_WaitOnFlagUntilTimeout+0x30>
 8002120:	f7fe fb12 	bl	8000748 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800212c:	429a      	cmp	r2, r3
 800212e:	d241      	bcs.n	80021b4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	330c      	adds	r3, #12
 8002136:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800213a:	e853 3f00 	ldrex	r3, [r3]
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002146:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	330c      	adds	r3, #12
 800214e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002150:	637a      	str	r2, [r7, #52]	; 0x34
 8002152:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002154:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002158:	e841 2300 	strex	r3, r2, [r1]
 800215c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800215e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1e5      	bne.n	8002130 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	3314      	adds	r3, #20
 800216a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	e853 3f00 	ldrex	r3, [r3]
 8002172:	613b      	str	r3, [r7, #16]
   return(result);
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	f023 0301 	bic.w	r3, r3, #1
 800217a:	63bb      	str	r3, [r7, #56]	; 0x38
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	3314      	adds	r3, #20
 8002182:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002184:	623a      	str	r2, [r7, #32]
 8002186:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002188:	69f9      	ldr	r1, [r7, #28]
 800218a:	6a3a      	ldr	r2, [r7, #32]
 800218c:	e841 2300 	strex	r3, r2, [r1]
 8002190:	61bb      	str	r3, [r7, #24]
   return(result);
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1e5      	bne.n	8002164 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2220      	movs	r2, #32
 800219c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2220      	movs	r2, #32
 80021a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e00f      	b.n	80021d4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	4013      	ands	r3, r2
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	bf0c      	ite	eq
 80021c4:	2301      	moveq	r3, #1
 80021c6:	2300      	movne	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	461a      	mov	r2, r3
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d09f      	beq.n	8002112 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3740      	adds	r7, #64	; 0x40
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	4613      	mov	r3, r2
 80021e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	88fa      	ldrh	r2, [r7, #6]
 80021f4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	88fa      	ldrh	r2, [r7, #6]
 80021fa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2222      	movs	r2, #34	; 0x22
 8002206:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d007      	beq.n	8002222 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002220:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	695a      	ldr	r2, [r3, #20]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f042 0201 	orr.w	r2, r2, #1
 8002230:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68da      	ldr	r2, [r3, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f042 0220 	orr.w	r2, r2, #32
 8002240:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr

0800224e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800224e:	b480      	push	{r7}
 8002250:	b095      	sub	sp, #84	; 0x54
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	330c      	adds	r3, #12
 800225c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800225e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002260:	e853 3f00 	ldrex	r3, [r3]
 8002264:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002268:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800226c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	330c      	adds	r3, #12
 8002274:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002276:	643a      	str	r2, [r7, #64]	; 0x40
 8002278:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800227a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800227c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800227e:	e841 2300 	strex	r3, r2, [r1]
 8002282:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1e5      	bne.n	8002256 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	3314      	adds	r3, #20
 8002290:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002292:	6a3b      	ldr	r3, [r7, #32]
 8002294:	e853 3f00 	ldrex	r3, [r3]
 8002298:	61fb      	str	r3, [r7, #28]
   return(result);
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	f023 0301 	bic.w	r3, r3, #1
 80022a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	3314      	adds	r3, #20
 80022a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022b2:	e841 2300 	strex	r3, r2, [r1]
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1e5      	bne.n	800228a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d119      	bne.n	80022fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	330c      	adds	r3, #12
 80022cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	e853 3f00 	ldrex	r3, [r3]
 80022d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	f023 0310 	bic.w	r3, r3, #16
 80022dc:	647b      	str	r3, [r7, #68]	; 0x44
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	330c      	adds	r3, #12
 80022e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022e6:	61ba      	str	r2, [r7, #24]
 80022e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ea:	6979      	ldr	r1, [r7, #20]
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	e841 2300 	strex	r3, r2, [r1]
 80022f2:	613b      	str	r3, [r7, #16]
   return(result);
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1e5      	bne.n	80022c6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2220      	movs	r2, #32
 80022fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002308:	bf00      	nop
 800230a:	3754      	adds	r7, #84	; 0x54
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr

08002312 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b084      	sub	sp, #16
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f7ff fed3 	bl	80020d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002332:	bf00      	nop
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800233a:	b480      	push	{r7}
 800233c:	b085      	sub	sp, #20
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b21      	cmp	r3, #33	; 0x21
 800234c:	d13e      	bne.n	80023cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002356:	d114      	bne.n	8002382 <UART_Transmit_IT+0x48>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d110      	bne.n	8002382 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	881b      	ldrh	r3, [r3, #0]
 800236a:	461a      	mov	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002374:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	1c9a      	adds	r2, r3, #2
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	621a      	str	r2, [r3, #32]
 8002380:	e008      	b.n	8002394 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	1c59      	adds	r1, r3, #1
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6211      	str	r1, [r2, #32]
 800238c:	781a      	ldrb	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002398:	b29b      	uxth	r3, r3
 800239a:	3b01      	subs	r3, #1
 800239c:	b29b      	uxth	r3, r3
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	4619      	mov	r1, r3
 80023a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10f      	bne.n	80023c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80023c8:	2300      	movs	r3, #0
 80023ca:	e000      	b.n	80023ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80023cc:	2302      	movs	r3, #2
  }
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr

080023d8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023ee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f7ff fe5b 	bl	80020b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08c      	sub	sp, #48	; 0x30
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b22      	cmp	r3, #34	; 0x22
 800241a:	f040 80ae 	bne.w	800257a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002426:	d117      	bne.n	8002458 <UART_Receive_IT+0x50>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d113      	bne.n	8002458 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002430:	2300      	movs	r3, #0
 8002432:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002438:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	b29b      	uxth	r3, r3
 8002442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002446:	b29a      	uxth	r2, r3
 8002448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002450:	1c9a      	adds	r2, r3, #2
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	629a      	str	r2, [r3, #40]	; 0x28
 8002456:	e026      	b.n	80024a6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800245e:	2300      	movs	r3, #0
 8002460:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800246a:	d007      	beq.n	800247c <UART_Receive_IT+0x74>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10a      	bne.n	800248a <UART_Receive_IT+0x82>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d106      	bne.n	800248a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	b2da      	uxtb	r2, r3
 8002484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002486:	701a      	strb	r2, [r3, #0]
 8002488:	e008      	b.n	800249c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	b2db      	uxtb	r3, r3
 8002492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002496:	b2da      	uxtb	r2, r3
 8002498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a0:	1c5a      	adds	r2, r3, #1
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	3b01      	subs	r3, #1
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	4619      	mov	r1, r3
 80024b4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d15d      	bne.n	8002576 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68da      	ldr	r2, [r3, #12]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0220 	bic.w	r2, r2, #32
 80024c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	695a      	ldr	r2, [r3, #20]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0201 	bic.w	r2, r2, #1
 80024e8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2220      	movs	r2, #32
 80024ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d135      	bne.n	800256c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	330c      	adds	r3, #12
 800250c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	e853 3f00 	ldrex	r3, [r3]
 8002514:	613b      	str	r3, [r7, #16]
   return(result);
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	f023 0310 	bic.w	r3, r3, #16
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	330c      	adds	r3, #12
 8002524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002526:	623a      	str	r2, [r7, #32]
 8002528:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800252a:	69f9      	ldr	r1, [r7, #28]
 800252c:	6a3a      	ldr	r2, [r7, #32]
 800252e:	e841 2300 	strex	r3, r2, [r1]
 8002532:	61bb      	str	r3, [r7, #24]
   return(result);
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1e5      	bne.n	8002506 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0310 	and.w	r3, r3, #16
 8002544:	2b10      	cmp	r3, #16
 8002546:	d10a      	bne.n	800255e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002548:	2300      	movs	r3, #0
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002562:	4619      	mov	r1, r3
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff fdc0 	bl	80020ea <HAL_UARTEx_RxEventCallback>
 800256a:	e002      	b.n	8002572 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff fdaa 	bl	80020c6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	e002      	b.n	800257c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	e000      	b.n	800257c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800257a:	2302      	movs	r3, #2
  }
}
 800257c:	4618      	mov	r0, r3
 800257e:	3730      	adds	r7, #48	; 0x30
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68da      	ldr	r2, [r3, #12]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	431a      	orrs	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80025c4:	f023 030c 	bic.w	r3, r3, #12
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	430b      	orrs	r3, r1
 80025d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	699a      	ldr	r2, [r3, #24]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a55      	ldr	r2, [pc, #340]	; (8002744 <UART_SetConfig+0x1c0>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d103      	bne.n	80025fa <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025f2:	f7ff f961 	bl	80018b8 <HAL_RCC_GetPCLK2Freq>
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	e002      	b.n	8002600 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80025fa:	f7ff f949 	bl	8001890 <HAL_RCC_GetPCLK1Freq>
 80025fe:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002608:	d14c      	bne.n	80026a4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	4613      	mov	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	009a      	lsls	r2, r3, #2
 8002614:	441a      	add	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002620:	4a49      	ldr	r2, [pc, #292]	; (8002748 <UART_SetConfig+0x1c4>)
 8002622:	fba2 2303 	umull	r2, r3, r2, r3
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	0119      	lsls	r1, r3, #4
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	009a      	lsls	r2, r3, #2
 8002634:	441a      	add	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002640:	4b41      	ldr	r3, [pc, #260]	; (8002748 <UART_SetConfig+0x1c4>)
 8002642:	fba3 0302 	umull	r0, r3, r3, r2
 8002646:	095b      	lsrs	r3, r3, #5
 8002648:	2064      	movs	r0, #100	; 0x64
 800264a:	fb00 f303 	mul.w	r3, r0, r3
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	3332      	adds	r3, #50	; 0x32
 8002654:	4a3c      	ldr	r2, [pc, #240]	; (8002748 <UART_SetConfig+0x1c4>)
 8002656:	fba2 2303 	umull	r2, r3, r2, r3
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002662:	4419      	add	r1, r3
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	4613      	mov	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	009a      	lsls	r2, r3, #2
 800266e:	441a      	add	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	fbb2 f2f3 	udiv	r2, r2, r3
 800267a:	4b33      	ldr	r3, [pc, #204]	; (8002748 <UART_SetConfig+0x1c4>)
 800267c:	fba3 0302 	umull	r0, r3, r3, r2
 8002680:	095b      	lsrs	r3, r3, #5
 8002682:	2064      	movs	r0, #100	; 0x64
 8002684:	fb00 f303 	mul.w	r3, r0, r3
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	3332      	adds	r3, #50	; 0x32
 800268e:	4a2e      	ldr	r2, [pc, #184]	; (8002748 <UART_SetConfig+0x1c4>)
 8002690:	fba2 2303 	umull	r2, r3, r2, r3
 8002694:	095b      	lsrs	r3, r3, #5
 8002696:	f003 0207 	and.w	r2, r3, #7
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	440a      	add	r2, r1
 80026a0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80026a2:	e04a      	b.n	800273a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	009a      	lsls	r2, r3, #2
 80026ae:	441a      	add	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ba:	4a23      	ldr	r2, [pc, #140]	; (8002748 <UART_SetConfig+0x1c4>)
 80026bc:	fba2 2303 	umull	r2, r3, r2, r3
 80026c0:	095b      	lsrs	r3, r3, #5
 80026c2:	0119      	lsls	r1, r3, #4
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	4613      	mov	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	009a      	lsls	r2, r3, #2
 80026ce:	441a      	add	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80026da:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <UART_SetConfig+0x1c4>)
 80026dc:	fba3 0302 	umull	r0, r3, r3, r2
 80026e0:	095b      	lsrs	r3, r3, #5
 80026e2:	2064      	movs	r0, #100	; 0x64
 80026e4:	fb00 f303 	mul.w	r3, r0, r3
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	3332      	adds	r3, #50	; 0x32
 80026ee:	4a16      	ldr	r2, [pc, #88]	; (8002748 <UART_SetConfig+0x1c4>)
 80026f0:	fba2 2303 	umull	r2, r3, r2, r3
 80026f4:	095b      	lsrs	r3, r3, #5
 80026f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026fa:	4419      	add	r1, r3
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	009a      	lsls	r2, r3, #2
 8002706:	441a      	add	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002712:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <UART_SetConfig+0x1c4>)
 8002714:	fba3 0302 	umull	r0, r3, r3, r2
 8002718:	095b      	lsrs	r3, r3, #5
 800271a:	2064      	movs	r0, #100	; 0x64
 800271c:	fb00 f303 	mul.w	r3, r0, r3
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	011b      	lsls	r3, r3, #4
 8002724:	3332      	adds	r3, #50	; 0x32
 8002726:	4a08      	ldr	r2, [pc, #32]	; (8002748 <UART_SetConfig+0x1c4>)
 8002728:	fba2 2303 	umull	r2, r3, r2, r3
 800272c:	095b      	lsrs	r3, r3, #5
 800272e:	f003 020f 	and.w	r2, r3, #15
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	440a      	add	r2, r1
 8002738:	609a      	str	r2, [r3, #8]
}
 800273a:	bf00      	nop
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40013800 	.word	0x40013800
 8002748:	51eb851f 	.word	0x51eb851f

0800274c <GPIO_sensor_init>:
static void MX_USART2_UART_Init(void);
void Error_Handler(void);



void GPIO_sensor_init(void){
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0

	 __HAL_RCC_GPIOC_CLK_ENABLE();
 8002752:	4b33      	ldr	r3, [pc, #204]	; (8002820 <GPIO_sensor_init+0xd4>)
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	4a32      	ldr	r2, [pc, #200]	; (8002820 <GPIO_sensor_init+0xd4>)
 8002758:	f043 0304 	orr.w	r3, r3, #4
 800275c:	61d3      	str	r3, [r2, #28]
 800275e:	4b30      	ldr	r3, [pc, #192]	; (8002820 <GPIO_sensor_init+0xd4>)
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f003 0304 	and.w	r3, r3, #4
 8002766:	60bb      	str	r3, [r7, #8]
 8002768:	68bb      	ldr	r3, [r7, #8]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 800276a:	4b2d      	ldr	r3, [pc, #180]	; (8002820 <GPIO_sensor_init+0xd4>)
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	4a2c      	ldr	r2, [pc, #176]	; (8002820 <GPIO_sensor_init+0xd4>)
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	61d3      	str	r3, [r2, #28]
 8002776:	4b2a      	ldr	r3, [pc, #168]	; (8002820 <GPIO_sensor_init+0xd4>)
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	607b      	str	r3, [r7, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 8002782:	4b27      	ldr	r3, [pc, #156]	; (8002820 <GPIO_sensor_init+0xd4>)
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	4a26      	ldr	r2, [pc, #152]	; (8002820 <GPIO_sensor_init+0xd4>)
 8002788:	f043 0302 	orr.w	r3, r3, #2
 800278c:	61d3      	str	r3, [r2, #28]
 800278e:	4b24      	ldr	r3, [pc, #144]	; (8002820 <GPIO_sensor_init+0xd4>)
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	603b      	str	r3, [r7, #0]
 8002798:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279a:	f107 030c 	add.w	r3, r7, #12
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	605a      	str	r2, [r3, #4]
 80027a4:	609a      	str	r2, [r3, #8]
 80027a6:	60da      	str	r2, [r3, #12]
 80027a8:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027aa:	2300      	movs	r3, #0
 80027ac:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027b2:	2302      	movs	r3, #2
 80027b4:	61bb      	str	r3, [r7, #24]

	  GPIO_InitStruct.Pin = SENSOR_1_PIN;
 80027b6:	2301      	movs	r3, #1
 80027b8:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(SENSOR_1_PORT, &GPIO_InitStruct);
 80027ba:	f107 030c 	add.w	r3, r7, #12
 80027be:	4619      	mov	r1, r3
 80027c0:	4818      	ldr	r0, [pc, #96]	; (8002824 <GPIO_sensor_init+0xd8>)
 80027c2:	f7fe f979 	bl	8000ab8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = SENSOR_2_PIN;
 80027c6:	2302      	movs	r3, #2
 80027c8:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(SENSOR_2_PORT, &GPIO_InitStruct);
 80027ca:	f107 030c 	add.w	r3, r7, #12
 80027ce:	4619      	mov	r1, r3
 80027d0:	4814      	ldr	r0, [pc, #80]	; (8002824 <GPIO_sensor_init+0xd8>)
 80027d2:	f7fe f971 	bl	8000ab8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = SENSOR_3_PIN;
 80027d6:	2301      	movs	r3, #1
 80027d8:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(SENSOR_3_PORT, &GPIO_InitStruct);
 80027da:	f107 030c 	add.w	r3, r7, #12
 80027de:	4619      	mov	r1, r3
 80027e0:	4811      	ldr	r0, [pc, #68]	; (8002828 <GPIO_sensor_init+0xdc>)
 80027e2:	f7fe f969 	bl	8000ab8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = SENSOR_4_PIN;
 80027e6:	2310      	movs	r3, #16
 80027e8:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(SENSOR_4_PORT, &GPIO_InitStruct);
 80027ea:	f107 030c 	add.w	r3, r7, #12
 80027ee:	4619      	mov	r1, r3
 80027f0:	480e      	ldr	r0, [pc, #56]	; (800282c <GPIO_sensor_init+0xe0>)
 80027f2:	f7fe f961 	bl	8000ab8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = SENSOR_5_PIN;
 80027f6:	2302      	movs	r3, #2
 80027f8:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(SENSOR_5_PORT, &GPIO_InitStruct);
 80027fa:	f107 030c 	add.w	r3, r7, #12
 80027fe:	4619      	mov	r1, r3
 8002800:	480a      	ldr	r0, [pc, #40]	; (800282c <GPIO_sensor_init+0xe0>)
 8002802:	f7fe f959 	bl	8000ab8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = SENSOR_6_PIN;
 8002806:	2301      	movs	r3, #1
 8002808:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(SENSOR_6_PORT, &GPIO_InitStruct);
 800280a:	f107 030c 	add.w	r3, r7, #12
 800280e:	4619      	mov	r1, r3
 8002810:	4806      	ldr	r0, [pc, #24]	; (800282c <GPIO_sensor_init+0xe0>)
 8002812:	f7fe f951 	bl	8000ab8 <HAL_GPIO_Init>

}
 8002816:	bf00      	nop
 8002818:	3720      	adds	r7, #32
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40023800 	.word	0x40023800
 8002824:	40020800 	.word	0x40020800
 8002828:	40020400 	.word	0x40020400
 800282c:	40020000 	.word	0x40020000

08002830 <get_current_level>:


LEVEL_T get_current_level(void){
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0

	ss_arr[0] = SS0;
 8002834:	2101      	movs	r1, #1
 8002836:	4855      	ldr	r0, [pc, #340]	; (800298c <get_current_level+0x15c>)
 8002838:	f7fe face 	bl	8000dd8 <HAL_GPIO_ReadPin>
 800283c:	4603      	mov	r3, r0
 800283e:	461a      	mov	r2, r3
 8002840:	4b53      	ldr	r3, [pc, #332]	; (8002990 <get_current_level+0x160>)
 8002842:	701a      	strb	r2, [r3, #0]
	ss_arr[1] = SS1_2;
 8002844:	2102      	movs	r1, #2
 8002846:	4851      	ldr	r0, [pc, #324]	; (800298c <get_current_level+0x15c>)
 8002848:	f7fe fac6 	bl	8000dd8 <HAL_GPIO_ReadPin>
 800284c:	4603      	mov	r3, r0
 800284e:	461a      	mov	r2, r3
 8002850:	4b4f      	ldr	r3, [pc, #316]	; (8002990 <get_current_level+0x160>)
 8002852:	705a      	strb	r2, [r3, #1]
	ss_arr[2] = SS2_3;
 8002854:	2101      	movs	r1, #1
 8002856:	484f      	ldr	r0, [pc, #316]	; (8002994 <get_current_level+0x164>)
 8002858:	f7fe fabe 	bl	8000dd8 <HAL_GPIO_ReadPin>
 800285c:	4603      	mov	r3, r0
 800285e:	461a      	mov	r2, r3
 8002860:	4b4b      	ldr	r3, [pc, #300]	; (8002990 <get_current_level+0x160>)
 8002862:	709a      	strb	r2, [r3, #2]
	ss_arr[3] = SS3_4;
 8002864:	2110      	movs	r1, #16
 8002866:	484c      	ldr	r0, [pc, #304]	; (8002998 <get_current_level+0x168>)
 8002868:	f7fe fab6 	bl	8000dd8 <HAL_GPIO_ReadPin>
 800286c:	4603      	mov	r3, r0
 800286e:	461a      	mov	r2, r3
 8002870:	4b47      	ldr	r3, [pc, #284]	; (8002990 <get_current_level+0x160>)
 8002872:	70da      	strb	r2, [r3, #3]
	ss_arr[4] = SS4_A;
 8002874:	2102      	movs	r1, #2
 8002876:	4848      	ldr	r0, [pc, #288]	; (8002998 <get_current_level+0x168>)
 8002878:	f7fe faae 	bl	8000dd8 <HAL_GPIO_ReadPin>
 800287c:	4603      	mov	r3, r0
 800287e:	461a      	mov	r2, r3
 8002880:	4b43      	ldr	r3, [pc, #268]	; (8002990 <get_current_level+0x160>)
 8002882:	711a      	strb	r2, [r3, #4]
	ss_arr[5] = SS4_B;
 8002884:	2101      	movs	r1, #1
 8002886:	4844      	ldr	r0, [pc, #272]	; (8002998 <get_current_level+0x168>)
 8002888:	f7fe faa6 	bl	8000dd8 <HAL_GPIO_ReadPin>
 800288c:	4603      	mov	r3, r0
 800288e:	461a      	mov	r2, r3
 8002890:	4b3f      	ldr	r3, [pc, #252]	; (8002990 <get_current_level+0x160>)
 8002892:	715a      	strb	r2, [r3, #5]


	if((SS4_B == ON) || (SS4_A == ON)){
 8002894:	2101      	movs	r1, #1
 8002896:	4840      	ldr	r0, [pc, #256]	; (8002998 <get_current_level+0x168>)
 8002898:	f7fe fa9e 	bl	8000dd8 <HAL_GPIO_ReadPin>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d006      	beq.n	80028b0 <get_current_level+0x80>
 80028a2:	2102      	movs	r1, #2
 80028a4:	483c      	ldr	r0, [pc, #240]	; (8002998 <get_current_level+0x168>)
 80028a6:	f7fe fa97 	bl	8000dd8 <HAL_GPIO_ReadPin>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <get_current_level+0x84>
		return LEVEL_4;
 80028b0:	2328      	movs	r3, #40	; 0x28
 80028b2:	e069      	b.n	8002988 <get_current_level+0x158>
	}

	if(SS0 == ON){
 80028b4:	2101      	movs	r1, #1
 80028b6:	4835      	ldr	r0, [pc, #212]	; (800298c <get_current_level+0x15c>)
 80028b8:	f7fe fa8e 	bl	8000dd8 <HAL_GPIO_ReadPin>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <get_current_level+0x96>
		return LEVEL_1;
 80028c2:	230a      	movs	r3, #10
 80028c4:	e060      	b.n	8002988 <get_current_level+0x158>
	}

	if((SS1_2 == ON) && (SS2_3 == OFF) ){
 80028c6:	2102      	movs	r1, #2
 80028c8:	4830      	ldr	r0, [pc, #192]	; (800298c <get_current_level+0x15c>)
 80028ca:	f7fe fa85 	bl	8000dd8 <HAL_GPIO_ReadPin>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d108      	bne.n	80028e6 <get_current_level+0xb6>
 80028d4:	2101      	movs	r1, #1
 80028d6:	482f      	ldr	r0, [pc, #188]	; (8002994 <get_current_level+0x164>)
 80028d8:	f7fe fa7e 	bl	8000dd8 <HAL_GPIO_ReadPin>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d101      	bne.n	80028e6 <get_current_level+0xb6>
		return LEVEL_1_2;
 80028e2:	230f      	movs	r3, #15
 80028e4:	e050      	b.n	8002988 <get_current_level+0x158>
	}

	if((SS1_2 == ON) && (SS2_3 == ON) ){
 80028e6:	2102      	movs	r1, #2
 80028e8:	4828      	ldr	r0, [pc, #160]	; (800298c <get_current_level+0x15c>)
 80028ea:	f7fe fa75 	bl	8000dd8 <HAL_GPIO_ReadPin>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d108      	bne.n	8002906 <get_current_level+0xd6>
 80028f4:	2101      	movs	r1, #1
 80028f6:	4827      	ldr	r0, [pc, #156]	; (8002994 <get_current_level+0x164>)
 80028f8:	f7fe fa6e 	bl	8000dd8 <HAL_GPIO_ReadPin>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <get_current_level+0xd6>
		return LEVEL_2;
 8002902:	2314      	movs	r3, #20
 8002904:	e040      	b.n	8002988 <get_current_level+0x158>
	}

	if((SS2_3 == ON) && (SS3_4 == OFF) ){
 8002906:	2101      	movs	r1, #1
 8002908:	4822      	ldr	r0, [pc, #136]	; (8002994 <get_current_level+0x164>)
 800290a:	f7fe fa65 	bl	8000dd8 <HAL_GPIO_ReadPin>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d108      	bne.n	8002926 <get_current_level+0xf6>
 8002914:	2110      	movs	r1, #16
 8002916:	4820      	ldr	r0, [pc, #128]	; (8002998 <get_current_level+0x168>)
 8002918:	f7fe fa5e 	bl	8000dd8 <HAL_GPIO_ReadPin>
 800291c:	4603      	mov	r3, r0
 800291e:	2b01      	cmp	r3, #1
 8002920:	d101      	bne.n	8002926 <get_current_level+0xf6>
		return LEVEL_2_3;
 8002922:	2319      	movs	r3, #25
 8002924:	e030      	b.n	8002988 <get_current_level+0x158>
	}

	if((SS2_3 == ON) && (SS3_4 == ON) ){
 8002926:	2101      	movs	r1, #1
 8002928:	481a      	ldr	r0, [pc, #104]	; (8002994 <get_current_level+0x164>)
 800292a:	f7fe fa55 	bl	8000dd8 <HAL_GPIO_ReadPin>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d108      	bne.n	8002946 <get_current_level+0x116>
 8002934:	2110      	movs	r1, #16
 8002936:	4818      	ldr	r0, [pc, #96]	; (8002998 <get_current_level+0x168>)
 8002938:	f7fe fa4e 	bl	8000dd8 <HAL_GPIO_ReadPin>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <get_current_level+0x116>
		return LEVEL_3;
 8002942:	231e      	movs	r3, #30
 8002944:	e020      	b.n	8002988 <get_current_level+0x158>
	}

	if((SS3_4 == ON) && (SS4_A == OFF) ){
 8002946:	2110      	movs	r1, #16
 8002948:	4813      	ldr	r0, [pc, #76]	; (8002998 <get_current_level+0x168>)
 800294a:	f7fe fa45 	bl	8000dd8 <HAL_GPIO_ReadPin>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d108      	bne.n	8002966 <get_current_level+0x136>
 8002954:	2102      	movs	r1, #2
 8002956:	4810      	ldr	r0, [pc, #64]	; (8002998 <get_current_level+0x168>)
 8002958:	f7fe fa3e 	bl	8000dd8 <HAL_GPIO_ReadPin>
 800295c:	4603      	mov	r3, r0
 800295e:	2b01      	cmp	r3, #1
 8002960:	d101      	bne.n	8002966 <get_current_level+0x136>
		return LEVEL_3_4;
 8002962:	2323      	movs	r3, #35	; 0x23
 8002964:	e010      	b.n	8002988 <get_current_level+0x158>
	}

	if((SS3_4 == ON) && (SS4_B == OFF)){
 8002966:	2110      	movs	r1, #16
 8002968:	480b      	ldr	r0, [pc, #44]	; (8002998 <get_current_level+0x168>)
 800296a:	f7fe fa35 	bl	8000dd8 <HAL_GPIO_ReadPin>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d108      	bne.n	8002986 <get_current_level+0x156>
 8002974:	2101      	movs	r1, #1
 8002976:	4808      	ldr	r0, [pc, #32]	; (8002998 <get_current_level+0x168>)
 8002978:	f7fe fa2e 	bl	8000dd8 <HAL_GPIO_ReadPin>
 800297c:	4603      	mov	r3, r0
 800297e:	2b01      	cmp	r3, #1
 8002980:	d101      	bne.n	8002986 <get_current_level+0x156>
		return LEVEL_4;
 8002982:	2328      	movs	r3, #40	; 0x28
 8002984:	e000      	b.n	8002988 <get_current_level+0x158>
	}

	return LEVEL_ERROR;
 8002986:	2363      	movs	r3, #99	; 0x63

}
 8002988:	4618      	mov	r0, r3
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40020800 	.word	0x40020800
 8002990:	200000e8 	.word	0x200000e8
 8002994:	40020400 	.word	0x40020400
 8002998:	40020000 	.word	0x40020000

0800299c <board_init>:

void board_init(void){
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
	  HAL_Init();
 80029a0:	f7fd fe6d 	bl	800067e <HAL_Init>
	  SystemClock_Config();
 80029a4:	f000 f818 	bl	80029d8 <SystemClock_Config>
	  MX_GPIO_Init();
 80029a8:	f000 f8b2 	bl	8002b10 <MX_GPIO_Init>
	  MX_UART4_Init();
 80029ac:	f000 f85c 	bl	8002a68 <MX_UART4_Init>
	  MX_USART2_UART_Init();
 80029b0:	f000 f884 	bl	8002abc <MX_USART2_UART_Init>
	  HAL_UART_Receive_IT(&huart2, &buff_rx, 1);
 80029b4:	2201      	movs	r2, #1
 80029b6:	4905      	ldr	r1, [pc, #20]	; (80029cc <board_init+0x30>)
 80029b8:	4805      	ldr	r0, [pc, #20]	; (80029d0 <board_init+0x34>)
 80029ba:	f7ff f8c4 	bl	8001b46 <HAL_UART_Receive_IT>
	  HAL_UART_Receive_IT(&huart4, &buff_rx, 1);
 80029be:	2201      	movs	r2, #1
 80029c0:	4902      	ldr	r1, [pc, #8]	; (80029cc <board_init+0x30>)
 80029c2:	4804      	ldr	r0, [pc, #16]	; (80029d4 <board_init+0x38>)
 80029c4:	f7ff f8bf 	bl	8001b46 <HAL_UART_Receive_IT>
}
 80029c8:	bf00      	nop
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	2000024c 	.word	0x2000024c
 80029d0:	200000a0 	.word	0x200000a0
 80029d4:	20000058 	.word	0x20000058

080029d8 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b092      	sub	sp, #72	; 0x48
 80029dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029de:	f107 0314 	add.w	r3, r7, #20
 80029e2:	2234      	movs	r2, #52	; 0x34
 80029e4:	2100      	movs	r1, #0
 80029e6:	4618      	mov	r0, r3
 80029e8:	f003 fb5c 	bl	80060a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029ec:	463b      	mov	r3, r7
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	605a      	str	r2, [r3, #4]
 80029f4:	609a      	str	r2, [r3, #8]
 80029f6:	60da      	str	r2, [r3, #12]
 80029f8:	611a      	str	r2, [r3, #16]


  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029fa:	4b1a      	ldr	r3, [pc, #104]	; (8002a64 <SystemClock_Config+0x8c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8002a02:	4a18      	ldr	r2, [pc, #96]	; (8002a64 <SystemClock_Config+0x8c>)
 8002a04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a08:	6013      	str	r3, [r2, #0]


  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002a0a:	2310      	movs	r3, #16
 8002a0c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002a16:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002a1a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a20:	f107 0314 	add.w	r3, r7, #20
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7fe fa07 	bl	8000e38 <HAL_RCC_OscConfig>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8002a30:	f000 f890 	bl	8002b54 <Error_Handler>
  }


  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a34:	230f      	movs	r3, #15
 8002a36:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a40:	2300      	movs	r3, #0
 8002a42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a44:	2300      	movs	r3, #0
 8002a46:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a48:	463b      	mov	r3, r7
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fe fd23 	bl	8001498 <HAL_RCC_ClockConfig>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002a58:	f000 f87c 	bl	8002b54 <Error_Handler>
  }
}
 8002a5c:	bf00      	nop
 8002a5e:	3748      	adds	r7, #72	; 0x48
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40007000 	.word	0x40007000

08002a68 <MX_UART4_Init>:


static void MX_UART4_Init(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0


  huart4.Instance = UART4;
 8002a6c:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <MX_UART4_Init+0x4c>)
 8002a6e:	4a12      	ldr	r2, [pc, #72]	; (8002ab8 <MX_UART4_Init+0x50>)
 8002a70:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002a72:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <MX_UART4_Init+0x4c>)
 8002a74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a78:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002a7a:	4b0e      	ldr	r3, [pc, #56]	; (8002ab4 <MX_UART4_Init+0x4c>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002a80:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <MX_UART4_Init+0x4c>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002a86:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <MX_UART4_Init+0x4c>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002a8c:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <MX_UART4_Init+0x4c>)
 8002a8e:	220c      	movs	r2, #12
 8002a90:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a92:	4b08      	ldr	r3, [pc, #32]	; (8002ab4 <MX_UART4_Init+0x4c>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a98:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <MX_UART4_Init+0x4c>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002a9e:	4805      	ldr	r0, [pc, #20]	; (8002ab4 <MX_UART4_Init+0x4c>)
 8002aa0:	f7fe ff7e 	bl	80019a0 <HAL_UART_Init>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002aaa:	f000 f853 	bl	8002b54 <Error_Handler>
  }


}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000058 	.word	0x20000058
 8002ab8:	40004c00 	.word	0x40004c00

08002abc <MX_USART2_UART_Init>:


static void MX_USART2_UART_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0


  huart2.Instance = USART2;
 8002ac0:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <MX_USART2_UART_Init+0x4c>)
 8002ac2:	4a12      	ldr	r2, [pc, #72]	; (8002b0c <MX_USART2_UART_Init+0x50>)
 8002ac4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ac6:	4b10      	ldr	r3, [pc, #64]	; (8002b08 <MX_USART2_UART_Init+0x4c>)
 8002ac8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002acc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ace:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <MX_USART2_UART_Init+0x4c>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <MX_USART2_UART_Init+0x4c>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ada:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <MX_USART2_UART_Init+0x4c>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ae0:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <MX_USART2_UART_Init+0x4c>)
 8002ae2:	220c      	movs	r2, #12
 8002ae4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ae6:	4b08      	ldr	r3, [pc, #32]	; (8002b08 <MX_USART2_UART_Init+0x4c>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002aec:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <MX_USART2_UART_Init+0x4c>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002af2:	4805      	ldr	r0, [pc, #20]	; (8002b08 <MX_USART2_UART_Init+0x4c>)
 8002af4:	f7fe ff54 	bl	80019a0 <HAL_UART_Init>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002afe:	f000 f829 	bl	8002b54 <Error_Handler>
  }


}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	200000a0 	.word	0x200000a0
 8002b0c:	40004400 	.word	0x40004400

08002b10 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b16:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <MX_GPIO_Init+0x40>)
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	4a0d      	ldr	r2, [pc, #52]	; (8002b50 <MX_GPIO_Init+0x40>)
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	61d3      	str	r3, [r2, #28]
 8002b22:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <MX_GPIO_Init+0x40>)
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	607b      	str	r3, [r7, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b2e:	4b08      	ldr	r3, [pc, #32]	; (8002b50 <MX_GPIO_Init+0x40>)
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	4a07      	ldr	r2, [pc, #28]	; (8002b50 <MX_GPIO_Init+0x40>)
 8002b34:	f043 0304 	orr.w	r3, r3, #4
 8002b38:	61d3      	str	r3, [r2, #28]
 8002b3a:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <MX_GPIO_Init+0x40>)
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	603b      	str	r3, [r7, #0]
 8002b44:	683b      	ldr	r3, [r7, #0]

}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr
 8002b50:	40023800 	.word	0x40023800

08002b54 <Error_Handler>:

void Error_Handler(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002b58:	b672      	cpsid	i
}
 8002b5a:	bf00      	nop
  __disable_irq();
  while (1)
 8002b5c:	e7fe      	b.n	8002b5c <Error_Handler+0x8>
	...

08002b60 <main>:




int main(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b090      	sub	sp, #64	; 0x40
 8002b64:	af00      	add	r7, sp, #0

   board_init();
 8002b66:	f7ff ff19 	bl	800299c <board_init>
  matrix_init();
 8002b6a:	f000 f8e5 	bl	8002d38 <matrix_init>
  GPIO_sensor_init();
 8002b6e:	f7ff fded 	bl	800274c <GPIO_sensor_init>
  lkv_stepmotor_gpio_init();
 8002b72:	f003 f9fd 	bl	8005f70 <lkv_stepmotor_gpio_init>
  mqtt_index = 0;
 8002b76:	4b3d      	ldr	r3, [pc, #244]	; (8002c6c <main+0x10c>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	701a      	strb	r2, [r3, #0]

  nmbs_platform_conf platform_conf;
  platform_conf.transport = NMBS_TRANSPORT_RTU;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  platform_conf.read = read_serial;
 8002b82:	4b3b      	ldr	r3, [pc, #236]	; (8002c70 <main+0x110>)
 8002b84:	633b      	str	r3, [r7, #48]	; 0x30
  platform_conf.write = write_serial;
 8002b86:	4b3b      	ldr	r3, [pc, #236]	; (8002c74 <main+0x114>)
 8002b88:	637b      	str	r3, [r7, #52]	; 0x34
  platform_conf.arg = NULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	63bb      	str	r3, [r7, #56]	; 0x38

  nmbs_callbacks callbacks = {0};
 8002b8e:	463b      	mov	r3, r7
 8002b90:	222c      	movs	r2, #44	; 0x2c
 8002b92:	2100      	movs	r1, #0
 8002b94:	4618      	mov	r0, r3
 8002b96:	f003 fa85 	bl	80060a4 <memset>
  callbacks.read_coils = handle_read_coils;
 8002b9a:	4b37      	ldr	r3, [pc, #220]	; (8002c78 <main+0x118>)
 8002b9c:	603b      	str	r3, [r7, #0]
  callbacks.write_multiple_coils = handle_write_multiple_coils;
 8002b9e:	4b37      	ldr	r3, [pc, #220]	; (8002c7c <main+0x11c>)
 8002ba0:	61bb      	str	r3, [r7, #24]
  callbacks.read_holding_registers = handler_read_holding_registers;
 8002ba2:	4b37      	ldr	r3, [pc, #220]	; (8002c80 <main+0x120>)
 8002ba4:	60bb      	str	r3, [r7, #8]
  callbacks.write_multiple_registers = handle_write_multiple_registers;
 8002ba6:	4b37      	ldr	r3, [pc, #220]	; (8002c84 <main+0x124>)
 8002ba8:	61fb      	str	r3, [r7, #28]
  callbacks.write_single_register = handle_write_single_registers;
 8002baa:	4b37      	ldr	r3, [pc, #220]	; (8002c88 <main+0x128>)
 8002bac:	617b      	str	r3, [r7, #20]
  callbacks.read_input_registers = handler_read_input_registers;
 8002bae:	4b37      	ldr	r3, [pc, #220]	; (8002c8c <main+0x12c>)
 8002bb0:	60fb      	str	r3, [r7, #12]
  nmbs_error err = nmbs_server_create(&nmbs, RTU_SERVER_ADDRESS, &platform_conf, &callbacks);
 8002bb2:	463b      	mov	r3, r7
 8002bb4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002bb8:	2105      	movs	r1, #5
 8002bba:	4835      	ldr	r0, [pc, #212]	; (8002c90 <main+0x130>)
 8002bbc:	f003 f81e 	bl	8005bfc <nmbs_server_create>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != NMBS_ERROR_NONE) {
 8002bc6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <main+0x72>
    onError();
 8002bce:	f000 fafb 	bl	80031c8 <onError>
  }
  nmbs_set_read_timeout(&nmbs, 10);
 8002bd2:	210a      	movs	r1, #10
 8002bd4:	482e      	ldr	r0, [pc, #184]	; (8002c90 <main+0x130>)
 8002bd6:	f000 fe1e 	bl	8003816 <nmbs_set_read_timeout>
  nmbs_set_byte_timeout(&nmbs, 50);
 8002bda:	2132      	movs	r1, #50	; 0x32
 8002bdc:	482c      	ldr	r0, [pc, #176]	; (8002c90 <main+0x130>)
 8002bde:	f000 fe28 	bl	8003832 <nmbs_set_byte_timeout>

  target_level = LEVEL_1;
 8002be2:	4b2c      	ldr	r3, [pc, #176]	; (8002c94 <main+0x134>)
 8002be4:	220a      	movs	r2, #10
 8002be6:	701a      	strb	r2, [r3, #0]

  while (1)
  {

	  nmbs_server_poll(&nmbs);
 8002be8:	4829      	ldr	r0, [pc, #164]	; (8002c90 <main+0x130>)
 8002bea:	f003 f83c 	bl	8005c66 <nmbs_server_poll>

	  user_char = get_char_user();
 8002bee:	f000 f9e1 	bl	8002fb4 <get_char_user>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4b28      	ldr	r3, [pc, #160]	; (8002c98 <main+0x138>)
 8002bf8:	701a      	strb	r2, [r3, #0]
	  if((user_char >= '1') && (user_char <= '4')){
 8002bfa:	4b27      	ldr	r3, [pc, #156]	; (8002c98 <main+0x138>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b30      	cmp	r3, #48	; 0x30
 8002c00:	d92b      	bls.n	8002c5a <main+0xfa>
 8002c02:	4b25      	ldr	r3, [pc, #148]	; (8002c98 <main+0x138>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b34      	cmp	r3, #52	; 0x34
 8002c08:	d827      	bhi.n	8002c5a <main+0xfa>
		  target_level = (user_char - '0') * 10;
 8002c0a:	4b23      	ldr	r3, [pc, #140]	; (8002c98 <main+0x138>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	0092      	lsls	r2, r2, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	3320      	adds	r3, #32
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <main+0x134>)
 8002c1e:	701a      	strb	r2, [r3, #0]
	  }

	  while(target_level != current_level){
 8002c20:	e01b      	b.n	8002c5a <main+0xfa>
		  if(target_level > current_level){
 8002c22:	4b1c      	ldr	r3, [pc, #112]	; (8002c94 <main+0x134>)
 8002c24:	781a      	ldrb	r2, [r3, #0]
 8002c26:	4b1d      	ldr	r3, [pc, #116]	; (8002c9c <main+0x13c>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d904      	bls.n	8002c38 <main+0xd8>
			  lkv_stepmotor_process(STEP_DIR_DOWN, 130, 1);
 8002c2e:	2201      	movs	r2, #1
 8002c30:	2182      	movs	r1, #130	; 0x82
 8002c32:	2001      	movs	r0, #1
 8002c34:	f003 f9f0 	bl	8006018 <lkv_stepmotor_process>
		  }
		  if(target_level < current_level){
 8002c38:	4b16      	ldr	r3, [pc, #88]	; (8002c94 <main+0x134>)
 8002c3a:	781a      	ldrb	r2, [r3, #0]
 8002c3c:	4b17      	ldr	r3, [pc, #92]	; (8002c9c <main+0x13c>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d204      	bcs.n	8002c4e <main+0xee>
			  lkv_stepmotor_process(STEP_DIR_UP, 130, 1);
 8002c44:	2201      	movs	r2, #1
 8002c46:	2182      	movs	r1, #130	; 0x82
 8002c48:	2000      	movs	r0, #0
 8002c4a:	f003 f9e5 	bl	8006018 <lkv_stepmotor_process>
		  }
		  if(target_level == current_level){
 8002c4e:	4b11      	ldr	r3, [pc, #68]	; (8002c94 <main+0x134>)
 8002c50:	781a      	ldrb	r2, [r3, #0]
 8002c52:	4b12      	ldr	r3, [pc, #72]	; (8002c9c <main+0x13c>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d006      	beq.n	8002c68 <main+0x108>
	  while(target_level != current_level){
 8002c5a:	4b0e      	ldr	r3, [pc, #56]	; (8002c94 <main+0x134>)
 8002c5c:	781a      	ldrb	r2, [r3, #0]
 8002c5e:	4b0f      	ldr	r3, [pc, #60]	; (8002c9c <main+0x13c>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d1dd      	bne.n	8002c22 <main+0xc2>
 8002c66:	e7bf      	b.n	8002be8 <main+0x88>
			  break;
 8002c68:	bf00      	nop
	  nmbs_server_poll(&nmbs);
 8002c6a:	e7bd      	b.n	8002be8 <main+0x88>
 8002c6c:	20000244 	.word	0x20000244
 8002c70:	080030b9 	.word	0x080030b9
 8002c74:	0800319d 	.word	0x0800319d
 8002c78:	080031d5 	.word	0x080031d5
 8002c7c:	080032bd 	.word	0x080032bd
 8002c80:	080033a1 	.word	0x080033a1
 8002c84:	08003401 	.word	0x08003401
 8002c88:	08003461 	.word	0x08003461
 8002c8c:	08003499 	.word	0x08003499
 8002c90:	200000f0 	.word	0x200000f0
 8002c94:	2000000d 	.word	0x2000000d
 8002c98:	200000ee 	.word	0x200000ee
 8002c9c:	2000000c 	.word	0x2000000c

08002ca0 <SysTick_Handler>:
  }

}

void SysTick_Handler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
	g_sys_time++;
 8002ca4:	4b07      	ldr	r3, [pc, #28]	; (8002cc4 <SysTick_Handler+0x24>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	4a06      	ldr	r2, [pc, #24]	; (8002cc4 <SysTick_Handler+0x24>)
 8002cac:	6013      	str	r3, [r2, #0]
  HAL_IncTick();
 8002cae:	f7fd fd39 	bl	8000724 <HAL_IncTick>
  current_level = get_current_level();
 8002cb2:	f7ff fdbd 	bl	8002830 <get_current_level>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4b03      	ldr	r3, [pc, #12]	; (8002cc8 <SysTick_Handler+0x28>)
 8002cbc:	701a      	strb	r2, [r3, #0]

}
 8002cbe:	bf00      	nop
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20000248 	.word	0x20000248
 8002cc8:	2000000c 	.word	0x2000000c

08002ccc <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 8002cd0:	4810      	ldr	r0, [pc, #64]	; (8002d14 <USART2_IRQHandler+0x48>)
 8002cd2:	f7fe ff5d 	bl	8001b90 <HAL_UART_IRQHandler>
	HAL_UART_Receive_IT(&huart2, &buff_rx, 1);
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	490f      	ldr	r1, [pc, #60]	; (8002d18 <USART2_IRQHandler+0x4c>)
 8002cda:	480e      	ldr	r0, [pc, #56]	; (8002d14 <USART2_IRQHandler+0x48>)
 8002cdc:	f7fe ff33 	bl	8001b46 <HAL_UART_Receive_IT>
	ring_buffer[front_index] = buff_rx;
 8002ce0:	4b0e      	ldr	r3, [pc, #56]	; (8002d1c <USART2_IRQHandler+0x50>)
 8002ce2:	881b      	ldrh	r3, [r3, #0]
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <USART2_IRQHandler+0x4c>)
 8002cea:	7819      	ldrb	r1, [r3, #0]
 8002cec:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <USART2_IRQHandler+0x54>)
 8002cee:	5499      	strb	r1, [r3, r2]
	front_index++;
 8002cf0:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <USART2_IRQHandler+0x50>)
 8002cf2:	881b      	ldrh	r3, [r3, #0]
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	4b08      	ldr	r3, [pc, #32]	; (8002d1c <USART2_IRQHandler+0x50>)
 8002cfc:	801a      	strh	r2, [r3, #0]
	if(front_index >= 1024){
 8002cfe:	4b07      	ldr	r3, [pc, #28]	; (8002d1c <USART2_IRQHandler+0x50>)
 8002d00:	881b      	ldrh	r3, [r3, #0]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d08:	d302      	bcc.n	8002d10 <USART2_IRQHandler+0x44>
		front_index = 0;
 8002d0a:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <USART2_IRQHandler+0x50>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	801a      	strh	r2, [r3, #0]
	}

}
 8002d10:	bf00      	nop
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	200000a0 	.word	0x200000a0
 8002d18:	2000024c 	.word	0x2000024c
 8002d1c:	20000650 	.word	0x20000650
 8002d20:	20000250 	.word	0x20000250

08002d24 <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart4);
 8002d28:	4802      	ldr	r0, [pc, #8]	; (8002d34 <UART4_IRQHandler+0x10>)
 8002d2a:	f7fe ff31 	bl	8001b90 <HAL_UART_IRQHandler>
}
 8002d2e:	bf00      	nop
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000058 	.word	0x20000058

08002d38 <matrix_init>:
 *      Author: vypa0
 */

#include "../../User/matric_button/lkv_matrix_button.h"

void matrix_init(void){
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b088      	sub	sp, #32
 8002d3c:	af00      	add	r7, sp, #0
	 __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d3e:	4b3b      	ldr	r3, [pc, #236]	; (8002e2c <matrix_init+0xf4>)
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	4a3a      	ldr	r2, [pc, #232]	; (8002e2c <matrix_init+0xf4>)
 8002d44:	f043 0304 	orr.w	r3, r3, #4
 8002d48:	61d3      	str	r3, [r2, #28]
 8002d4a:	4b38      	ldr	r3, [pc, #224]	; (8002e2c <matrix_init+0xf4>)
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	60bb      	str	r3, [r7, #8]
 8002d54:	68bb      	ldr	r3, [r7, #8]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d56:	4b35      	ldr	r3, [pc, #212]	; (8002e2c <matrix_init+0xf4>)
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	4a34      	ldr	r2, [pc, #208]	; (8002e2c <matrix_init+0xf4>)
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	61d3      	str	r3, [r2, #28]
 8002d62:	4b32      	ldr	r3, [pc, #200]	; (8002e2c <matrix_init+0xf4>)
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	607b      	str	r3, [r7, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d6e:	4b2f      	ldr	r3, [pc, #188]	; (8002e2c <matrix_init+0xf4>)
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	4a2e      	ldr	r2, [pc, #184]	; (8002e2c <matrix_init+0xf4>)
 8002d74:	f043 0302 	orr.w	r3, r3, #2
 8002d78:	61d3      	str	r3, [r2, #28]
 8002d7a:	4b2c      	ldr	r3, [pc, #176]	; (8002e2c <matrix_init+0xf4>)
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	603b      	str	r3, [r7, #0]
 8002d84:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d86:	f107 030c 	add.w	r3, r7, #12
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	605a      	str	r2, [r3, #4]
 8002d90:	609a      	str	r2, [r3, #8]
 8002d92:	60da      	str	r2, [r3, #12]
 8002d94:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d96:	2300      	movs	r3, #0
 8002d98:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	61bb      	str	r3, [r7, #24]

	  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002da2:	2340      	movs	r3, #64	; 0x40
 8002da4:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da6:	f107 030c 	add.w	r3, r7, #12
 8002daa:	4619      	mov	r1, r3
 8002dac:	4820      	ldr	r0, [pc, #128]	; (8002e30 <matrix_init+0xf8>)
 8002dae:	f7fd fe83 	bl	8000ab8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002db2:	2380      	movs	r3, #128	; 0x80
 8002db4:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db6:	f107 030c 	add.w	r3, r7, #12
 8002dba:	4619      	mov	r1, r3
 8002dbc:	481c      	ldr	r0, [pc, #112]	; (8002e30 <matrix_init+0xf8>)
 8002dbe:	f7fd fe7b 	bl	8000ab8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002dc2:	2340      	movs	r3, #64	; 0x40
 8002dc4:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dc6:	f107 030c 	add.w	r3, r7, #12
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4819      	ldr	r0, [pc, #100]	; (8002e34 <matrix_init+0xfc>)
 8002dce:	f7fd fe73 	bl	8000ab8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002dd2:	2380      	movs	r3, #128	; 0x80
 8002dd4:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dd6:	f107 030c 	add.w	r3, r7, #12
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4816      	ldr	r0, [pc, #88]	; (8002e38 <matrix_init+0x100>)
 8002dde:	f7fd fe6b 	bl	8000ab8 <HAL_GPIO_Init>


	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002de2:	2301      	movs	r3, #1
 8002de4:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dea:	2302      	movs	r3, #2
 8002dec:	61bb      	str	r3, [r7, #24]


	  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002dee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002df2:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df4:	f107 030c 	add.w	r3, r7, #12
 8002df8:	4619      	mov	r1, r3
 8002dfa:	480d      	ldr	r0, [pc, #52]	; (8002e30 <matrix_init+0xf8>)
 8002dfc:	f7fd fe5c 	bl	8000ab8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e04:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e06:	f107 030c 	add.w	r3, r7, #12
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4808      	ldr	r0, [pc, #32]	; (8002e30 <matrix_init+0xf8>)
 8002e0e:	f7fd fe53 	bl	8000ab8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e16:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e18:	f107 030c 	add.w	r3, r7, #12
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4805      	ldr	r0, [pc, #20]	; (8002e34 <matrix_init+0xfc>)
 8002e20:	f7fd fe4a 	bl	8000ab8 <HAL_GPIO_Init>


}
 8002e24:	bf00      	nop
 8002e26:	3720      	adds	r7, #32
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	40020000 	.word	0x40020000
 8002e34:	40020400 	.word	0x40020400
 8002e38:	40020800 	.word	0x40020800

08002e3c <get_row>:


uint8_t get_row(void){
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 1 ){
 8002e40:	2140      	movs	r1, #64	; 0x40
 8002e42:	4827      	ldr	r0, [pc, #156]	; (8002ee0 <get_row+0xa4>)
 8002e44:	f7fd ffc8 	bl	8000dd8 <HAL_GPIO_ReadPin>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d10b      	bne.n	8002e66 <get_row+0x2a>
		HAL_Delay(10);
 8002e4e:	200a      	movs	r0, #10
 8002e50:	f7fd fc84 	bl	800075c <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 1) return 1;
 8002e54:	2140      	movs	r1, #64	; 0x40
 8002e56:	4822      	ldr	r0, [pc, #136]	; (8002ee0 <get_row+0xa4>)
 8002e58:	f7fd ffbe 	bl	8000dd8 <HAL_GPIO_ReadPin>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d13a      	bne.n	8002ed8 <get_row+0x9c>
 8002e62:	2301      	movs	r3, #1
 8002e64:	e039      	b.n	8002eda <get_row+0x9e>
	}
	else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 1 ){
 8002e66:	2180      	movs	r1, #128	; 0x80
 8002e68:	481d      	ldr	r0, [pc, #116]	; (8002ee0 <get_row+0xa4>)
 8002e6a:	f7fd ffb5 	bl	8000dd8 <HAL_GPIO_ReadPin>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d10b      	bne.n	8002e8c <get_row+0x50>
		HAL_Delay(10);
 8002e74:	200a      	movs	r0, #10
 8002e76:	f7fd fc71 	bl	800075c <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 1) return 2;
 8002e7a:	2180      	movs	r1, #128	; 0x80
 8002e7c:	4818      	ldr	r0, [pc, #96]	; (8002ee0 <get_row+0xa4>)
 8002e7e:	f7fd ffab 	bl	8000dd8 <HAL_GPIO_ReadPin>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d127      	bne.n	8002ed8 <get_row+0x9c>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e026      	b.n	8002eda <get_row+0x9e>
	}
	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 1 ){
 8002e8c:	2140      	movs	r1, #64	; 0x40
 8002e8e:	4815      	ldr	r0, [pc, #84]	; (8002ee4 <get_row+0xa8>)
 8002e90:	f7fd ffa2 	bl	8000dd8 <HAL_GPIO_ReadPin>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d10b      	bne.n	8002eb2 <get_row+0x76>
		HAL_Delay(10);
 8002e9a:	200a      	movs	r0, #10
 8002e9c:	f7fd fc5e 	bl	800075c <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 1) return 3;
 8002ea0:	2140      	movs	r1, #64	; 0x40
 8002ea2:	4810      	ldr	r0, [pc, #64]	; (8002ee4 <get_row+0xa8>)
 8002ea4:	f7fd ff98 	bl	8000dd8 <HAL_GPIO_ReadPin>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d114      	bne.n	8002ed8 <get_row+0x9c>
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e013      	b.n	8002eda <get_row+0x9e>
	}
	else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == 1 ){
 8002eb2:	2180      	movs	r1, #128	; 0x80
 8002eb4:	480c      	ldr	r0, [pc, #48]	; (8002ee8 <get_row+0xac>)
 8002eb6:	f7fd ff8f 	bl	8000dd8 <HAL_GPIO_ReadPin>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d10b      	bne.n	8002ed8 <get_row+0x9c>
		HAL_Delay(10);
 8002ec0:	200a      	movs	r0, #10
 8002ec2:	f7fd fc4b 	bl	800075c <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == 1) return 4;
 8002ec6:	2180      	movs	r1, #128	; 0x80
 8002ec8:	4807      	ldr	r0, [pc, #28]	; (8002ee8 <get_row+0xac>)
 8002eca:	f7fd ff85 	bl	8000dd8 <HAL_GPIO_ReadPin>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <get_row+0x9c>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	e000      	b.n	8002eda <get_row+0x9e>
	}


	return 0;
 8002ed8:	2300      	movs	r3, #0

}
 8002eda:	4618      	mov	r0, r3
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40020000 	.word	0x40020000
 8002ee4:	40020400 	.word	0x40020400
 8002ee8:	40020800 	.word	0x40020800

08002eec <set_colum>:

void set_colum(uint8_t id){
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	71fb      	strb	r3, [r7, #7]
	switch(id){
 8002ef6:	79fb      	ldrb	r3, [r7, #7]
 8002ef8:	2b03      	cmp	r3, #3
 8002efa:	d038      	beq.n	8002f6e <set_colum+0x82>
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	dc4f      	bgt.n	8002fa0 <set_colum+0xb4>
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d002      	beq.n	8002f0a <set_colum+0x1e>
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d019      	beq.n	8002f3c <set_colum+0x50>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
		HAL_Delay(2);
		break;

	default:
		break;
 8002f08:	e04a      	b.n	8002fa0 <set_colum+0xb4>
		HAL_Delay(2);
 8002f0a:	2002      	movs	r0, #2
 8002f0c:	f7fd fc26 	bl	800075c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  1);
 8002f10:	2201      	movs	r2, #1
 8002f12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f16:	4825      	ldr	r0, [pc, #148]	; (8002fac <set_colum+0xc0>)
 8002f18:	f7fd ff75 	bl	8000e06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  0);
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f22:	4822      	ldr	r0, [pc, #136]	; (8002fac <set_colum+0xc0>)
 8002f24:	f7fd ff6f 	bl	8000e06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f2e:	4820      	ldr	r0, [pc, #128]	; (8002fb0 <set_colum+0xc4>)
 8002f30:	f7fd ff69 	bl	8000e06 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8002f34:	2002      	movs	r0, #2
 8002f36:	f7fd fc11 	bl	800075c <HAL_Delay>
		break;
 8002f3a:	e032      	b.n	8002fa2 <set_colum+0xb6>
		HAL_Delay(2);
 8002f3c:	2002      	movs	r0, #2
 8002f3e:	f7fd fc0d 	bl	800075c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  0);
 8002f42:	2200      	movs	r2, #0
 8002f44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f48:	4818      	ldr	r0, [pc, #96]	; (8002fac <set_colum+0xc0>)
 8002f4a:	f7fd ff5c 	bl	8000e06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  1);
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f54:	4815      	ldr	r0, [pc, #84]	; (8002fac <set_colum+0xc0>)
 8002f56:	f7fd ff56 	bl	8000e06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f60:	4813      	ldr	r0, [pc, #76]	; (8002fb0 <set_colum+0xc4>)
 8002f62:	f7fd ff50 	bl	8000e06 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8002f66:	2002      	movs	r0, #2
 8002f68:	f7fd fbf8 	bl	800075c <HAL_Delay>
		break;
 8002f6c:	e019      	b.n	8002fa2 <set_colum+0xb6>
		HAL_Delay(2);
 8002f6e:	2002      	movs	r0, #2
 8002f70:	f7fd fbf4 	bl	800075c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  0);
 8002f74:	2200      	movs	r2, #0
 8002f76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f7a:	480c      	ldr	r0, [pc, #48]	; (8002fac <set_colum+0xc0>)
 8002f7c:	f7fd ff43 	bl	8000e06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  0);
 8002f80:	2200      	movs	r2, #0
 8002f82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f86:	4809      	ldr	r0, [pc, #36]	; (8002fac <set_colum+0xc0>)
 8002f88:	f7fd ff3d 	bl	8000e06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f92:	4807      	ldr	r0, [pc, #28]	; (8002fb0 <set_colum+0xc4>)
 8002f94:	f7fd ff37 	bl	8000e06 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8002f98:	2002      	movs	r0, #2
 8002f9a:	f7fd fbdf 	bl	800075c <HAL_Delay>
		break;
 8002f9e:	e000      	b.n	8002fa2 <set_colum+0xb6>
		break;
 8002fa0:	bf00      	nop
	}
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40020000 	.word	0x40020000
 8002fb0:	40020400 	.word	0x40020400

08002fb4 <get_char_user>:

	 return num;
}


 uint8_t get_char_user(void){
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0

	 uint8_t num = 0;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	71fb      	strb	r3, [r7, #7]

	        set_colum(1);
 8002fbe:	2001      	movs	r0, #1
 8002fc0:	f7ff ff94 	bl	8002eec <set_colum>
	 			 if(get_row() == 1){
 8002fc4:	f7ff ff3a 	bl	8002e3c <get_row>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d103      	bne.n	8002fd6 <get_char_user+0x22>
	 				 num = '1';
 8002fce:	2331      	movs	r3, #49	; 0x31
 8002fd0:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	e06c      	b.n	80030b0 <get_char_user+0xfc>
	 			 }
	 			 if(get_row() == 2){
 8002fd6:	f7ff ff31 	bl	8002e3c <get_row>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d103      	bne.n	8002fe8 <get_char_user+0x34>
	 				 num = '4';
 8002fe0:	2334      	movs	r3, #52	; 0x34
 8002fe2:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 8002fe4:	79fb      	ldrb	r3, [r7, #7]
 8002fe6:	e063      	b.n	80030b0 <get_char_user+0xfc>
	 			 }
	 			 if(get_row() == 3){
 8002fe8:	f7ff ff28 	bl	8002e3c <get_row>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b03      	cmp	r3, #3
 8002ff0:	d103      	bne.n	8002ffa <get_char_user+0x46>
	 				 num = '7';
 8002ff2:	2337      	movs	r3, #55	; 0x37
 8002ff4:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	e05a      	b.n	80030b0 <get_char_user+0xfc>
	 			 }


	 		 set_colum(2);
 8002ffa:	2002      	movs	r0, #2
 8002ffc:	f7ff ff76 	bl	8002eec <set_colum>
	 			 if(get_row() == 1){
 8003000:	f7ff ff1c 	bl	8002e3c <get_row>
 8003004:	4603      	mov	r3, r0
 8003006:	2b01      	cmp	r3, #1
 8003008:	d103      	bne.n	8003012 <get_char_user+0x5e>
	 				 num = '2';
 800300a:	2332      	movs	r3, #50	; 0x32
 800300c:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	e04e      	b.n	80030b0 <get_char_user+0xfc>
	 			 }
	 			 if(get_row() == 2){
 8003012:	f7ff ff13 	bl	8002e3c <get_row>
 8003016:	4603      	mov	r3, r0
 8003018:	2b02      	cmp	r3, #2
 800301a:	d103      	bne.n	8003024 <get_char_user+0x70>
	 				 num = '5';
 800301c:	2335      	movs	r3, #53	; 0x35
 800301e:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	e045      	b.n	80030b0 <get_char_user+0xfc>
	 			 }
	 			 if(get_row() == 3){
 8003024:	f7ff ff0a 	bl	8002e3c <get_row>
 8003028:	4603      	mov	r3, r0
 800302a:	2b03      	cmp	r3, #3
 800302c:	d103      	bne.n	8003036 <get_char_user+0x82>
	 				 num = '8';
 800302e:	2338      	movs	r3, #56	; 0x38
 8003030:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	e03c      	b.n	80030b0 <get_char_user+0xfc>
	 			 }


	 		 set_colum(3);
 8003036:	2003      	movs	r0, #3
 8003038:	f7ff ff58 	bl	8002eec <set_colum>
	 			 if(get_row() == 1){
 800303c:	f7ff fefe 	bl	8002e3c <get_row>
 8003040:	4603      	mov	r3, r0
 8003042:	2b01      	cmp	r3, #1
 8003044:	d103      	bne.n	800304e <get_char_user+0x9a>
	 				 num = '3';
 8003046:	2333      	movs	r3, #51	; 0x33
 8003048:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	e030      	b.n	80030b0 <get_char_user+0xfc>
	 			 }
	 			 if(get_row() == 2){
 800304e:	f7ff fef5 	bl	8002e3c <get_row>
 8003052:	4603      	mov	r3, r0
 8003054:	2b02      	cmp	r3, #2
 8003056:	d103      	bne.n	8003060 <get_char_user+0xac>
	 				 num = '6';
 8003058:	2336      	movs	r3, #54	; 0x36
 800305a:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	e027      	b.n	80030b0 <get_char_user+0xfc>
	 			 }
	 			 if(get_row() == 3){
 8003060:	f7ff feec 	bl	8002e3c <get_row>
 8003064:	4603      	mov	r3, r0
 8003066:	2b03      	cmp	r3, #3
 8003068:	d103      	bne.n	8003072 <get_char_user+0xbe>
	 				 num = '9';
 800306a:	2339      	movs	r3, #57	; 0x39
 800306c:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 800306e:	79fb      	ldrb	r3, [r7, #7]
 8003070:	e01e      	b.n	80030b0 <get_char_user+0xfc>
	 			 }


	 		 set_colum(4);
 8003072:	2004      	movs	r0, #4
 8003074:	f7ff ff3a 	bl	8002eec <set_colum>
	 			 if(get_row() == 1){
 8003078:	f7ff fee0 	bl	8002e3c <get_row>
 800307c:	4603      	mov	r3, r0
 800307e:	2b01      	cmp	r3, #1
 8003080:	d103      	bne.n	800308a <get_char_user+0xd6>
	 				 num = 'A';
 8003082:	2341      	movs	r3, #65	; 0x41
 8003084:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	e012      	b.n	80030b0 <get_char_user+0xfc>
	 			 }
	 			 if(get_row() == 2){
 800308a:	f7ff fed7 	bl	8002e3c <get_row>
 800308e:	4603      	mov	r3, r0
 8003090:	2b02      	cmp	r3, #2
 8003092:	d103      	bne.n	800309c <get_char_user+0xe8>
	 				 num = 'B';
 8003094:	2342      	movs	r3, #66	; 0x42
 8003096:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 8003098:	79fb      	ldrb	r3, [r7, #7]
 800309a:	e009      	b.n	80030b0 <get_char_user+0xfc>
	 			 }
	 			 if(get_row() == 3){
 800309c:	f7ff fece 	bl	8002e3c <get_row>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d103      	bne.n	80030ae <get_char_user+0xfa>
	 				 num = '0';
 80030a6:	2330      	movs	r3, #48	; 0x30
 80030a8:	71fb      	strb	r3, [r7, #7]
	 				 return num;
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	e000      	b.n	80030b0 <get_char_user+0xfc>
	 			 }


	 		return 0;
 80030ae:	2300      	movs	r3, #0

 }
 80030b0:	4618      	mov	r0, r3
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <read_serial>:
uint16_t server_holding_registers[HOLD_REGS_ADDR_MAX] = {0,1,2,3,4,5,6,7,8,9};
uint16_t server_input_registers[INPUT_REGS_ADDR_MAX] = {01,11,21,31,41,51,61,71,81,91};



int32_t read_serial(uint8_t* buf, uint16_t count, int32_t byte_timeout_ms, void* arg) {
 80030b8:	b480      	push	{r7}
 80030ba:	b089      	sub	sp, #36	; 0x24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	607a      	str	r2, [r7, #4]
 80030c2:	603b      	str	r3, [r7, #0]
 80030c4:	460b      	mov	r3, r1
 80030c6:	817b      	strh	r3, [r7, #10]
	uint32_t timeout = g_sys_time + byte_timeout_ms;
 80030c8:	4b30      	ldr	r3, [pc, #192]	; (800318c <read_serial+0xd4>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4413      	add	r3, r2
 80030d0:	617b      	str	r3, [r7, #20]
	while(g_sys_time < timeout){
 80030d2:	e04e      	b.n	8003172 <read_serial+0xba>
		uint32_t gap_ = 0;
 80030d4:	2300      	movs	r3, #0
 80030d6:	61fb      	str	r3, [r7, #28]
		if(front_index > rear_index){
 80030d8:	4b2d      	ldr	r3, [pc, #180]	; (8003190 <read_serial+0xd8>)
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	b29a      	uxth	r2, r3
 80030de:	4b2d      	ldr	r3, [pc, #180]	; (8003194 <read_serial+0xdc>)
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d908      	bls.n	80030fa <read_serial+0x42>
			gap_ = front_index - rear_index;
 80030e8:	4b29      	ldr	r3, [pc, #164]	; (8003190 <read_serial+0xd8>)
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	461a      	mov	r2, r3
 80030f0:	4b28      	ldr	r3, [pc, #160]	; (8003194 <read_serial+0xdc>)
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	61fb      	str	r3, [r7, #28]
		}
		if(front_index < rear_index){
 80030fa:	4b25      	ldr	r3, [pc, #148]	; (8003190 <read_serial+0xd8>)
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	b29a      	uxth	r2, r3
 8003100:	4b24      	ldr	r3, [pc, #144]	; (8003194 <read_serial+0xdc>)
 8003102:	881b      	ldrh	r3, [r3, #0]
 8003104:	b29b      	uxth	r3, r3
 8003106:	429a      	cmp	r2, r3
 8003108:	d209      	bcs.n	800311e <read_serial+0x66>
			gap_ = 1024 + front_index - rear_index;
 800310a:	4b21      	ldr	r3, [pc, #132]	; (8003190 <read_serial+0xd8>)
 800310c:	881b      	ldrh	r3, [r3, #0]
 800310e:	b29b      	uxth	r3, r3
 8003110:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003114:	4a1f      	ldr	r2, [pc, #124]	; (8003194 <read_serial+0xdc>)
 8003116:	8812      	ldrh	r2, [r2, #0]
 8003118:	b292      	uxth	r2, r2
 800311a:	1a9b      	subs	r3, r3, r2
 800311c:	61fb      	str	r3, [r7, #28]
		}
		if(gap_ >= count){
 800311e:	897b      	ldrh	r3, [r7, #10]
 8003120:	69fa      	ldr	r2, [r7, #28]
 8003122:	429a      	cmp	r2, r3
 8003124:	d325      	bcc.n	8003172 <read_serial+0xba>
			for(int i = 0; i < count; i++){
 8003126:	2300      	movs	r3, #0
 8003128:	61bb      	str	r3, [r7, #24]
 800312a:	e01c      	b.n	8003166 <read_serial+0xae>
				*(buf + i) = ring_buffer[rear_index];
 800312c:	4b19      	ldr	r3, [pc, #100]	; (8003194 <read_serial+0xdc>)
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	b29b      	uxth	r3, r3
 8003132:	4619      	mov	r1, r3
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	4413      	add	r3, r2
 800313a:	4a17      	ldr	r2, [pc, #92]	; (8003198 <read_serial+0xe0>)
 800313c:	5c52      	ldrb	r2, [r2, r1]
 800313e:	701a      	strb	r2, [r3, #0]
				rear_index++;
 8003140:	4b14      	ldr	r3, [pc, #80]	; (8003194 <read_serial+0xdc>)
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	b29b      	uxth	r3, r3
 8003146:	3301      	adds	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	4b12      	ldr	r3, [pc, #72]	; (8003194 <read_serial+0xdc>)
 800314c:	801a      	strh	r2, [r3, #0]
				if(rear_index >= 1024){
 800314e:	4b11      	ldr	r3, [pc, #68]	; (8003194 <read_serial+0xdc>)
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	b29b      	uxth	r3, r3
 8003154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003158:	d302      	bcc.n	8003160 <read_serial+0xa8>
					rear_index = 0;
 800315a:	4b0e      	ldr	r3, [pc, #56]	; (8003194 <read_serial+0xdc>)
 800315c:	2200      	movs	r2, #0
 800315e:	801a      	strh	r2, [r3, #0]
			for(int i = 0; i < count; i++){
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	3301      	adds	r3, #1
 8003164:	61bb      	str	r3, [r7, #24]
 8003166:	897b      	ldrh	r3, [r7, #10]
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	429a      	cmp	r2, r3
 800316c:	dbde      	blt.n	800312c <read_serial+0x74>
				}
			}
			return count;
 800316e:	897b      	ldrh	r3, [r7, #10]
 8003170:	e006      	b.n	8003180 <read_serial+0xc8>
	while(g_sys_time < timeout){
 8003172:	4b06      	ldr	r3, [pc, #24]	; (800318c <read_serial+0xd4>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	429a      	cmp	r2, r3
 800317a:	d8ab      	bhi.n	80030d4 <read_serial+0x1c>
		}
	}
	return -1;
 800317c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003180:	4618      	mov	r0, r3
 8003182:	3724      	adds	r7, #36	; 0x24
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	20000248 	.word	0x20000248
 8003190:	20000650 	.word	0x20000650
 8003194:	20000652 	.word	0x20000652
 8003198:	20000250 	.word	0x20000250

0800319c <write_serial>:


int32_t write_serial(const uint8_t* buf, uint16_t count, int32_t byte_timeout_ms, void* arg) {
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	607a      	str	r2, [r7, #4]
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	460b      	mov	r3, r1
 80031aa:	817b      	strh	r3, [r7, #10]
	HAL_UART_Transmit(&huart2, buf, count, byte_timeout_ms);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	897a      	ldrh	r2, [r7, #10]
 80031b0:	68f9      	ldr	r1, [r7, #12]
 80031b2:	4804      	ldr	r0, [pc, #16]	; (80031c4 <write_serial+0x28>)
 80031b4:	f7fe fc44 	bl	8001a40 <HAL_UART_Transmit>
  return count;
 80031b8:	897b      	ldrh	r3, [r7, #10]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	200000a0 	.word	0x200000a0

080031c8 <onError>:


void onError(void) {
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0

	return;
 80031cc:	bf00      	nop
}
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr

080031d4 <handle_read_coils>:


nmbs_error handle_read_coils(uint16_t address, uint16_t quantity, nmbs_bitfield coils_out, uint8_t unit_id, void *arg) {
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60ba      	str	r2, [r7, #8]
 80031dc:	461a      	mov	r2, r3
 80031de:	4603      	mov	r3, r0
 80031e0:	81fb      	strh	r3, [r7, #14]
 80031e2:	460b      	mov	r3, r1
 80031e4:	81bb      	strh	r3, [r7, #12]
 80031e6:	4613      	mov	r3, r2
 80031e8:	71fb      	strb	r3, [r7, #7]
  if (address + quantity > COILS_ADDR_MAX + 1)
 80031ea:	89fa      	ldrh	r2, [r7, #14]
 80031ec:	89bb      	ldrh	r3, [r7, #12]
 80031ee:	4413      	add	r3, r2
 80031f0:	2b10      	cmp	r3, #16
 80031f2:	dd01      	ble.n	80031f8 <handle_read_coils+0x24>
    return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 80031f4:	2302      	movs	r3, #2
 80031f6:	e05a      	b.n	80032ae <handle_read_coils+0xda>

  // Read our coils values into coils_out
  for (int i = 0; i < quantity; i++) {
 80031f8:	2300      	movs	r3, #0
 80031fa:	617b      	str	r3, [r7, #20]
 80031fc:	e052      	b.n	80032a4 <handle_read_coils+0xd0>
    bool value = nmbs_bitfield_read(server_coils, address + i);
 80031fe:	89fa      	ldrh	r2, [r7, #14]
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	4413      	add	r3, r2
 8003204:	2b00      	cmp	r3, #0
 8003206:	da00      	bge.n	800320a <handle_read_coils+0x36>
 8003208:	3307      	adds	r3, #7
 800320a:	10db      	asrs	r3, r3, #3
 800320c:	461a      	mov	r2, r3
 800320e:	4b2a      	ldr	r3, [pc, #168]	; (80032b8 <handle_read_coils+0xe4>)
 8003210:	5c9b      	ldrb	r3, [r3, r2]
 8003212:	4619      	mov	r1, r3
 8003214:	89fa      	ldrh	r2, [r7, #14]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	4413      	add	r3, r2
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	fa41 f303 	asr.w	r3, r1, r3
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	bf14      	ite	ne
 800322a:	2301      	movne	r3, #1
 800322c:	2300      	moveq	r3, #0
 800322e:	74fb      	strb	r3, [r7, #19]
    nmbs_bitfield_write(coils_out, i, value);
 8003230:	7cfb      	ldrb	r3, [r7, #19]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d014      	beq.n	8003260 <handle_read_coils+0x8c>
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2b00      	cmp	r3, #0
 800323a:	da00      	bge.n	800323e <handle_read_coils+0x6a>
 800323c:	3307      	adds	r3, #7
 800323e:	10db      	asrs	r3, r3, #3
 8003240:	461a      	mov	r2, r3
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	4413      	add	r3, r2
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	b25a      	sxtb	r2, r3
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	2101      	movs	r1, #1
 8003252:	fa01 f303 	lsl.w	r3, r1, r3
 8003256:	b25b      	sxtb	r3, r3
 8003258:	4313      	orrs	r3, r2
 800325a:	b25b      	sxtb	r3, r3
 800325c:	b2da      	uxtb	r2, r3
 800325e:	e015      	b.n	800328c <handle_read_coils+0xb8>
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	2b00      	cmp	r3, #0
 8003264:	da00      	bge.n	8003268 <handle_read_coils+0x94>
 8003266:	3307      	adds	r3, #7
 8003268:	10db      	asrs	r3, r3, #3
 800326a:	461a      	mov	r2, r3
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	4413      	add	r3, r2
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	b25a      	sxtb	r2, r3
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	2101      	movs	r1, #1
 800327c:	fa01 f303 	lsl.w	r3, r1, r3
 8003280:	b25b      	sxtb	r3, r3
 8003282:	43db      	mvns	r3, r3
 8003284:	b25b      	sxtb	r3, r3
 8003286:	4013      	ands	r3, r2
 8003288:	b25b      	sxtb	r3, r3
 800328a:	b2da      	uxtb	r2, r3
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	2b00      	cmp	r3, #0
 8003290:	da00      	bge.n	8003294 <handle_read_coils+0xc0>
 8003292:	3307      	adds	r3, #7
 8003294:	10db      	asrs	r3, r3, #3
 8003296:	4619      	mov	r1, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	440b      	add	r3, r1
 800329c:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < quantity; i++) {
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	3301      	adds	r3, #1
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	89bb      	ldrh	r3, [r7, #12]
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	dba8      	blt.n	80031fe <handle_read_coils+0x2a>
  }

  return NMBS_ERROR_NONE;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	371c      	adds	r7, #28
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr
 80032b8:	20000654 	.word	0x20000654

080032bc <handle_write_multiple_coils>:


nmbs_error handle_write_multiple_coils(uint16_t address, uint16_t quantity, const nmbs_bitfield coils, uint8_t unit_id, void *arg) {
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60ba      	str	r2, [r7, #8]
 80032c4:	461a      	mov	r2, r3
 80032c6:	4603      	mov	r3, r0
 80032c8:	81fb      	strh	r3, [r7, #14]
 80032ca:	460b      	mov	r3, r1
 80032cc:	81bb      	strh	r3, [r7, #12]
 80032ce:	4613      	mov	r3, r2
 80032d0:	71fb      	strb	r3, [r7, #7]
  if (address + quantity > COILS_ADDR_MAX + 1)
 80032d2:	89fa      	ldrh	r2, [r7, #14]
 80032d4:	89bb      	ldrh	r3, [r7, #12]
 80032d6:	4413      	add	r3, r2
 80032d8:	2b10      	cmp	r3, #16
 80032da:	dd01      	ble.n	80032e0 <handle_write_multiple_coils+0x24>
    return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 80032dc:	2302      	movs	r3, #2
 80032de:	e058      	b.n	8003392 <handle_write_multiple_coils+0xd6>

  // Write coils values to our server_coils
  for (int i = 0; i < quantity; i++) {
 80032e0:	2300      	movs	r3, #0
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	e050      	b.n	8003388 <handle_write_multiple_coils+0xcc>
    nmbs_bitfield_write(server_coils, address + i, nmbs_bitfield_read(coils, i));
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	da00      	bge.n	80032ee <handle_write_multiple_coils+0x32>
 80032ec:	3307      	adds	r3, #7
 80032ee:	10db      	asrs	r3, r3, #3
 80032f0:	461a      	mov	r2, r3
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	4413      	add	r3, r2
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	461a      	mov	r2, r3
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	fa42 f303 	asr.w	r3, r2, r3
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d017      	beq.n	800333c <handle_write_multiple_coils+0x80>
 800330c:	89fa      	ldrh	r2, [r7, #14]
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	4413      	add	r3, r2
 8003312:	2b00      	cmp	r3, #0
 8003314:	da00      	bge.n	8003318 <handle_write_multiple_coils+0x5c>
 8003316:	3307      	adds	r3, #7
 8003318:	10db      	asrs	r3, r3, #3
 800331a:	461a      	mov	r2, r3
 800331c:	4b1f      	ldr	r3, [pc, #124]	; (800339c <handle_write_multiple_coils+0xe0>)
 800331e:	5c9b      	ldrb	r3, [r3, r2]
 8003320:	b25a      	sxtb	r2, r3
 8003322:	89f9      	ldrh	r1, [r7, #14]
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	440b      	add	r3, r1
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	2101      	movs	r1, #1
 800332e:	fa01 f303 	lsl.w	r3, r1, r3
 8003332:	b25b      	sxtb	r3, r3
 8003334:	4313      	orrs	r3, r2
 8003336:	b25b      	sxtb	r3, r3
 8003338:	b2da      	uxtb	r2, r3
 800333a:	e018      	b.n	800336e <handle_write_multiple_coils+0xb2>
 800333c:	89fa      	ldrh	r2, [r7, #14]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	4413      	add	r3, r2
 8003342:	2b00      	cmp	r3, #0
 8003344:	da00      	bge.n	8003348 <handle_write_multiple_coils+0x8c>
 8003346:	3307      	adds	r3, #7
 8003348:	10db      	asrs	r3, r3, #3
 800334a:	461a      	mov	r2, r3
 800334c:	4b13      	ldr	r3, [pc, #76]	; (800339c <handle_write_multiple_coils+0xe0>)
 800334e:	5c9b      	ldrb	r3, [r3, r2]
 8003350:	b25a      	sxtb	r2, r3
 8003352:	89f9      	ldrh	r1, [r7, #14]
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	440b      	add	r3, r1
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	2101      	movs	r1, #1
 800335e:	fa01 f303 	lsl.w	r3, r1, r3
 8003362:	b25b      	sxtb	r3, r3
 8003364:	43db      	mvns	r3, r3
 8003366:	b25b      	sxtb	r3, r3
 8003368:	4013      	ands	r3, r2
 800336a:	b25b      	sxtb	r3, r3
 800336c:	b2da      	uxtb	r2, r3
 800336e:	89f9      	ldrh	r1, [r7, #14]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	440b      	add	r3, r1
 8003374:	2b00      	cmp	r3, #0
 8003376:	da00      	bge.n	800337a <handle_write_multiple_coils+0xbe>
 8003378:	3307      	adds	r3, #7
 800337a:	10db      	asrs	r3, r3, #3
 800337c:	4619      	mov	r1, r3
 800337e:	4b07      	ldr	r3, [pc, #28]	; (800339c <handle_write_multiple_coils+0xe0>)
 8003380:	545a      	strb	r2, [r3, r1]
  for (int i = 0; i < quantity; i++) {
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	3301      	adds	r3, #1
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	89bb      	ldrh	r3, [r7, #12]
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	429a      	cmp	r2, r3
 800338e:	dbaa      	blt.n	80032e6 <handle_write_multiple_coils+0x2a>
  }

  return NMBS_ERROR_NONE;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	371c      	adds	r7, #28
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr
 800339c:	20000654 	.word	0x20000654

080033a0 <handler_read_holding_registers>:


nmbs_error handler_read_holding_registers(uint16_t address, uint16_t quantity, uint16_t* registers_out, uint8_t unit_id, void *arg) {
 80033a0:	b480      	push	{r7}
 80033a2:	b087      	sub	sp, #28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60ba      	str	r2, [r7, #8]
 80033a8:	461a      	mov	r2, r3
 80033aa:	4603      	mov	r3, r0
 80033ac:	81fb      	strh	r3, [r7, #14]
 80033ae:	460b      	mov	r3, r1
 80033b0:	81bb      	strh	r3, [r7, #12]
 80033b2:	4613      	mov	r3, r2
 80033b4:	71fb      	strb	r3, [r7, #7]
  if (address + quantity > HOLD_REGS_ADDR_MAX + 1)
 80033b6:	89fa      	ldrh	r2, [r7, #14]
 80033b8:	89bb      	ldrh	r3, [r7, #12]
 80033ba:	4413      	add	r3, r2
 80033bc:	2b0b      	cmp	r3, #11
 80033be:	dd01      	ble.n	80033c4 <handler_read_holding_registers+0x24>
    return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 80033c0:	2302      	movs	r3, #2
 80033c2:	e015      	b.n	80033f0 <handler_read_holding_registers+0x50>

  // Read our registers values into registers_out
  for (int i = 0; i < quantity; i++)
 80033c4:	2300      	movs	r3, #0
 80033c6:	617b      	str	r3, [r7, #20]
 80033c8:	e00d      	b.n	80033e6 <handler_read_holding_registers+0x46>
    registers_out[i] = server_holding_registers[address + i];
 80033ca:	89fa      	ldrh	r2, [r7, #14]
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	441a      	add	r2, r3
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	68b9      	ldr	r1, [r7, #8]
 80033d6:	440b      	add	r3, r1
 80033d8:	4908      	ldr	r1, [pc, #32]	; (80033fc <handler_read_holding_registers+0x5c>)
 80033da:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80033de:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < quantity; i++)
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	3301      	adds	r3, #1
 80033e4:	617b      	str	r3, [r7, #20]
 80033e6:	89bb      	ldrh	r3, [r7, #12]
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	dbed      	blt.n	80033ca <handler_read_holding_registers+0x2a>

  return NMBS_ERROR_NONE;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	371c      	adds	r7, #28
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bc80      	pop	{r7}
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	20000010 	.word	0x20000010

08003400 <handle_write_multiple_registers>:


nmbs_error handle_write_multiple_registers(uint16_t address, uint16_t quantity, const uint16_t* registers, uint8_t unit_id, void *arg) {
 8003400:	b480      	push	{r7}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
 8003406:	60ba      	str	r2, [r7, #8]
 8003408:	461a      	mov	r2, r3
 800340a:	4603      	mov	r3, r0
 800340c:	81fb      	strh	r3, [r7, #14]
 800340e:	460b      	mov	r3, r1
 8003410:	81bb      	strh	r3, [r7, #12]
 8003412:	4613      	mov	r3, r2
 8003414:	71fb      	strb	r3, [r7, #7]
  if (address + quantity > HOLD_REGS_ADDR_MAX + 1)
 8003416:	89fa      	ldrh	r2, [r7, #14]
 8003418:	89bb      	ldrh	r3, [r7, #12]
 800341a:	4413      	add	r3, r2
 800341c:	2b0b      	cmp	r3, #11
 800341e:	dd01      	ble.n	8003424 <handle_write_multiple_registers+0x24>
    return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 8003420:	2302      	movs	r3, #2
 8003422:	e015      	b.n	8003450 <handle_write_multiple_registers+0x50>

  // Write registers values to our server_holding_registers
  for (int i = 0; i < quantity; i++)
 8003424:	2300      	movs	r3, #0
 8003426:	617b      	str	r3, [r7, #20]
 8003428:	e00d      	b.n	8003446 <handle_write_multiple_registers+0x46>
	  server_holding_registers[address + i] = registers[i];
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	441a      	add	r2, r3
 8003432:	89f9      	ldrh	r1, [r7, #14]
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	440b      	add	r3, r1
 8003438:	8811      	ldrh	r1, [r2, #0]
 800343a:	4a08      	ldr	r2, [pc, #32]	; (800345c <handle_write_multiple_registers+0x5c>)
 800343c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < quantity; i++)
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	3301      	adds	r3, #1
 8003444:	617b      	str	r3, [r7, #20]
 8003446:	89bb      	ldrh	r3, [r7, #12]
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	429a      	cmp	r2, r3
 800344c:	dbed      	blt.n	800342a <handle_write_multiple_registers+0x2a>

  return NMBS_ERROR_NONE;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	371c      	adds	r7, #28
 8003454:	46bd      	mov	sp, r7
 8003456:	bc80      	pop	{r7}
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	20000010 	.word	0x20000010

08003460 <handle_write_single_registers>:

nmbs_error handle_write_single_registers(uint16_t address, uint16_t value, uint8_t unit_id, void *arg) {
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	607b      	str	r3, [r7, #4]
 8003468:	4603      	mov	r3, r0
 800346a:	81fb      	strh	r3, [r7, #14]
 800346c:	460b      	mov	r3, r1
 800346e:	81bb      	strh	r3, [r7, #12]
 8003470:	4613      	mov	r3, r2
 8003472:	72fb      	strb	r3, [r7, #11]
  if (address > HOLD_REGS_ADDR_MAX + 1)
 8003474:	89fb      	ldrh	r3, [r7, #14]
 8003476:	2b0b      	cmp	r3, #11
 8003478:	d901      	bls.n	800347e <handle_write_single_registers+0x1e>
    return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 800347a:	2302      	movs	r3, #2
 800347c:	e005      	b.n	800348a <handle_write_single_registers+0x2a>

  // Write register value to our server_holding_register

	  server_holding_registers[address] = value;
 800347e:	89fb      	ldrh	r3, [r7, #14]
 8003480:	4904      	ldr	r1, [pc, #16]	; (8003494 <handle_write_single_registers+0x34>)
 8003482:	89ba      	ldrh	r2, [r7, #12]
 8003484:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  return NMBS_ERROR_NONE;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr
 8003494:	20000010 	.word	0x20000010

08003498 <handler_read_input_registers>:


nmbs_error handler_read_input_registers(uint16_t address, uint16_t quantity, uint16_t* registers_out, uint8_t unit_id, void *arg) {
 8003498:	b480      	push	{r7}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	60ba      	str	r2, [r7, #8]
 80034a0:	461a      	mov	r2, r3
 80034a2:	4603      	mov	r3, r0
 80034a4:	81fb      	strh	r3, [r7, #14]
 80034a6:	460b      	mov	r3, r1
 80034a8:	81bb      	strh	r3, [r7, #12]
 80034aa:	4613      	mov	r3, r2
 80034ac:	71fb      	strb	r3, [r7, #7]
  if (address + quantity > INPUT_REGS_ADDR_MAX + 1)
 80034ae:	89fa      	ldrh	r2, [r7, #14]
 80034b0:	89bb      	ldrh	r3, [r7, #12]
 80034b2:	4413      	add	r3, r2
 80034b4:	2b0b      	cmp	r3, #11
 80034b6:	dd01      	ble.n	80034bc <handler_read_input_registers+0x24>
    return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 80034b8:	2302      	movs	r3, #2
 80034ba:	e015      	b.n	80034e8 <handler_read_input_registers+0x50>

  // Read our registers values into registers_out
  for (int i = 0; i < quantity; i++)
 80034bc:	2300      	movs	r3, #0
 80034be:	617b      	str	r3, [r7, #20]
 80034c0:	e00d      	b.n	80034de <handler_read_input_registers+0x46>
    registers_out[i] = server_input_registers[address + i];
 80034c2:	89fa      	ldrh	r2, [r7, #14]
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	441a      	add	r2, r3
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	68b9      	ldr	r1, [r7, #8]
 80034ce:	440b      	add	r3, r1
 80034d0:	4908      	ldr	r1, [pc, #32]	; (80034f4 <handler_read_input_registers+0x5c>)
 80034d2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80034d6:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < quantity; i++)
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	3301      	adds	r3, #1
 80034dc:	617b      	str	r3, [r7, #20]
 80034de:	89bb      	ldrh	r3, [r7, #12]
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	dbed      	blt.n	80034c2 <handler_read_input_registers+0x2a>

  return NMBS_ERROR_NONE;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	371c      	adds	r7, #28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	20000024 	.word	0x20000024

080034f8 <get_1>:
#else
#define NMBS_DEBUG_PRINT(...) (void) (0)
#endif


static uint8_t get_1(nmbs_t* nmbs) {
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
    uint8_t result = nmbs->msg.buf[nmbs->msg.buf_idx];
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8003506:	461a      	mov	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	5c9b      	ldrb	r3, [r3, r2]
 800350c:	73fb      	strb	r3, [r7, #15]
    nmbs->msg.buf_idx++;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8003514:	3301      	adds	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
    return result;
 800351e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	bc80      	pop	{r7}
 8003528:	4770      	bx	lr

0800352a <put_1>:


static void put_1(nmbs_t* nmbs, uint8_t data) {
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
 8003532:	460b      	mov	r3, r1
 8003534:	70fb      	strb	r3, [r7, #3]
    nmbs->msg.buf[nmbs->msg.buf_idx] = data;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800353c:	4619      	mov	r1, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	78fa      	ldrb	r2, [r7, #3]
 8003542:	545a      	strb	r2, [r3, r1]
    nmbs->msg.buf_idx++;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800354a:	3301      	adds	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	bc80      	pop	{r7}
 800355c:	4770      	bx	lr

0800355e <discard_1>:


static void discard_1(nmbs_t* nmbs) {
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
    nmbs->msg.buf_idx++;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800356c:	3301      	adds	r3, #1
 800356e:	b29a      	uxth	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr

08003580 <discard_n>:


static void discard_n(nmbs_t* nmbs, uint16_t n) {
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	807b      	strh	r3, [r7, #2]
    nmbs->msg.buf_idx += n;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 8003592:	887b      	ldrh	r3, [r7, #2]
 8003594:	4413      	add	r3, r2
 8003596:	b29a      	uxth	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bc80      	pop	{r7}
 80035a6:	4770      	bx	lr

080035a8 <get_2>:


static uint16_t get_2(nmbs_t* nmbs) {
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
    uint16_t result =
            ((uint16_t) nmbs->msg.buf[nmbs->msg.buf_idx]) << 8 | (uint16_t) nmbs->msg.buf[nmbs->msg.buf_idx + 1];
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80035b6:	461a      	mov	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	5c9b      	ldrb	r3, [r3, r2]
 80035bc:	021b      	lsls	r3, r3, #8
 80035be:	b21a      	sxth	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80035c6:	3301      	adds	r3, #1
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	5ccb      	ldrb	r3, [r1, r3]
 80035cc:	b21b      	sxth	r3, r3
 80035ce:	4313      	orrs	r3, r2
 80035d0:	b21b      	sxth	r3, r3
    uint16_t result =
 80035d2:	81fb      	strh	r3, [r7, #14]
    nmbs->msg.buf_idx += 2;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80035da:	3302      	adds	r3, #2
 80035dc:	b29a      	uxth	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
    return result;
 80035e4:	89fb      	ldrh	r3, [r7, #14]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr

080035f0 <put_2>:


static void put_2(nmbs_t* nmbs, uint16_t data) {
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	460b      	mov	r3, r1
 80035fa:	807b      	strh	r3, [r7, #2]
    nmbs->msg.buf[nmbs->msg.buf_idx] = (uint8_t) ((data >> 8) & 0xFFU);
 80035fc:	887b      	ldrh	r3, [r7, #2]
 80035fe:	0a1b      	lsrs	r3, r3, #8
 8003600:	b299      	uxth	r1, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8003608:	461a      	mov	r2, r3
 800360a:	b2c9      	uxtb	r1, r1
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	5499      	strb	r1, [r3, r2]
    nmbs->msg.buf[nmbs->msg.buf_idx + 1] = (uint8_t) data;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8003616:	3301      	adds	r3, #1
 8003618:	887a      	ldrh	r2, [r7, #2]
 800361a:	b2d1      	uxtb	r1, r2
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	54d1      	strb	r1, [r2, r3]
    nmbs->msg.buf_idx += 2;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8003626:	3302      	adds	r3, #2
 8003628:	b29a      	uxth	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr

0800363a <get_n>:


static uint8_t* get_n(nmbs_t* nmbs, uint16_t n) {
 800363a:	b480      	push	{r7}
 800363c:	b085      	sub	sp, #20
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
 8003642:	460b      	mov	r3, r1
 8003644:	807b      	strh	r3, [r7, #2]
    uint8_t* msg_buf_ptr = nmbs->msg.buf + nmbs->msg.buf_idx;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	f8b2 2104 	ldrh.w	r2, [r2, #260]	; 0x104
 800364e:	4413      	add	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]
    nmbs->msg.buf_idx += n;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 8003658:	887b      	ldrh	r3, [r7, #2]
 800365a:	4413      	add	r3, r2
 800365c:	b29a      	uxth	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
    return msg_buf_ptr;
 8003664:	68fb      	ldr	r3, [r7, #12]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr

08003670 <get_regs>:


static uint16_t* get_regs(nmbs_t* nmbs, uint16_t n) {
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	460b      	mov	r3, r1
 800367a:	807b      	strh	r3, [r7, #2]
    uint16_t* msg_buf_ptr = (uint16_t*) (nmbs->msg.buf + nmbs->msg.buf_idx);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	f8b2 2104 	ldrh.w	r2, [r2, #260]	; 0x104
 8003684:	4413      	add	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]
    nmbs->msg.buf_idx += n * 2;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 800368e:	887b      	ldrh	r3, [r7, #2]
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	b29b      	uxth	r3, r3
 8003694:	4413      	add	r3, r2
 8003696:	b29a      	uxth	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
    while (n--) {
 800369e:	e016      	b.n	80036ce <get_regs+0x5e>
        msg_buf_ptr[n] = (msg_buf_ptr[n] << 8) | ((msg_buf_ptr[n] >> 8) & 0xFF);
 80036a0:	887b      	ldrh	r3, [r7, #2]
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	4413      	add	r3, r2
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	021b      	lsls	r3, r3, #8
 80036ac:	b21a      	sxth	r2, r3
 80036ae:	887b      	ldrh	r3, [r7, #2]
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	68f9      	ldr	r1, [r7, #12]
 80036b4:	440b      	add	r3, r1
 80036b6:	881b      	ldrh	r3, [r3, #0]
 80036b8:	0a1b      	lsrs	r3, r3, #8
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	b21b      	sxth	r3, r3
 80036be:	4313      	orrs	r3, r2
 80036c0:	b219      	sxth	r1, r3
 80036c2:	887b      	ldrh	r3, [r7, #2]
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	4413      	add	r3, r2
 80036ca:	b28a      	uxth	r2, r1
 80036cc:	801a      	strh	r2, [r3, #0]
    while (n--) {
 80036ce:	887b      	ldrh	r3, [r7, #2]
 80036d0:	1e5a      	subs	r2, r3, #1
 80036d2:	807a      	strh	r2, [r7, #2]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1e3      	bne.n	80036a0 <get_regs+0x30>
    }
    return msg_buf_ptr;
 80036d8:	68fb      	ldr	r3, [r7, #12]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr

080036e4 <swap_regs>:
        msg_buf_ptr[n] = (data[n] << 8) | ((data[n] >> 8) & 0xFF);
    }
}


static void swap_regs(uint16_t* data, uint16_t n) {
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	807b      	strh	r3, [r7, #2]
    while (n--) {
 80036f0:	e016      	b.n	8003720 <swap_regs+0x3c>
        data[n] = (data[n] << 8) | ((data[n] >> 8) & 0xFF);
 80036f2:	887b      	ldrh	r3, [r7, #2]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	4413      	add	r3, r2
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	021b      	lsls	r3, r3, #8
 80036fe:	b21a      	sxth	r2, r3
 8003700:	887b      	ldrh	r3, [r7, #2]
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	440b      	add	r3, r1
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	0a1b      	lsrs	r3, r3, #8
 800370c:	b29b      	uxth	r3, r3
 800370e:	b21b      	sxth	r3, r3
 8003710:	4313      	orrs	r3, r2
 8003712:	b219      	sxth	r1, r3
 8003714:	887b      	ldrh	r3, [r7, #2]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	4413      	add	r3, r2
 800371c:	b28a      	uxth	r2, r1
 800371e:	801a      	strh	r2, [r3, #0]
    while (n--) {
 8003720:	887b      	ldrh	r3, [r7, #2]
 8003722:	1e5a      	subs	r2, r3, #1
 8003724:	807a      	strh	r2, [r7, #2]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1e3      	bne.n	80036f2 <swap_regs+0xe>
    }
}
 800372a:	bf00      	nop
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	bc80      	pop	{r7}
 8003734:	4770      	bx	lr

08003736 <msg_buf_reset>:


static void msg_buf_reset(nmbs_t* nmbs) {
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
    nmbs->msg.buf_idx = 0;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr

08003750 <msg_state_reset>:


static void msg_state_reset(nmbs_t* nmbs) {
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
    msg_buf_reset(nmbs);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f7ff ffec 	bl	8003736 <msg_buf_reset>
    nmbs->msg.unit_id = 0;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    nmbs->msg.fc = 0;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    nmbs->msg.transaction_id = 0;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
    nmbs->msg.broadcast = false;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
    nmbs->msg.ignored = false;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
}
 8003786:	bf00      	nop
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <nmbs_create>:
        nmbs->msg.broadcast = true;
}
#endif


nmbs_error nmbs_create(nmbs_t* nmbs, const nmbs_platform_conf* platform_conf) {
 800378e:	b590      	push	{r4, r7, lr}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
 8003796:	6039      	str	r1, [r7, #0]
    if (!nmbs)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d102      	bne.n	80037a4 <nmbs_create+0x16>
        return NMBS_ERROR_INVALID_ARGUMENT;
 800379e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037a2:	e034      	b.n	800380e <nmbs_create+0x80>

    memset(nmbs, 0, sizeof(nmbs_t));
 80037a4:	f44f 72aa 	mov.w	r2, #340	; 0x154
 80037a8:	2100      	movs	r1, #0
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f002 fc7a 	bl	80060a4 <memset>

    nmbs->byte_timeout_ms = -1;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037b6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    nmbs->read_timeout_ms = -1;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037c0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

    if (!platform_conf)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d102      	bne.n	80037d0 <nmbs_create+0x42>
        return NMBS_ERROR_INVALID_ARGUMENT;
 80037ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037ce:	e01e      	b.n	800380e <nmbs_create+0x80>

    if (platform_conf->transport != NMBS_TRANSPORT_RTU && platform_conf->transport != NMBS_TRANSPORT_TCP)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d006      	beq.n	80037e6 <nmbs_create+0x58>
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d002      	beq.n	80037e6 <nmbs_create+0x58>
        return NMBS_ERROR_INVALID_ARGUMENT;
 80037e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037e4:	e013      	b.n	800380e <nmbs_create+0x80>

    if (!platform_conf->read || !platform_conf->write)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <nmbs_create+0x68>
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d102      	bne.n	80037fc <nmbs_create+0x6e>
        return NMBS_ERROR_INVALID_ARGUMENT;
 80037f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037fa:	e008      	b.n	800380e <nmbs_create+0x80>

    nmbs->platform = *platform_conf;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8003804:	4613      	mov	r3, r2
 8003806:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003808:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    return NMBS_ERROR_NONE;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	bd90      	pop	{r4, r7, pc}

08003816 <nmbs_set_read_timeout>:


void nmbs_set_read_timeout(nmbs_t* nmbs, int32_t timeout_ms) {
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
 800381e:	6039      	str	r1, [r7, #0]
    nmbs->read_timeout_ms = timeout_ms;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	bc80      	pop	{r7}
 8003830:	4770      	bx	lr

08003832 <nmbs_set_byte_timeout>:


void nmbs_set_byte_timeout(nmbs_t* nmbs, int32_t timeout_ms) {
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
 800383a:	6039      	str	r1, [r7, #0]
    nmbs->byte_timeout_ms = timeout_ms;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr

0800384e <nmbs_crc_calc>:
void nmbs_set_platform_arg(nmbs_t* nmbs, void* arg) {
    nmbs->platform.arg = arg;
}


uint16_t nmbs_crc_calc(const uint8_t* data, uint32_t length) {
 800384e:	b480      	push	{r7}
 8003850:	b087      	sub	sp, #28
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0xFFFF;
 8003858:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800385c:	82fb      	strh	r3, [r7, #22]
    for (uint32_t i = 0; i < length; i++) {
 800385e:	2300      	movs	r3, #0
 8003860:	613b      	str	r3, [r7, #16]
 8003862:	e026      	b.n	80038b2 <nmbs_crc_calc+0x64>
        crc ^= (uint16_t) data[i];
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	4413      	add	r3, r2
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	b29a      	uxth	r2, r3
 800386e:	8afb      	ldrh	r3, [r7, #22]
 8003870:	4053      	eors	r3, r2
 8003872:	82fb      	strh	r3, [r7, #22]
        for (int j = 8; j != 0; j--) {
 8003874:	2308      	movs	r3, #8
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	e015      	b.n	80038a6 <nmbs_crc_calc+0x58>
            if ((crc & 0x0001) != 0) {
 800387a:	8afb      	ldrh	r3, [r7, #22]
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00a      	beq.n	800389a <nmbs_crc_calc+0x4c>
                crc >>= 1;
 8003884:	8afb      	ldrh	r3, [r7, #22]
 8003886:	085b      	lsrs	r3, r3, #1
 8003888:	82fb      	strh	r3, [r7, #22]
                crc ^= 0xA001;
 800388a:	8afb      	ldrh	r3, [r7, #22]
 800388c:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8003890:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8003894:	43db      	mvns	r3, r3
 8003896:	82fb      	strh	r3, [r7, #22]
 8003898:	e002      	b.n	80038a0 <nmbs_crc_calc+0x52>
            }
            else
                crc >>= 1;
 800389a:	8afb      	ldrh	r3, [r7, #22]
 800389c:	085b      	lsrs	r3, r3, #1
 800389e:	82fb      	strh	r3, [r7, #22]
        for (int j = 8; j != 0; j--) {
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1e6      	bne.n	800387a <nmbs_crc_calc+0x2c>
    for (uint32_t i = 0; i < length; i++) {
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	3301      	adds	r3, #1
 80038b0:	613b      	str	r3, [r7, #16]
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d3d4      	bcc.n	8003864 <nmbs_crc_calc+0x16>
        }
    }

    return (uint16_t) (crc << 8) | (uint16_t) (crc >> 8);
 80038ba:	8afb      	ldrh	r3, [r7, #22]
 80038bc:	ba5b      	rev16	r3, r3
 80038be:	b29b      	uxth	r3, r3
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	371c      	adds	r7, #28
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr

080038ca <recv>:


static nmbs_error recv(nmbs_t* nmbs, uint16_t count) {
 80038ca:	b590      	push	{r4, r7, lr}
 80038cc:	b085      	sub	sp, #20
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	460b      	mov	r3, r1
 80038d4:	807b      	strh	r3, [r7, #2]
    int32_t ret =
            nmbs->platform.read(nmbs->msg.buf + nmbs->msg.buf_idx, count, nmbs->byte_timeout_ms, nmbs->platform.arg);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	f8b2 2104 	ldrh.w	r2, [r2, #260]	; 0x104
 80038e4:	1898      	adds	r0, r3, r2
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80038f2:	8879      	ldrh	r1, [r7, #2]
 80038f4:	47a0      	blx	r4
 80038f6:	60f8      	str	r0, [r7, #12]

    if (ret == count)
 80038f8:	887b      	ldrh	r3, [r7, #2]
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d101      	bne.n	8003904 <recv+0x3a>
        return NMBS_ERROR_NONE;
 8003900:	2300      	movs	r3, #0
 8003902:	e00e      	b.n	8003922 <recv+0x58>

    if (ret < count) {
 8003904:	887b      	ldrh	r3, [r7, #2]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	429a      	cmp	r2, r3
 800390a:	da08      	bge.n	800391e <recv+0x54>
        if (ret < 0)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2b00      	cmp	r3, #0
 8003910:	da02      	bge.n	8003918 <recv+0x4e>
            return NMBS_ERROR_TRANSPORT;
 8003912:	f06f 0303 	mvn.w	r3, #3
 8003916:	e004      	b.n	8003922 <recv+0x58>

        return NMBS_ERROR_TIMEOUT;
 8003918:	f06f 0302 	mvn.w	r3, #2
 800391c:	e001      	b.n	8003922 <recv+0x58>
    }

    return NMBS_ERROR_TRANSPORT;
 800391e:	f06f 0303 	mvn.w	r3, #3
}
 8003922:	4618      	mov	r0, r3
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	bd90      	pop	{r4, r7, pc}

0800392a <send>:


static nmbs_error send(nmbs_t* nmbs, uint16_t count) {
 800392a:	b590      	push	{r4, r7, lr}
 800392c:	b085      	sub	sp, #20
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
 8003932:	460b      	mov	r3, r1
 8003934:	807b      	strh	r3, [r7, #2]
    int32_t ret = nmbs->platform.write(nmbs->msg.buf, count, nmbs->byte_timeout_ms, nmbs->platform.arg);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800394a:	8879      	ldrh	r1, [r7, #2]
 800394c:	47a0      	blx	r4
 800394e:	60f8      	str	r0, [r7, #12]

    if (ret == count)
 8003950:	887b      	ldrh	r3, [r7, #2]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	429a      	cmp	r2, r3
 8003956:	d101      	bne.n	800395c <send+0x32>
        return NMBS_ERROR_NONE;
 8003958:	2300      	movs	r3, #0
 800395a:	e00e      	b.n	800397a <send+0x50>

    if (ret < count) {
 800395c:	887b      	ldrh	r3, [r7, #2]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	429a      	cmp	r2, r3
 8003962:	da08      	bge.n	8003976 <send+0x4c>
        if (ret < 0)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2b00      	cmp	r3, #0
 8003968:	da02      	bge.n	8003970 <send+0x46>
            return NMBS_ERROR_TRANSPORT;
 800396a:	f06f 0303 	mvn.w	r3, #3
 800396e:	e004      	b.n	800397a <send+0x50>

        return NMBS_ERROR_TIMEOUT;
 8003970:	f06f 0302 	mvn.w	r3, #2
 8003974:	e001      	b.n	800397a <send+0x50>
    }

    return NMBS_ERROR_TRANSPORT;
 8003976:	f06f 0303 	mvn.w	r3, #3
}
 800397a:	4618      	mov	r0, r3
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	bd90      	pop	{r4, r7, pc}

08003982 <recv_msg_footer>:


static nmbs_error recv_msg_footer(nmbs_t* nmbs) {
 8003982:	b580      	push	{r7, lr}
 8003984:	b084      	sub	sp, #16
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
    NMBS_DEBUG_PRINT("\n");

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8003990:	2b01      	cmp	r3, #1
 8003992:	d122      	bne.n	80039da <recv_msg_footer+0x58>
        uint16_t crc = nmbs_crc_calc(nmbs->msg.buf, nmbs->msg.buf_idx);
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800399c:	4619      	mov	r1, r3
 800399e:	4610      	mov	r0, r2
 80039a0:	f7ff ff55 	bl	800384e <nmbs_crc_calc>
 80039a4:	4603      	mov	r3, r0
 80039a6:	81fb      	strh	r3, [r7, #14]

        nmbs_error err = recv(nmbs, 2);
 80039a8:	2102      	movs	r1, #2
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7ff ff8d 	bl	80038ca <recv>
 80039b0:	4603      	mov	r3, r0
 80039b2:	737b      	strb	r3, [r7, #13]
        if (err != NMBS_ERROR_NONE)
 80039b4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <recv_msg_footer+0x40>
            return err;
 80039bc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80039c0:	e00c      	b.n	80039dc <recv_msg_footer+0x5a>

        uint16_t recv_crc = get_2(nmbs);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff fdf0 	bl	80035a8 <get_2>
 80039c8:	4603      	mov	r3, r0
 80039ca:	817b      	strh	r3, [r7, #10]

        if (recv_crc != crc)
 80039cc:	897a      	ldrh	r2, [r7, #10]
 80039ce:	89fb      	ldrh	r3, [r7, #14]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d002      	beq.n	80039da <recv_msg_footer+0x58>
            return NMBS_ERROR_CRC;
 80039d4:	f06f 0304 	mvn.w	r3, #4
 80039d8:	e000      	b.n	80039dc <recv_msg_footer+0x5a>
    }

    return NMBS_ERROR_NONE;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <recv_msg_header>:


static nmbs_error recv_msg_header(nmbs_t* nmbs, bool* first_byte_received) {
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
    // We wait for the read timeout here, just for the first message byte
    int32_t old_byte_timeout = nmbs->byte_timeout_ms;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80039f4:	617b      	str	r3, [r7, #20]
    nmbs->byte_timeout_ms = nmbs->read_timeout_ms;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138

    msg_state_reset(nmbs);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7ff fea4 	bl	8003750 <msg_state_reset>

    *first_byte_received = false;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	701a      	strb	r2, [r3, #0]

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d131      	bne.n	8003a7c <recv_msg_header+0x98>
        nmbs_error err = recv(nmbs, 1);
 8003a18:	2101      	movs	r1, #1
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7ff ff55 	bl	80038ca <recv>
 8003a20:	4603      	mov	r3, r0
 8003a22:	737b      	strb	r3, [r7, #13]

        nmbs->byte_timeout_ms = old_byte_timeout;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138

        if (err != NMBS_ERROR_NONE)
 8003a2c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <recv_msg_header+0x56>
            return err;
 8003a34:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003a38:	e07b      	b.n	8003b32 <recv_msg_header+0x14e>

        *first_byte_received = true;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	701a      	strb	r2, [r3, #0]

        nmbs->msg.unit_id = get_1(nmbs);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff fd59 	bl	80034f8 <get_1>
 8003a46:	4603      	mov	r3, r0
 8003a48:	461a      	mov	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

        err = recv(nmbs, 1);
 8003a50:	2101      	movs	r1, #1
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7ff ff39 	bl	80038ca <recv>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	737b      	strb	r3, [r7, #13]
        if (err != NMBS_ERROR_NONE)
 8003a5c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d002      	beq.n	8003a6a <recv_msg_header+0x86>
            return err;
 8003a64:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003a68:	e063      	b.n	8003b32 <recv_msg_header+0x14e>

        nmbs->msg.fc = get_1(nmbs);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff fd44 	bl	80034f8 <get_1>
 8003a70:	4603      	mov	r3, r0
 8003a72:	461a      	mov	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
 8003a7a:	e059      	b.n	8003b30 <recv_msg_header+0x14c>
    }
    else if (nmbs->platform.transport == NMBS_TRANSPORT_TCP) {
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d154      	bne.n	8003b30 <recv_msg_header+0x14c>
        nmbs_error err = recv(nmbs, 1);
 8003a86:	2101      	movs	r1, #1
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7ff ff1e 	bl	80038ca <recv>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	74fb      	strb	r3, [r7, #19]

        nmbs->byte_timeout_ms = old_byte_timeout;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138

        if (err != NMBS_ERROR_NONE)
 8003a9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <recv_msg_header+0xc4>
            return err;
 8003aa2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003aa6:	e044      	b.n	8003b32 <recv_msg_header+0x14e>

        *first_byte_received = true;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	701a      	strb	r2, [r3, #0]

        // Advance buf_idx
        discard_1(nmbs);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7ff fd55 	bl	800355e <discard_1>

        err = recv(nmbs, 7);
 8003ab4:	2107      	movs	r1, #7
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7ff ff07 	bl	80038ca <recv>
 8003abc:	4603      	mov	r3, r0
 8003abe:	74fb      	strb	r3, [r7, #19]
        if (err != NMBS_ERROR_NONE)
 8003ac0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d002      	beq.n	8003ace <recv_msg_header+0xea>
            return err;
 8003ac8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003acc:	e031      	b.n	8003b32 <recv_msg_header+0x14e>

        // Starting over
        msg_buf_reset(nmbs);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7ff fe31 	bl	8003736 <msg_buf_reset>

        nmbs->msg.transaction_id = get_2(nmbs);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7ff fd67 	bl	80035a8 <get_2>
 8003ada:	4603      	mov	r3, r0
 8003adc:	461a      	mov	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
        uint16_t protocol_id = get_2(nmbs);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7ff fd5f 	bl	80035a8 <get_2>
 8003aea:	4603      	mov	r3, r0
 8003aec:	823b      	strh	r3, [r7, #16]
        uint16_t length = get_2(nmbs);    // We should actually check the length of the request against this value
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7ff fd5a 	bl	80035a8 <get_2>
 8003af4:	4603      	mov	r3, r0
 8003af6:	81fb      	strh	r3, [r7, #14]
        nmbs->msg.unit_id = get_1(nmbs);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff fcfd 	bl	80034f8 <get_1>
 8003afe:	4603      	mov	r3, r0
 8003b00:	461a      	mov	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
        nmbs->msg.fc = get_1(nmbs);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7ff fcf5 	bl	80034f8 <get_1>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	461a      	mov	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107

        if (protocol_id != 0)
 8003b18:	8a3b      	ldrh	r3, [r7, #16]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d002      	beq.n	8003b24 <recv_msg_header+0x140>
            return NMBS_ERROR_INVALID_TCP_MBAP;
 8003b1e:	f06f 0305 	mvn.w	r3, #5
 8003b22:	e006      	b.n	8003b32 <recv_msg_header+0x14e>

        if (length > 255)
 8003b24:	89fb      	ldrh	r3, [r7, #14]
 8003b26:	2bff      	cmp	r3, #255	; 0xff
 8003b28:	d902      	bls.n	8003b30 <recv_msg_header+0x14c>
            return NMBS_ERROR_INVALID_TCP_MBAP;
 8003b2a:	f06f 0305 	mvn.w	r3, #5
 8003b2e:	e000      	b.n	8003b32 <recv_msg_header+0x14e>
    }

    return NMBS_ERROR_NONE;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3718      	adds	r7, #24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <put_msg_header>:


static void put_msg_header(nmbs_t* nmbs, uint16_t data_length) {
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b082      	sub	sp, #8
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
 8003b42:	460b      	mov	r3, r1
 8003b44:	807b      	strh	r3, [r7, #2]
    msg_buf_reset(nmbs);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7ff fdf5 	bl	8003736 <msg_buf_reset>

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d107      	bne.n	8003b66 <put_msg_header+0x2c>
        put_1(nmbs, nmbs->msg.unit_id);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7ff fce3 	bl	800352a <put_1>
 8003b64:	e01d      	b.n	8003ba2 <put_msg_header+0x68>
    }
    else if (nmbs->platform.transport == NMBS_TRANSPORT_TCP) {
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d118      	bne.n	8003ba2 <put_msg_header+0x68>
        put_2(nmbs, nmbs->msg.transaction_id);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 8003b76:	4619      	mov	r1, r3
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff fd39 	bl	80035f0 <put_2>
        put_2(nmbs, 0);
 8003b7e:	2100      	movs	r1, #0
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7ff fd35 	bl	80035f0 <put_2>
        put_2(nmbs, (uint16_t) (1 + 1 + data_length));
 8003b86:	887b      	ldrh	r3, [r7, #2]
 8003b88:	3302      	adds	r3, #2
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7ff fd2e 	bl	80035f0 <put_2>
        put_1(nmbs, nmbs->msg.unit_id);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff fcc4 	bl	800352a <put_1>
    }

    put_1(nmbs, nmbs->msg.fc);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8003ba8:	4619      	mov	r1, r3
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7ff fcbd 	bl	800352a <put_1>
}
 8003bb0:	bf00      	nop
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <send_msg>:


static nmbs_error send_msg(nmbs_t* nmbs) {
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
    NMBS_DEBUG_PRINT("\n");

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d10e      	bne.n	8003be8 <send_msg+0x30>
        uint16_t crc = nmbs_crc_calc(nmbs->msg.buf, nmbs->msg.buf_idx);
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	f7ff fe3a 	bl	800384e <nmbs_crc_calc>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	81fb      	strh	r3, [r7, #14]
        put_2(nmbs, crc);
 8003bde:	89fb      	ldrh	r3, [r7, #14]
 8003be0:	4619      	mov	r1, r3
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7ff fd04 	bl	80035f0 <put_2>
    }

    nmbs_error err = send(nmbs, nmbs->msg.buf_idx);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8003bee:	4619      	mov	r1, r3
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7ff fe9a 	bl	800392a <send>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	737b      	strb	r3, [r7, #13]

    return err;
 8003bfa:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <recv_req_header>:


#ifndef NMBS_SERVER_DISABLED
static nmbs_error recv_req_header(nmbs_t* nmbs, bool* first_byte_received) {
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b084      	sub	sp, #16
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
 8003c0e:	6039      	str	r1, [r7, #0]
    nmbs_error err = recv_msg_header(nmbs, first_byte_received);
 8003c10:	6839      	ldr	r1, [r7, #0]
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7ff fee6 	bl	80039e4 <recv_msg_header>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8003c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d002      	beq.n	8003c2a <recv_req_header+0x24>
        return err;
 8003c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c28:	e021      	b.n	8003c6e <recv_req_header+0x68>

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d11b      	bne.n	8003c6c <recv_req_header+0x66>
        // Check if request is for us
        if (nmbs->msg.unit_id == NMBS_BROADCAST_ADDRESS)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d104      	bne.n	8003c4a <recv_req_header+0x44>
            nmbs->msg.broadcast = true;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 8003c48:	e010      	b.n	8003c6c <recv_req_header+0x66>
        else if (nmbs->msg.unit_id != nmbs->address_rtu)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d004      	beq.n	8003c64 <recv_req_header+0x5e>
            nmbs->msg.ignored = true;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
 8003c62:	e003      	b.n	8003c6c <recv_req_header+0x66>
        else
            nmbs->msg.ignored = false;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
    }

    return NMBS_ERROR_NONE;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <put_res_header>:


static void put_res_header(nmbs_t* nmbs, uint16_t data_length) {
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b082      	sub	sp, #8
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	807b      	strh	r3, [r7, #2]
    put_msg_header(nmbs, data_length);
 8003c82:	887b      	ldrh	r3, [r7, #2]
 8003c84:	4619      	mov	r1, r3
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7ff ff57 	bl	8003b3a <put_msg_header>
    NMBS_DEBUG_PRINT("%d NMBS res -> address_rtu %d\tfc %d\t", nmbs->address_rtu, nmbs->address_rtu, nmbs->msg.fc);
}
 8003c8c:	bf00      	nop
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <send_exception_msg>:


static nmbs_error send_exception_msg(nmbs_t* nmbs, uint8_t exception) {
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	70fb      	strb	r3, [r7, #3]
    nmbs->msg.fc += 0x80;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8003ca6:	3b80      	subs	r3, #128	; 0x80
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    put_msg_header(nmbs, 1);
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7ff ff41 	bl	8003b3a <put_msg_header>
    put_1(nmbs, exception);
 8003cb8:	78fb      	ldrb	r3, [r7, #3]
 8003cba:	4619      	mov	r1, r3
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7ff fc34 	bl	800352a <put_1>

    NMBS_DEBUG_PRINT("%d NMBS res -> address_rtu %d\texception %d", nmbs->address_rtu, nmbs->address_rtu, exception);

    return send_msg(nmbs);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7ff ff78 	bl	8003bb8 <send_msg>
 8003cc8:	4603      	mov	r3, r0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <recv_res_header>:
#endif


static nmbs_error recv_res_header(nmbs_t* nmbs) {
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b084      	sub	sp, #16
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
    uint16_t req_transaction_id = nmbs->msg.transaction_id;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 8003ce0:	81fb      	strh	r3, [r7, #14]
    uint8_t req_unit_id = nmbs->msg.unit_id;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8003ce8:	737b      	strb	r3, [r7, #13]
    uint8_t req_fc = nmbs->msg.fc;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8003cf0:	733b      	strb	r3, [r7, #12]

    bool first_byte_received;
    nmbs_error err = recv_msg_header(nmbs, &first_byte_received);
 8003cf2:	f107 0309 	add.w	r3, r7, #9
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f7ff fe73 	bl	80039e4 <recv_msg_header>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	72fb      	strb	r3, [r7, #11]
    if (err != NMBS_ERROR_NONE)
 8003d02:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d002      	beq.n	8003d10 <recv_res_header+0x3e>
        return err;
 8003d0a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003d0e:	e057      	b.n	8003dc0 <recv_res_header+0xee>

    if (nmbs->platform.transport == NMBS_TRANSPORT_TCP) {
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d108      	bne.n	8003d2c <recv_res_header+0x5a>
        if (nmbs->msg.transaction_id != req_transaction_id)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 8003d20:	89fa      	ldrh	r2, [r7, #14]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d002      	beq.n	8003d2c <recv_res_header+0x5a>
            return NMBS_ERROR_INVALID_TCP_MBAP;
 8003d26:	f06f 0305 	mvn.w	r3, #5
 8003d2a:	e049      	b.n	8003dc0 <recv_res_header+0xee>
    }

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU && nmbs->msg.unit_id != req_unit_id)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d108      	bne.n	8003d48 <recv_res_header+0x76>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8003d3c:	7b7a      	ldrb	r2, [r7, #13]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d002      	beq.n	8003d48 <recv_res_header+0x76>
        return NMBS_ERROR_INVALID_UNIT_ID;
 8003d42:	f06f 0306 	mvn.w	r3, #6
 8003d46:	e03b      	b.n	8003dc0 <recv_res_header+0xee>

    if (nmbs->msg.fc != req_fc) {
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8003d4e:	7b3a      	ldrb	r2, [r7, #12]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d034      	beq.n	8003dbe <recv_res_header+0xec>
        if (nmbs->msg.fc - 0x80 == req_fc) {
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8003d5a:	f1a3 0280 	sub.w	r2, r3, #128	; 0x80
 8003d5e:	7b3b      	ldrb	r3, [r7, #12]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d129      	bne.n	8003db8 <recv_res_header+0xe6>
            err = recv(nmbs, 1);
 8003d64:	2101      	movs	r1, #1
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7ff fdaf 	bl	80038ca <recv>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	72fb      	strb	r3, [r7, #11]
            if (err != NMBS_ERROR_NONE)
 8003d70:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <recv_res_header+0xac>
                return err;
 8003d78:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003d7c:	e020      	b.n	8003dc0 <recv_res_header+0xee>

            uint8_t exception = get_1(nmbs);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7ff fbba 	bl	80034f8 <get_1>
 8003d84:	4603      	mov	r3, r0
 8003d86:	72bb      	strb	r3, [r7, #10]
            err = recv_msg_footer(nmbs);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7ff fdfa 	bl	8003982 <recv_msg_footer>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	72fb      	strb	r3, [r7, #11]
            if (err != NMBS_ERROR_NONE)
 8003d92:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d002      	beq.n	8003da0 <recv_res_header+0xce>
                return err;
 8003d9a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003d9e:	e00f      	b.n	8003dc0 <recv_res_header+0xee>

            if (exception < 1 || exception > 4)
 8003da0:	7abb      	ldrb	r3, [r7, #10]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d002      	beq.n	8003dac <recv_res_header+0xda>
 8003da6:	7abb      	ldrb	r3, [r7, #10]
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	d902      	bls.n	8003db2 <recv_res_header+0xe0>
                return NMBS_ERROR_INVALID_RESPONSE;
 8003dac:	f06f 0301 	mvn.w	r3, #1
 8003db0:	e006      	b.n	8003dc0 <recv_res_header+0xee>

            NMBS_DEBUG_PRINT("%d NMBS res <- address_rtu %d\texception %d\n", nmbs->address_rtu, nmbs->msg.unit_id,
                             exception);
            return (nmbs_error) exception;
 8003db2:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8003db6:	e003      	b.n	8003dc0 <recv_res_header+0xee>
        }

        return NMBS_ERROR_INVALID_RESPONSE;
 8003db8:	f06f 0301 	mvn.w	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <recv_res_header+0xee>
    }

    NMBS_DEBUG_PRINT("%d NMBS res <- address_rtu %d\tfc %d\t", nmbs->address_rtu, nmbs->msg.unit_id, nmbs->msg.fc);

    return NMBS_ERROR_NONE;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <recv_read_discrete_res>:
#endif
}
#endif


static nmbs_error recv_read_discrete_res(nmbs_t* nmbs, nmbs_bitfield values) {
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
    nmbs_error err = recv_res_header(nmbs);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7ff ff7d 	bl	8003cd2 <recv_res_header>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	72fb      	strb	r3, [r7, #11]
    if (err != NMBS_ERROR_NONE)
 8003ddc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d002      	beq.n	8003dea <recv_read_discrete_res+0x22>
        return err;
 8003de4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003de8:	e044      	b.n	8003e74 <recv_read_discrete_res+0xac>

    err = recv(nmbs, 1);
 8003dea:	2101      	movs	r1, #1
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7ff fd6c 	bl	80038ca <recv>
 8003df2:	4603      	mov	r3, r0
 8003df4:	72fb      	strb	r3, [r7, #11]
    if (err != NMBS_ERROR_NONE)
 8003df6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <recv_read_discrete_res+0x3c>
        return err;
 8003dfe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003e02:	e037      	b.n	8003e74 <recv_read_discrete_res+0xac>

    uint8_t coils_bytes = get_1(nmbs);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7ff fb77 	bl	80034f8 <get_1>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	72bb      	strb	r3, [r7, #10]
    NMBS_DEBUG_PRINT("b %d\t", coils_bytes);

    err = recv(nmbs, coils_bytes);
 8003e0e:	7abb      	ldrb	r3, [r7, #10]
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	4619      	mov	r1, r3
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f7ff fd58 	bl	80038ca <recv>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	72fb      	strb	r3, [r7, #11]
    if (err != NMBS_ERROR_NONE)
 8003e1e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <recv_read_discrete_res+0x64>
        return err;
 8003e26:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003e2a:	e023      	b.n	8003e74 <recv_read_discrete_res+0xac>

    NMBS_DEBUG_PRINT("coils ");
    for (int i = 0; i < coils_bytes; i++) {
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	e00f      	b.n	8003e52 <recv_read_discrete_res+0x8a>
        uint8_t coil = get_1(nmbs);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7ff fb60 	bl	80034f8 <get_1>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	727b      	strb	r3, [r7, #9]
        if (values)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d004      	beq.n	8003e4c <recv_read_discrete_res+0x84>
            values[i] = coil;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	4413      	add	r3, r2
 8003e48:	7a7a      	ldrb	r2, [r7, #9]
 8003e4a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < coils_bytes; i++) {
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	60fb      	str	r3, [r7, #12]
 8003e52:	7abb      	ldrb	r3, [r7, #10]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	dbeb      	blt.n	8003e32 <recv_read_discrete_res+0x6a>
        NMBS_DEBUG_PRINT("%d ", coil);
    }

    err = recv_msg_footer(nmbs);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff fd91 	bl	8003982 <recv_msg_footer>
 8003e60:	4603      	mov	r3, r0
 8003e62:	72fb      	strb	r3, [r7, #11]
    if (err != NMBS_ERROR_NONE)
 8003e64:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <recv_read_discrete_res+0xaa>
        return err;
 8003e6c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003e70:	e000      	b.n	8003e74 <recv_read_discrete_res+0xac>

    return NMBS_ERROR_NONE;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <recv_read_registers_res>:


static nmbs_error recv_read_registers_res(nmbs_t* nmbs, uint16_t quantity, uint16_t* registers) {
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	460b      	mov	r3, r1
 8003e86:	607a      	str	r2, [r7, #4]
 8003e88:	817b      	strh	r3, [r7, #10]
    nmbs_error err = recv_res_header(nmbs);
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f7ff ff21 	bl	8003cd2 <recv_res_header>
 8003e90:	4603      	mov	r3, r0
 8003e92:	74fb      	strb	r3, [r7, #19]
    if (err != NMBS_ERROR_NONE)
 8003e94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <recv_read_registers_res+0x26>
        return err;
 8003e9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003ea0:	e050      	b.n	8003f44 <recv_read_registers_res+0xc8>

    err = recv(nmbs, 1);
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f7ff fd10 	bl	80038ca <recv>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	74fb      	strb	r3, [r7, #19]
    if (err != NMBS_ERROR_NONE)
 8003eae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <recv_read_registers_res+0x40>
        return err;
 8003eb6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003eba:	e043      	b.n	8003f44 <recv_read_registers_res+0xc8>

    uint8_t registers_bytes = get_1(nmbs);
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f7ff fb1b 	bl	80034f8 <get_1>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	74bb      	strb	r3, [r7, #18]
    NMBS_DEBUG_PRINT("b %d\t", registers_bytes);

    err = recv(nmbs, registers_bytes);
 8003ec6:	7cbb      	ldrb	r3, [r7, #18]
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	4619      	mov	r1, r3
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f7ff fcfc 	bl	80038ca <recv>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	74fb      	strb	r3, [r7, #19]
    if (err != NMBS_ERROR_NONE)
 8003ed6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <recv_read_registers_res+0x68>
        return err;
 8003ede:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003ee2:	e02f      	b.n	8003f44 <recv_read_registers_res+0xc8>

    NMBS_DEBUG_PRINT("regs ");
    for (int i = 0; i < registers_bytes / 2; i++) {
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	617b      	str	r3, [r7, #20]
 8003ee8:	e010      	b.n	8003f0c <recv_read_registers_res+0x90>
        uint16_t reg = get_2(nmbs);
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f7ff fb5c 	bl	80035a8 <get_2>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	823b      	strh	r3, [r7, #16]
        if (registers)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d005      	beq.n	8003f06 <recv_read_registers_res+0x8a>
            registers[i] = reg;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	4413      	add	r3, r2
 8003f02:	8a3a      	ldrh	r2, [r7, #16]
 8003f04:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < registers_bytes / 2; i++) {
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	7cbb      	ldrb	r3, [r7, #18]
 8003f0e:	085b      	lsrs	r3, r3, #1
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	461a      	mov	r2, r3
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	4293      	cmp	r3, r2
 8003f18:	dbe7      	blt.n	8003eea <recv_read_registers_res+0x6e>
        NMBS_DEBUG_PRINT("%d ", reg);
    }

    err = recv_msg_footer(nmbs);
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f7ff fd31 	bl	8003982 <recv_msg_footer>
 8003f20:	4603      	mov	r3, r0
 8003f22:	74fb      	strb	r3, [r7, #19]
    if (err != NMBS_ERROR_NONE)
 8003f24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d002      	beq.n	8003f32 <recv_read_registers_res+0xb6>
        return err;
 8003f2c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003f30:	e008      	b.n	8003f44 <recv_read_registers_res+0xc8>

    if (registers_bytes != quantity * 2)
 8003f32:	7cba      	ldrb	r2, [r7, #18]
 8003f34:	897b      	ldrh	r3, [r7, #10]
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d002      	beq.n	8003f42 <recv_read_registers_res+0xc6>
        return NMBS_ERROR_INVALID_RESPONSE;
 8003f3c:	f06f 0301 	mvn.w	r3, #1
 8003f40:	e000      	b.n	8003f44 <recv_read_registers_res+0xc8>

    return NMBS_ERROR_NONE;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <recv_write_single_coil_res>:


nmbs_error recv_write_single_coil_res(nmbs_t* nmbs, uint16_t address, uint16_t value_req) {
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	807b      	strh	r3, [r7, #2]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	803b      	strh	r3, [r7, #0]
    nmbs_error err = recv_res_header(nmbs);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff feb8 	bl	8003cd2 <recv_res_header>
 8003f62:	4603      	mov	r3, r0
 8003f64:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8003f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <recv_write_single_coil_res+0x28>
        return err;
 8003f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f72:	e031      	b.n	8003fd8 <recv_write_single_coil_res+0x8c>

    err = recv(nmbs, 4);
 8003f74:	2104      	movs	r1, #4
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7ff fca7 	bl	80038ca <recv>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8003f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <recv_write_single_coil_res+0x42>
        return err;
 8003f88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f8c:	e024      	b.n	8003fd8 <recv_write_single_coil_res+0x8c>

    uint16_t address_res = get_2(nmbs);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff fb0a 	bl	80035a8 <get_2>
 8003f94:	4603      	mov	r3, r0
 8003f96:	81bb      	strh	r3, [r7, #12]
    uint16_t value_res = get_2(nmbs);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f7ff fb05 	bl	80035a8 <get_2>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	817b      	strh	r3, [r7, #10]

    NMBS_DEBUG_PRINT("a %d\tvalue %d", address, value_res);

    err = recv_msg_footer(nmbs);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7ff fced 	bl	8003982 <recv_msg_footer>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8003fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <recv_write_single_coil_res+0x6e>
        return err;
 8003fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fb8:	e00e      	b.n	8003fd8 <recv_write_single_coil_res+0x8c>

    if (address_res != address)
 8003fba:	89ba      	ldrh	r2, [r7, #12]
 8003fbc:	887b      	ldrh	r3, [r7, #2]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d002      	beq.n	8003fc8 <recv_write_single_coil_res+0x7c>
        return NMBS_ERROR_INVALID_RESPONSE;
 8003fc2:	f06f 0301 	mvn.w	r3, #1
 8003fc6:	e007      	b.n	8003fd8 <recv_write_single_coil_res+0x8c>

    if (value_res != value_req)
 8003fc8:	897a      	ldrh	r2, [r7, #10]
 8003fca:	883b      	ldrh	r3, [r7, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d002      	beq.n	8003fd6 <recv_write_single_coil_res+0x8a>
        return NMBS_ERROR_INVALID_RESPONSE;
 8003fd0:	f06f 0301 	mvn.w	r3, #1
 8003fd4:	e000      	b.n	8003fd8 <recv_write_single_coil_res+0x8c>

    return NMBS_ERROR_NONE;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <recv_write_single_register_res>:


nmbs_error recv_write_single_register_res(nmbs_t* nmbs, uint16_t address, uint16_t value_req) {
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	460b      	mov	r3, r1
 8003fea:	807b      	strh	r3, [r7, #2]
 8003fec:	4613      	mov	r3, r2
 8003fee:	803b      	strh	r3, [r7, #0]
    nmbs_error err = recv_res_header(nmbs);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7ff fe6e 	bl	8003cd2 <recv_res_header>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8003ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <recv_write_single_register_res+0x28>
        return err;
 8004002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004006:	e031      	b.n	800406c <recv_write_single_register_res+0x8c>

    err = recv(nmbs, 4);
 8004008:	2104      	movs	r1, #4
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7ff fc5d 	bl	80038ca <recv>
 8004010:	4603      	mov	r3, r0
 8004012:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8004014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d002      	beq.n	8004022 <recv_write_single_register_res+0x42>
        return err;
 800401c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004020:	e024      	b.n	800406c <recv_write_single_register_res+0x8c>

    uint16_t address_res = get_2(nmbs);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff fac0 	bl	80035a8 <get_2>
 8004028:	4603      	mov	r3, r0
 800402a:	81bb      	strh	r3, [r7, #12]
    uint16_t value_res = get_2(nmbs);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7ff fabb 	bl	80035a8 <get_2>
 8004032:	4603      	mov	r3, r0
 8004034:	817b      	strh	r3, [r7, #10]
    NMBS_DEBUG_PRINT("a %d\tvalue %d ", address, value_res);

    err = recv_msg_footer(nmbs);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7ff fca3 	bl	8003982 <recv_msg_footer>
 800403c:	4603      	mov	r3, r0
 800403e:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8004040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <recv_write_single_register_res+0x6e>
        return err;
 8004048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800404c:	e00e      	b.n	800406c <recv_write_single_register_res+0x8c>

    if (address_res != address)
 800404e:	89ba      	ldrh	r2, [r7, #12]
 8004050:	887b      	ldrh	r3, [r7, #2]
 8004052:	429a      	cmp	r2, r3
 8004054:	d002      	beq.n	800405c <recv_write_single_register_res+0x7c>
        return NMBS_ERROR_INVALID_RESPONSE;
 8004056:	f06f 0301 	mvn.w	r3, #1
 800405a:	e007      	b.n	800406c <recv_write_single_register_res+0x8c>

    if (value_res != value_req)
 800405c:	897a      	ldrh	r2, [r7, #10]
 800405e:	883b      	ldrh	r3, [r7, #0]
 8004060:	429a      	cmp	r2, r3
 8004062:	d002      	beq.n	800406a <recv_write_single_register_res+0x8a>
        return NMBS_ERROR_INVALID_RESPONSE;
 8004064:	f06f 0301 	mvn.w	r3, #1
 8004068:	e000      	b.n	800406c <recv_write_single_register_res+0x8c>

    return NMBS_ERROR_NONE;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <recv_write_multiple_coils_res>:


nmbs_error recv_write_multiple_coils_res(nmbs_t* nmbs, uint16_t address, uint16_t quantity) {
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	460b      	mov	r3, r1
 800407e:	807b      	strh	r3, [r7, #2]
 8004080:	4613      	mov	r3, r2
 8004082:	803b      	strh	r3, [r7, #0]
    nmbs_error err = recv_res_header(nmbs);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7ff fe24 	bl	8003cd2 <recv_res_header>
 800408a:	4603      	mov	r3, r0
 800408c:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 800408e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d002      	beq.n	800409c <recv_write_multiple_coils_res+0x28>
        return err;
 8004096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800409a:	e031      	b.n	8004100 <recv_write_multiple_coils_res+0x8c>

    err = recv(nmbs, 4);
 800409c:	2104      	movs	r1, #4
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7ff fc13 	bl	80038ca <recv>
 80040a4:	4603      	mov	r3, r0
 80040a6:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 80040a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d002      	beq.n	80040b6 <recv_write_multiple_coils_res+0x42>
        return err;
 80040b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040b4:	e024      	b.n	8004100 <recv_write_multiple_coils_res+0x8c>

    uint16_t address_res = get_2(nmbs);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7ff fa76 	bl	80035a8 <get_2>
 80040bc:	4603      	mov	r3, r0
 80040be:	81bb      	strh	r3, [r7, #12]
    uint16_t quantity_res = get_2(nmbs);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7ff fa71 	bl	80035a8 <get_2>
 80040c6:	4603      	mov	r3, r0
 80040c8:	817b      	strh	r3, [r7, #10]
    NMBS_DEBUG_PRINT("a %d\tq %d", address_res, quantity_res);

    err = recv_msg_footer(nmbs);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7ff fc59 	bl	8003982 <recv_msg_footer>
 80040d0:	4603      	mov	r3, r0
 80040d2:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 80040d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d002      	beq.n	80040e2 <recv_write_multiple_coils_res+0x6e>
        return err;
 80040dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040e0:	e00e      	b.n	8004100 <recv_write_multiple_coils_res+0x8c>

    if (address_res != address)
 80040e2:	89ba      	ldrh	r2, [r7, #12]
 80040e4:	887b      	ldrh	r3, [r7, #2]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d002      	beq.n	80040f0 <recv_write_multiple_coils_res+0x7c>
        return NMBS_ERROR_INVALID_RESPONSE;
 80040ea:	f06f 0301 	mvn.w	r3, #1
 80040ee:	e007      	b.n	8004100 <recv_write_multiple_coils_res+0x8c>

    if (quantity_res != quantity)
 80040f0:	897a      	ldrh	r2, [r7, #10]
 80040f2:	883b      	ldrh	r3, [r7, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d002      	beq.n	80040fe <recv_write_multiple_coils_res+0x8a>
        return NMBS_ERROR_INVALID_RESPONSE;
 80040f8:	f06f 0301 	mvn.w	r3, #1
 80040fc:	e000      	b.n	8004100 <recv_write_multiple_coils_res+0x8c>

    return NMBS_ERROR_NONE;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <recv_write_multiple_registers_res>:


nmbs_error recv_write_multiple_registers_res(nmbs_t* nmbs, uint16_t address, uint16_t quantity) {
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	460b      	mov	r3, r1
 8004112:	807b      	strh	r3, [r7, #2]
 8004114:	4613      	mov	r3, r2
 8004116:	803b      	strh	r3, [r7, #0]
    nmbs_error err = recv_res_header(nmbs);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7ff fdda 	bl	8003cd2 <recv_res_header>
 800411e:	4603      	mov	r3, r0
 8004120:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8004122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d002      	beq.n	8004130 <recv_write_multiple_registers_res+0x28>
        return err;
 800412a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800412e:	e031      	b.n	8004194 <recv_write_multiple_registers_res+0x8c>

    err = recv(nmbs, 4);
 8004130:	2104      	movs	r1, #4
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7ff fbc9 	bl	80038ca <recv>
 8004138:	4603      	mov	r3, r0
 800413a:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 800413c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d002      	beq.n	800414a <recv_write_multiple_registers_res+0x42>
        return err;
 8004144:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004148:	e024      	b.n	8004194 <recv_write_multiple_registers_res+0x8c>

    uint16_t address_res = get_2(nmbs);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7ff fa2c 	bl	80035a8 <get_2>
 8004150:	4603      	mov	r3, r0
 8004152:	81bb      	strh	r3, [r7, #12]
    uint16_t quantity_res = get_2(nmbs);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f7ff fa27 	bl	80035a8 <get_2>
 800415a:	4603      	mov	r3, r0
 800415c:	817b      	strh	r3, [r7, #10]
    NMBS_DEBUG_PRINT("a %d\tq %d", address_res, quantity_res);

    err = recv_msg_footer(nmbs);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7ff fc0f 	bl	8003982 <recv_msg_footer>
 8004164:	4603      	mov	r3, r0
 8004166:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8004168:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d002      	beq.n	8004176 <recv_write_multiple_registers_res+0x6e>
        return err;
 8004170:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004174:	e00e      	b.n	8004194 <recv_write_multiple_registers_res+0x8c>

    if (address_res != address)
 8004176:	89ba      	ldrh	r2, [r7, #12]
 8004178:	887b      	ldrh	r3, [r7, #2]
 800417a:	429a      	cmp	r2, r3
 800417c:	d002      	beq.n	8004184 <recv_write_multiple_registers_res+0x7c>
        return NMBS_ERROR_INVALID_RESPONSE;
 800417e:	f06f 0301 	mvn.w	r3, #1
 8004182:	e007      	b.n	8004194 <recv_write_multiple_registers_res+0x8c>

    if (quantity_res != quantity)
 8004184:	897a      	ldrh	r2, [r7, #10]
 8004186:	883b      	ldrh	r3, [r7, #0]
 8004188:	429a      	cmp	r2, r3
 800418a:	d002      	beq.n	8004192 <recv_write_multiple_registers_res+0x8a>
        return NMBS_ERROR_INVALID_RESPONSE;
 800418c:	f06f 0301 	mvn.w	r3, #1
 8004190:	e000      	b.n	8004194 <recv_write_multiple_registers_res+0x8c>

    return NMBS_ERROR_NONE;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <recv_read_file_record_res>:


nmbs_error recv_read_file_record_res(nmbs_t* nmbs, uint16_t* registers, uint16_t count) {
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	4613      	mov	r3, r2
 80041a8:	80fb      	strh	r3, [r7, #6]
    nmbs_error err = recv_res_header(nmbs);
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f7ff fd91 	bl	8003cd2 <recv_res_header>
 80041b0:	4603      	mov	r3, r0
 80041b2:	75fb      	strb	r3, [r7, #23]
    if (err != NMBS_ERROR_NONE)
 80041b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d002      	beq.n	80041c2 <recv_read_file_record_res+0x26>
        return err;
 80041bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80041c0:	e060      	b.n	8004284 <recv_read_file_record_res+0xe8>

    err = recv(nmbs, 1);
 80041c2:	2101      	movs	r1, #1
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f7ff fb80 	bl	80038ca <recv>
 80041ca:	4603      	mov	r3, r0
 80041cc:	75fb      	strb	r3, [r7, #23]
    if (err != NMBS_ERROR_NONE)
 80041ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d002      	beq.n	80041dc <recv_read_file_record_res+0x40>
        return err;
 80041d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80041da:	e053      	b.n	8004284 <recv_read_file_record_res+0xe8>

    uint8_t response_size = get_1(nmbs);
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f7ff f98b 	bl	80034f8 <get_1>
 80041e2:	4603      	mov	r3, r0
 80041e4:	75bb      	strb	r3, [r7, #22]

    err = recv(nmbs, response_size);
 80041e6:	7dbb      	ldrb	r3, [r7, #22]
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	4619      	mov	r1, r3
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f7ff fb6c 	bl	80038ca <recv>
 80041f2:	4603      	mov	r3, r0
 80041f4:	75fb      	strb	r3, [r7, #23]
    if (err != NMBS_ERROR_NONE)
 80041f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <recv_read_file_record_res+0x68>
        return err;
 80041fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004202:	e03f      	b.n	8004284 <recv_read_file_record_res+0xe8>

    uint8_t subreq_data_size = get_1(nmbs) - 1;
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f7ff f977 	bl	80034f8 <get_1>
 800420a:	4603      	mov	r3, r0
 800420c:	3b01      	subs	r3, #1
 800420e:	757b      	strb	r3, [r7, #21]
    uint8_t subreq_reference_type = get_1(nmbs);
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f7ff f971 	bl	80034f8 <get_1>
 8004216:	4603      	mov	r3, r0
 8004218:	753b      	strb	r3, [r7, #20]
    uint16_t* subreq_record_data = (uint16_t*) get_n(nmbs, subreq_data_size);
 800421a:	7d7b      	ldrb	r3, [r7, #21]
 800421c:	b29b      	uxth	r3, r3
 800421e:	4619      	mov	r1, r3
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f7ff fa0a 	bl	800363a <get_n>
 8004226:	6138      	str	r0, [r7, #16]

    err = recv_msg_footer(nmbs);
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f7ff fbaa 	bl	8003982 <recv_msg_footer>
 800422e:	4603      	mov	r3, r0
 8004230:	75fb      	strb	r3, [r7, #23]
    if (err != NMBS_ERROR_NONE)
 8004232:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <recv_read_file_record_res+0xa4>
        return err;
 800423a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800423e:	e021      	b.n	8004284 <recv_read_file_record_res+0xe8>

    if (registers) {
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d01d      	beq.n	8004282 <recv_read_file_record_res+0xe6>
        if (subreq_reference_type != 6)
 8004246:	7d3b      	ldrb	r3, [r7, #20]
 8004248:	2b06      	cmp	r3, #6
 800424a:	d002      	beq.n	8004252 <recv_read_file_record_res+0xb6>
            return NMBS_ERROR_INVALID_RESPONSE;
 800424c:	f06f 0301 	mvn.w	r3, #1
 8004250:	e018      	b.n	8004284 <recv_read_file_record_res+0xe8>

        if (count != (subreq_data_size / 2))
 8004252:	7d7b      	ldrb	r3, [r7, #21]
 8004254:	085b      	lsrs	r3, r3, #1
 8004256:	b2db      	uxtb	r3, r3
 8004258:	b29b      	uxth	r3, r3
 800425a:	88fa      	ldrh	r2, [r7, #6]
 800425c:	429a      	cmp	r2, r3
 800425e:	d002      	beq.n	8004266 <recv_read_file_record_res+0xca>
            return NMBS_ERROR_INVALID_RESPONSE;
 8004260:	f06f 0301 	mvn.w	r3, #1
 8004264:	e00e      	b.n	8004284 <recv_read_file_record_res+0xe8>

        swap_regs(subreq_record_data, subreq_data_size / 2);
 8004266:	7d7b      	ldrb	r3, [r7, #21]
 8004268:	085b      	lsrs	r3, r3, #1
 800426a:	b2db      	uxtb	r3, r3
 800426c:	b29b      	uxth	r3, r3
 800426e:	4619      	mov	r1, r3
 8004270:	6938      	ldr	r0, [r7, #16]
 8004272:	f7ff fa37 	bl	80036e4 <swap_regs>
        memcpy(registers, subreq_record_data, subreq_data_size);
 8004276:	7d7b      	ldrb	r3, [r7, #21]
 8004278:	461a      	mov	r2, r3
 800427a:	6939      	ldr	r1, [r7, #16]
 800427c:	68b8      	ldr	r0, [r7, #8]
 800427e:	f001 ff3d 	bl	80060fc <memcpy>
    }

    return NMBS_ERROR_NONE;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <recv_write_file_record_res>:


nmbs_error recv_write_file_record_res(nmbs_t* nmbs, uint16_t file_number, uint16_t record_number,
                                      const uint16_t* registers, uint16_t count) {
 800428c:	b580      	push	{r7, lr}
 800428e:	b088      	sub	sp, #32
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	607b      	str	r3, [r7, #4]
 8004296:	460b      	mov	r3, r1
 8004298:	817b      	strh	r3, [r7, #10]
 800429a:	4613      	mov	r3, r2
 800429c:	813b      	strh	r3, [r7, #8]
    nmbs_error err = recv_res_header(nmbs);
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f7ff fd17 	bl	8003cd2 <recv_res_header>
 80042a4:	4603      	mov	r3, r0
 80042a6:	77fb      	strb	r3, [r7, #31]
    if (err != NMBS_ERROR_NONE)
 80042a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <recv_write_file_record_res+0x2a>
        return err;
 80042b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80042b4:	e079      	b.n	80043aa <recv_write_file_record_res+0x11e>

    err = recv(nmbs, 1);
 80042b6:	2101      	movs	r1, #1
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f7ff fb06 	bl	80038ca <recv>
 80042be:	4603      	mov	r3, r0
 80042c0:	77fb      	strb	r3, [r7, #31]
    if (err != NMBS_ERROR_NONE)
 80042c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <recv_write_file_record_res+0x44>
        return err;
 80042ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80042ce:	e06c      	b.n	80043aa <recv_write_file_record_res+0x11e>

    uint8_t response_size = get_1(nmbs);
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f7ff f911 	bl	80034f8 <get_1>
 80042d6:	4603      	mov	r3, r0
 80042d8:	77bb      	strb	r3, [r7, #30]

    err = recv(nmbs, response_size);
 80042da:	7fbb      	ldrb	r3, [r7, #30]
 80042dc:	b29b      	uxth	r3, r3
 80042de:	4619      	mov	r1, r3
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f7ff faf2 	bl	80038ca <recv>
 80042e6:	4603      	mov	r3, r0
 80042e8:	77fb      	strb	r3, [r7, #31]
    if (err != NMBS_ERROR_NONE)
 80042ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d002      	beq.n	80042f8 <recv_write_file_record_res+0x6c>
        return err;
 80042f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80042f6:	e058      	b.n	80043aa <recv_write_file_record_res+0x11e>

    uint8_t subreq_reference_type = get_1(nmbs);
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f7ff f8fd 	bl	80034f8 <get_1>
 80042fe:	4603      	mov	r3, r0
 8004300:	777b      	strb	r3, [r7, #29]
    uint16_t subreq_file_number = get_2(nmbs);
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f7ff f950 	bl	80035a8 <get_2>
 8004308:	4603      	mov	r3, r0
 800430a:	837b      	strh	r3, [r7, #26]
    uint16_t subreq_record_number = get_2(nmbs);
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f7ff f94b 	bl	80035a8 <get_2>
 8004312:	4603      	mov	r3, r0
 8004314:	833b      	strh	r3, [r7, #24]
    uint16_t subreq_record_length = get_2(nmbs);
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f7ff f946 	bl	80035a8 <get_2>
 800431c:	4603      	mov	r3, r0
 800431e:	82fb      	strh	r3, [r7, #22]
    NMBS_DEBUG_PRINT("a %d\tr %d\tl %d\t fwrite ", subreq_file_number, subreq_record_number, subreq_record_length);

    uint16_t subreq_data_size = subreq_record_length * 2;
 8004320:	8afb      	ldrh	r3, [r7, #22]
 8004322:	005b      	lsls	r3, r3, #1
 8004324:	82bb      	strh	r3, [r7, #20]
    uint16_t* subreq_record_data = (uint16_t*) get_n(nmbs, subreq_data_size);
 8004326:	8abb      	ldrh	r3, [r7, #20]
 8004328:	4619      	mov	r1, r3
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f7ff f985 	bl	800363a <get_n>
 8004330:	6138      	str	r0, [r7, #16]

    err = recv_msg_footer(nmbs);
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f7ff fb25 	bl	8003982 <recv_msg_footer>
 8004338:	4603      	mov	r3, r0
 800433a:	77fb      	strb	r3, [r7, #31]
    if (err != NMBS_ERROR_NONE)
 800433c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d002      	beq.n	800434a <recv_write_file_record_res+0xbe>
        return err;
 8004344:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004348:	e02f      	b.n	80043aa <recv_write_file_record_res+0x11e>

    if (registers) {
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d02b      	beq.n	80043a8 <recv_write_file_record_res+0x11c>
        if (subreq_reference_type != 6)
 8004350:	7f7b      	ldrb	r3, [r7, #29]
 8004352:	2b06      	cmp	r3, #6
 8004354:	d002      	beq.n	800435c <recv_write_file_record_res+0xd0>
            return NMBS_ERROR_INVALID_RESPONSE;
 8004356:	f06f 0301 	mvn.w	r3, #1
 800435a:	e026      	b.n	80043aa <recv_write_file_record_res+0x11e>

        if (subreq_file_number != file_number)
 800435c:	8b7a      	ldrh	r2, [r7, #26]
 800435e:	897b      	ldrh	r3, [r7, #10]
 8004360:	429a      	cmp	r2, r3
 8004362:	d002      	beq.n	800436a <recv_write_file_record_res+0xde>
            return NMBS_ERROR_INVALID_RESPONSE;
 8004364:	f06f 0301 	mvn.w	r3, #1
 8004368:	e01f      	b.n	80043aa <recv_write_file_record_res+0x11e>

        if (subreq_record_number != record_number)
 800436a:	8b3a      	ldrh	r2, [r7, #24]
 800436c:	893b      	ldrh	r3, [r7, #8]
 800436e:	429a      	cmp	r2, r3
 8004370:	d002      	beq.n	8004378 <recv_write_file_record_res+0xec>
            return NMBS_ERROR_INVALID_RESPONSE;
 8004372:	f06f 0301 	mvn.w	r3, #1
 8004376:	e018      	b.n	80043aa <recv_write_file_record_res+0x11e>

        if (subreq_record_length != count)
 8004378:	8afa      	ldrh	r2, [r7, #22]
 800437a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800437c:	429a      	cmp	r2, r3
 800437e:	d002      	beq.n	8004386 <recv_write_file_record_res+0xfa>
            return NMBS_ERROR_INVALID_RESPONSE;
 8004380:	f06f 0301 	mvn.w	r3, #1
 8004384:	e011      	b.n	80043aa <recv_write_file_record_res+0x11e>

        swap_regs(subreq_record_data, subreq_record_length);
 8004386:	8afb      	ldrh	r3, [r7, #22]
 8004388:	4619      	mov	r1, r3
 800438a:	6938      	ldr	r0, [r7, #16]
 800438c:	f7ff f9aa 	bl	80036e4 <swap_regs>
        if (memcmp(registers, subreq_record_data, subreq_data_size) != 0)
 8004390:	8abb      	ldrh	r3, [r7, #20]
 8004392:	461a      	mov	r2, r3
 8004394:	6939      	ldr	r1, [r7, #16]
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f001 fe74 	bl	8006084 <memcmp>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <recv_write_file_record_res+0x11c>
            return NMBS_ERROR_INVALID_RESPONSE;
 80043a2:	f06f 0301 	mvn.w	r3, #1
 80043a6:	e000      	b.n	80043aa <recv_write_file_record_res+0x11e>
    }

    return NMBS_ERROR_NONE;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3720      	adds	r7, #32
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <handle_read_discrete>:


#ifndef NMBS_SERVER_DISABLED
#if !defined(NMBS_SERVER_READ_COILS_DISABLED) || !defined(NMBS_SERVER_READ_DISCRETE_INPUTS_DISABLED)
static nmbs_error handle_read_discrete(nmbs_t* nmbs,
                                       nmbs_error (*callback)(uint16_t, uint16_t, nmbs_bitfield, uint8_t, void*)) {
 80043b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043b4:	b0c7      	sub	sp, #284	; 0x11c
 80043b6:	af02      	add	r7, sp, #8
 80043b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80043bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80043c0:	6018      	str	r0, [r3, #0]
 80043c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80043c6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80043ca:	6019      	str	r1, [r3, #0]
    nmbs_error err = recv(nmbs, 4);
 80043cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80043d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80043d4:	2104      	movs	r1, #4
 80043d6:	6818      	ldr	r0, [r3, #0]
 80043d8:	f7ff fa77 	bl	80038ca <recv>
 80043dc:	4603      	mov	r3, r0
 80043de:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 80043e2:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d002      	beq.n	80043f0 <handle_read_discrete+0x3e>
        return err;
 80043ea:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80043ee:	e11d      	b.n	800462c <handle_read_discrete+0x27a>

    uint16_t address = get_2(nmbs);
 80043f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80043f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80043f8:	6818      	ldr	r0, [r3, #0]
 80043fa:	f7ff f8d5 	bl	80035a8 <get_2>
 80043fe:	4603      	mov	r3, r0
 8004400:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    uint16_t quantity = get_2(nmbs);
 8004404:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004408:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800440c:	6818      	ldr	r0, [r3, #0]
 800440e:	f7ff f8cb 	bl	80035a8 <get_2>
 8004412:	4603      	mov	r3, r0
 8004414:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106

    NMBS_DEBUG_PRINT("a %d\tq %d", address, quantity);

    err = recv_msg_footer(nmbs);
 8004418:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800441c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004420:	6818      	ldr	r0, [r3, #0]
 8004422:	f7ff faae 	bl	8003982 <recv_msg_footer>
 8004426:	4603      	mov	r3, r0
 8004428:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 800442c:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <handle_read_discrete+0x88>
        return err;
 8004434:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004438:	e0f8      	b.n	800462c <handle_read_discrete+0x27a>

    if (!nmbs->msg.ignored) {
 800443a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800443e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8004448:	f083 0301 	eor.w	r3, r3, #1
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 80e1 	beq.w	8004616 <handle_read_discrete+0x264>
        if (quantity < 1 || quantity > 2000)
 8004454:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8004458:	2b00      	cmp	r3, #0
 800445a:	d004      	beq.n	8004466 <handle_read_discrete+0xb4>
 800445c:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8004460:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004464:	d909      	bls.n	800447a <handle_read_discrete+0xc8>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8004466:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800446a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800446e:	2103      	movs	r1, #3
 8004470:	6818      	ldr	r0, [r3, #0]
 8004472:	f7ff fc0f 	bl	8003c94 <send_exception_msg>
 8004476:	4603      	mov	r3, r0
 8004478:	e0d8      	b.n	800462c <handle_read_discrete+0x27a>

        if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 800447a:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 800447e:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8004482:	4413      	add	r3, r2
 8004484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004488:	d909      	bls.n	800449e <handle_read_discrete+0xec>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 800448a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800448e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004492:	2102      	movs	r1, #2
 8004494:	6818      	ldr	r0, [r3, #0]
 8004496:	f7ff fbfd 	bl	8003c94 <send_exception_msg>
 800449a:	4603      	mov	r3, r0
 800449c:	e0c6      	b.n	800462c <handle_read_discrete+0x27a>

        if (callback) {
 800449e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80044a2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 80aa 	beq.w	8004602 <handle_read_discrete+0x250>
            nmbs_bitfield bitfield = {0};
 80044ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80044b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	3304      	adds	r3, #4
 80044bc:	22f6      	movs	r2, #246	; 0xf6
 80044be:	2100      	movs	r1, #0
 80044c0:	4618      	mov	r0, r3
 80044c2:	f001 fdef 	bl	80060a4 <memset>
            err = callback(address, quantity, bitfield, nmbs->msg.unit_id, nmbs->platform.arg);
 80044c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80044ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f893 6106 	ldrb.w	r6, [r3, #262]	; 0x106
 80044d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80044d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80044e2:	f107 0508 	add.w	r5, r7, #8
 80044e6:	f8b7 1106 	ldrh.w	r1, [r7, #262]	; 0x106
 80044ea:	f8b7 0108 	ldrh.w	r0, [r7, #264]	; 0x108
 80044ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80044f2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80044f6:	9200      	str	r2, [sp, #0]
 80044f8:	681c      	ldr	r4, [r3, #0]
 80044fa:	4633      	mov	r3, r6
 80044fc:	462a      	mov	r2, r5
 80044fe:	47a0      	blx	r4
 8004500:	4603      	mov	r3, r0
 8004502:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
            if (err != NMBS_ERROR_NONE) {
 8004506:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 800450a:	2b00      	cmp	r3, #0
 800450c:	d01d      	beq.n	800454a <handle_read_discrete+0x198>
                if (nmbs_error_is_exception(err))
 800450e:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004512:	2b00      	cmp	r3, #0
 8004514:	dd0f      	ble.n	8004536 <handle_read_discrete+0x184>
 8004516:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 800451a:	2b04      	cmp	r3, #4
 800451c:	dc0b      	bgt.n	8004536 <handle_read_discrete+0x184>
                    return send_exception_msg(nmbs, err);
 800451e:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 8004522:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004526:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800452a:	4611      	mov	r1, r2
 800452c:	6818      	ldr	r0, [r3, #0]
 800452e:	f7ff fbb1 	bl	8003c94 <send_exception_msg>
 8004532:	4603      	mov	r3, r0
 8004534:	e07a      	b.n	800462c <handle_read_discrete+0x27a>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8004536:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800453a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800453e:	2104      	movs	r1, #4
 8004540:	6818      	ldr	r0, [r3, #0]
 8004542:	f7ff fba7 	bl	8003c94 <send_exception_msg>
 8004546:	4603      	mov	r3, r0
 8004548:	e070      	b.n	800462c <handle_read_discrete+0x27a>
            }

            if (!nmbs->msg.broadcast) {
 800454a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800454e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8004558:	f083 0301 	eor.w	r3, r3, #1
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d063      	beq.n	800462a <handle_read_discrete+0x278>
                uint8_t discrete_bytes = (quantity + 7) / 8;
 8004562:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8004566:	3307      	adds	r3, #7
 8004568:	2b00      	cmp	r3, #0
 800456a:	da00      	bge.n	800456e <handle_read_discrete+0x1bc>
 800456c:	3307      	adds	r3, #7
 800456e:	10db      	asrs	r3, r3, #3
 8004570:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
                put_res_header(nmbs, 1 + discrete_bytes);
 8004574:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8004578:	b29b      	uxth	r3, r3
 800457a:	3301      	adds	r3, #1
 800457c:	b29a      	uxth	r2, r3
 800457e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004582:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004586:	4611      	mov	r1, r2
 8004588:	6818      	ldr	r0, [r3, #0]
 800458a:	f7ff fb74 	bl	8003c76 <put_res_header>

                put_1(nmbs, discrete_bytes);
 800458e:	f897 2105 	ldrb.w	r2, [r7, #261]	; 0x105
 8004592:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004596:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800459a:	4611      	mov	r1, r2
 800459c:	6818      	ldr	r0, [r3, #0]
 800459e:	f7fe ffc4 	bl	800352a <put_1>

                NMBS_DEBUG_PRINT("b %d\t", discrete_bytes);

                NMBS_DEBUG_PRINT("coils ");
                for (int i = 0; i < discrete_bytes; i++) {
 80045a2:	2300      	movs	r3, #0
 80045a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80045a8:	e014      	b.n	80045d4 <handle_read_discrete+0x222>
                    put_1(nmbs, bitfield[i]);
 80045aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80045ae:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 80045b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045b6:	4413      	add	r3, r2
 80045b8:	781a      	ldrb	r2, [r3, #0]
 80045ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80045be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80045c2:	4611      	mov	r1, r2
 80045c4:	6818      	ldr	r0, [r3, #0]
 80045c6:	f7fe ffb0 	bl	800352a <put_1>
                for (int i = 0; i < discrete_bytes; i++) {
 80045ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045ce:	3301      	adds	r3, #1
 80045d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80045d4:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80045d8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80045dc:	429a      	cmp	r2, r3
 80045de:	dbe4      	blt.n	80045aa <handle_read_discrete+0x1f8>
                    NMBS_DEBUG_PRINT("%d ", bitfield[i]);
                }

                err = send_msg(nmbs);
 80045e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80045e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80045e8:	6818      	ldr	r0, [r3, #0]
 80045ea:	f7ff fae5 	bl	8003bb8 <send_msg>
 80045ee:	4603      	mov	r3, r0
 80045f0:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
                if (err != NMBS_ERROR_NONE)
 80045f4:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d016      	beq.n	800462a <handle_read_discrete+0x278>
                    return err;
 80045fc:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004600:	e014      	b.n	800462c <handle_read_discrete+0x27a>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8004602:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004606:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800460a:	2101      	movs	r1, #1
 800460c:	6818      	ldr	r0, [r3, #0]
 800460e:	f7ff fb41 	bl	8003c94 <send_exception_msg>
 8004612:	4603      	mov	r3, r0
 8004614:	e00a      	b.n	800462c <handle_read_discrete+0x27a>
        }
    }
    else {
        return recv_read_discrete_res(nmbs, NULL);
 8004616:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800461a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800461e:	2100      	movs	r1, #0
 8004620:	6818      	ldr	r0, [r3, #0]
 8004622:	f7ff fbd1 	bl	8003dc8 <recv_read_discrete_res>
 8004626:	4603      	mov	r3, r0
 8004628:	e000      	b.n	800462c <handle_read_discrete+0x27a>
    }

    return NMBS_ERROR_NONE;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8004632:	46bd      	mov	sp, r7
 8004634:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004636 <handle_read_registers>:
#endif


#if !defined(NMBS_SERVER_READ_HOLDING_REGISTERS_DISABLED) || !defined(NMBS_SERVER_READ_INPUT_REGISTERS_DISABLED)
static nmbs_error handle_read_registers(nmbs_t* nmbs,
                                        nmbs_error (*callback)(uint16_t, uint16_t, uint16_t*, uint8_t, void*)) {
 8004636:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004638:	b0c7      	sub	sp, #284	; 0x11c
 800463a:	af02      	add	r7, sp, #8
 800463c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004640:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004644:	6018      	str	r0, [r3, #0]
 8004646:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800464a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800464e:	6019      	str	r1, [r3, #0]
    nmbs_error err = recv(nmbs, 4);
 8004650:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004654:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004658:	2104      	movs	r1, #4
 800465a:	6818      	ldr	r0, [r3, #0]
 800465c:	f7ff f935 	bl	80038ca <recv>
 8004660:	4603      	mov	r3, r0
 8004662:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8004666:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <handle_read_registers+0x3e>
        return err;
 800466e:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004672:	e119      	b.n	80048a8 <handle_read_registers+0x272>

    uint16_t address = get_2(nmbs);
 8004674:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004678:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800467c:	6818      	ldr	r0, [r3, #0]
 800467e:	f7fe ff93 	bl	80035a8 <get_2>
 8004682:	4603      	mov	r3, r0
 8004684:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    uint16_t quantity = get_2(nmbs);
 8004688:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800468c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004690:	6818      	ldr	r0, [r3, #0]
 8004692:	f7fe ff89 	bl	80035a8 <get_2>
 8004696:	4603      	mov	r3, r0
 8004698:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106

    NMBS_DEBUG_PRINT("a %d\tq %d", address, quantity);

    err = recv_msg_footer(nmbs);
 800469c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80046a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80046a4:	6818      	ldr	r0, [r3, #0]
 80046a6:	f7ff f96c 	bl	8003982 <recv_msg_footer>
 80046aa:	4603      	mov	r3, r0
 80046ac:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 80046b0:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d002      	beq.n	80046be <handle_read_registers+0x88>
        return err;
 80046b8:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80046bc:	e0f4      	b.n	80048a8 <handle_read_registers+0x272>

    if (!nmbs->msg.ignored) {
 80046be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80046c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 80046cc:	f083 0301 	eor.w	r3, r3, #1
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 80db 	beq.w	800488e <handle_read_registers+0x258>
        if (quantity < 1 || quantity > 125)
 80046d8:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <handle_read_registers+0xb2>
 80046e0:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80046e4:	2b7d      	cmp	r3, #125	; 0x7d
 80046e6:	d909      	bls.n	80046fc <handle_read_registers+0xc6>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 80046e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80046ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80046f0:	2103      	movs	r1, #3
 80046f2:	6818      	ldr	r0, [r3, #0]
 80046f4:	f7ff face 	bl	8003c94 <send_exception_msg>
 80046f8:	4603      	mov	r3, r0
 80046fa:	e0d5      	b.n	80048a8 <handle_read_registers+0x272>

        if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 80046fc:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 8004700:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8004704:	4413      	add	r3, r2
 8004706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800470a:	d909      	bls.n	8004720 <handle_read_registers+0xea>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 800470c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004710:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004714:	2102      	movs	r1, #2
 8004716:	6818      	ldr	r0, [r3, #0]
 8004718:	f7ff fabc 	bl	8003c94 <send_exception_msg>
 800471c:	4603      	mov	r3, r0
 800471e:	e0c3      	b.n	80048a8 <handle_read_registers+0x272>

        if (callback) {
 8004720:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004724:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 80a5 	beq.w	800487a <handle_read_registers+0x244>
            uint16_t regs[125] = {0};
 8004730:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004734:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004738:	4618      	mov	r0, r3
 800473a:	23fa      	movs	r3, #250	; 0xfa
 800473c:	461a      	mov	r2, r3
 800473e:	2100      	movs	r1, #0
 8004740:	f001 fcb0 	bl	80060a4 <memset>
            err = callback(address, quantity, regs, nmbs->msg.unit_id, nmbs->platform.arg);
 8004744:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004748:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f893 6106 	ldrb.w	r6, [r3, #262]	; 0x106
 8004752:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004756:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8004760:	f107 0508 	add.w	r5, r7, #8
 8004764:	f8b7 1106 	ldrh.w	r1, [r7, #262]	; 0x106
 8004768:	f8b7 0108 	ldrh.w	r0, [r7, #264]	; 0x108
 800476c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004770:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004774:	9200      	str	r2, [sp, #0]
 8004776:	681c      	ldr	r4, [r3, #0]
 8004778:	4633      	mov	r3, r6
 800477a:	462a      	mov	r2, r5
 800477c:	47a0      	blx	r4
 800477e:	4603      	mov	r3, r0
 8004780:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
            if (err != NMBS_ERROR_NONE) {
 8004784:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004788:	2b00      	cmp	r3, #0
 800478a:	d01d      	beq.n	80047c8 <handle_read_registers+0x192>
                if (nmbs_error_is_exception(err))
 800478c:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004790:	2b00      	cmp	r3, #0
 8004792:	dd0f      	ble.n	80047b4 <handle_read_registers+0x17e>
 8004794:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004798:	2b04      	cmp	r3, #4
 800479a:	dc0b      	bgt.n	80047b4 <handle_read_registers+0x17e>
                    return send_exception_msg(nmbs, err);
 800479c:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 80047a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80047a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80047a8:	4611      	mov	r1, r2
 80047aa:	6818      	ldr	r0, [r3, #0]
 80047ac:	f7ff fa72 	bl	8003c94 <send_exception_msg>
 80047b0:	4603      	mov	r3, r0
 80047b2:	e079      	b.n	80048a8 <handle_read_registers+0x272>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 80047b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80047b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80047bc:	2104      	movs	r1, #4
 80047be:	6818      	ldr	r0, [r3, #0]
 80047c0:	f7ff fa68 	bl	8003c94 <send_exception_msg>
 80047c4:	4603      	mov	r3, r0
 80047c6:	e06f      	b.n	80048a8 <handle_read_registers+0x272>
            }

            if (!nmbs->msg.broadcast) {
 80047c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80047cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 80047d6:	f083 0301 	eor.w	r3, r3, #1
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d062      	beq.n	80048a6 <handle_read_registers+0x270>
                uint8_t regs_bytes = quantity * 2;
 80047e0:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
                put_res_header(nmbs, 1 + regs_bytes);
 80047ec:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	3301      	adds	r3, #1
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80047fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80047fe:	4611      	mov	r1, r2
 8004800:	6818      	ldr	r0, [r3, #0]
 8004802:	f7ff fa38 	bl	8003c76 <put_res_header>

                put_1(nmbs, regs_bytes);
 8004806:	f897 2105 	ldrb.w	r2, [r7, #261]	; 0x105
 800480a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800480e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004812:	4611      	mov	r1, r2
 8004814:	6818      	ldr	r0, [r3, #0]
 8004816:	f7fe fe88 	bl	800352a <put_1>

                NMBS_DEBUG_PRINT("b %d\t", regs_bytes);

                NMBS_DEBUG_PRINT("regs ");
                for (int i = 0; i < quantity; i++) {
 800481a:	2300      	movs	r3, #0
 800481c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004820:	e014      	b.n	800484c <handle_read_registers+0x216>
                    put_2(nmbs, regs[i]);
 8004822:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800482a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800482e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004832:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004836:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800483a:	4611      	mov	r1, r2
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	f7fe fed7 	bl	80035f0 <put_2>
                for (int i = 0; i < quantity; i++) {
 8004842:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004846:	3301      	adds	r3, #1
 8004848:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800484c:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8004850:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004854:	429a      	cmp	r2, r3
 8004856:	dbe4      	blt.n	8004822 <handle_read_registers+0x1ec>
                    NMBS_DEBUG_PRINT("%d ", regs[i]);
                }

                err = send_msg(nmbs);
 8004858:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800485c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004860:	6818      	ldr	r0, [r3, #0]
 8004862:	f7ff f9a9 	bl	8003bb8 <send_msg>
 8004866:	4603      	mov	r3, r0
 8004868:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
                if (err != NMBS_ERROR_NONE)
 800486c:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004870:	2b00      	cmp	r3, #0
 8004872:	d018      	beq.n	80048a6 <handle_read_registers+0x270>
                    return err;
 8004874:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004878:	e016      	b.n	80048a8 <handle_read_registers+0x272>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 800487a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800487e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004882:	2101      	movs	r1, #1
 8004884:	6818      	ldr	r0, [r3, #0]
 8004886:	f7ff fa05 	bl	8003c94 <send_exception_msg>
 800488a:	4603      	mov	r3, r0
 800488c:	e00c      	b.n	80048a8 <handle_read_registers+0x272>
        }
    }
    else {
        return recv_read_registers_res(nmbs, quantity, NULL);
 800488e:	f8b7 1106 	ldrh.w	r1, [r7, #262]	; 0x106
 8004892:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004896:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800489a:	2200      	movs	r2, #0
 800489c:	6818      	ldr	r0, [r3, #0]
 800489e:	f7ff faed 	bl	8003e7c <recv_read_registers_res>
 80048a2:	4603      	mov	r3, r0
 80048a4:	e000      	b.n	80048a8 <handle_read_registers+0x272>
    }

    return NMBS_ERROR_NONE;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048b2 <handle_read_coils>:
#endif


#ifndef NMBS_SERVER_READ_COILS_DISABLED
static nmbs_error handle_read_coils(nmbs_t* nmbs) {
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b082      	sub	sp, #8
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
    return handle_read_discrete(nmbs, nmbs->callbacks.read_coils);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80048c0:	4619      	mov	r1, r3
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7ff fd75 	bl	80043b2 <handle_read_discrete>
 80048c8:	4603      	mov	r3, r0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <handle_read_discrete_inputs>:
#endif


#ifndef NMBS_SERVER_READ_DISCRETE_INPUTS_DISABLED
static nmbs_error handle_read_discrete_inputs(nmbs_t* nmbs) {
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b082      	sub	sp, #8
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
    return handle_read_discrete(nmbs, nmbs->callbacks.read_discrete_inputs);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80048e0:	4619      	mov	r1, r3
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7ff fd65 	bl	80043b2 <handle_read_discrete>
 80048e8:	4603      	mov	r3, r0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <handle_read_holding_registers>:
#endif


#ifndef NMBS_SERVER_READ_HOLDING_REGISTERS_DISABLED
static nmbs_error handle_read_holding_registers(nmbs_t* nmbs) {
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b082      	sub	sp, #8
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
    return handle_read_registers(nmbs, nmbs->callbacks.read_holding_registers);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004900:	4619      	mov	r1, r3
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7ff fe97 	bl	8004636 <handle_read_registers>
 8004908:	4603      	mov	r3, r0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <handle_read_input_registers>:
#endif


#ifndef NMBS_SERVER_READ_INPUT_REGISTERS_DISABLED
static nmbs_error handle_read_input_registers(nmbs_t* nmbs) {
 8004912:	b580      	push	{r7, lr}
 8004914:	b082      	sub	sp, #8
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
    return handle_read_registers(nmbs, nmbs->callbacks.read_input_registers);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8004920:	4619      	mov	r1, r3
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7ff fe87 	bl	8004636 <handle_read_registers>
 8004928:	4603      	mov	r3, r0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <handle_write_single_coil>:
#endif


#ifndef NMBS_SERVER_WRITE_SINGLE_COIL_DISABLED
static nmbs_error handle_write_single_coil(nmbs_t* nmbs) {
 8004932:	b590      	push	{r4, r7, lr}
 8004934:	b085      	sub	sp, #20
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
    nmbs_error err = recv(nmbs, 4);
 800493a:	2104      	movs	r1, #4
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7fe ffc4 	bl	80038ca <recv>
 8004942:	4603      	mov	r3, r0
 8004944:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8004946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d002      	beq.n	8004954 <handle_write_single_coil+0x22>
        return err;
 800494e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004952:	e08c      	b.n	8004a6e <handle_write_single_coil+0x13c>

    uint16_t address = get_2(nmbs);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f7fe fe27 	bl	80035a8 <get_2>
 800495a:	4603      	mov	r3, r0
 800495c:	81bb      	strh	r3, [r7, #12]
    uint16_t value = get_2(nmbs);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7fe fe22 	bl	80035a8 <get_2>
 8004964:	4603      	mov	r3, r0
 8004966:	817b      	strh	r3, [r7, #10]

    NMBS_DEBUG_PRINT("a %d\tvalue %d", address, value);

    err = recv_msg_footer(nmbs);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7ff f80a 	bl	8003982 <recv_msg_footer>
 800496e:	4603      	mov	r3, r0
 8004970:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8004972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <handle_write_single_coil+0x4e>
        return err;
 800497a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800497e:	e076      	b.n	8004a6e <handle_write_single_coil+0x13c>

    if (!nmbs->msg.ignored) {
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8004986:	f083 0301 	eor.w	r3, r3, #1
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	d065      	beq.n	8004a5c <handle_write_single_coil+0x12a>
        if (nmbs->callbacks.write_single_coil) {
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8004996:	2b00      	cmp	r3, #0
 8004998:	d05a      	beq.n	8004a50 <handle_write_single_coil+0x11e>
            if (value != 0 && value != 0xFF00)
 800499a:	897b      	ldrh	r3, [r7, #10]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d009      	beq.n	80049b4 <handle_write_single_coil+0x82>
 80049a0:	897b      	ldrh	r3, [r7, #10]
 80049a2:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 80049a6:	d005      	beq.n	80049b4 <handle_write_single_coil+0x82>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 80049a8:	2103      	movs	r1, #3
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7ff f972 	bl	8003c94 <send_exception_msg>
 80049b0:	4603      	mov	r3, r0
 80049b2:	e05c      	b.n	8004a6e <handle_write_single_coil+0x13c>

            err = nmbs->callbacks.write_single_coil(address, value == 0 ? false : true, nmbs->msg.unit_id,
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f8d3 411c 	ldr.w	r4, [r3, #284]	; 0x11c
 80049ba:	897b      	ldrh	r3, [r7, #10]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	bf14      	ite	ne
 80049c0:	2301      	movne	r3, #1
 80049c2:	2300      	moveq	r3, #0
 80049c4:	b2d9      	uxtb	r1, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80049d2:	89b8      	ldrh	r0, [r7, #12]
 80049d4:	47a0      	blx	r4
 80049d6:	4603      	mov	r3, r0
 80049d8:	73fb      	strb	r3, [r7, #15]
                                                    nmbs->platform.arg);
            if (err != NMBS_ERROR_NONE) {
 80049da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d014      	beq.n	8004a0c <handle_write_single_coil+0xda>
                if (nmbs_error_is_exception(err))
 80049e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	dd0a      	ble.n	8004a00 <handle_write_single_coil+0xce>
 80049ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	dc06      	bgt.n	8004a00 <handle_write_single_coil+0xce>
                    return send_exception_msg(nmbs, err);
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
 80049f4:	4619      	mov	r1, r3
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7ff f94c 	bl	8003c94 <send_exception_msg>
 80049fc:	4603      	mov	r3, r0
 80049fe:	e036      	b.n	8004a6e <handle_write_single_coil+0x13c>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8004a00:	2104      	movs	r1, #4
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7ff f946 	bl	8003c94 <send_exception_msg>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	e030      	b.n	8004a6e <handle_write_single_coil+0x13c>
            }

            if (!nmbs->msg.broadcast) {
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8004a12:	f083 0301 	eor.w	r3, r3, #1
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d027      	beq.n	8004a6c <handle_write_single_coil+0x13a>
                put_res_header(nmbs, 4);
 8004a1c:	2104      	movs	r1, #4
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7ff f929 	bl	8003c76 <put_res_header>

                put_2(nmbs, address);
 8004a24:	89bb      	ldrh	r3, [r7, #12]
 8004a26:	4619      	mov	r1, r3
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f7fe fde1 	bl	80035f0 <put_2>
                put_2(nmbs, value);
 8004a2e:	897b      	ldrh	r3, [r7, #10]
 8004a30:	4619      	mov	r1, r3
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7fe fddc 	bl	80035f0 <put_2>
                NMBS_DEBUG_PRINT("a %d\tvalue %d", address, value);

                err = send_msg(nmbs);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f7ff f8bd 	bl	8003bb8 <send_msg>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	73fb      	strb	r3, [r7, #15]
                if (err != NMBS_ERROR_NONE)
 8004a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d010      	beq.n	8004a6c <handle_write_single_coil+0x13a>
                    return err;
 8004a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a4e:	e00e      	b.n	8004a6e <handle_write_single_coil+0x13c>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8004a50:	2101      	movs	r1, #1
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7ff f91e 	bl	8003c94 <send_exception_msg>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	e008      	b.n	8004a6e <handle_write_single_coil+0x13c>
        }
    }
    else {
        return recv_write_single_coil_res(nmbs, address, value);
 8004a5c:	897a      	ldrh	r2, [r7, #10]
 8004a5e:	89bb      	ldrh	r3, [r7, #12]
 8004a60:	4619      	mov	r1, r3
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7ff fa72 	bl	8003f4c <recv_write_single_coil_res>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	e000      	b.n	8004a6e <handle_write_single_coil+0x13c>
    }

    return NMBS_ERROR_NONE;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd90      	pop	{r4, r7, pc}

08004a76 <handle_write_single_register>:
#endif


#ifndef NMBS_SERVER_WRITE_SINGLE_REGISTER_DISABLED
static nmbs_error handle_write_single_register(nmbs_t* nmbs) {
 8004a76:	b590      	push	{r4, r7, lr}
 8004a78:	b085      	sub	sp, #20
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
    nmbs_error err = recv(nmbs, 4);
 8004a7e:	2104      	movs	r1, #4
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7fe ff22 	bl	80038ca <recv>
 8004a86:	4603      	mov	r3, r0
 8004a88:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8004a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <handle_write_single_register+0x22>
        return err;
 8004a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a96:	e07a      	b.n	8004b8e <handle_write_single_register+0x118>

    uint16_t address = get_2(nmbs);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f7fe fd85 	bl	80035a8 <get_2>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	81bb      	strh	r3, [r7, #12]
    uint16_t value = get_2(nmbs);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7fe fd80 	bl	80035a8 <get_2>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	817b      	strh	r3, [r7, #10]

    NMBS_DEBUG_PRINT("a %d\tvalue %d", address, value);

    err = recv_msg_footer(nmbs);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7fe ff68 	bl	8003982 <recv_msg_footer>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8004ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d002      	beq.n	8004ac4 <handle_write_single_register+0x4e>
        return err;
 8004abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ac2:	e064      	b.n	8004b8e <handle_write_single_register+0x118>

    if (!nmbs->msg.ignored) {
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8004aca:	f083 0301 	eor.w	r3, r3, #1
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d053      	beq.n	8004b7c <handle_write_single_register+0x106>
        if (nmbs->callbacks.write_single_register) {
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d048      	beq.n	8004b70 <handle_write_single_register+0xfa>
            err = nmbs->callbacks.write_single_register(address, value, nmbs->msg.unit_id, nmbs->platform.arg);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8004af0:	8979      	ldrh	r1, [r7, #10]
 8004af2:	89b8      	ldrh	r0, [r7, #12]
 8004af4:	47a0      	blx	r4
 8004af6:	4603      	mov	r3, r0
 8004af8:	73fb      	strb	r3, [r7, #15]
            if (err != NMBS_ERROR_NONE) {
 8004afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d014      	beq.n	8004b2c <handle_write_single_register+0xb6>
                if (nmbs_error_is_exception(err))
 8004b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	dd0a      	ble.n	8004b20 <handle_write_single_register+0xaa>
 8004b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	dc06      	bgt.n	8004b20 <handle_write_single_register+0xaa>
                    return send_exception_msg(nmbs, err);
 8004b12:	7bfb      	ldrb	r3, [r7, #15]
 8004b14:	4619      	mov	r1, r3
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7ff f8bc 	bl	8003c94 <send_exception_msg>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	e036      	b.n	8004b8e <handle_write_single_register+0x118>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8004b20:	2104      	movs	r1, #4
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7ff f8b6 	bl	8003c94 <send_exception_msg>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	e030      	b.n	8004b8e <handle_write_single_register+0x118>
            }

            if (!nmbs->msg.broadcast) {
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8004b32:	f083 0301 	eor.w	r3, r3, #1
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d027      	beq.n	8004b8c <handle_write_single_register+0x116>
                put_res_header(nmbs, 4);
 8004b3c:	2104      	movs	r1, #4
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7ff f899 	bl	8003c76 <put_res_header>

                put_2(nmbs, address);
 8004b44:	89bb      	ldrh	r3, [r7, #12]
 8004b46:	4619      	mov	r1, r3
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7fe fd51 	bl	80035f0 <put_2>
                put_2(nmbs, value);
 8004b4e:	897b      	ldrh	r3, [r7, #10]
 8004b50:	4619      	mov	r1, r3
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7fe fd4c 	bl	80035f0 <put_2>
                NMBS_DEBUG_PRINT("a %d\tvalue %d", address, value);

                err = send_msg(nmbs);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7ff f82d 	bl	8003bb8 <send_msg>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	73fb      	strb	r3, [r7, #15]
                if (err != NMBS_ERROR_NONE)
 8004b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d010      	beq.n	8004b8c <handle_write_single_register+0x116>
                    return err;
 8004b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b6e:	e00e      	b.n	8004b8e <handle_write_single_register+0x118>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8004b70:	2101      	movs	r1, #1
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7ff f88e 	bl	8003c94 <send_exception_msg>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	e008      	b.n	8004b8e <handle_write_single_register+0x118>
        }
    }
    else {
        return recv_write_single_register_res(nmbs, address, value);
 8004b7c:	897a      	ldrh	r2, [r7, #10]
 8004b7e:	89bb      	ldrh	r3, [r7, #12]
 8004b80:	4619      	mov	r1, r3
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7ff fa2c 	bl	8003fe0 <recv_write_single_register_res>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	e000      	b.n	8004b8e <handle_write_single_register+0x118>
    }

    return NMBS_ERROR_NONE;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd90      	pop	{r4, r7, pc}

08004b96 <handle_write_multiple_coils>:
#endif


#ifndef NMBS_SERVER_WRITE_MULTIPLE_COILS_DISABLED
static nmbs_error handle_write_multiple_coils(nmbs_t* nmbs) {
 8004b96:	b5b0      	push	{r4, r5, r7, lr}
 8004b98:	b0c6      	sub	sp, #280	; 0x118
 8004b9a:	af02      	add	r7, sp, #8
 8004b9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ba0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ba4:	6018      	str	r0, [r3, #0]
    nmbs_error err = recv(nmbs, 5);
 8004ba6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004baa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004bae:	2105      	movs	r1, #5
 8004bb0:	6818      	ldr	r0, [r3, #0]
 8004bb2:	f7fe fe8a 	bl	80038ca <recv>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8004bbc:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d002      	beq.n	8004bca <handle_write_multiple_coils+0x34>
        return err;
 8004bc4:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004bc8:	e163      	b.n	8004e92 <handle_write_multiple_coils+0x2fc>

    uint16_t address = get_2(nmbs);
 8004bca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004bce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004bd2:	6818      	ldr	r0, [r3, #0]
 8004bd4:	f7fe fce8 	bl	80035a8 <get_2>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    uint16_t quantity = get_2(nmbs);
 8004bde:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004be2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004be6:	6818      	ldr	r0, [r3, #0]
 8004be8:	f7fe fcde 	bl	80035a8 <get_2>
 8004bec:	4603      	mov	r3, r0
 8004bee:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
    uint8_t coils_bytes = get_1(nmbs);
 8004bf2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004bf6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004bfa:	6818      	ldr	r0, [r3, #0]
 8004bfc:	f7fe fc7c 	bl	80034f8 <get_1>
 8004c00:	4603      	mov	r3, r0
 8004c02:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105

    NMBS_DEBUG_PRINT("a %d\tq %d\tb %d\tcoils ", address, quantity, coils_bytes);

    err = recv(nmbs, coils_bytes);
 8004c06:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004c10:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c14:	4611      	mov	r1, r2
 8004c16:	6818      	ldr	r0, [r3, #0]
 8004c18:	f7fe fe57 	bl	80038ca <recv>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8004c22:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d002      	beq.n	8004c30 <handle_write_multiple_coils+0x9a>
        return err;
 8004c2a:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004c2e:	e130      	b.n	8004e92 <handle_write_multiple_coils+0x2fc>

    nmbs_bitfield coils = {0};
 8004c30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004c34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c38:	2200      	movs	r2, #0
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	22f6      	movs	r2, #246	; 0xf6
 8004c40:	2100      	movs	r1, #0
 8004c42:	4618      	mov	r0, r3
 8004c44:	f001 fa2e 	bl	80060a4 <memset>
    for (int i = 0; i < coils_bytes; i++) {
 8004c48:	2300      	movs	r3, #0
 8004c4a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004c4e:	e016      	b.n	8004c7e <handle_write_multiple_coils+0xe8>
        coils[i] = get_1(nmbs);
 8004c50:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004c54:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c58:	6818      	ldr	r0, [r3, #0]
 8004c5a:	f7fe fc4d 	bl	80034f8 <get_1>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	4619      	mov	r1, r3
 8004c62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004c66:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8004c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c6e:	4413      	add	r3, r2
 8004c70:	460a      	mov	r2, r1
 8004c72:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < coils_bytes; i++) {
 8004c74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c78:	3301      	adds	r3, #1
 8004c7a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004c7e:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8004c82:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004c86:	429a      	cmp	r2, r3
 8004c88:	dbe2      	blt.n	8004c50 <handle_write_multiple_coils+0xba>
        NMBS_DEBUG_PRINT("%d ", coils[i]);
    }

    err = recv_msg_footer(nmbs);
 8004c8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004c8e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c92:	6818      	ldr	r0, [r3, #0]
 8004c94:	f7fe fe75 	bl	8003982 <recv_msg_footer>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8004c9e:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <handle_write_multiple_coils+0x116>
        return err;
 8004ca6:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004caa:	e0f2      	b.n	8004e92 <handle_write_multiple_coils+0x2fc>

    if (!nmbs->msg.ignored) {
 8004cac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004cb0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8004cba:	f083 0301 	eor.w	r3, r3, #1
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 80d8 	beq.w	8004e76 <handle_write_multiple_coils+0x2e0>
        if (quantity < 1 || quantity > 0x07B0)
 8004cc6:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d004      	beq.n	8004cd8 <handle_write_multiple_coils+0x142>
 8004cce:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8004cd2:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 8004cd6:	d909      	bls.n	8004cec <handle_write_multiple_coils+0x156>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8004cd8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004cdc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ce0:	2103      	movs	r1, #3
 8004ce2:	6818      	ldr	r0, [r3, #0]
 8004ce4:	f7fe ffd6 	bl	8003c94 <send_exception_msg>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	e0d2      	b.n	8004e92 <handle_write_multiple_coils+0x2fc>

        if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 8004cec:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 8004cf0:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cfa:	d909      	bls.n	8004d10 <handle_write_multiple_coils+0x17a>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8004cfc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d00:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d04:	2102      	movs	r1, #2
 8004d06:	6818      	ldr	r0, [r3, #0]
 8004d08:	f7fe ffc4 	bl	8003c94 <send_exception_msg>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	e0c0      	b.n	8004e92 <handle_write_multiple_coils+0x2fc>

        if (coils_bytes == 0)
 8004d10:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d109      	bne.n	8004d2c <handle_write_multiple_coils+0x196>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8004d18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d1c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d20:	2103      	movs	r1, #3
 8004d22:	6818      	ldr	r0, [r3, #0]
 8004d24:	f7fe ffb6 	bl	8003c94 <send_exception_msg>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	e0b2      	b.n	8004e92 <handle_write_multiple_coils+0x2fc>

        if ((quantity + 7) / 8 != coils_bytes)
 8004d2c:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8004d30:	3307      	adds	r3, #7
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	da00      	bge.n	8004d38 <handle_write_multiple_coils+0x1a2>
 8004d36:	3307      	adds	r3, #7
 8004d38:	10db      	asrs	r3, r3, #3
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d009      	beq.n	8004d58 <handle_write_multiple_coils+0x1c2>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8004d44:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d48:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d4c:	2103      	movs	r1, #3
 8004d4e:	6818      	ldr	r0, [r3, #0]
 8004d50:	f7fe ffa0 	bl	8003c94 <send_exception_msg>
 8004d54:	4603      	mov	r3, r0
 8004d56:	e09c      	b.n	8004e92 <handle_write_multiple_coils+0x2fc>

        if (nmbs->callbacks.write_multiple_coils) {
 8004d58:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d5c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d07b      	beq.n	8004e62 <handle_write_multiple_coils+0x2cc>
            err = nmbs->callbacks.write_multiple_coils(address, quantity, coils, nmbs->msg.unit_id, nmbs->platform.arg);
 8004d6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d6e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f8d3 4124 	ldr.w	r4, [r3, #292]	; 0x124
 8004d78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d7c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f893 5106 	ldrb.w	r5, [r3, #262]	; 0x106
 8004d86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d8a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8004d94:	f107 0208 	add.w	r2, r7, #8
 8004d98:	f8b7 1106 	ldrh.w	r1, [r7, #262]	; 0x106
 8004d9c:	f8b7 0108 	ldrh.w	r0, [r7, #264]	; 0x108
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	462b      	mov	r3, r5
 8004da4:	47a0      	blx	r4
 8004da6:	4603      	mov	r3, r0
 8004da8:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
            if (err != NMBS_ERROR_NONE) {
 8004dac:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d01d      	beq.n	8004df0 <handle_write_multiple_coils+0x25a>
                if (nmbs_error_is_exception(err))
 8004db4:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	dd0f      	ble.n	8004ddc <handle_write_multiple_coils+0x246>
 8004dbc:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004dc0:	2b04      	cmp	r3, #4
 8004dc2:	dc0b      	bgt.n	8004ddc <handle_write_multiple_coils+0x246>
                    return send_exception_msg(nmbs, err);
 8004dc4:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 8004dc8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004dcc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004dd0:	4611      	mov	r1, r2
 8004dd2:	6818      	ldr	r0, [r3, #0]
 8004dd4:	f7fe ff5e 	bl	8003c94 <send_exception_msg>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	e05a      	b.n	8004e92 <handle_write_multiple_coils+0x2fc>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8004ddc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004de0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004de4:	2104      	movs	r1, #4
 8004de6:	6818      	ldr	r0, [r3, #0]
 8004de8:	f7fe ff54 	bl	8003c94 <send_exception_msg>
 8004dec:	4603      	mov	r3, r0
 8004dee:	e050      	b.n	8004e92 <handle_write_multiple_coils+0x2fc>
            }

            if (!nmbs->msg.broadcast) {
 8004df0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004df4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8004dfe:	f083 0301 	eor.w	r3, r3, #1
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d043      	beq.n	8004e90 <handle_write_multiple_coils+0x2fa>
                put_res_header(nmbs, 4);
 8004e08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e0c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e10:	2104      	movs	r1, #4
 8004e12:	6818      	ldr	r0, [r3, #0]
 8004e14:	f7fe ff2f 	bl	8003c76 <put_res_header>

                put_2(nmbs, address);
 8004e18:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 8004e1c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e20:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e24:	4611      	mov	r1, r2
 8004e26:	6818      	ldr	r0, [r3, #0]
 8004e28:	f7fe fbe2 	bl	80035f0 <put_2>
                put_2(nmbs, quantity);
 8004e2c:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 8004e30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e34:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e38:	4611      	mov	r1, r2
 8004e3a:	6818      	ldr	r0, [r3, #0]
 8004e3c:	f7fe fbd8 	bl	80035f0 <put_2>
                NMBS_DEBUG_PRINT("a %d\tq %d", address, quantity);

                err = send_msg(nmbs);
 8004e40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e44:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e48:	6818      	ldr	r0, [r3, #0]
 8004e4a:	f7fe feb5 	bl	8003bb8 <send_msg>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
                if (err != NMBS_ERROR_NONE)
 8004e54:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d019      	beq.n	8004e90 <handle_write_multiple_coils+0x2fa>
                    return err;
 8004e5c:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004e60:	e017      	b.n	8004e92 <handle_write_multiple_coils+0x2fc>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8004e62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e66:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	6818      	ldr	r0, [r3, #0]
 8004e6e:	f7fe ff11 	bl	8003c94 <send_exception_msg>
 8004e72:	4603      	mov	r3, r0
 8004e74:	e00d      	b.n	8004e92 <handle_write_multiple_coils+0x2fc>
        }
    }
    else {
        return recv_write_multiple_coils_res(nmbs, address, quantity);
 8004e76:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 8004e7a:	f8b7 1108 	ldrh.w	r1, [r7, #264]	; 0x108
 8004e7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e86:	6818      	ldr	r0, [r3, #0]
 8004e88:	f7ff f8f4 	bl	8004074 <recv_write_multiple_coils_res>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	e000      	b.n	8004e92 <handle_write_multiple_coils+0x2fc>
    }

    return NMBS_ERROR_NONE;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bdb0      	pop	{r4, r5, r7, pc}

08004e9c <handle_write_multiple_registers>:
#endif


#ifndef NMBS_SERVER_WRITE_MULTIPLE_REGISTERS_DISABLED
static nmbs_error handle_write_multiple_registers(nmbs_t* nmbs) {
 8004e9c:	b5b0      	push	{r4, r5, r7, lr}
 8004e9e:	b0c6      	sub	sp, #280	; 0x118
 8004ea0:	af02      	add	r7, sp, #8
 8004ea2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ea6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004eaa:	6018      	str	r0, [r3, #0]
    nmbs_error err = recv(nmbs, 5);
 8004eac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004eb0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004eb4:	2105      	movs	r1, #5
 8004eb6:	6818      	ldr	r0, [r3, #0]
 8004eb8:	f7fe fd07 	bl	80038ca <recv>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8004ec2:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d002      	beq.n	8004ed0 <handle_write_multiple_registers+0x34>
        return err;
 8004eca:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004ece:	e153      	b.n	8005178 <handle_write_multiple_registers+0x2dc>

    uint16_t address = get_2(nmbs);
 8004ed0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ed4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ed8:	6818      	ldr	r0, [r3, #0]
 8004eda:	f7fe fb65 	bl	80035a8 <get_2>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    uint16_t quantity = get_2(nmbs);
 8004ee4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ee8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004eec:	6818      	ldr	r0, [r3, #0]
 8004eee:	f7fe fb5b 	bl	80035a8 <get_2>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
    uint8_t registers_bytes = get_1(nmbs);
 8004ef8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004efc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f00:	6818      	ldr	r0, [r3, #0]
 8004f02:	f7fe faf9 	bl	80034f8 <get_1>
 8004f06:	4603      	mov	r3, r0
 8004f08:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105

    NMBS_DEBUG_PRINT("a %d\tq %d\tb %d\tregs ", address, quantity, registers_bytes);

    err = recv(nmbs, registers_bytes);
 8004f0c:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f16:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f1a:	4611      	mov	r1, r2
 8004f1c:	6818      	ldr	r0, [r3, #0]
 8004f1e:	f7fe fcd4 	bl	80038ca <recv>
 8004f22:	4603      	mov	r3, r0
 8004f24:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8004f28:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d002      	beq.n	8004f36 <handle_write_multiple_registers+0x9a>
        return err;
 8004f30:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004f34:	e120      	b.n	8005178 <handle_write_multiple_registers+0x2dc>

    uint16_t registers[0x007B];
    for (int i = 0; i < registers_bytes / 2; i++) {
 8004f36:	2300      	movs	r3, #0
 8004f38:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004f3c:	e015      	b.n	8004f6a <handle_write_multiple_registers+0xce>
        registers[i] = get_2(nmbs);
 8004f3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f42:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f46:	6818      	ldr	r0, [r3, #0]
 8004f48:	f7fe fb2e 	bl	80035a8 <get_2>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	4619      	mov	r1, r3
 8004f50:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f58:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004f5c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 0; i < registers_bytes / 2; i++) {
 8004f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f64:	3301      	adds	r3, #1
 8004f66:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004f6a:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8004f6e:	085b      	lsrs	r3, r3, #1
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	461a      	mov	r2, r3
 8004f74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	dbe0      	blt.n	8004f3e <handle_write_multiple_registers+0xa2>
        NMBS_DEBUG_PRINT("%d ", registers[i]);
    }

    err = recv_msg_footer(nmbs);
 8004f7c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f80:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f84:	6818      	ldr	r0, [r3, #0]
 8004f86:	f7fe fcfc 	bl	8003982 <recv_msg_footer>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8004f90:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d002      	beq.n	8004f9e <handle_write_multiple_registers+0x102>
        return err;
 8004f98:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004f9c:	e0ec      	b.n	8005178 <handle_write_multiple_registers+0x2dc>

    if (!nmbs->msg.ignored) {
 8004f9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004fa2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8004fac:	f083 0301 	eor.w	r3, r3, #1
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f000 80d2 	beq.w	800515c <handle_write_multiple_registers+0x2c0>
        if (quantity < 1 || quantity > 0x007B)
 8004fb8:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d003      	beq.n	8004fc8 <handle_write_multiple_registers+0x12c>
 8004fc0:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8004fc4:	2b7b      	cmp	r3, #123	; 0x7b
 8004fc6:	d909      	bls.n	8004fdc <handle_write_multiple_registers+0x140>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8004fc8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004fcc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004fd0:	2103      	movs	r1, #3
 8004fd2:	6818      	ldr	r0, [r3, #0]
 8004fd4:	f7fe fe5e 	bl	8003c94 <send_exception_msg>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	e0cd      	b.n	8005178 <handle_write_multiple_registers+0x2dc>

        if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 8004fdc:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 8004fe0:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fea:	d909      	bls.n	8005000 <handle_write_multiple_registers+0x164>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8004fec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ff0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ff4:	2102      	movs	r1, #2
 8004ff6:	6818      	ldr	r0, [r3, #0]
 8004ff8:	f7fe fe4c 	bl	8003c94 <send_exception_msg>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	e0bb      	b.n	8005178 <handle_write_multiple_registers+0x2dc>

        if (registers_bytes == 0)
 8005000:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8005004:	2b00      	cmp	r3, #0
 8005006:	d109      	bne.n	800501c <handle_write_multiple_registers+0x180>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8005008:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800500c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005010:	2103      	movs	r1, #3
 8005012:	6818      	ldr	r0, [r3, #0]
 8005014:	f7fe fe3e 	bl	8003c94 <send_exception_msg>
 8005018:	4603      	mov	r3, r0
 800501a:	e0ad      	b.n	8005178 <handle_write_multiple_registers+0x2dc>

        if (registers_bytes != quantity * 2)
 800501c:	f897 2105 	ldrb.w	r2, [r7, #261]	; 0x105
 8005020:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	429a      	cmp	r2, r3
 8005028:	d009      	beq.n	800503e <handle_write_multiple_registers+0x1a2>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 800502a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800502e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005032:	2103      	movs	r1, #3
 8005034:	6818      	ldr	r0, [r3, #0]
 8005036:	f7fe fe2d 	bl	8003c94 <send_exception_msg>
 800503a:	4603      	mov	r3, r0
 800503c:	e09c      	b.n	8005178 <handle_write_multiple_registers+0x2dc>

        if (nmbs->callbacks.write_multiple_registers) {
 800503e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005042:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800504c:	2b00      	cmp	r3, #0
 800504e:	d07b      	beq.n	8005148 <handle_write_multiple_registers+0x2ac>
            err = nmbs->callbacks.write_multiple_registers(address, quantity, registers, nmbs->msg.unit_id,
 8005050:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005054:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f8d3 4128 	ldr.w	r4, [r3, #296]	; 0x128
 800505e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005062:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f893 5106 	ldrb.w	r5, [r3, #262]	; 0x106
 800506c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005070:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800507a:	f107 020c 	add.w	r2, r7, #12
 800507e:	f8b7 1106 	ldrh.w	r1, [r7, #262]	; 0x106
 8005082:	f8b7 0108 	ldrh.w	r0, [r7, #264]	; 0x108
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	462b      	mov	r3, r5
 800508a:	47a0      	blx	r4
 800508c:	4603      	mov	r3, r0
 800508e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
                                                           nmbs->platform.arg);
            if (err != NMBS_ERROR_NONE) {
 8005092:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8005096:	2b00      	cmp	r3, #0
 8005098:	d01d      	beq.n	80050d6 <handle_write_multiple_registers+0x23a>
                if (nmbs_error_is_exception(err))
 800509a:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 800509e:	2b00      	cmp	r3, #0
 80050a0:	dd0f      	ble.n	80050c2 <handle_write_multiple_registers+0x226>
 80050a2:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	dc0b      	bgt.n	80050c2 <handle_write_multiple_registers+0x226>
                    return send_exception_msg(nmbs, err);
 80050aa:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 80050ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80050b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80050b6:	4611      	mov	r1, r2
 80050b8:	6818      	ldr	r0, [r3, #0]
 80050ba:	f7fe fdeb 	bl	8003c94 <send_exception_msg>
 80050be:	4603      	mov	r3, r0
 80050c0:	e05a      	b.n	8005178 <handle_write_multiple_registers+0x2dc>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 80050c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80050c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80050ca:	2104      	movs	r1, #4
 80050cc:	6818      	ldr	r0, [r3, #0]
 80050ce:	f7fe fde1 	bl	8003c94 <send_exception_msg>
 80050d2:	4603      	mov	r3, r0
 80050d4:	e050      	b.n	8005178 <handle_write_multiple_registers+0x2dc>
            }

            if (!nmbs->msg.broadcast) {
 80050d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80050da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 80050e4:	f083 0301 	eor.w	r3, r3, #1
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d043      	beq.n	8005176 <handle_write_multiple_registers+0x2da>
                put_res_header(nmbs, 4);
 80050ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80050f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80050f6:	2104      	movs	r1, #4
 80050f8:	6818      	ldr	r0, [r3, #0]
 80050fa:	f7fe fdbc 	bl	8003c76 <put_res_header>

                put_2(nmbs, address);
 80050fe:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 8005102:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005106:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800510a:	4611      	mov	r1, r2
 800510c:	6818      	ldr	r0, [r3, #0]
 800510e:	f7fe fa6f 	bl	80035f0 <put_2>
                put_2(nmbs, quantity);
 8005112:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 8005116:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800511a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800511e:	4611      	mov	r1, r2
 8005120:	6818      	ldr	r0, [r3, #0]
 8005122:	f7fe fa65 	bl	80035f0 <put_2>
                NMBS_DEBUG_PRINT("a %d\tq %d", address, quantity);

                err = send_msg(nmbs);
 8005126:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800512a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800512e:	6818      	ldr	r0, [r3, #0]
 8005130:	f7fe fd42 	bl	8003bb8 <send_msg>
 8005134:	4603      	mov	r3, r0
 8005136:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
                if (err != NMBS_ERROR_NONE)
 800513a:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 800513e:	2b00      	cmp	r3, #0
 8005140:	d019      	beq.n	8005176 <handle_write_multiple_registers+0x2da>
                    return err;
 8005142:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8005146:	e017      	b.n	8005178 <handle_write_multiple_registers+0x2dc>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8005148:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800514c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005150:	2101      	movs	r1, #1
 8005152:	6818      	ldr	r0, [r3, #0]
 8005154:	f7fe fd9e 	bl	8003c94 <send_exception_msg>
 8005158:	4603      	mov	r3, r0
 800515a:	e00d      	b.n	8005178 <handle_write_multiple_registers+0x2dc>
        }
    }
    else {
        return recv_write_multiple_registers_res(nmbs, address, quantity);
 800515c:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 8005160:	f8b7 1108 	ldrh.w	r1, [r7, #264]	; 0x108
 8005164:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005168:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800516c:	6818      	ldr	r0, [r3, #0]
 800516e:	f7fe ffcb 	bl	8004108 <recv_write_multiple_registers_res>
 8005172:	4603      	mov	r3, r0
 8005174:	e000      	b.n	8005178 <handle_write_multiple_registers+0x2dc>
    }

    return NMBS_ERROR_NONE;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800517e:	46bd      	mov	sp, r7
 8005180:	bdb0      	pop	{r4, r5, r7, pc}

08005182 <handle_read_file_record>:
#endif

#ifndef NMBS_SERVER_READ_FILE_RECORD_DISABLED
static nmbs_error handle_read_file_record(nmbs_t* nmbs) {
 8005182:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005186:	b08b      	sub	sp, #44	; 0x2c
 8005188:	af02      	add	r7, sp, #8
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	466b      	mov	r3, sp
 800518e:	461e      	mov	r6, r3
    nmbs_error err = recv(nmbs, 1);
 8005190:	2101      	movs	r1, #1
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7fe fb99 	bl	80038ca <recv>
 8005198:	4603      	mov	r3, r0
 800519a:	76fb      	strb	r3, [r7, #27]
    if (err != NMBS_ERROR_NONE)
 800519c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d002      	beq.n	80051aa <handle_read_file_record+0x28>
        return err;
 80051a4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80051a8:	e199      	b.n	80054de <handle_read_file_record+0x35c>

    uint8_t request_size = get_1(nmbs);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7fe f9a4 	bl	80034f8 <get_1>
 80051b0:	4603      	mov	r3, r0
 80051b2:	76bb      	strb	r3, [r7, #26]

    err = recv(nmbs, request_size);
 80051b4:	7ebb      	ldrb	r3, [r7, #26]
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	4619      	mov	r1, r3
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7fe fb85 	bl	80038ca <recv>
 80051c0:	4603      	mov	r3, r0
 80051c2:	76fb      	strb	r3, [r7, #27]
    if (err != NMBS_ERROR_NONE)
 80051c4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <handle_read_file_record+0x50>
        return err;
 80051cc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80051d0:	e185      	b.n	80054de <handle_read_file_record+0x35c>

    const uint8_t subreq_header_size = 7;
 80051d2:	2307      	movs	r3, #7
 80051d4:	767b      	strb	r3, [r7, #25]
    const uint8_t subreq_count = request_size / subreq_header_size;
 80051d6:	7eba      	ldrb	r2, [r7, #26]
 80051d8:	7e7b      	ldrb	r3, [r7, #25]
 80051da:	fbb2 f3f3 	udiv	r3, r2, r3
 80051de:	763b      	strb	r3, [r7, #24]
        uint16_t record_length;
    }
#ifdef __STDC_NO_VLA__
    subreq[35];    // 245 / subreq_header_size
#else
    subreq[subreq_count];
 80051e0:	7e3b      	ldrb	r3, [r7, #24]
 80051e2:	3b01      	subs	r3, #1
 80051e4:	617b      	str	r3, [r7, #20]
 80051e6:	7e3b      	ldrb	r3, [r7, #24]
 80051e8:	2200      	movs	r2, #0
 80051ea:	4698      	mov	r8, r3
 80051ec:	4691      	mov	r9, r2
 80051ee:	f04f 0200 	mov.w	r2, #0
 80051f2:	f04f 0300 	mov.w	r3, #0
 80051f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80051fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80051fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005202:	7e3b      	ldrb	r3, [r7, #24]
 8005204:	2200      	movs	r2, #0
 8005206:	461c      	mov	r4, r3
 8005208:	4615      	mov	r5, r2
 800520a:	f04f 0200 	mov.w	r2, #0
 800520e:	f04f 0300 	mov.w	r3, #0
 8005212:	01ab      	lsls	r3, r5, #6
 8005214:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 8005218:	01a2      	lsls	r2, r4, #6
 800521a:	7e3b      	ldrb	r3, [r7, #24]
 800521c:	00db      	lsls	r3, r3, #3
 800521e:	3307      	adds	r3, #7
 8005220:	08db      	lsrs	r3, r3, #3
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	ebad 0d03 	sub.w	sp, sp, r3
 8005228:	ab02      	add	r3, sp, #8
 800522a:	3301      	adds	r3, #1
 800522c:	085b      	lsrs	r3, r3, #1
 800522e:	005b      	lsls	r3, r3, #1
 8005230:	613b      	str	r3, [r7, #16]
#endif

    uint8_t response_data_size = 0;
 8005232:	2300      	movs	r3, #0
 8005234:	77fb      	strb	r3, [r7, #31]

    for (uint8_t i = 0; i < subreq_count; i++) {
 8005236:	2300      	movs	r3, #0
 8005238:	77bb      	strb	r3, [r7, #30]
 800523a:	e038      	b.n	80052ae <handle_read_file_record+0x12c>
        subreq[i].reference_type = get_1(nmbs);
 800523c:	7fbc      	ldrb	r4, [r7, #30]
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7fe f95a 	bl	80034f8 <get_1>
 8005244:	4603      	mov	r3, r0
 8005246:	461a      	mov	r2, r3
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
        subreq[i].file_number = get_2(nmbs);
 800524e:	7fbc      	ldrb	r4, [r7, #30]
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7fe f9a9 	bl	80035a8 <get_2>
 8005256:	4603      	mov	r3, r0
 8005258:	4619      	mov	r1, r3
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	00e3      	lsls	r3, r4, #3
 800525e:	4413      	add	r3, r2
 8005260:	460a      	mov	r2, r1
 8005262:	805a      	strh	r2, [r3, #2]
        subreq[i].record_number = get_2(nmbs);
 8005264:	7fbc      	ldrb	r4, [r7, #30]
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7fe f99e 	bl	80035a8 <get_2>
 800526c:	4603      	mov	r3, r0
 800526e:	4619      	mov	r1, r3
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	00e3      	lsls	r3, r4, #3
 8005274:	4413      	add	r3, r2
 8005276:	460a      	mov	r2, r1
 8005278:	809a      	strh	r2, [r3, #4]
        subreq[i].record_length = get_2(nmbs);
 800527a:	7fbc      	ldrb	r4, [r7, #30]
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7fe f993 	bl	80035a8 <get_2>
 8005282:	4603      	mov	r3, r0
 8005284:	4619      	mov	r1, r3
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	00e3      	lsls	r3, r4, #3
 800528a:	4413      	add	r3, r2
 800528c:	460a      	mov	r2, r1
 800528e:	80da      	strh	r2, [r3, #6]

        response_data_size += 2 + subreq[i].record_length * 2;
 8005290:	7fbb      	ldrb	r3, [r7, #30]
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	4413      	add	r3, r2
 8005298:	88db      	ldrh	r3, [r3, #6]
 800529a:	3301      	adds	r3, #1
 800529c:	b2db      	uxtb	r3, r3
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	7ffb      	ldrb	r3, [r7, #31]
 80052a4:	4413      	add	r3, r2
 80052a6:	77fb      	strb	r3, [r7, #31]
    for (uint8_t i = 0; i < subreq_count; i++) {
 80052a8:	7fbb      	ldrb	r3, [r7, #30]
 80052aa:	3301      	adds	r3, #1
 80052ac:	77bb      	strb	r3, [r7, #30]
 80052ae:	7fba      	ldrb	r2, [r7, #30]
 80052b0:	7e3b      	ldrb	r3, [r7, #24]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d3c2      	bcc.n	800523c <handle_read_file_record+0xba>
    }

    discard_n(nmbs, request_size % subreq_header_size);
 80052b6:	7ebb      	ldrb	r3, [r7, #26]
 80052b8:	7e7a      	ldrb	r2, [r7, #25]
 80052ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80052be:	fb01 f202 	mul.w	r2, r1, r2
 80052c2:	1a9b      	subs	r3, r3, r2
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	4619      	mov	r1, r3
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7fe f958 	bl	8003580 <discard_n>

    err = recv_msg_footer(nmbs);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7fe fb56 	bl	8003982 <recv_msg_footer>
 80052d6:	4603      	mov	r3, r0
 80052d8:	76fb      	strb	r3, [r7, #27]
    if (err != NMBS_ERROR_NONE)
 80052da:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <handle_read_file_record+0x166>
        return err;
 80052e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80052e6:	e0fa      	b.n	80054de <handle_read_file_record+0x35c>

    if (!nmbs->msg.ignored) {
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 80052ee:	f083 0301 	eor.w	r3, r3, #1
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 80ea 	beq.w	80054ce <handle_read_file_record+0x34c>
        if (request_size % subreq_header_size)
 80052fa:	7ebb      	ldrb	r3, [r7, #26]
 80052fc:	7e7a      	ldrb	r2, [r7, #25]
 80052fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8005302:	fb01 f202 	mul.w	r2, r1, r2
 8005306:	1a9b      	subs	r3, r3, r2
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d005      	beq.n	800531a <handle_read_file_record+0x198>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 800530e:	2103      	movs	r1, #3
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f7fe fcbf 	bl	8003c94 <send_exception_msg>
 8005316:	4603      	mov	r3, r0
 8005318:	e0e1      	b.n	80054de <handle_read_file_record+0x35c>

        if (request_size < 0x07 || request_size > 0xF5)
 800531a:	7ebb      	ldrb	r3, [r7, #26]
 800531c:	2b06      	cmp	r3, #6
 800531e:	d902      	bls.n	8005326 <handle_read_file_record+0x1a4>
 8005320:	7ebb      	ldrb	r3, [r7, #26]
 8005322:	2bf5      	cmp	r3, #245	; 0xf5
 8005324:	d905      	bls.n	8005332 <handle_read_file_record+0x1b0>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8005326:	2103      	movs	r1, #3
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f7fe fcb3 	bl	8003c94 <send_exception_msg>
 800532e:	4603      	mov	r3, r0
 8005330:	e0d5      	b.n	80054de <handle_read_file_record+0x35c>

        for (uint8_t i = 0; i < subreq_count; i++) {
 8005332:	2300      	movs	r3, #0
 8005334:	777b      	strb	r3, [r7, #29]
 8005336:	e037      	b.n	80053a8 <handle_read_file_record+0x226>
            if (subreq[i].reference_type != 0x06)
 8005338:	7f7a      	ldrb	r2, [r7, #29]
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8005340:	2b06      	cmp	r3, #6
 8005342:	d005      	beq.n	8005350 <handle_read_file_record+0x1ce>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8005344:	2102      	movs	r1, #2
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7fe fca4 	bl	8003c94 <send_exception_msg>
 800534c:	4603      	mov	r3, r0
 800534e:	e0c6      	b.n	80054de <handle_read_file_record+0x35c>

            if (subreq[i].file_number == 0x0000)
 8005350:	7f7b      	ldrb	r3, [r7, #29]
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	00db      	lsls	r3, r3, #3
 8005356:	4413      	add	r3, r2
 8005358:	885b      	ldrh	r3, [r3, #2]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d105      	bne.n	800536a <handle_read_file_record+0x1e8>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 800535e:	2102      	movs	r1, #2
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7fe fc97 	bl	8003c94 <send_exception_msg>
 8005366:	4603      	mov	r3, r0
 8005368:	e0b9      	b.n	80054de <handle_read_file_record+0x35c>

            if (subreq[i].record_number > 0x270F)
 800536a:	7f7b      	ldrb	r3, [r7, #29]
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	4413      	add	r3, r2
 8005372:	889b      	ldrh	r3, [r3, #4]
 8005374:	f242 720f 	movw	r2, #9999	; 0x270f
 8005378:	4293      	cmp	r3, r2
 800537a:	d905      	bls.n	8005388 <handle_read_file_record+0x206>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 800537c:	2102      	movs	r1, #2
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7fe fc88 	bl	8003c94 <send_exception_msg>
 8005384:	4603      	mov	r3, r0
 8005386:	e0aa      	b.n	80054de <handle_read_file_record+0x35c>

            if (subreq[i].record_length > 124)
 8005388:	7f7b      	ldrb	r3, [r7, #29]
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	00db      	lsls	r3, r3, #3
 800538e:	4413      	add	r3, r2
 8005390:	88db      	ldrh	r3, [r3, #6]
 8005392:	2b7c      	cmp	r3, #124	; 0x7c
 8005394:	d905      	bls.n	80053a2 <handle_read_file_record+0x220>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8005396:	2102      	movs	r1, #2
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f7fe fc7b 	bl	8003c94 <send_exception_msg>
 800539e:	4603      	mov	r3, r0
 80053a0:	e09d      	b.n	80054de <handle_read_file_record+0x35c>
        for (uint8_t i = 0; i < subreq_count; i++) {
 80053a2:	7f7b      	ldrb	r3, [r7, #29]
 80053a4:	3301      	adds	r3, #1
 80053a6:	777b      	strb	r3, [r7, #29]
 80053a8:	7f7a      	ldrb	r2, [r7, #29]
 80053aa:	7e3b      	ldrb	r3, [r7, #24]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d3c3      	bcc.n	8005338 <handle_read_file_record+0x1b6>

            NMBS_DEBUG_PRINT("a %d\tr %d\tl %d\t fread ", subreq[i].file_number, subreq[i].record_number,
                             subreq[i].record_length);
        }

        put_res_header(nmbs, response_data_size);
 80053b0:	7ffb      	ldrb	r3, [r7, #31]
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	4619      	mov	r1, r3
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7fe fc5d 	bl	8003c76 <put_res_header>
        put_1(nmbs, response_data_size);
 80053bc:	7ffb      	ldrb	r3, [r7, #31]
 80053be:	4619      	mov	r1, r3
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f7fe f8b2 	bl	800352a <put_1>

        if (nmbs->callbacks.read_file_record) {
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d064      	beq.n	800549a <handle_read_file_record+0x318>
            for (uint8_t i = 0; i < subreq_count; i++) {
 80053d0:	2300      	movs	r3, #0
 80053d2:	773b      	strb	r3, [r7, #28]
 80053d4:	e05c      	b.n	8005490 <handle_read_file_record+0x30e>
                uint16_t subreq_data_size = subreq[i].record_length * 2;
 80053d6:	7f3b      	ldrb	r3, [r7, #28]
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	4413      	add	r3, r2
 80053de:	88db      	ldrh	r3, [r3, #6]
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	81fb      	strh	r3, [r7, #14]
                put_1(nmbs, subreq_data_size + 1);
 80053e4:	89fb      	ldrh	r3, [r7, #14]
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	3301      	adds	r3, #1
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	4619      	mov	r1, r3
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f7fe f89b 	bl	800352a <put_1>
                put_1(nmbs, 0x06);    // add Reference Type const
 80053f4:	2106      	movs	r1, #6
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7fe f897 	bl	800352a <put_1>
                uint16_t* subreq_data = (uint16_t*) get_n(nmbs, subreq_data_size);
 80053fc:	89fb      	ldrh	r3, [r7, #14]
 80053fe:	4619      	mov	r1, r3
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f7fe f91a 	bl	800363a <get_n>
 8005406:	60b8      	str	r0, [r7, #8]

                err = nmbs->callbacks.read_file_record(subreq[i].file_number, subreq[i].record_number, subreq_data,
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8d3 412c 	ldr.w	r4, [r3, #300]	; 0x12c
 800540e:	7f3b      	ldrb	r3, [r7, #28]
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	4413      	add	r3, r2
 8005416:	8858      	ldrh	r0, [r3, #2]
 8005418:	7f3b      	ldrb	r3, [r7, #28]
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	00db      	lsls	r3, r3, #3
 800541e:	4413      	add	r3, r2
 8005420:	8899      	ldrh	r1, [r3, #4]
 8005422:	7f3b      	ldrb	r3, [r7, #28]
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	4413      	add	r3, r2
 800542a:	88dd      	ldrh	r5, [r3, #6]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	f8d2 214c 	ldr.w	r2, [r2, #332]	; 0x14c
 8005438:	9201      	str	r2, [sp, #4]
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	462b      	mov	r3, r5
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	47a0      	blx	r4
 8005442:	4603      	mov	r3, r0
 8005444:	76fb      	strb	r3, [r7, #27]
                                                       subreq[i].record_length, nmbs->msg.unit_id, nmbs->platform.arg);
                if (err != NMBS_ERROR_NONE) {
 8005446:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d014      	beq.n	8005478 <handle_read_file_record+0x2f6>
                    if (nmbs_error_is_exception(err))
 800544e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005452:	2b00      	cmp	r3, #0
 8005454:	dd0a      	ble.n	800546c <handle_read_file_record+0x2ea>
 8005456:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800545a:	2b04      	cmp	r3, #4
 800545c:	dc06      	bgt.n	800546c <handle_read_file_record+0x2ea>
                        return send_exception_msg(nmbs, err);
 800545e:	7efb      	ldrb	r3, [r7, #27]
 8005460:	4619      	mov	r1, r3
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7fe fc16 	bl	8003c94 <send_exception_msg>
 8005468:	4603      	mov	r3, r0
 800546a:	e038      	b.n	80054de <handle_read_file_record+0x35c>

                    return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 800546c:	2104      	movs	r1, #4
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7fe fc10 	bl	8003c94 <send_exception_msg>
 8005474:	4603      	mov	r3, r0
 8005476:	e032      	b.n	80054de <handle_read_file_record+0x35c>
                }

                swap_regs(subreq_data, subreq[i].record_length);
 8005478:	7f3b      	ldrb	r3, [r7, #28]
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	00db      	lsls	r3, r3, #3
 800547e:	4413      	add	r3, r2
 8005480:	88db      	ldrh	r3, [r3, #6]
 8005482:	4619      	mov	r1, r3
 8005484:	68b8      	ldr	r0, [r7, #8]
 8005486:	f7fe f92d 	bl	80036e4 <swap_regs>
            for (uint8_t i = 0; i < subreq_count; i++) {
 800548a:	7f3b      	ldrb	r3, [r7, #28]
 800548c:	3301      	adds	r3, #1
 800548e:	773b      	strb	r3, [r7, #28]
 8005490:	7f3a      	ldrb	r2, [r7, #28]
 8005492:	7e3b      	ldrb	r3, [r7, #24]
 8005494:	429a      	cmp	r2, r3
 8005496:	d39e      	bcc.n	80053d6 <handle_read_file_record+0x254>
 8005498:	e005      	b.n	80054a6 <handle_read_file_record+0x324>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 800549a:	2101      	movs	r1, #1
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f7fe fbf9 	bl	8003c94 <send_exception_msg>
 80054a2:	4603      	mov	r3, r0
 80054a4:	e01b      	b.n	80054de <handle_read_file_record+0x35c>
        }

        if (!nmbs->msg.broadcast) {
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 80054ac:	f083 0301 	eor.w	r3, r3, #1
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d012      	beq.n	80054dc <handle_read_file_record+0x35a>
            err = send_msg(nmbs);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7fe fb7e 	bl	8003bb8 <send_msg>
 80054bc:	4603      	mov	r3, r0
 80054be:	76fb      	strb	r3, [r7, #27]
            if (err != NMBS_ERROR_NONE)
 80054c0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d009      	beq.n	80054dc <handle_read_file_record+0x35a>
                return err;
 80054c8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80054cc:	e007      	b.n	80054de <handle_read_file_record+0x35c>
        }
    }
    else {
        return recv_read_file_record_res(nmbs, NULL, 0);
 80054ce:	2200      	movs	r2, #0
 80054d0:	2100      	movs	r1, #0
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7fe fe62 	bl	800419c <recv_read_file_record_res>
 80054d8:	4603      	mov	r3, r0
 80054da:	e000      	b.n	80054de <handle_read_file_record+0x35c>
    }

    return NMBS_ERROR_NONE;
 80054dc:	2300      	movs	r3, #0
 80054de:	46b5      	mov	sp, r6
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3724      	adds	r7, #36	; 0x24
 80054e4:	46bd      	mov	sp, r7
 80054e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080054ea <handle_write_file_record>:
#endif

#ifndef NMBS_SERVER_WRITE_FILE_RECORD_DISABLED
static nmbs_error handle_write_file_record(nmbs_t* nmbs) {
 80054ea:	b5b0      	push	{r4, r5, r7, lr}
 80054ec:	b08a      	sub	sp, #40	; 0x28
 80054ee:	af02      	add	r7, sp, #8
 80054f0:	6078      	str	r0, [r7, #4]
    nmbs_error err = recv(nmbs, 1);
 80054f2:	2101      	movs	r1, #1
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f7fe f9e8 	bl	80038ca <recv>
 80054fa:	4603      	mov	r3, r0
 80054fc:	777b      	strb	r3, [r7, #29]
    if (err != NMBS_ERROR_NONE)
 80054fe:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d002      	beq.n	800550c <handle_write_file_record+0x22>
        return err;
 8005506:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800550a:	e132      	b.n	8005772 <handle_write_file_record+0x288>

    uint8_t request_size = get_1(nmbs);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7fd fff3 	bl	80034f8 <get_1>
 8005512:	4603      	mov	r3, r0
 8005514:	773b      	strb	r3, [r7, #28]

    err = recv(nmbs, request_size);
 8005516:	7f3b      	ldrb	r3, [r7, #28]
 8005518:	b29b      	uxth	r3, r3
 800551a:	4619      	mov	r1, r3
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f7fe f9d4 	bl	80038ca <recv>
 8005522:	4603      	mov	r3, r0
 8005524:	777b      	strb	r3, [r7, #29]
    if (err != NMBS_ERROR_NONE)
 8005526:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d002      	beq.n	8005534 <handle_write_file_record+0x4a>
        return err;
 800552e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8005532:	e11e      	b.n	8005772 <handle_write_file_record+0x288>

    // We can save msg.buf index and use it later for context recovery.
    uint16_t msg_buf_idx = nmbs->msg.buf_idx;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800553a:	837b      	strh	r3, [r7, #26]
    discard_n(nmbs, request_size);
 800553c:	7f3b      	ldrb	r3, [r7, #28]
 800553e:	b29b      	uxth	r3, r3
 8005540:	4619      	mov	r1, r3
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7fe f81c 	bl	8003580 <discard_n>

    err = recv_msg_footer(nmbs);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f7fe fa1a 	bl	8003982 <recv_msg_footer>
 800554e:	4603      	mov	r3, r0
 8005550:	777b      	strb	r3, [r7, #29]
    if (err != NMBS_ERROR_NONE)
 8005552:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d002      	beq.n	8005560 <handle_write_file_record+0x76>
        return err;
 800555a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800555e:	e108      	b.n	8005772 <handle_write_file_record+0x288>

    if (!nmbs->msg.ignored) {
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8005566:	f083 0301 	eor.w	r3, r3, #1
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	f000 80f5 	beq.w	800575c <handle_write_file_record+0x272>
        const uint8_t subreq_header_size = 7;
 8005572:	2307      	movs	r3, #7
 8005574:	767b      	strb	r3, [r7, #25]
        uint16_t size = request_size;
 8005576:	7f3b      	ldrb	r3, [r7, #28]
 8005578:	83fb      	strh	r3, [r7, #30]
        nmbs->msg.buf_idx = msg_buf_idx;    // restore context
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	8b7a      	ldrh	r2, [r7, #26]
 800557e:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104

        if (request_size < 0x07 || request_size > 0xFB)
 8005582:	7f3b      	ldrb	r3, [r7, #28]
 8005584:	2b06      	cmp	r3, #6
 8005586:	d902      	bls.n	800558e <handle_write_file_record+0xa4>
 8005588:	7f3b      	ldrb	r3, [r7, #28]
 800558a:	2bfb      	cmp	r3, #251	; 0xfb
 800558c:	d905      	bls.n	800559a <handle_write_file_record+0xb0>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 800558e:	2103      	movs	r1, #3
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7fe fb7f 	bl	8003c94 <send_exception_msg>
 8005596:	4603      	mov	r3, r0
 8005598:	e0eb      	b.n	8005772 <handle_write_file_record+0x288>

        do {
            uint8_t subreq_reference_type = get_1(nmbs);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7fd ffac 	bl	80034f8 <get_1>
 80055a0:	4603      	mov	r3, r0
 80055a2:	763b      	strb	r3, [r7, #24]
            uint16_t subreq_file_number_c = get_2(nmbs);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f7fd ffff 	bl	80035a8 <get_2>
 80055aa:	4603      	mov	r3, r0
 80055ac:	82fb      	strh	r3, [r7, #22]
            uint16_t subreq_record_number_c = get_2(nmbs);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7fd fffa 	bl	80035a8 <get_2>
 80055b4:	4603      	mov	r3, r0
 80055b6:	82bb      	strh	r3, [r7, #20]
            uint16_t subreq_record_length_c = get_2(nmbs);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f7fd fff5 	bl	80035a8 <get_2>
 80055be:	4603      	mov	r3, r0
 80055c0:	827b      	strh	r3, [r7, #18]
            discard_n(nmbs, subreq_record_length_c * 2);
 80055c2:	8a7b      	ldrh	r3, [r7, #18]
 80055c4:	005b      	lsls	r3, r3, #1
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	4619      	mov	r1, r3
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7fd ffd8 	bl	8003580 <discard_n>

            if (subreq_reference_type != 0x06)
 80055d0:	7e3b      	ldrb	r3, [r7, #24]
 80055d2:	2b06      	cmp	r3, #6
 80055d4:	d005      	beq.n	80055e2 <handle_write_file_record+0xf8>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 80055d6:	2102      	movs	r1, #2
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f7fe fb5b 	bl	8003c94 <send_exception_msg>
 80055de:	4603      	mov	r3, r0
 80055e0:	e0c7      	b.n	8005772 <handle_write_file_record+0x288>

            if (subreq_file_number_c == 0x0000)
 80055e2:	8afb      	ldrh	r3, [r7, #22]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d105      	bne.n	80055f4 <handle_write_file_record+0x10a>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 80055e8:	2102      	movs	r1, #2
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7fe fb52 	bl	8003c94 <send_exception_msg>
 80055f0:	4603      	mov	r3, r0
 80055f2:	e0be      	b.n	8005772 <handle_write_file_record+0x288>

            if (subreq_record_number_c > 0x270F)
 80055f4:	8abb      	ldrh	r3, [r7, #20]
 80055f6:	f242 720f 	movw	r2, #9999	; 0x270f
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d905      	bls.n	800560a <handle_write_file_record+0x120>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 80055fe:	2102      	movs	r1, #2
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f7fe fb47 	bl	8003c94 <send_exception_msg>
 8005606:	4603      	mov	r3, r0
 8005608:	e0b3      	b.n	8005772 <handle_write_file_record+0x288>

            if (subreq_record_length_c > 122)
 800560a:	8a7b      	ldrh	r3, [r7, #18]
 800560c:	2b7a      	cmp	r3, #122	; 0x7a
 800560e:	d905      	bls.n	800561c <handle_write_file_record+0x132>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8005610:	2102      	movs	r1, #2
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7fe fb3e 	bl	8003c94 <send_exception_msg>
 8005618:	4603      	mov	r3, r0
 800561a:	e0aa      	b.n	8005772 <handle_write_file_record+0x288>

            NMBS_DEBUG_PRINT("a %d\tr %d\tl %d\t fwrite ", subreq_file_number_c, subreq_record_number_c,
                             subreq_record_length_c);
            size -= (subreq_header_size + subreq_record_length_c * 2);
 800561c:	7e7b      	ldrb	r3, [r7, #25]
 800561e:	b29a      	uxth	r2, r3
 8005620:	8a7b      	ldrh	r3, [r7, #18]
 8005622:	005b      	lsls	r3, r3, #1
 8005624:	b29b      	uxth	r3, r3
 8005626:	4413      	add	r3, r2
 8005628:	b29b      	uxth	r3, r3
 800562a:	8bfa      	ldrh	r2, [r7, #30]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	83fb      	strh	r3, [r7, #30]
        } while (size >= subreq_header_size);
 8005630:	7e7b      	ldrb	r3, [r7, #25]
 8005632:	b29b      	uxth	r3, r3
 8005634:	8bfa      	ldrh	r2, [r7, #30]
 8005636:	429a      	cmp	r2, r3
 8005638:	d2af      	bcs.n	800559a <handle_write_file_record+0xb0>

        if (size)
 800563a:	8bfb      	ldrh	r3, [r7, #30]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d005      	beq.n	800564c <handle_write_file_record+0x162>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8005640:	2103      	movs	r1, #3
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7fe fb26 	bl	8003c94 <send_exception_msg>
 8005648:	4603      	mov	r3, r0
 800564a:	e092      	b.n	8005772 <handle_write_file_record+0x288>

        // checks completed

        size = request_size;
 800564c:	7f3b      	ldrb	r3, [r7, #28]
 800564e:	83fb      	strh	r3, [r7, #30]
        nmbs->msg.buf_idx = msg_buf_idx;    // restore context
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	8b7a      	ldrh	r2, [r7, #26]
 8005654:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104

        do {
            discard_1(nmbs);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f7fd ff80 	bl	800355e <discard_1>
            uint16_t subreq_file_number = get_2(nmbs);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7fd ffa2 	bl	80035a8 <get_2>
 8005664:	4603      	mov	r3, r0
 8005666:	823b      	strh	r3, [r7, #16]
            uint16_t subreq_record_number = get_2(nmbs);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7fd ff9d 	bl	80035a8 <get_2>
 800566e:	4603      	mov	r3, r0
 8005670:	81fb      	strh	r3, [r7, #14]
            uint16_t subreq_record_length = get_2(nmbs);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7fd ff98 	bl	80035a8 <get_2>
 8005678:	4603      	mov	r3, r0
 800567a:	81bb      	strh	r3, [r7, #12]
            uint16_t* subreq_data = get_regs(nmbs, subreq_record_length);
 800567c:	89bb      	ldrh	r3, [r7, #12]
 800567e:	4619      	mov	r1, r3
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f7fd fff5 	bl	8003670 <get_regs>
 8005686:	60b8      	str	r0, [r7, #8]

            if (nmbs->callbacks.write_file_record) {
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800568e:	2b00      	cmp	r3, #0
 8005690:	d031      	beq.n	80056f6 <handle_write_file_record+0x20c>
                err = nmbs->callbacks.write_file_record(subreq_file_number, subreq_record_number, subreq_data,
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8d3 4130 	ldr.w	r4, [r3, #304]	; 0x130
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	f8d2 214c 	ldr.w	r2, [r2, #332]	; 0x14c
 80056a4:	89bd      	ldrh	r5, [r7, #12]
 80056a6:	89f9      	ldrh	r1, [r7, #14]
 80056a8:	8a38      	ldrh	r0, [r7, #16]
 80056aa:	9201      	str	r2, [sp, #4]
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	462b      	mov	r3, r5
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	47a0      	blx	r4
 80056b4:	4603      	mov	r3, r0
 80056b6:	777b      	strb	r3, [r7, #29]
                                                        subreq_record_length, nmbs->msg.unit_id, nmbs->platform.arg);
                if (err != NMBS_ERROR_NONE) {
 80056b8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d014      	beq.n	80056ea <handle_write_file_record+0x200>
                    if (nmbs_error_is_exception(err))
 80056c0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	dd0a      	ble.n	80056de <handle_write_file_record+0x1f4>
 80056c8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80056cc:	2b04      	cmp	r3, #4
 80056ce:	dc06      	bgt.n	80056de <handle_write_file_record+0x1f4>
                        return send_exception_msg(nmbs, err);
 80056d0:	7f7b      	ldrb	r3, [r7, #29]
 80056d2:	4619      	mov	r1, r3
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f7fe fadd 	bl	8003c94 <send_exception_msg>
 80056da:	4603      	mov	r3, r0
 80056dc:	e049      	b.n	8005772 <handle_write_file_record+0x288>

                    return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 80056de:	2104      	movs	r1, #4
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7fe fad7 	bl	8003c94 <send_exception_msg>
 80056e6:	4603      	mov	r3, r0
 80056e8:	e043      	b.n	8005772 <handle_write_file_record+0x288>
                }

                swap_regs(subreq_data, subreq_record_length);    // restore swapping
 80056ea:	89bb      	ldrh	r3, [r7, #12]
 80056ec:	4619      	mov	r1, r3
 80056ee:	68b8      	ldr	r0, [r7, #8]
 80056f0:	f7fd fff8 	bl	80036e4 <swap_regs>
 80056f4:	e005      	b.n	8005702 <handle_write_file_record+0x218>
            }
            else {
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 80056f6:	2101      	movs	r1, #1
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7fe facb 	bl	8003c94 <send_exception_msg>
 80056fe:	4603      	mov	r3, r0
 8005700:	e037      	b.n	8005772 <handle_write_file_record+0x288>
            }

            size -= (subreq_header_size + subreq_record_length * 2);
 8005702:	7e7b      	ldrb	r3, [r7, #25]
 8005704:	b29a      	uxth	r2, r3
 8005706:	89bb      	ldrh	r3, [r7, #12]
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	b29b      	uxth	r3, r3
 800570c:	4413      	add	r3, r2
 800570e:	b29b      	uxth	r3, r3
 8005710:	8bfa      	ldrh	r2, [r7, #30]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	83fb      	strh	r3, [r7, #30]
        } while (size >= subreq_header_size);
 8005716:	7e7b      	ldrb	r3, [r7, #25]
 8005718:	b29b      	uxth	r3, r3
 800571a:	8bfa      	ldrh	r2, [r7, #30]
 800571c:	429a      	cmp	r2, r3
 800571e:	d29b      	bcs.n	8005658 <handle_write_file_record+0x16e>

        if (!nmbs->msg.broadcast) {
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8005726:	f083 0301 	eor.w	r3, r3, #1
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d01f      	beq.n	8005770 <handle_write_file_record+0x286>
            // The normal response to 'Write File' is an echo of the request.
            // We can restore buffer index and response msg.
            nmbs->msg.buf_idx = msg_buf_idx;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	8b7a      	ldrh	r2, [r7, #26]
 8005734:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
            discard_n(nmbs, request_size);
 8005738:	7f3b      	ldrb	r3, [r7, #28]
 800573a:	b29b      	uxth	r3, r3
 800573c:	4619      	mov	r1, r3
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7fd ff1e 	bl	8003580 <discard_n>

            err = send_msg(nmbs);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f7fe fa37 	bl	8003bb8 <send_msg>
 800574a:	4603      	mov	r3, r0
 800574c:	777b      	strb	r3, [r7, #29]
            if (err != NMBS_ERROR_NONE)
 800574e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00c      	beq.n	8005770 <handle_write_file_record+0x286>
                return err;
 8005756:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800575a:	e00a      	b.n	8005772 <handle_write_file_record+0x288>
        }
    }
    else {
        return recv_write_file_record_res(nmbs, 0, 0, NULL, 0);
 800575c:	2300      	movs	r3, #0
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	2300      	movs	r3, #0
 8005762:	2200      	movs	r2, #0
 8005764:	2100      	movs	r1, #0
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7fe fd90 	bl	800428c <recv_write_file_record_res>
 800576c:	4603      	mov	r3, r0
 800576e:	e000      	b.n	8005772 <handle_write_file_record+0x288>
    }

    return NMBS_ERROR_NONE;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3720      	adds	r7, #32
 8005776:	46bd      	mov	sp, r7
 8005778:	bdb0      	pop	{r4, r5, r7, pc}

0800577a <handle_read_write_registers>:
#endif

#ifndef NMBS_SERVER_READ_WRITE_REGISTERS_DISABLED
static nmbs_error handle_read_write_registers(nmbs_t* nmbs) {
 800577a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800577e:	b091      	sub	sp, #68	; 0x44
 8005780:	af02      	add	r7, sp, #8
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	466b      	mov	r3, sp
 8005786:	60bb      	str	r3, [r7, #8]
    nmbs_error err = recv(nmbs, 9);
 8005788:	2109      	movs	r1, #9
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f7fe f89d 	bl	80038ca <recv>
 8005790:	4603      	mov	r3, r0
 8005792:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (err != NMBS_ERROR_NONE)
 8005796:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800579a:	2b00      	cmp	r3, #0
 800579c:	d002      	beq.n	80057a4 <handle_read_write_registers+0x2a>
        return err;
 800579e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80057a2:	e19d      	b.n	8005ae0 <handle_read_write_registers+0x366>

    uint16_t read_address = get_2(nmbs);
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f7fd feff 	bl	80035a8 <get_2>
 80057aa:	4603      	mov	r3, r0
 80057ac:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint16_t read_quantity = get_2(nmbs);
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f7fd fefa 	bl	80035a8 <get_2>
 80057b4:	4603      	mov	r3, r0
 80057b6:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint16_t write_address = get_2(nmbs);
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f7fd fef5 	bl	80035a8 <get_2>
 80057be:	4603      	mov	r3, r0
 80057c0:	853b      	strh	r3, [r7, #40]	; 0x28
    uint16_t write_quantity = get_2(nmbs);
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f7fd fef0 	bl	80035a8 <get_2>
 80057c8:	4603      	mov	r3, r0
 80057ca:	84fb      	strh	r3, [r7, #38]	; 0x26

    uint8_t byte_count_write = get_1(nmbs);
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f7fd fe93 	bl	80034f8 <get_1>
 80057d2:	4603      	mov	r3, r0
 80057d4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

    NMBS_DEBUG_PRINT("ra %d\trq %d\t wa %d\t wq %d\t b %d\tregs ", read_address, read_quantity, write_address,
                     write_quantity, byte_count_write);

    err = recv(nmbs, byte_count_write);
 80057d8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80057dc:	b29b      	uxth	r3, r3
 80057de:	4619      	mov	r1, r3
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f7fe f872 	bl	80038ca <recv>
 80057e6:	4603      	mov	r3, r0
 80057e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (err != NMBS_ERROR_NONE)
 80057ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d002      	beq.n	80057fa <handle_read_write_registers+0x80>
        return err;
 80057f4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80057f8:	e172      	b.n	8005ae0 <handle_read_write_registers+0x366>

#ifdef __STDC_NO_VLA__
    uint16_t registers[0x007B];
#else
    uint16_t registers[byte_count_write / 2];
 80057fa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80057fe:	085b      	lsrs	r3, r3, #1
 8005800:	b2db      	uxtb	r3, r3
 8005802:	4619      	mov	r1, r3
 8005804:	1e4b      	subs	r3, r1, #1
 8005806:	623b      	str	r3, [r7, #32]
 8005808:	460a      	mov	r2, r1
 800580a:	2300      	movs	r3, #0
 800580c:	603a      	str	r2, [r7, #0]
 800580e:	607b      	str	r3, [r7, #4]
 8005810:	f04f 0200 	mov.w	r2, #0
 8005814:	f04f 0300 	mov.w	r3, #0
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	0103      	lsls	r3, r0, #4
 800581c:	6838      	ldr	r0, [r7, #0]
 800581e:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8005822:	6838      	ldr	r0, [r7, #0]
 8005824:	0102      	lsls	r2, r0, #4
 8005826:	460a      	mov	r2, r1
 8005828:	2300      	movs	r3, #0
 800582a:	4692      	mov	sl, r2
 800582c:	469b      	mov	fp, r3
 800582e:	f04f 0200 	mov.w	r2, #0
 8005832:	f04f 0300 	mov.w	r3, #0
 8005836:	ea4f 130b 	mov.w	r3, fp, lsl #4
 800583a:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 800583e:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8005842:	460b      	mov	r3, r1
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	3307      	adds	r3, #7
 8005848:	08db      	lsrs	r3, r3, #3
 800584a:	00db      	lsls	r3, r3, #3
 800584c:	ebad 0d03 	sub.w	sp, sp, r3
 8005850:	ab02      	add	r3, sp, #8
 8005852:	3301      	adds	r3, #1
 8005854:	085b      	lsrs	r3, r3, #1
 8005856:	005b      	lsls	r3, r3, #1
 8005858:	61fb      	str	r3, [r7, #28]
#endif
    for (int i = 0; i < byte_count_write / 2; i++) {
 800585a:	2300      	movs	r3, #0
 800585c:	637b      	str	r3, [r7, #52]	; 0x34
 800585e:	e00b      	b.n	8005878 <handle_read_write_registers+0xfe>
        registers[i] = get_2(nmbs);
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f7fd fea1 	bl	80035a8 <get_2>
 8005866:	4603      	mov	r3, r0
 8005868:	4619      	mov	r1, r3
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800586e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 0; i < byte_count_write / 2; i++) {
 8005872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005874:	3301      	adds	r3, #1
 8005876:	637b      	str	r3, [r7, #52]	; 0x34
 8005878:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800587c:	085b      	lsrs	r3, r3, #1
 800587e:	b2db      	uxtb	r3, r3
 8005880:	461a      	mov	r2, r3
 8005882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005884:	4293      	cmp	r3, r2
 8005886:	dbeb      	blt.n	8005860 <handle_read_write_registers+0xe6>
        NMBS_DEBUG_PRINT("%d ", registers[i]);
    }

    err = recv_msg_footer(nmbs);
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f7fe f87a 	bl	8003982 <recv_msg_footer>
 800588e:	4603      	mov	r3, r0
 8005890:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (err != NMBS_ERROR_NONE)
 8005894:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005898:	2b00      	cmp	r3, #0
 800589a:	d002      	beq.n	80058a2 <handle_read_write_registers+0x128>
        return err;
 800589c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80058a0:	e11e      	b.n	8005ae0 <handle_read_write_registers+0x366>

    if (!nmbs->msg.ignored) {
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 80058a8:	f083 0301 	eor.w	r3, r3, #1
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f000 810d 	beq.w	8005ace <handle_read_write_registers+0x354>
        if (read_quantity < 1 || read_quantity > 0x007D)
 80058b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d002      	beq.n	80058c0 <handle_read_write_registers+0x146>
 80058ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80058bc:	2b7d      	cmp	r3, #125	; 0x7d
 80058be:	d905      	bls.n	80058cc <handle_read_write_registers+0x152>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 80058c0:	2103      	movs	r1, #3
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f7fe f9e6 	bl	8003c94 <send_exception_msg>
 80058c8:	4603      	mov	r3, r0
 80058ca:	e109      	b.n	8005ae0 <handle_read_write_registers+0x366>

        if (write_quantity < 1 || write_quantity > 0x007B)
 80058cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d002      	beq.n	80058d8 <handle_read_write_registers+0x15e>
 80058d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058d4:	2b7b      	cmp	r3, #123	; 0x7b
 80058d6:	d905      	bls.n	80058e4 <handle_read_write_registers+0x16a>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 80058d8:	2103      	movs	r1, #3
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f7fe f9da 	bl	8003c94 <send_exception_msg>
 80058e0:	4603      	mov	r3, r0
 80058e2:	e0fd      	b.n	8005ae0 <handle_read_write_registers+0x366>

        if (byte_count_write != write_quantity * 2)
 80058e4:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80058e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d005      	beq.n	80058fc <handle_read_write_registers+0x182>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 80058f0:	2103      	movs	r1, #3
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f7fe f9ce 	bl	8003c94 <send_exception_msg>
 80058f8:	4603      	mov	r3, r0
 80058fa:	e0f1      	b.n	8005ae0 <handle_read_write_registers+0x366>

        if ((uint32_t) read_address + (uint32_t) read_quantity > ((uint32_t) 0xFFFF) + 1)
 80058fc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80058fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005900:	4413      	add	r3, r2
 8005902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005906:	d905      	bls.n	8005914 <handle_read_write_registers+0x19a>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8005908:	2102      	movs	r1, #2
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f7fe f9c2 	bl	8003c94 <send_exception_msg>
 8005910:	4603      	mov	r3, r0
 8005912:	e0e5      	b.n	8005ae0 <handle_read_write_registers+0x366>

        if ((uint32_t) write_address + (uint32_t) write_quantity > ((uint32_t) 0xFFFF) + 1)
 8005914:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005916:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005918:	4413      	add	r3, r2
 800591a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800591e:	d905      	bls.n	800592c <handle_read_write_registers+0x1b2>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8005920:	2102      	movs	r1, #2
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f7fe f9b6 	bl	8003c94 <send_exception_msg>
 8005928:	4603      	mov	r3, r0
 800592a:	e0d9      	b.n	8005ae0 <handle_read_write_registers+0x366>

        if (!nmbs->callbacks.write_multiple_registers || !nmbs->callbacks.read_holding_registers)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8005932:	2b00      	cmp	r3, #0
 8005934:	d004      	beq.n	8005940 <handle_read_write_registers+0x1c6>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800593c:	2b00      	cmp	r3, #0
 800593e:	d105      	bne.n	800594c <handle_read_write_registers+0x1d2>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8005940:	2101      	movs	r1, #1
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f7fe f9a6 	bl	8003c94 <send_exception_msg>
 8005948:	4603      	mov	r3, r0
 800594a:	e0c9      	b.n	8005ae0 <handle_read_write_registers+0x366>

        err = nmbs->callbacks.write_multiple_registers(write_address, write_quantity, registers, nmbs->msg.unit_id,
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f8d3 6128 	ldr.w	r6, [r3, #296]	; 0x128
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800595e:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8005960:	8d38      	ldrh	r0, [r7, #40]	; 0x28
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	4613      	mov	r3, r2
 8005966:	69fa      	ldr	r2, [r7, #28]
 8005968:	47b0      	blx	r6
 800596a:	4603      	mov	r3, r0
 800596c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                                       nmbs->platform.arg);
        if (err != NMBS_ERROR_NONE) {
 8005970:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005974:	2b00      	cmp	r3, #0
 8005976:	d015      	beq.n	80059a4 <handle_read_write_registers+0x22a>
            if (nmbs_error_is_exception(err))
 8005978:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800597c:	2b00      	cmp	r3, #0
 800597e:	dd0b      	ble.n	8005998 <handle_read_write_registers+0x21e>
 8005980:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005984:	2b04      	cmp	r3, #4
 8005986:	dc07      	bgt.n	8005998 <handle_read_write_registers+0x21e>
                return send_exception_msg(nmbs, err);
 8005988:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800598c:	4619      	mov	r1, r3
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f7fe f980 	bl	8003c94 <send_exception_msg>
 8005994:	4603      	mov	r3, r0
 8005996:	e0a3      	b.n	8005ae0 <handle_read_write_registers+0x366>

            return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8005998:	2104      	movs	r1, #4
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f7fe f97a 	bl	8003c94 <send_exception_msg>
 80059a0:	4603      	mov	r3, r0
 80059a2:	e09d      	b.n	8005ae0 <handle_read_write_registers+0x366>
        }

        if (!nmbs->msg.broadcast) {
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 80059aa:	f083 0301 	eor.w	r3, r3, #1
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 8094 	beq.w	8005ade <handle_read_write_registers+0x364>
 80059b6:	466b      	mov	r3, sp
 80059b8:	461e      	mov	r6, r3
#ifdef __STDC_NO_VLA__
            uint16_t regs[125];
#else
            uint16_t regs[read_quantity];
 80059ba:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80059bc:	460b      	mov	r3, r1
 80059be:	3b01      	subs	r3, #1
 80059c0:	61bb      	str	r3, [r7, #24]
 80059c2:	b28b      	uxth	r3, r1
 80059c4:	2200      	movs	r2, #0
 80059c6:	4698      	mov	r8, r3
 80059c8:	4691      	mov	r9, r2
 80059ca:	f04f 0200 	mov.w	r2, #0
 80059ce:	f04f 0300 	mov.w	r3, #0
 80059d2:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80059d6:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80059da:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80059de:	b28b      	uxth	r3, r1
 80059e0:	2200      	movs	r2, #0
 80059e2:	461c      	mov	r4, r3
 80059e4:	4615      	mov	r5, r2
 80059e6:	f04f 0200 	mov.w	r2, #0
 80059ea:	f04f 0300 	mov.w	r3, #0
 80059ee:	012b      	lsls	r3, r5, #4
 80059f0:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80059f4:	0122      	lsls	r2, r4, #4
 80059f6:	460b      	mov	r3, r1
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	3307      	adds	r3, #7
 80059fc:	08db      	lsrs	r3, r3, #3
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	ebad 0d03 	sub.w	sp, sp, r3
 8005a04:	ab02      	add	r3, sp, #8
 8005a06:	3301      	adds	r3, #1
 8005a08:	085b      	lsrs	r3, r3, #1
 8005a0a:	005b      	lsls	r3, r3, #1
 8005a0c:	617b      	str	r3, [r7, #20]
#endif
            err = nmbs->callbacks.read_holding_registers(read_address, read_quantity, regs, nmbs->msg.unit_id,
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f8d3 4114 	ldr.w	r4, [r3, #276]	; 0x114
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8005a20:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8005a22:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	4613      	mov	r3, r2
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	47a0      	blx	r4
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                                         nmbs->platform.arg);
            if (err != NMBS_ERROR_NONE) {
 8005a32:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d015      	beq.n	8005a66 <handle_read_write_registers+0x2ec>
                if (nmbs_error_is_exception(err))
 8005a3a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	dd0b      	ble.n	8005a5a <handle_read_write_registers+0x2e0>
 8005a42:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	dc07      	bgt.n	8005a5a <handle_read_write_registers+0x2e0>
                    return send_exception_msg(nmbs, err);
 8005a4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a4e:	4619      	mov	r1, r3
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f7fe f91f 	bl	8003c94 <send_exception_msg>
 8005a56:	4603      	mov	r3, r0
 8005a58:	e037      	b.n	8005aca <handle_read_write_registers+0x350>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8005a5a:	2104      	movs	r1, #4
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f7fe f919 	bl	8003c94 <send_exception_msg>
 8005a62:	4603      	mov	r3, r0
 8005a64:	e031      	b.n	8005aca <handle_read_write_registers+0x350>
            }

            uint8_t regs_bytes = read_quantity * 2;
 8005a66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	005b      	lsls	r3, r3, #1
 8005a6c:	74fb      	strb	r3, [r7, #19]
            put_res_header(nmbs, 1 + regs_bytes);
 8005a6e:	7cfb      	ldrb	r3, [r7, #19]
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	3301      	adds	r3, #1
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	4619      	mov	r1, r3
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f7fe f8fc 	bl	8003c76 <put_res_header>

            put_1(nmbs, regs_bytes);
 8005a7e:	7cfb      	ldrb	r3, [r7, #19]
 8005a80:	4619      	mov	r1, r3
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f7fd fd51 	bl	800352a <put_1>

            NMBS_DEBUG_PRINT("b %d\t", regs_bytes);

            NMBS_DEBUG_PRINT("regs ");
            for (int i = 0; i < read_quantity; i++) {
 8005a88:	2300      	movs	r3, #0
 8005a8a:	633b      	str	r3, [r7, #48]	; 0x30
 8005a8c:	e00a      	b.n	8005aa4 <handle_read_write_registers+0x32a>
                put_2(nmbs, regs[i]);
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a92:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005a96:	4619      	mov	r1, r3
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f7fd fda9 	bl	80035f0 <put_2>
            for (int i = 0; i < read_quantity; i++) {
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	633b      	str	r3, [r7, #48]	; 0x30
 8005aa4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005aa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	dbf0      	blt.n	8005a8e <handle_read_write_registers+0x314>
                NMBS_DEBUG_PRINT("%d ", regs[i]);
            }

            err = send_msg(nmbs);
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f7fe f883 	bl	8003bb8 <send_msg>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            if (err != NMBS_ERROR_NONE)
 8005ab8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <handle_read_write_registers+0x34c>
                return err;
 8005ac0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005ac4:	e001      	b.n	8005aca <handle_read_write_registers+0x350>
 8005ac6:	46b5      	mov	sp, r6
 8005ac8:	e009      	b.n	8005ade <handle_read_write_registers+0x364>
                    return send_exception_msg(nmbs, err);
 8005aca:	46b5      	mov	sp, r6
 8005acc:	e008      	b.n	8005ae0 <handle_read_write_registers+0x366>
        }
    }
    else {
        return recv_write_multiple_registers_res(nmbs, write_address, write_quantity);
 8005ace:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005ad0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f7fe fb17 	bl	8004108 <recv_write_multiple_registers_res>
 8005ada:	4603      	mov	r3, r0
 8005adc:	e000      	b.n	8005ae0 <handle_read_write_registers+0x366>
    }

    return NMBS_ERROR_NONE;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	373c      	adds	r7, #60	; 0x3c
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005af0 <handle_req_fc>:
#endif


static nmbs_error handle_req_fc(nmbs_t* nmbs) {
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
    NMBS_DEBUG_PRINT("fc %d\t", nmbs->msg.fc);

    nmbs_error err;
    switch (nmbs->msg.fc) {
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8005afe:	3b01      	subs	r3, #1
 8005b00:	2b16      	cmp	r3, #22
 8005b02:	d873      	bhi.n	8005bec <handle_req_fc+0xfc>
 8005b04:	a201      	add	r2, pc, #4	; (adr r2, 8005b0c <handle_req_fc+0x1c>)
 8005b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0a:	bf00      	nop
 8005b0c:	08005b69 	.word	0x08005b69
 8005b10:	08005b75 	.word	0x08005b75
 8005b14:	08005b81 	.word	0x08005b81
 8005b18:	08005b8d 	.word	0x08005b8d
 8005b1c:	08005b99 	.word	0x08005b99
 8005b20:	08005ba5 	.word	0x08005ba5
 8005b24:	08005bed 	.word	0x08005bed
 8005b28:	08005bed 	.word	0x08005bed
 8005b2c:	08005bed 	.word	0x08005bed
 8005b30:	08005bed 	.word	0x08005bed
 8005b34:	08005bed 	.word	0x08005bed
 8005b38:	08005bed 	.word	0x08005bed
 8005b3c:	08005bed 	.word	0x08005bed
 8005b40:	08005bed 	.word	0x08005bed
 8005b44:	08005bb1 	.word	0x08005bb1
 8005b48:	08005bbd 	.word	0x08005bbd
 8005b4c:	08005bed 	.word	0x08005bed
 8005b50:	08005bed 	.word	0x08005bed
 8005b54:	08005bed 	.word	0x08005bed
 8005b58:	08005bc9 	.word	0x08005bc9
 8005b5c:	08005bd5 	.word	0x08005bd5
 8005b60:	08005bed 	.word	0x08005bed
 8005b64:	08005be1 	.word	0x08005be1
#ifndef NMBS_SERVER_WRITE_MULTIPLE_COILS_DISABLED
        case 1:
            err = handle_read_coils(nmbs);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f7fe fea2 	bl	80048b2 <handle_read_coils>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	73fb      	strb	r3, [r7, #15]
            break;
 8005b72:	e03d      	b.n	8005bf0 <handle_req_fc+0x100>
#endif

#ifndef NMBS_SERVER_READ_DISCRETE_INPUTS_DISABLED
        case 2:
            err = handle_read_discrete_inputs(nmbs);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7fe feac 	bl	80048d2 <handle_read_discrete_inputs>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	73fb      	strb	r3, [r7, #15]
            break;
 8005b7e:	e037      	b.n	8005bf0 <handle_req_fc+0x100>
#endif

#ifndef NMBS_SERVER_READ_HOLDING_REGISTERS_DISABLED
        case 3:
            err = handle_read_holding_registers(nmbs);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f7fe feb6 	bl	80048f2 <handle_read_holding_registers>
 8005b86:	4603      	mov	r3, r0
 8005b88:	73fb      	strb	r3, [r7, #15]
            break;
 8005b8a:	e031      	b.n	8005bf0 <handle_req_fc+0x100>
#endif

#ifndef NMBS_SERVER_READ_INPUT_REGISTERS_DISABLED
        case 4:
            err = handle_read_input_registers(nmbs);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f7fe fec0 	bl	8004912 <handle_read_input_registers>
 8005b92:	4603      	mov	r3, r0
 8005b94:	73fb      	strb	r3, [r7, #15]
            break;
 8005b96:	e02b      	b.n	8005bf0 <handle_req_fc+0x100>
#endif

#ifndef NMBS_SERVER_WRITE_SINGLE_COIL_DISABLED
        case 5:
            err = handle_write_single_coil(nmbs);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f7fe feca 	bl	8004932 <handle_write_single_coil>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	73fb      	strb	r3, [r7, #15]
            break;
 8005ba2:	e025      	b.n	8005bf0 <handle_req_fc+0x100>
#endif

#ifndef NMBS_SERVER_WRITE_SINGLE_REGISTER_DISABLED
        case 6:
            err = handle_write_single_register(nmbs);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f7fe ff66 	bl	8004a76 <handle_write_single_register>
 8005baa:	4603      	mov	r3, r0
 8005bac:	73fb      	strb	r3, [r7, #15]
            break;
 8005bae:	e01f      	b.n	8005bf0 <handle_req_fc+0x100>
#endif

#ifndef NMBS_SERVER_WRITE_MULTIPLE_COILS_DISABLED
        case 15:
            err = handle_write_multiple_coils(nmbs);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f7fe fff0 	bl	8004b96 <handle_write_multiple_coils>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	73fb      	strb	r3, [r7, #15]
            break;
 8005bba:	e019      	b.n	8005bf0 <handle_req_fc+0x100>
#endif

#ifndef NMBS_SERVER_WRITE_MULTIPLE_REGISTERS_DISABLED
        case 16:
            err = handle_write_multiple_registers(nmbs);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f7ff f96d 	bl	8004e9c <handle_write_multiple_registers>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	73fb      	strb	r3, [r7, #15]
            break;
 8005bc6:	e013      	b.n	8005bf0 <handle_req_fc+0x100>
#endif

#ifndef NMBS_SERVER_READ_FILE_RECORD_DISABLED
        case 20:
            err = handle_read_file_record(nmbs);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7ff fada 	bl	8005182 <handle_read_file_record>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	73fb      	strb	r3, [r7, #15]
            break;
 8005bd2:	e00d      	b.n	8005bf0 <handle_req_fc+0x100>
#endif

#ifndef NMBS_SERVER_WRITE_FILE_RECORD_DISABLED
        case 21:
            err = handle_write_file_record(nmbs);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f7ff fc88 	bl	80054ea <handle_write_file_record>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	73fb      	strb	r3, [r7, #15]
            break;
 8005bde:	e007      	b.n	8005bf0 <handle_req_fc+0x100>
#endif

#ifndef NMBS_SERVER_READ_WRITE_REGISTERS_DISABLED
        case 23:
            err = handle_read_write_registers(nmbs);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f7ff fdca 	bl	800577a <handle_read_write_registers>
 8005be6:	4603      	mov	r3, r0
 8005be8:	73fb      	strb	r3, [r7, #15]
            break;
 8005bea:	e001      	b.n	8005bf0 <handle_req_fc+0x100>
#endif
        default:
            err = NMBS_EXCEPTION_ILLEGAL_FUNCTION;
 8005bec:	2301      	movs	r3, #1
 8005bee:	73fb      	strb	r3, [r7, #15]
    }

    return err;
 8005bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <nmbs_server_create>:


nmbs_error nmbs_server_create(nmbs_t* nmbs, uint8_t address_rtu, const nmbs_platform_conf* platform_conf,
                              const nmbs_callbacks* callbacks) {
 8005bfc:	b5b0      	push	{r4, r5, r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	607a      	str	r2, [r7, #4]
 8005c06:	603b      	str	r3, [r7, #0]
 8005c08:	460b      	mov	r3, r1
 8005c0a:	72fb      	strb	r3, [r7, #11]
    if (platform_conf->transport == NMBS_TRANSPORT_RTU && address_rtu == 0)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d105      	bne.n	8005c20 <nmbs_server_create+0x24>
 8005c14:	7afb      	ldrb	r3, [r7, #11]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d102      	bne.n	8005c20 <nmbs_server_create+0x24>
        return NMBS_ERROR_INVALID_ARGUMENT;
 8005c1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c1e:	e01e      	b.n	8005c5e <nmbs_server_create+0x62>

    nmbs_error ret = nmbs_create(nmbs, platform_conf);
 8005c20:	6879      	ldr	r1, [r7, #4]
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f7fd fdb3 	bl	800378e <nmbs_create>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	75fb      	strb	r3, [r7, #23]
    if (ret != NMBS_ERROR_NONE)
 8005c2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d002      	beq.n	8005c3a <nmbs_server_create+0x3e>
        return ret;
 8005c34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c38:	e011      	b.n	8005c5e <nmbs_server_create+0x62>

    nmbs->address_rtu = address_rtu;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	7afa      	ldrb	r2, [r7, #11]
 8005c3e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
    nmbs->callbacks = *callbacks;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8005c4a:	4615      	mov	r5, r2
 8005c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005c58:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    return NMBS_ERROR_NONE;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3718      	adds	r7, #24
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bdb0      	pop	{r4, r5, r7, pc}

08005c66 <nmbs_server_poll>:


nmbs_error nmbs_server_poll(nmbs_t* nmbs) {
 8005c66:	b590      	push	{r4, r7, lr}
 8005c68:	b085      	sub	sp, #20
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
    msg_state_reset(nmbs);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7fd fd6e 	bl	8003750 <msg_state_reset>

    bool first_byte_received = false;
 8005c74:	2300      	movs	r3, #0
 8005c76:	73bb      	strb	r3, [r7, #14]
    nmbs_error err = recv_req_header(nmbs, &first_byte_received);
 8005c78:	f107 030e 	add.w	r3, r7, #14
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7fd ffc1 	bl	8003c06 <recv_req_header>
 8005c84:	4603      	mov	r3, r0
 8005c86:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE) {
 8005c88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00f      	beq.n	8005cb0 <nmbs_server_poll+0x4a>
        if (!first_byte_received && err == NMBS_ERROR_TIMEOUT)
 8005c90:	7bbb      	ldrb	r3, [r7, #14]
 8005c92:	f083 0301 	eor.w	r3, r3, #1
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d006      	beq.n	8005caa <nmbs_server_poll+0x44>
 8005c9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ca0:	f113 0f03 	cmn.w	r3, #3
 8005ca4:	d101      	bne.n	8005caa <nmbs_server_poll+0x44>
            return NMBS_ERROR_NONE;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	e031      	b.n	8005d0e <nmbs_server_poll+0xa8>

        return err;
 8005caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cae:	e02e      	b.n	8005d0e <nmbs_server_poll+0xa8>
        else
            printf("address_rtu %d\t", nmbs->msg.unit_id);
    }
#endif

    err = handle_req_fc(nmbs);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f7ff ff1d 	bl	8005af0 <handle_req_fc>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE && !nmbs_error_is_exception(err)) {
 8005cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d024      	beq.n	8005d0c <nmbs_server_poll+0xa6>
 8005cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	dd03      	ble.n	8005cd2 <nmbs_server_poll+0x6c>
 8005cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	dd1c      	ble.n	8005d0c <nmbs_server_poll+0xa6>
        if (nmbs->platform.transport == NMBS_TRANSPORT_RTU && err != NMBS_ERROR_TIMEOUT && nmbs->msg.ignored) {
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d114      	bne.n	8005d06 <nmbs_server_poll+0xa0>
 8005cdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ce0:	f113 0f03 	cmn.w	r3, #3
 8005ce4:	d00f      	beq.n	8005d06 <nmbs_server_poll+0xa0>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00a      	beq.n	8005d06 <nmbs_server_poll+0xa0>
            // Flush the remaining data on the line
            nmbs->platform.read(nmbs->msg.buf, sizeof(nmbs->msg.buf), 0, nmbs->platform.arg);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f44f 7182 	mov.w	r1, #260	; 0x104
 8005d04:	47a0      	blx	r4
        }

        return err;
 8005d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d0a:	e000      	b.n	8005d0e <nmbs_server_poll+0xa8>
    }

    return NMBS_ERROR_NONE;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd90      	pop	{r4, r7, pc}
	...

08005d18 <lkv_stepmotor_coil_setval>:

#define DRIVER_PIN_4_PORT    GPIOB
#define DRIVER_PIN_4         GPIO_PIN_4


void lkv_stepmotor_coil_setval(uint8_t _valin1, uint8_t _valin2, uint8_t _valin3, uint8_t _valin4){
 8005d18:	b590      	push	{r4, r7, lr}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	4604      	mov	r4, r0
 8005d20:	4608      	mov	r0, r1
 8005d22:	4611      	mov	r1, r2
 8005d24:	461a      	mov	r2, r3
 8005d26:	4623      	mov	r3, r4
 8005d28:	71fb      	strb	r3, [r7, #7]
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	71bb      	strb	r3, [r7, #6]
 8005d2e:	460b      	mov	r3, r1
 8005d30:	717b      	strb	r3, [r7, #5]
 8005d32:	4613      	mov	r3, r2
 8005d34:	713b      	strb	r3, [r7, #4]
	HAL_GPIO_WritePin(DRIVER_PIN_1_PORT, DRIVER_PIN_1, _valin1);
 8005d36:	79fb      	ldrb	r3, [r7, #7]
 8005d38:	461a      	mov	r2, r3
 8005d3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005d3e:	480c      	ldr	r0, [pc, #48]	; (8005d70 <lkv_stepmotor_coil_setval+0x58>)
 8005d40:	f7fb f861 	bl	8000e06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRIVER_PIN_2_PORT, DRIVER_PIN_2, _valin2);
 8005d44:	79bb      	ldrb	r3, [r7, #6]
 8005d46:	461a      	mov	r2, r3
 8005d48:	2108      	movs	r1, #8
 8005d4a:	480a      	ldr	r0, [pc, #40]	; (8005d74 <lkv_stepmotor_coil_setval+0x5c>)
 8005d4c:	f7fb f85b 	bl	8000e06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRIVER_PIN_3_PORT, DRIVER_PIN_3, _valin3);
 8005d50:	797b      	ldrb	r3, [r7, #5]
 8005d52:	461a      	mov	r2, r3
 8005d54:	2120      	movs	r1, #32
 8005d56:	4807      	ldr	r0, [pc, #28]	; (8005d74 <lkv_stepmotor_coil_setval+0x5c>)
 8005d58:	f7fb f855 	bl	8000e06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRIVER_PIN_4_PORT, DRIVER_PIN_4, _valin4);
 8005d5c:	793b      	ldrb	r3, [r7, #4]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	2110      	movs	r1, #16
 8005d62:	4804      	ldr	r0, [pc, #16]	; (8005d74 <lkv_stepmotor_coil_setval+0x5c>)
 8005d64:	f7fb f84f 	bl	8000e06 <HAL_GPIO_WritePin>
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd90      	pop	{r4, r7, pc}
 8005d70:	40020000 	.word	0x40020000
 8005d74:	40020400 	.word	0x40020400

08005d78 <lkv_stepmotor_run_up>:


void lkv_stepmotor_run_up(uint32_t _speed){
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08a      	sub	sp, #40	; 0x28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
	lkv_stepmotor_coil_setval(1,0,0,0);
 8005d80:	2300      	movs	r3, #0
 8005d82:	2200      	movs	r2, #0
 8005d84:	2100      	movs	r1, #0
 8005d86:	2001      	movs	r0, #1
 8005d88:	f7ff ffc6 	bl	8005d18 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d90:	e002      	b.n	8005d98 <lkv_stepmotor_run_up+0x20>
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	3301      	adds	r3, #1
 8005d96:	627b      	str	r3, [r7, #36]	; 0x24
 8005d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d8f8      	bhi.n	8005d92 <lkv_stepmotor_run_up+0x1a>
	lkv_stepmotor_coil_setval(1,1,0,0);
 8005da0:	2300      	movs	r3, #0
 8005da2:	2200      	movs	r2, #0
 8005da4:	2101      	movs	r1, #1
 8005da6:	2001      	movs	r0, #1
 8005da8:	f7ff ffb6 	bl	8005d18 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 8005dac:	2300      	movs	r3, #0
 8005dae:	623b      	str	r3, [r7, #32]
 8005db0:	e002      	b.n	8005db8 <lkv_stepmotor_run_up+0x40>
 8005db2:	6a3b      	ldr	r3, [r7, #32]
 8005db4:	3301      	adds	r3, #1
 8005db6:	623b      	str	r3, [r7, #32]
 8005db8:	6a3b      	ldr	r3, [r7, #32]
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d8f8      	bhi.n	8005db2 <lkv_stepmotor_run_up+0x3a>
	lkv_stepmotor_coil_setval(0,1,0,0);
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	2101      	movs	r1, #1
 8005dc6:	2000      	movs	r0, #0
 8005dc8:	f7ff ffa6 	bl	8005d18 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 8005dcc:	2300      	movs	r3, #0
 8005dce:	61fb      	str	r3, [r7, #28]
 8005dd0:	e002      	b.n	8005dd8 <lkv_stepmotor_run_up+0x60>
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	61fb      	str	r3, [r7, #28]
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d8f8      	bhi.n	8005dd2 <lkv_stepmotor_run_up+0x5a>
	lkv_stepmotor_coil_setval(0,1,1,0);
 8005de0:	2300      	movs	r3, #0
 8005de2:	2201      	movs	r2, #1
 8005de4:	2101      	movs	r1, #1
 8005de6:	2000      	movs	r0, #0
 8005de8:	f7ff ff96 	bl	8005d18 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 8005dec:	2300      	movs	r3, #0
 8005dee:	61bb      	str	r3, [r7, #24]
 8005df0:	e002      	b.n	8005df8 <lkv_stepmotor_run_up+0x80>
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	3301      	adds	r3, #1
 8005df6:	61bb      	str	r3, [r7, #24]
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d8f8      	bhi.n	8005df2 <lkv_stepmotor_run_up+0x7a>
	lkv_stepmotor_coil_setval(0,0,1,0);
 8005e00:	2300      	movs	r3, #0
 8005e02:	2201      	movs	r2, #1
 8005e04:	2100      	movs	r1, #0
 8005e06:	2000      	movs	r0, #0
 8005e08:	f7ff ff86 	bl	8005d18 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	617b      	str	r3, [r7, #20]
 8005e10:	e002      	b.n	8005e18 <lkv_stepmotor_run_up+0xa0>
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	3301      	adds	r3, #1
 8005e16:	617b      	str	r3, [r7, #20]
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d8f8      	bhi.n	8005e12 <lkv_stepmotor_run_up+0x9a>
	lkv_stepmotor_coil_setval(0,0,1,1);
 8005e20:	2301      	movs	r3, #1
 8005e22:	2201      	movs	r2, #1
 8005e24:	2100      	movs	r1, #0
 8005e26:	2000      	movs	r0, #0
 8005e28:	f7ff ff76 	bl	8005d18 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	613b      	str	r3, [r7, #16]
 8005e30:	e002      	b.n	8005e38 <lkv_stepmotor_run_up+0xc0>
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	3301      	adds	r3, #1
 8005e36:	613b      	str	r3, [r7, #16]
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d8f8      	bhi.n	8005e32 <lkv_stepmotor_run_up+0xba>
	lkv_stepmotor_coil_setval(0,0,0,1);
 8005e40:	2301      	movs	r3, #1
 8005e42:	2200      	movs	r2, #0
 8005e44:	2100      	movs	r1, #0
 8005e46:	2000      	movs	r0, #0
 8005e48:	f7ff ff66 	bl	8005d18 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	e002      	b.n	8005e58 <lkv_stepmotor_run_up+0xe0>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	3301      	adds	r3, #1
 8005e56:	60fb      	str	r3, [r7, #12]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d8f8      	bhi.n	8005e52 <lkv_stepmotor_run_up+0xda>
	lkv_stepmotor_coil_setval(1,0,0,1);
 8005e60:	2301      	movs	r3, #1
 8005e62:	2200      	movs	r2, #0
 8005e64:	2100      	movs	r1, #0
 8005e66:	2001      	movs	r0, #1
 8005e68:	f7ff ff56 	bl	8005d18 <lkv_stepmotor_coil_setval>
}
 8005e6c:	bf00      	nop
 8005e6e:	3728      	adds	r7, #40	; 0x28
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <lkv_stepmotor_run_down>:


void lkv_stepmotor_run_down(uint32_t _speed){
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b08a      	sub	sp, #40	; 0x28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
	lkv_stepmotor_coil_setval(0,0,0,1);
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	2200      	movs	r2, #0
 8005e80:	2100      	movs	r1, #0
 8005e82:	2000      	movs	r0, #0
 8005e84:	f7ff ff48 	bl	8005d18 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 8005e88:	2300      	movs	r3, #0
 8005e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e8c:	e002      	b.n	8005e94 <lkv_stepmotor_run_down+0x20>
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e90:	3301      	adds	r3, #1
 8005e92:	627b      	str	r3, [r7, #36]	; 0x24
 8005e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d8f8      	bhi.n	8005e8e <lkv_stepmotor_run_down+0x1a>
	lkv_stepmotor_coil_setval(0,0,1,1);
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	2100      	movs	r1, #0
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	f7ff ff38 	bl	8005d18 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	623b      	str	r3, [r7, #32]
 8005eac:	e002      	b.n	8005eb4 <lkv_stepmotor_run_down+0x40>
 8005eae:	6a3b      	ldr	r3, [r7, #32]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	623b      	str	r3, [r7, #32]
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d8f8      	bhi.n	8005eae <lkv_stepmotor_run_down+0x3a>
	lkv_stepmotor_coil_setval(0,0,1,0);
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	2100      	movs	r1, #0
 8005ec2:	2000      	movs	r0, #0
 8005ec4:	f7ff ff28 	bl	8005d18 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 8005ec8:	2300      	movs	r3, #0
 8005eca:	61fb      	str	r3, [r7, #28]
 8005ecc:	e002      	b.n	8005ed4 <lkv_stepmotor_run_down+0x60>
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	61fb      	str	r3, [r7, #28]
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d8f8      	bhi.n	8005ece <lkv_stepmotor_run_down+0x5a>
	lkv_stepmotor_coil_setval(0,1,1,0);
 8005edc:	2300      	movs	r3, #0
 8005ede:	2201      	movs	r2, #1
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	2000      	movs	r0, #0
 8005ee4:	f7ff ff18 	bl	8005d18 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 8005ee8:	2300      	movs	r3, #0
 8005eea:	61bb      	str	r3, [r7, #24]
 8005eec:	e002      	b.n	8005ef4 <lkv_stepmotor_run_down+0x80>
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	61bb      	str	r3, [r7, #24]
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d8f8      	bhi.n	8005eee <lkv_stepmotor_run_down+0x7a>
	lkv_stepmotor_coil_setval(0,1,0,0);
 8005efc:	2300      	movs	r3, #0
 8005efe:	2200      	movs	r2, #0
 8005f00:	2101      	movs	r1, #1
 8005f02:	2000      	movs	r0, #0
 8005f04:	f7ff ff08 	bl	8005d18 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 8005f08:	2300      	movs	r3, #0
 8005f0a:	617b      	str	r3, [r7, #20]
 8005f0c:	e002      	b.n	8005f14 <lkv_stepmotor_run_down+0xa0>
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	3301      	adds	r3, #1
 8005f12:	617b      	str	r3, [r7, #20]
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d8f8      	bhi.n	8005f0e <lkv_stepmotor_run_down+0x9a>
	lkv_stepmotor_coil_setval(1,1,0,0);
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	2200      	movs	r2, #0
 8005f20:	2101      	movs	r1, #1
 8005f22:	2001      	movs	r0, #1
 8005f24:	f7ff fef8 	bl	8005d18 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 8005f28:	2300      	movs	r3, #0
 8005f2a:	613b      	str	r3, [r7, #16]
 8005f2c:	e002      	b.n	8005f34 <lkv_stepmotor_run_down+0xc0>
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	3301      	adds	r3, #1
 8005f32:	613b      	str	r3, [r7, #16]
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d8f8      	bhi.n	8005f2e <lkv_stepmotor_run_down+0xba>
	lkv_stepmotor_coil_setval(1,0,0,0);
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	2200      	movs	r2, #0
 8005f40:	2100      	movs	r1, #0
 8005f42:	2001      	movs	r0, #1
 8005f44:	f7ff fee8 	bl	8005d18 <lkv_stepmotor_coil_setval>
	for(int i = 0; i < _speed; i ++);
 8005f48:	2300      	movs	r3, #0
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	e002      	b.n	8005f54 <lkv_stepmotor_run_down+0xe0>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	3301      	adds	r3, #1
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d8f8      	bhi.n	8005f4e <lkv_stepmotor_run_down+0xda>
	lkv_stepmotor_coil_setval(1,0,0,1);
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	2200      	movs	r2, #0
 8005f60:	2100      	movs	r1, #0
 8005f62:	2001      	movs	r0, #1
 8005f64:	f7ff fed8 	bl	8005d18 <lkv_stepmotor_coil_setval>
}
 8005f68:	bf00      	nop
 8005f6a:	3728      	adds	r7, #40	; 0x28
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <lkv_stepmotor_gpio_init>:




void lkv_stepmotor_gpio_init(void){
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b088      	sub	sp, #32
 8005f74:	af00      	add	r7, sp, #0

	/* enable GPIO LCD PORTs clock */

	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f76:	4b25      	ldr	r3, [pc, #148]	; (800600c <lkv_stepmotor_gpio_init+0x9c>)
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	4a24      	ldr	r2, [pc, #144]	; (800600c <lkv_stepmotor_gpio_init+0x9c>)
 8005f7c:	f043 0301 	orr.w	r3, r3, #1
 8005f80:	61d3      	str	r3, [r2, #28]
 8005f82:	4b22      	ldr	r3, [pc, #136]	; (800600c <lkv_stepmotor_gpio_init+0x9c>)
 8005f84:	69db      	ldr	r3, [r3, #28]
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	60bb      	str	r3, [r7, #8]
 8005f8c:	68bb      	ldr	r3, [r7, #8]
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f8e:	4b1f      	ldr	r3, [pc, #124]	; (800600c <lkv_stepmotor_gpio_init+0x9c>)
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	4a1e      	ldr	r2, [pc, #120]	; (800600c <lkv_stepmotor_gpio_init+0x9c>)
 8005f94:	f043 0302 	orr.w	r3, r3, #2
 8005f98:	61d3      	str	r3, [r2, #28]
 8005f9a:	4b1c      	ldr	r3, [pc, #112]	; (800600c <lkv_stepmotor_gpio_init+0x9c>)
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	607b      	str	r3, [r7, #4]
 8005fa4:	687b      	ldr	r3, [r7, #4]

	/* enable GPIO LCD PINs */

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fa6:	f107 030c 	add.w	r3, r7, #12
 8005faa:	2200      	movs	r2, #0
 8005fac:	601a      	str	r2, [r3, #0]
 8005fae:	605a      	str	r2, [r3, #4]
 8005fb0:	609a      	str	r2, [r3, #8]
 8005fb2:	60da      	str	r2, [r3, #12]
 8005fb4:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	61bb      	str	r3, [r7, #24]

	  GPIO_InitStruct.Pin = DRIVER_PIN_1;
 8005fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fc6:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(DRIVER_PIN_1_PORT, &GPIO_InitStruct);
 8005fc8:	f107 030c 	add.w	r3, r7, #12
 8005fcc:	4619      	mov	r1, r3
 8005fce:	4810      	ldr	r0, [pc, #64]	; (8006010 <lkv_stepmotor_gpio_init+0xa0>)
 8005fd0:	f7fa fd72 	bl	8000ab8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = DRIVER_PIN_2;
 8005fd4:	2308      	movs	r3, #8
 8005fd6:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(DRIVER_PIN_2_PORT, &GPIO_InitStruct);
 8005fd8:	f107 030c 	add.w	r3, r7, #12
 8005fdc:	4619      	mov	r1, r3
 8005fde:	480d      	ldr	r0, [pc, #52]	; (8006014 <lkv_stepmotor_gpio_init+0xa4>)
 8005fe0:	f7fa fd6a 	bl	8000ab8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = DRIVER_PIN_3;
 8005fe4:	2320      	movs	r3, #32
 8005fe6:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(DRIVER_PIN_3_PORT, &GPIO_InitStruct);
 8005fe8:	f107 030c 	add.w	r3, r7, #12
 8005fec:	4619      	mov	r1, r3
 8005fee:	4809      	ldr	r0, [pc, #36]	; (8006014 <lkv_stepmotor_gpio_init+0xa4>)
 8005ff0:	f7fa fd62 	bl	8000ab8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = DRIVER_PIN_4;
 8005ff4:	2310      	movs	r3, #16
 8005ff6:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(DRIVER_PIN_4_PORT, &GPIO_InitStruct);
 8005ff8:	f107 030c 	add.w	r3, r7, #12
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	4805      	ldr	r0, [pc, #20]	; (8006014 <lkv_stepmotor_gpio_init+0xa4>)
 8006000:	f7fa fd5a 	bl	8000ab8 <HAL_GPIO_Init>

}
 8006004:	bf00      	nop
 8006006:	3720      	adds	r7, #32
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	40023800 	.word	0x40023800
 8006010:	40020000 	.word	0x40020000
 8006014:	40020400 	.word	0x40020400

08006018 <lkv_stepmotor_process>:




void lkv_stepmotor_process(uint8_t _direction, uint32_t _speed, uint32_t _number_step){
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	4603      	mov	r3, r0
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
 8006024:	73fb      	strb	r3, [r7, #15]

	if(_direction == STEP_DIR_DOWN){
 8006026:	7bfb      	ldrb	r3, [r7, #15]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d10d      	bne.n	8006048 <lkv_stepmotor_process+0x30>

		for(int i = 0; i < _number_step; i++){
 800602c:	2300      	movs	r3, #0
 800602e:	617b      	str	r3, [r7, #20]
 8006030:	e005      	b.n	800603e <lkv_stepmotor_process+0x26>
			lkv_stepmotor_run_down(_speed);
 8006032:	68b8      	ldr	r0, [r7, #8]
 8006034:	f7ff ff1e 	bl	8005e74 <lkv_stepmotor_run_down>
		for(int i = 0; i < _number_step; i++){
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	3301      	adds	r3, #1
 800603c:	617b      	str	r3, [r7, #20]
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	429a      	cmp	r2, r3
 8006044:	d8f5      	bhi.n	8006032 <lkv_stepmotor_process+0x1a>
		}

		return;
 8006046:	e01a      	b.n	800607e <lkv_stepmotor_process+0x66>
	}

	if(_direction == STEP_DIR_UP){
 8006048:	7bfb      	ldrb	r3, [r7, #15]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10d      	bne.n	800606a <lkv_stepmotor_process+0x52>
		for(int i = 0; i < _number_step; i++){
 800604e:	2300      	movs	r3, #0
 8006050:	613b      	str	r3, [r7, #16]
 8006052:	e005      	b.n	8006060 <lkv_stepmotor_process+0x48>
			lkv_stepmotor_run_up(_speed);
 8006054:	68b8      	ldr	r0, [r7, #8]
 8006056:	f7ff fe8f 	bl	8005d78 <lkv_stepmotor_run_up>
		for(int i = 0; i < _number_step; i++){
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	3301      	adds	r3, #1
 800605e:	613b      	str	r3, [r7, #16]
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	429a      	cmp	r2, r3
 8006066:	d8f5      	bhi.n	8006054 <lkv_stepmotor_process+0x3c>
		}
		return;
 8006068:	e009      	b.n	800607e <lkv_stepmotor_process+0x66>
	}

	if(_direction == STEP_STOP){
 800606a:	7bfb      	ldrb	r3, [r7, #15]
 800606c:	2b03      	cmp	r3, #3
 800606e:	d105      	bne.n	800607c <lkv_stepmotor_process+0x64>
		lkv_stepmotor_coil_setval(0,0,0,0);
 8006070:	2300      	movs	r3, #0
 8006072:	2200      	movs	r2, #0
 8006074:	2100      	movs	r1, #0
 8006076:	2000      	movs	r0, #0
 8006078:	f7ff fe4e 	bl	8005d18 <lkv_stepmotor_coil_setval>
	}


return;
 800607c:	bf00      	nop
}
 800607e:	3718      	adds	r7, #24
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <memcmp>:
 8006084:	b510      	push	{r4, lr}
 8006086:	3901      	subs	r1, #1
 8006088:	4402      	add	r2, r0
 800608a:	4290      	cmp	r0, r2
 800608c:	d101      	bne.n	8006092 <memcmp+0xe>
 800608e:	2000      	movs	r0, #0
 8006090:	e005      	b.n	800609e <memcmp+0x1a>
 8006092:	7803      	ldrb	r3, [r0, #0]
 8006094:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006098:	42a3      	cmp	r3, r4
 800609a:	d001      	beq.n	80060a0 <memcmp+0x1c>
 800609c:	1b18      	subs	r0, r3, r4
 800609e:	bd10      	pop	{r4, pc}
 80060a0:	3001      	adds	r0, #1
 80060a2:	e7f2      	b.n	800608a <memcmp+0x6>

080060a4 <memset>:
 80060a4:	4603      	mov	r3, r0
 80060a6:	4402      	add	r2, r0
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d100      	bne.n	80060ae <memset+0xa>
 80060ac:	4770      	bx	lr
 80060ae:	f803 1b01 	strb.w	r1, [r3], #1
 80060b2:	e7f9      	b.n	80060a8 <memset+0x4>

080060b4 <__libc_init_array>:
 80060b4:	b570      	push	{r4, r5, r6, lr}
 80060b6:	2600      	movs	r6, #0
 80060b8:	4d0c      	ldr	r5, [pc, #48]	; (80060ec <__libc_init_array+0x38>)
 80060ba:	4c0d      	ldr	r4, [pc, #52]	; (80060f0 <__libc_init_array+0x3c>)
 80060bc:	1b64      	subs	r4, r4, r5
 80060be:	10a4      	asrs	r4, r4, #2
 80060c0:	42a6      	cmp	r6, r4
 80060c2:	d109      	bne.n	80060d8 <__libc_init_array+0x24>
 80060c4:	f000 f828 	bl	8006118 <_init>
 80060c8:	2600      	movs	r6, #0
 80060ca:	4d0a      	ldr	r5, [pc, #40]	; (80060f4 <__libc_init_array+0x40>)
 80060cc:	4c0a      	ldr	r4, [pc, #40]	; (80060f8 <__libc_init_array+0x44>)
 80060ce:	1b64      	subs	r4, r4, r5
 80060d0:	10a4      	asrs	r4, r4, #2
 80060d2:	42a6      	cmp	r6, r4
 80060d4:	d105      	bne.n	80060e2 <__libc_init_array+0x2e>
 80060d6:	bd70      	pop	{r4, r5, r6, pc}
 80060d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80060dc:	4798      	blx	r3
 80060de:	3601      	adds	r6, #1
 80060e0:	e7ee      	b.n	80060c0 <__libc_init_array+0xc>
 80060e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80060e6:	4798      	blx	r3
 80060e8:	3601      	adds	r6, #1
 80060ea:	e7f2      	b.n	80060d2 <__libc_init_array+0x1e>
 80060ec:	0800615c 	.word	0x0800615c
 80060f0:	0800615c 	.word	0x0800615c
 80060f4:	0800615c 	.word	0x0800615c
 80060f8:	08006160 	.word	0x08006160

080060fc <memcpy>:
 80060fc:	440a      	add	r2, r1
 80060fe:	4291      	cmp	r1, r2
 8006100:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006104:	d100      	bne.n	8006108 <memcpy+0xc>
 8006106:	4770      	bx	lr
 8006108:	b510      	push	{r4, lr}
 800610a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800610e:	4291      	cmp	r1, r2
 8006110:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006114:	d1f9      	bne.n	800610a <memcpy+0xe>
 8006116:	bd10      	pop	{r4, pc}

08006118 <_init>:
 8006118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800611a:	bf00      	nop
 800611c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800611e:	bc08      	pop	{r3}
 8006120:	469e      	mov	lr, r3
 8006122:	4770      	bx	lr

08006124 <_fini>:
 8006124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006126:	bf00      	nop
 8006128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800612a:	bc08      	pop	{r3}
 800612c:	469e      	mov	lr, r3
 800612e:	4770      	bx	lr
