
last_try.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e84  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800600c  0800600c  0001600c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006024  08006024  0002003c  2**0
                  CONTENTS
  4 .ARM          00000008  08006024  08006024  00016024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800602c  0800602c  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800602c  0800602c  0001602c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006030  08006030  00016030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08006034  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002003c  2**0
                  CONTENTS
 10 .bss          00000718  2000003c  2000003c  0002003c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000754  20000754  0002003c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000e4a1  00000000  00000000  000200af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002585  00000000  00000000  0002e550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000cb0  00000000  00000000  00030ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009c6  00000000  00000000  00031788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000209aa  00000000  00000000  0003214e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f595  00000000  00000000  00052af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c5529  00000000  00000000  0006208d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003458  00000000  00000000  001275b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  0012aa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000003c 	.word	0x2000003c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005ff4 	.word	0x08005ff4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000040 	.word	0x20000040
 80001c4:	08005ff4 	.word	0x08005ff4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ca:	2300      	movs	r3, #0
 80004cc:	607b      	str	r3, [r7, #4]
 80004ce:	4b10      	ldr	r3, [pc, #64]	; (8000510 <HAL_MspInit+0x4c>)
 80004d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004d2:	4a0f      	ldr	r2, [pc, #60]	; (8000510 <HAL_MspInit+0x4c>)
 80004d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004d8:	6453      	str	r3, [r2, #68]	; 0x44
 80004da:	4b0d      	ldr	r3, [pc, #52]	; (8000510 <HAL_MspInit+0x4c>)
 80004dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e6:	2300      	movs	r3, #0
 80004e8:	603b      	str	r3, [r7, #0]
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <HAL_MspInit+0x4c>)
 80004ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004ee:	4a08      	ldr	r2, [pc, #32]	; (8000510 <HAL_MspInit+0x4c>)
 80004f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004f4:	6413      	str	r3, [r2, #64]	; 0x40
 80004f6:	4b06      	ldr	r3, [pc, #24]	; (8000510 <HAL_MspInit+0x4c>)
 80004f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004fe:	603b      	str	r3, [r7, #0]
 8000500:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	40023800 	.word	0x40023800

08000514 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08a      	sub	sp, #40	; 0x28
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051c:	f107 0314 	add.w	r3, r7, #20
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a19      	ldr	r2, [pc, #100]	; (8000598 <HAL_SPI_MspInit+0x84>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d12b      	bne.n	800058e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	613b      	str	r3, [r7, #16]
 800053a:	4b18      	ldr	r3, [pc, #96]	; (800059c <HAL_SPI_MspInit+0x88>)
 800053c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800053e:	4a17      	ldr	r2, [pc, #92]	; (800059c <HAL_SPI_MspInit+0x88>)
 8000540:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000544:	6453      	str	r3, [r2, #68]	; 0x44
 8000546:	4b15      	ldr	r3, [pc, #84]	; (800059c <HAL_SPI_MspInit+0x88>)
 8000548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800054a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800054e:	613b      	str	r3, [r7, #16]
 8000550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]
 8000556:	4b11      	ldr	r3, [pc, #68]	; (800059c <HAL_SPI_MspInit+0x88>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a10      	ldr	r2, [pc, #64]	; (800059c <HAL_SPI_MspInit+0x88>)
 800055c:	f043 0302 	orr.w	r3, r3, #2
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b0e      	ldr	r3, [pc, #56]	; (800059c <HAL_SPI_MspInit+0x88>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800056e:	2328      	movs	r3, #40	; 0x28
 8000570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000572:	2302      	movs	r3, #2
 8000574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000576:	2300      	movs	r3, #0
 8000578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800057a:	2303      	movs	r3, #3
 800057c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800057e:	2305      	movs	r3, #5
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	4619      	mov	r1, r3
 8000588:	4805      	ldr	r0, [pc, #20]	; (80005a0 <HAL_SPI_MspInit+0x8c>)
 800058a:	f000 faf5 	bl	8000b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800058e:	bf00      	nop
 8000590:	3728      	adds	r7, #40	; 0x28
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40013000 	.word	0x40013000
 800059c:	40023800 	.word	0x40023800
 80005a0:	40020400 	.word	0x40020400

080005a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a1d      	ldr	r2, [pc, #116]	; (8000638 <HAL_UART_MspInit+0x94>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d134      	bne.n	8000630 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <HAL_UART_MspInit+0x98>)
 80005cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ce:	4a1b      	ldr	r2, [pc, #108]	; (800063c <HAL_UART_MspInit+0x98>)
 80005d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005d4:	6413      	str	r3, [r2, #64]	; 0x40
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <HAL_UART_MspInit+0x98>)
 80005d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	4b15      	ldr	r3, [pc, #84]	; (800063c <HAL_UART_MspInit+0x98>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a14      	ldr	r2, [pc, #80]	; (800063c <HAL_UART_MspInit+0x98>)
 80005ec:	f043 0308 	orr.w	r3, r3, #8
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b12      	ldr	r3, [pc, #72]	; (800063c <HAL_UART_MspInit+0x98>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0308 	and.w	r3, r3, #8
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80005fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000604:	2302      	movs	r3, #2
 8000606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800060c:	2303      	movs	r3, #3
 800060e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000610:	2307      	movs	r3, #7
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	4619      	mov	r1, r3
 800061a:	4809      	ldr	r0, [pc, #36]	; (8000640 <HAL_UART_MspInit+0x9c>)
 800061c:	f000 faac 	bl	8000b78 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000620:	2200      	movs	r2, #0
 8000622:	2100      	movs	r1, #0
 8000624:	2027      	movs	r0, #39	; 0x27
 8000626:	f000 f9de 	bl	80009e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800062a:	2027      	movs	r0, #39	; 0x27
 800062c:	f000 f9f7 	bl	8000a1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000630:	bf00      	nop
 8000632:	3728      	adds	r7, #40	; 0x28
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40004800 	.word	0x40004800
 800063c:	40023800 	.word	0x40023800
 8000640:	40020400 	.word	0x40020400

08000644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000648:	e7fe      	b.n	8000648 <NMI_Handler+0x4>

0800064a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800064e:	e7fe      	b.n	800064e <HardFault_Handler+0x4>

08000650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <MemManage_Handler+0x4>

08000656 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800065a:	e7fe      	b.n	800065a <BusFault_Handler+0x4>

0800065c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000660:	e7fe      	b.n	8000660 <UsageFault_Handler+0x4>

08000662 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <SystemInit+0x20>)
 8000692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000696:	4a05      	ldr	r2, [pc, #20]	; (80006ac <SystemInit+0x20>)
 8000698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800069c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80006b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80006b4:	480d      	ldr	r0, [pc, #52]	; (80006ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80006b6:	490e      	ldr	r1, [pc, #56]	; (80006f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80006b8:	4a0e      	ldr	r2, [pc, #56]	; (80006f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006bc:	e002      	b.n	80006c4 <LoopCopyDataInit>

080006be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c2:	3304      	adds	r3, #4

080006c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c8:	d3f9      	bcc.n	80006be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ca:	4a0b      	ldr	r2, [pc, #44]	; (80006f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80006cc:	4c0b      	ldr	r4, [pc, #44]	; (80006fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d0:	e001      	b.n	80006d6 <LoopFillZerobss>

080006d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d4:	3204      	adds	r2, #4

080006d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d8:	d3fb      	bcc.n	80006d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80006da:	f7ff ffd7 	bl	800068c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006de:	f005 fc57 	bl	8005f90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006e2:	f002 fcf5 	bl	80030d0 <main>
  bx  lr    
 80006e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80006e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f0:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 80006f4:	08006034 	.word	0x08006034
  ldr r2, =_sbss
 80006f8:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 80006fc:	20000754 	.word	0x20000754

08000700 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000700:	e7fe      	b.n	8000700 <ADC_IRQHandler>
	...

08000704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000708:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <HAL_Init+0x40>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a0d      	ldr	r2, [pc, #52]	; (8000744 <HAL_Init+0x40>)
 800070e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000712:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <HAL_Init+0x40>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <HAL_Init+0x40>)
 800071a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800071e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <HAL_Init+0x40>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a07      	ldr	r2, [pc, #28]	; (8000744 <HAL_Init+0x40>)
 8000726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800072a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800072c:	2003      	movs	r0, #3
 800072e:	f000 f94f 	bl	80009d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000732:	200f      	movs	r0, #15
 8000734:	f000 f808 	bl	8000748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000738:	f7ff fec4 	bl	80004c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40023c00 	.word	0x40023c00

08000748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <HAL_InitTick+0x54>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_InitTick+0x58>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	4619      	mov	r1, r3
 800075a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000762:	fbb2 f3f3 	udiv	r3, r2, r3
 8000766:	4618      	mov	r0, r3
 8000768:	f000 f967 	bl	8000a3a <HAL_SYSTICK_Config>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
 8000774:	e00e      	b.n	8000794 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2b0f      	cmp	r3, #15
 800077a:	d80a      	bhi.n	8000792 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800077c:	2200      	movs	r2, #0
 800077e:	6879      	ldr	r1, [r7, #4]
 8000780:	f04f 30ff 	mov.w	r0, #4294967295
 8000784:	f000 f92f 	bl	80009e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000788:	4a06      	ldr	r2, [pc, #24]	; (80007a4 <HAL_InitTick+0x5c>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800078e:	2300      	movs	r3, #0
 8000790:	e000      	b.n	8000794 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000792:	2301      	movs	r3, #1
}
 8000794:	4618      	mov	r0, r3
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000000 	.word	0x20000000
 80007a0:	20000008 	.word	0x20000008
 80007a4:	20000004 	.word	0x20000004

080007a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_IncTick+0x20>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_IncTick+0x24>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4413      	add	r3, r2
 80007b8:	4a04      	ldr	r2, [pc, #16]	; (80007cc <HAL_IncTick+0x24>)
 80007ba:	6013      	str	r3, [r2, #0]
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	20000008 	.word	0x20000008
 80007cc:	20000058 	.word	0x20000058

080007d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  return uwTick;
 80007d4:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <HAL_GetTick+0x14>)
 80007d6:	681b      	ldr	r3, [r3, #0]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	20000058 	.word	0x20000058

080007e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007f0:	f7ff ffee 	bl	80007d0 <HAL_GetTick>
 80007f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000800:	d005      	beq.n	800080e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <HAL_Delay+0x44>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	461a      	mov	r2, r3
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	4413      	add	r3, r2
 800080c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800080e:	bf00      	nop
 8000810:	f7ff ffde 	bl	80007d0 <HAL_GetTick>
 8000814:	4602      	mov	r2, r0
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	1ad3      	subs	r3, r2, r3
 800081a:	68fa      	ldr	r2, [r7, #12]
 800081c:	429a      	cmp	r2, r3
 800081e:	d8f7      	bhi.n	8000810 <HAL_Delay+0x28>
  {
  }
}
 8000820:	bf00      	nop
 8000822:	bf00      	nop
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000008 	.word	0x20000008

08000830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f003 0307 	and.w	r3, r3, #7
 800083e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <__NVIC_SetPriorityGrouping+0x44>)
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000846:	68ba      	ldr	r2, [r7, #8]
 8000848:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800084c:	4013      	ands	r3, r2
 800084e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000858:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800085c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000862:	4a04      	ldr	r2, [pc, #16]	; (8000874 <__NVIC_SetPriorityGrouping+0x44>)
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	60d3      	str	r3, [r2, #12]
}
 8000868:	bf00      	nop
 800086a:	3714      	adds	r7, #20
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800087c:	4b04      	ldr	r3, [pc, #16]	; (8000890 <__NVIC_GetPriorityGrouping+0x18>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	0a1b      	lsrs	r3, r3, #8
 8000882:	f003 0307 	and.w	r3, r3, #7
}
 8000886:	4618      	mov	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800089e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	db0b      	blt.n	80008be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	f003 021f 	and.w	r2, r3, #31
 80008ac:	4907      	ldr	r1, [pc, #28]	; (80008cc <__NVIC_EnableIRQ+0x38>)
 80008ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b2:	095b      	lsrs	r3, r3, #5
 80008b4:	2001      	movs	r0, #1
 80008b6:	fa00 f202 	lsl.w	r2, r0, r2
 80008ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000e100 	.word	0xe000e100

080008d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	6039      	str	r1, [r7, #0]
 80008da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	db0a      	blt.n	80008fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	490c      	ldr	r1, [pc, #48]	; (800091c <__NVIC_SetPriority+0x4c>)
 80008ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ee:	0112      	lsls	r2, r2, #4
 80008f0:	b2d2      	uxtb	r2, r2
 80008f2:	440b      	add	r3, r1
 80008f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f8:	e00a      	b.n	8000910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4908      	ldr	r1, [pc, #32]	; (8000920 <__NVIC_SetPriority+0x50>)
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	f003 030f 	and.w	r3, r3, #15
 8000906:	3b04      	subs	r3, #4
 8000908:	0112      	lsls	r2, r2, #4
 800090a:	b2d2      	uxtb	r2, r2
 800090c:	440b      	add	r3, r1
 800090e:	761a      	strb	r2, [r3, #24]
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	e000e100 	.word	0xe000e100
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000924:	b480      	push	{r7}
 8000926:	b089      	sub	sp, #36	; 0x24
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	f003 0307 	and.w	r3, r3, #7
 8000936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	f1c3 0307 	rsb	r3, r3, #7
 800093e:	2b04      	cmp	r3, #4
 8000940:	bf28      	it	cs
 8000942:	2304      	movcs	r3, #4
 8000944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	3304      	adds	r3, #4
 800094a:	2b06      	cmp	r3, #6
 800094c:	d902      	bls.n	8000954 <NVIC_EncodePriority+0x30>
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3b03      	subs	r3, #3
 8000952:	e000      	b.n	8000956 <NVIC_EncodePriority+0x32>
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000958:	f04f 32ff 	mov.w	r2, #4294967295
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	43da      	mvns	r2, r3
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	401a      	ands	r2, r3
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800096c:	f04f 31ff 	mov.w	r1, #4294967295
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	fa01 f303 	lsl.w	r3, r1, r3
 8000976:	43d9      	mvns	r1, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800097c:	4313      	orrs	r3, r2
         );
}
 800097e:	4618      	mov	r0, r3
 8000980:	3724      	adds	r7, #36	; 0x24
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
	...

0800098c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3b01      	subs	r3, #1
 8000998:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800099c:	d301      	bcc.n	80009a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800099e:	2301      	movs	r3, #1
 80009a0:	e00f      	b.n	80009c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009a2:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <SysTick_Config+0x40>)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009aa:	210f      	movs	r1, #15
 80009ac:	f04f 30ff 	mov.w	r0, #4294967295
 80009b0:	f7ff ff8e 	bl	80008d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <SysTick_Config+0x40>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ba:	4b04      	ldr	r3, [pc, #16]	; (80009cc <SysTick_Config+0x40>)
 80009bc:	2207      	movs	r2, #7
 80009be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	e000e010 	.word	0xe000e010

080009d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f7ff ff29 	bl	8000830 <__NVIC_SetPriorityGrouping>
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b086      	sub	sp, #24
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	4603      	mov	r3, r0
 80009ee:	60b9      	str	r1, [r7, #8]
 80009f0:	607a      	str	r2, [r7, #4]
 80009f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009f8:	f7ff ff3e 	bl	8000878 <__NVIC_GetPriorityGrouping>
 80009fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	68b9      	ldr	r1, [r7, #8]
 8000a02:	6978      	ldr	r0, [r7, #20]
 8000a04:	f7ff ff8e 	bl	8000924 <NVIC_EncodePriority>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a0e:	4611      	mov	r1, r2
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff ff5d 	bl	80008d0 <__NVIC_SetPriority>
}
 8000a16:	bf00      	nop
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b082      	sub	sp, #8
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	4603      	mov	r3, r0
 8000a26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ff31 	bl	8000894 <__NVIC_EnableIRQ>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b082      	sub	sp, #8
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f7ff ffa2 	bl	800098c <SysTick_Config>
 8000a48:	4603      	mov	r3, r0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b084      	sub	sp, #16
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000a60:	f7ff feb6 	bl	80007d0 <HAL_GetTick>
 8000a64:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d008      	beq.n	8000a84 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2280      	movs	r2, #128	; 0x80
 8000a76:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000a80:	2301      	movs	r3, #1
 8000a82:	e052      	b.n	8000b2a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f022 0216 	bic.w	r2, r2, #22
 8000a92:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	695a      	ldr	r2, [r3, #20]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000aa2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d103      	bne.n	8000ab4 <HAL_DMA_Abort+0x62>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d007      	beq.n	8000ac4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f022 0208 	bic.w	r2, r2, #8
 8000ac2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f022 0201 	bic.w	r2, r2, #1
 8000ad2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ad4:	e013      	b.n	8000afe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ad6:	f7ff fe7b 	bl	80007d0 <HAL_GetTick>
 8000ada:	4602      	mov	r2, r0
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	1ad3      	subs	r3, r2, r3
 8000ae0:	2b05      	cmp	r3, #5
 8000ae2:	d90c      	bls.n	8000afe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2220      	movs	r2, #32
 8000ae8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2203      	movs	r2, #3
 8000aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2200      	movs	r2, #0
 8000af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000afa:	2303      	movs	r3, #3
 8000afc:	e015      	b.n	8000b2a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d1e4      	bne.n	8000ad6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b10:	223f      	movs	r2, #63	; 0x3f
 8000b12:	409a      	lsls	r2, r3
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2200      	movs	r2, #0
 8000b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b32:	b480      	push	{r7}
 8000b34:	b083      	sub	sp, #12
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d004      	beq.n	8000b50 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2280      	movs	r2, #128	; 0x80
 8000b4a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	e00c      	b.n	8000b6a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2205      	movs	r2, #5
 8000b54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f022 0201 	bic.w	r2, r2, #1
 8000b66:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
	...

08000b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b089      	sub	sp, #36	; 0x24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
 8000b92:	e16b      	b.n	8000e6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b94:	2201      	movs	r2, #1
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	697a      	ldr	r2, [r7, #20]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	f040 815a 	bne.w	8000e66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f003 0303 	and.w	r3, r3, #3
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d005      	beq.n	8000bca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d130      	bne.n	8000c2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	2203      	movs	r2, #3
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	69ba      	ldr	r2, [r7, #24]
 8000bde:	4013      	ands	r3, r2
 8000be0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	68da      	ldr	r2, [r3, #12]
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	69ba      	ldr	r2, [r7, #24]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	69ba      	ldr	r2, [r7, #24]
 8000bf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c00:	2201      	movs	r2, #1
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	69ba      	ldr	r2, [r7, #24]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	091b      	lsrs	r3, r3, #4
 8000c16:	f003 0201 	and.w	r2, r3, #1
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f003 0303 	and.w	r3, r3, #3
 8000c34:	2b03      	cmp	r3, #3
 8000c36:	d017      	beq.n	8000c68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	2203      	movs	r2, #3
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	689a      	ldr	r2, [r3, #8]
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f003 0303 	and.w	r3, r3, #3
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d123      	bne.n	8000cbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	08da      	lsrs	r2, r3, #3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3208      	adds	r2, #8
 8000c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	f003 0307 	and.w	r3, r3, #7
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	220f      	movs	r2, #15
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4013      	ands	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	691a      	ldr	r2, [r3, #16]
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	08da      	lsrs	r2, r3, #3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	3208      	adds	r2, #8
 8000cb6:	69b9      	ldr	r1, [r7, #24]
 8000cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	2203      	movs	r2, #3
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f003 0203 	and.w	r2, r3, #3
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	f000 80b4 	beq.w	8000e66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b60      	ldr	r3, [pc, #384]	; (8000e84 <HAL_GPIO_Init+0x30c>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	4a5f      	ldr	r2, [pc, #380]	; (8000e84 <HAL_GPIO_Init+0x30c>)
 8000d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0e:	4b5d      	ldr	r3, [pc, #372]	; (8000e84 <HAL_GPIO_Init+0x30c>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d1a:	4a5b      	ldr	r2, [pc, #364]	; (8000e88 <HAL_GPIO_Init+0x310>)
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	089b      	lsrs	r3, r3, #2
 8000d20:	3302      	adds	r3, #2
 8000d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	f003 0303 	and.w	r3, r3, #3
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	220f      	movs	r2, #15
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43db      	mvns	r3, r3
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a52      	ldr	r2, [pc, #328]	; (8000e8c <HAL_GPIO_Init+0x314>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d02b      	beq.n	8000d9e <HAL_GPIO_Init+0x226>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a51      	ldr	r2, [pc, #324]	; (8000e90 <HAL_GPIO_Init+0x318>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d025      	beq.n	8000d9a <HAL_GPIO_Init+0x222>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a50      	ldr	r2, [pc, #320]	; (8000e94 <HAL_GPIO_Init+0x31c>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d01f      	beq.n	8000d96 <HAL_GPIO_Init+0x21e>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a4f      	ldr	r2, [pc, #316]	; (8000e98 <HAL_GPIO_Init+0x320>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d019      	beq.n	8000d92 <HAL_GPIO_Init+0x21a>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a4e      	ldr	r2, [pc, #312]	; (8000e9c <HAL_GPIO_Init+0x324>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d013      	beq.n	8000d8e <HAL_GPIO_Init+0x216>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a4d      	ldr	r2, [pc, #308]	; (8000ea0 <HAL_GPIO_Init+0x328>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d00d      	beq.n	8000d8a <HAL_GPIO_Init+0x212>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a4c      	ldr	r2, [pc, #304]	; (8000ea4 <HAL_GPIO_Init+0x32c>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d007      	beq.n	8000d86 <HAL_GPIO_Init+0x20e>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a4b      	ldr	r2, [pc, #300]	; (8000ea8 <HAL_GPIO_Init+0x330>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d101      	bne.n	8000d82 <HAL_GPIO_Init+0x20a>
 8000d7e:	2307      	movs	r3, #7
 8000d80:	e00e      	b.n	8000da0 <HAL_GPIO_Init+0x228>
 8000d82:	2308      	movs	r3, #8
 8000d84:	e00c      	b.n	8000da0 <HAL_GPIO_Init+0x228>
 8000d86:	2306      	movs	r3, #6
 8000d88:	e00a      	b.n	8000da0 <HAL_GPIO_Init+0x228>
 8000d8a:	2305      	movs	r3, #5
 8000d8c:	e008      	b.n	8000da0 <HAL_GPIO_Init+0x228>
 8000d8e:	2304      	movs	r3, #4
 8000d90:	e006      	b.n	8000da0 <HAL_GPIO_Init+0x228>
 8000d92:	2303      	movs	r3, #3
 8000d94:	e004      	b.n	8000da0 <HAL_GPIO_Init+0x228>
 8000d96:	2302      	movs	r3, #2
 8000d98:	e002      	b.n	8000da0 <HAL_GPIO_Init+0x228>
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e000      	b.n	8000da0 <HAL_GPIO_Init+0x228>
 8000d9e:	2300      	movs	r3, #0
 8000da0:	69fa      	ldr	r2, [r7, #28]
 8000da2:	f002 0203 	and.w	r2, r2, #3
 8000da6:	0092      	lsls	r2, r2, #2
 8000da8:	4093      	lsls	r3, r2
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000db0:	4935      	ldr	r1, [pc, #212]	; (8000e88 <HAL_GPIO_Init+0x310>)
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	089b      	lsrs	r3, r3, #2
 8000db6:	3302      	adds	r3, #2
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dbe:	4b3b      	ldr	r3, [pc, #236]	; (8000eac <HAL_GPIO_Init+0x334>)
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d003      	beq.n	8000de2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000de2:	4a32      	ldr	r2, [pc, #200]	; (8000eac <HAL_GPIO_Init+0x334>)
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000de8:	4b30      	ldr	r3, [pc, #192]	; (8000eac <HAL_GPIO_Init+0x334>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	43db      	mvns	r3, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d003      	beq.n	8000e0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e0c:	4a27      	ldr	r2, [pc, #156]	; (8000eac <HAL_GPIO_Init+0x334>)
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e12:	4b26      	ldr	r3, [pc, #152]	; (8000eac <HAL_GPIO_Init+0x334>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e36:	4a1d      	ldr	r2, [pc, #116]	; (8000eac <HAL_GPIO_Init+0x334>)
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e3c:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <HAL_GPIO_Init+0x334>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e60:	4a12      	ldr	r2, [pc, #72]	; (8000eac <HAL_GPIO_Init+0x334>)
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	61fb      	str	r3, [r7, #28]
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	2b0f      	cmp	r3, #15
 8000e70:	f67f ae90 	bls.w	8000b94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3724      	adds	r7, #36	; 0x24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40013800 	.word	0x40013800
 8000e8c:	40020000 	.word	0x40020000
 8000e90:	40020400 	.word	0x40020400
 8000e94:	40020800 	.word	0x40020800
 8000e98:	40020c00 	.word	0x40020c00
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40021400 	.word	0x40021400
 8000ea4:	40021800 	.word	0x40021800
 8000ea8:	40021c00 	.word	0x40021c00
 8000eac:	40013c00 	.word	0x40013c00

08000eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	807b      	strh	r3, [r7, #2]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ec0:	787b      	ldrb	r3, [r7, #1]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ec6:	887a      	ldrh	r2, [r7, #2]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ecc:	e003      	b.n	8000ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ece:	887b      	ldrh	r3, [r7, #2]
 8000ed0:	041a      	lsls	r2, r3, #16
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	619a      	str	r2, [r3, #24]
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ef0:	695a      	ldr	r2, [r3, #20]
 8000ef2:	88fb      	ldrh	r3, [r7, #6]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d006      	beq.n	8000f08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000efa:	4a05      	ldr	r2, [pc, #20]	; (8000f10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000efc:	88fb      	ldrh	r3, [r7, #6]
 8000efe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 f806 	bl	8000f14 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40013c00 	.word	0x40013c00

08000f14 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e267      	b.n	800140e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d075      	beq.n	8001036 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f4a:	4b88      	ldr	r3, [pc, #544]	; (800116c <HAL_RCC_OscConfig+0x240>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f003 030c 	and.w	r3, r3, #12
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	d00c      	beq.n	8000f70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f56:	4b85      	ldr	r3, [pc, #532]	; (800116c <HAL_RCC_OscConfig+0x240>)
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f5e:	2b08      	cmp	r3, #8
 8000f60:	d112      	bne.n	8000f88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f62:	4b82      	ldr	r3, [pc, #520]	; (800116c <HAL_RCC_OscConfig+0x240>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f6e:	d10b      	bne.n	8000f88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f70:	4b7e      	ldr	r3, [pc, #504]	; (800116c <HAL_RCC_OscConfig+0x240>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d05b      	beq.n	8001034 <HAL_RCC_OscConfig+0x108>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d157      	bne.n	8001034 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e242      	b.n	800140e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f90:	d106      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x74>
 8000f92:	4b76      	ldr	r3, [pc, #472]	; (800116c <HAL_RCC_OscConfig+0x240>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a75      	ldr	r2, [pc, #468]	; (800116c <HAL_RCC_OscConfig+0x240>)
 8000f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	e01d      	b.n	8000fdc <HAL_RCC_OscConfig+0xb0>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fa8:	d10c      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x98>
 8000faa:	4b70      	ldr	r3, [pc, #448]	; (800116c <HAL_RCC_OscConfig+0x240>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a6f      	ldr	r2, [pc, #444]	; (800116c <HAL_RCC_OscConfig+0x240>)
 8000fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	4b6d      	ldr	r3, [pc, #436]	; (800116c <HAL_RCC_OscConfig+0x240>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a6c      	ldr	r2, [pc, #432]	; (800116c <HAL_RCC_OscConfig+0x240>)
 8000fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	e00b      	b.n	8000fdc <HAL_RCC_OscConfig+0xb0>
 8000fc4:	4b69      	ldr	r3, [pc, #420]	; (800116c <HAL_RCC_OscConfig+0x240>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a68      	ldr	r2, [pc, #416]	; (800116c <HAL_RCC_OscConfig+0x240>)
 8000fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fce:	6013      	str	r3, [r2, #0]
 8000fd0:	4b66      	ldr	r3, [pc, #408]	; (800116c <HAL_RCC_OscConfig+0x240>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a65      	ldr	r2, [pc, #404]	; (800116c <HAL_RCC_OscConfig+0x240>)
 8000fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d013      	beq.n	800100c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe4:	f7ff fbf4 	bl	80007d0 <HAL_GetTick>
 8000fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fea:	e008      	b.n	8000ffe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fec:	f7ff fbf0 	bl	80007d0 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b64      	cmp	r3, #100	; 0x64
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e207      	b.n	800140e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffe:	4b5b      	ldr	r3, [pc, #364]	; (800116c <HAL_RCC_OscConfig+0x240>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d0f0      	beq.n	8000fec <HAL_RCC_OscConfig+0xc0>
 800100a:	e014      	b.n	8001036 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100c:	f7ff fbe0 	bl	80007d0 <HAL_GetTick>
 8001010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001012:	e008      	b.n	8001026 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001014:	f7ff fbdc 	bl	80007d0 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b64      	cmp	r3, #100	; 0x64
 8001020:	d901      	bls.n	8001026 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e1f3      	b.n	800140e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001026:	4b51      	ldr	r3, [pc, #324]	; (800116c <HAL_RCC_OscConfig+0x240>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1f0      	bne.n	8001014 <HAL_RCC_OscConfig+0xe8>
 8001032:	e000      	b.n	8001036 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	2b00      	cmp	r3, #0
 8001040:	d063      	beq.n	800110a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001042:	4b4a      	ldr	r3, [pc, #296]	; (800116c <HAL_RCC_OscConfig+0x240>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f003 030c 	and.w	r3, r3, #12
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00b      	beq.n	8001066 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800104e:	4b47      	ldr	r3, [pc, #284]	; (800116c <HAL_RCC_OscConfig+0x240>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001056:	2b08      	cmp	r3, #8
 8001058:	d11c      	bne.n	8001094 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800105a:	4b44      	ldr	r3, [pc, #272]	; (800116c <HAL_RCC_OscConfig+0x240>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d116      	bne.n	8001094 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001066:	4b41      	ldr	r3, [pc, #260]	; (800116c <HAL_RCC_OscConfig+0x240>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d005      	beq.n	800107e <HAL_RCC_OscConfig+0x152>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d001      	beq.n	800107e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e1c7      	b.n	800140e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800107e:	4b3b      	ldr	r3, [pc, #236]	; (800116c <HAL_RCC_OscConfig+0x240>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	4937      	ldr	r1, [pc, #220]	; (800116c <HAL_RCC_OscConfig+0x240>)
 800108e:	4313      	orrs	r3, r2
 8001090:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001092:	e03a      	b.n	800110a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d020      	beq.n	80010de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800109c:	4b34      	ldr	r3, [pc, #208]	; (8001170 <HAL_RCC_OscConfig+0x244>)
 800109e:	2201      	movs	r2, #1
 80010a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a2:	f7ff fb95 	bl	80007d0 <HAL_GetTick>
 80010a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a8:	e008      	b.n	80010bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010aa:	f7ff fb91 	bl	80007d0 <HAL_GetTick>
 80010ae:	4602      	mov	r2, r0
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e1a8      	b.n	800140e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010bc:	4b2b      	ldr	r3, [pc, #172]	; (800116c <HAL_RCC_OscConfig+0x240>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 0302 	and.w	r3, r3, #2
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d0f0      	beq.n	80010aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c8:	4b28      	ldr	r3, [pc, #160]	; (800116c <HAL_RCC_OscConfig+0x240>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	4925      	ldr	r1, [pc, #148]	; (800116c <HAL_RCC_OscConfig+0x240>)
 80010d8:	4313      	orrs	r3, r2
 80010da:	600b      	str	r3, [r1, #0]
 80010dc:	e015      	b.n	800110a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010de:	4b24      	ldr	r3, [pc, #144]	; (8001170 <HAL_RCC_OscConfig+0x244>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e4:	f7ff fb74 	bl	80007d0 <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ec:	f7ff fb70 	bl	80007d0 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e187      	b.n	800140e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010fe:	4b1b      	ldr	r3, [pc, #108]	; (800116c <HAL_RCC_OscConfig+0x240>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1f0      	bne.n	80010ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	2b00      	cmp	r3, #0
 8001114:	d036      	beq.n	8001184 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d016      	beq.n	800114c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <HAL_RCC_OscConfig+0x248>)
 8001120:	2201      	movs	r2, #1
 8001122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001124:	f7ff fb54 	bl	80007d0 <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800112c:	f7ff fb50 	bl	80007d0 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e167      	b.n	800140e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <HAL_RCC_OscConfig+0x240>)
 8001140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d0f0      	beq.n	800112c <HAL_RCC_OscConfig+0x200>
 800114a:	e01b      	b.n	8001184 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <HAL_RCC_OscConfig+0x248>)
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001152:	f7ff fb3d 	bl	80007d0 <HAL_GetTick>
 8001156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001158:	e00e      	b.n	8001178 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800115a:	f7ff fb39 	bl	80007d0 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d907      	bls.n	8001178 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e150      	b.n	800140e <HAL_RCC_OscConfig+0x4e2>
 800116c:	40023800 	.word	0x40023800
 8001170:	42470000 	.word	0x42470000
 8001174:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001178:	4b88      	ldr	r3, [pc, #544]	; (800139c <HAL_RCC_OscConfig+0x470>)
 800117a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800117c:	f003 0302 	and.w	r3, r3, #2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1ea      	bne.n	800115a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	2b00      	cmp	r3, #0
 800118e:	f000 8097 	beq.w	80012c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001192:	2300      	movs	r3, #0
 8001194:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001196:	4b81      	ldr	r3, [pc, #516]	; (800139c <HAL_RCC_OscConfig+0x470>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d10f      	bne.n	80011c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	4b7d      	ldr	r3, [pc, #500]	; (800139c <HAL_RCC_OscConfig+0x470>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	4a7c      	ldr	r2, [pc, #496]	; (800139c <HAL_RCC_OscConfig+0x470>)
 80011ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b0:	6413      	str	r3, [r2, #64]	; 0x40
 80011b2:	4b7a      	ldr	r3, [pc, #488]	; (800139c <HAL_RCC_OscConfig+0x470>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011be:	2301      	movs	r3, #1
 80011c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c2:	4b77      	ldr	r3, [pc, #476]	; (80013a0 <HAL_RCC_OscConfig+0x474>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d118      	bne.n	8001200 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011ce:	4b74      	ldr	r3, [pc, #464]	; (80013a0 <HAL_RCC_OscConfig+0x474>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a73      	ldr	r2, [pc, #460]	; (80013a0 <HAL_RCC_OscConfig+0x474>)
 80011d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011da:	f7ff faf9 	bl	80007d0 <HAL_GetTick>
 80011de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e0:	e008      	b.n	80011f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011e2:	f7ff faf5 	bl	80007d0 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e10c      	b.n	800140e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f4:	4b6a      	ldr	r3, [pc, #424]	; (80013a0 <HAL_RCC_OscConfig+0x474>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d0f0      	beq.n	80011e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d106      	bne.n	8001216 <HAL_RCC_OscConfig+0x2ea>
 8001208:	4b64      	ldr	r3, [pc, #400]	; (800139c <HAL_RCC_OscConfig+0x470>)
 800120a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800120c:	4a63      	ldr	r2, [pc, #396]	; (800139c <HAL_RCC_OscConfig+0x470>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6713      	str	r3, [r2, #112]	; 0x70
 8001214:	e01c      	b.n	8001250 <HAL_RCC_OscConfig+0x324>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	2b05      	cmp	r3, #5
 800121c:	d10c      	bne.n	8001238 <HAL_RCC_OscConfig+0x30c>
 800121e:	4b5f      	ldr	r3, [pc, #380]	; (800139c <HAL_RCC_OscConfig+0x470>)
 8001220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001222:	4a5e      	ldr	r2, [pc, #376]	; (800139c <HAL_RCC_OscConfig+0x470>)
 8001224:	f043 0304 	orr.w	r3, r3, #4
 8001228:	6713      	str	r3, [r2, #112]	; 0x70
 800122a:	4b5c      	ldr	r3, [pc, #368]	; (800139c <HAL_RCC_OscConfig+0x470>)
 800122c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800122e:	4a5b      	ldr	r2, [pc, #364]	; (800139c <HAL_RCC_OscConfig+0x470>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6713      	str	r3, [r2, #112]	; 0x70
 8001236:	e00b      	b.n	8001250 <HAL_RCC_OscConfig+0x324>
 8001238:	4b58      	ldr	r3, [pc, #352]	; (800139c <HAL_RCC_OscConfig+0x470>)
 800123a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800123c:	4a57      	ldr	r2, [pc, #348]	; (800139c <HAL_RCC_OscConfig+0x470>)
 800123e:	f023 0301 	bic.w	r3, r3, #1
 8001242:	6713      	str	r3, [r2, #112]	; 0x70
 8001244:	4b55      	ldr	r3, [pc, #340]	; (800139c <HAL_RCC_OscConfig+0x470>)
 8001246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001248:	4a54      	ldr	r2, [pc, #336]	; (800139c <HAL_RCC_OscConfig+0x470>)
 800124a:	f023 0304 	bic.w	r3, r3, #4
 800124e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d015      	beq.n	8001284 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001258:	f7ff faba 	bl	80007d0 <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800125e:	e00a      	b.n	8001276 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001260:	f7ff fab6 	bl	80007d0 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	f241 3288 	movw	r2, #5000	; 0x1388
 800126e:	4293      	cmp	r3, r2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e0cb      	b.n	800140e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001276:	4b49      	ldr	r3, [pc, #292]	; (800139c <HAL_RCC_OscConfig+0x470>)
 8001278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d0ee      	beq.n	8001260 <HAL_RCC_OscConfig+0x334>
 8001282:	e014      	b.n	80012ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001284:	f7ff faa4 	bl	80007d0 <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800128a:	e00a      	b.n	80012a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800128c:	f7ff faa0 	bl	80007d0 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	f241 3288 	movw	r2, #5000	; 0x1388
 800129a:	4293      	cmp	r3, r2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e0b5      	b.n	800140e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a2:	4b3e      	ldr	r3, [pc, #248]	; (800139c <HAL_RCC_OscConfig+0x470>)
 80012a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1ee      	bne.n	800128c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012ae:	7dfb      	ldrb	r3, [r7, #23]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d105      	bne.n	80012c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012b4:	4b39      	ldr	r3, [pc, #228]	; (800139c <HAL_RCC_OscConfig+0x470>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	4a38      	ldr	r2, [pc, #224]	; (800139c <HAL_RCC_OscConfig+0x470>)
 80012ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f000 80a1 	beq.w	800140c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012ca:	4b34      	ldr	r3, [pc, #208]	; (800139c <HAL_RCC_OscConfig+0x470>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	2b08      	cmp	r3, #8
 80012d4:	d05c      	beq.n	8001390 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d141      	bne.n	8001362 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012de:	4b31      	ldr	r3, [pc, #196]	; (80013a4 <HAL_RCC_OscConfig+0x478>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e4:	f7ff fa74 	bl	80007d0 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ec:	f7ff fa70 	bl	80007d0 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e087      	b.n	800140e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012fe:	4b27      	ldr	r3, [pc, #156]	; (800139c <HAL_RCC_OscConfig+0x470>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f0      	bne.n	80012ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	69da      	ldr	r2, [r3, #28]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a1b      	ldr	r3, [r3, #32]
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	019b      	lsls	r3, r3, #6
 800131a:	431a      	orrs	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001320:	085b      	lsrs	r3, r3, #1
 8001322:	3b01      	subs	r3, #1
 8001324:	041b      	lsls	r3, r3, #16
 8001326:	431a      	orrs	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132c:	061b      	lsls	r3, r3, #24
 800132e:	491b      	ldr	r1, [pc, #108]	; (800139c <HAL_RCC_OscConfig+0x470>)
 8001330:	4313      	orrs	r3, r2
 8001332:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001334:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <HAL_RCC_OscConfig+0x478>)
 8001336:	2201      	movs	r2, #1
 8001338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133a:	f7ff fa49 	bl	80007d0 <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001342:	f7ff fa45 	bl	80007d0 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e05c      	b.n	800140e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <HAL_RCC_OscConfig+0x470>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0f0      	beq.n	8001342 <HAL_RCC_OscConfig+0x416>
 8001360:	e054      	b.n	800140c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <HAL_RCC_OscConfig+0x478>)
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001368:	f7ff fa32 	bl	80007d0 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001370:	f7ff fa2e 	bl	80007d0 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e045      	b.n	800140e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_RCC_OscConfig+0x470>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f0      	bne.n	8001370 <HAL_RCC_OscConfig+0x444>
 800138e:	e03d      	b.n	800140c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d107      	bne.n	80013a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e038      	b.n	800140e <HAL_RCC_OscConfig+0x4e2>
 800139c:	40023800 	.word	0x40023800
 80013a0:	40007000 	.word	0x40007000
 80013a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013a8:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <HAL_RCC_OscConfig+0x4ec>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d028      	beq.n	8001408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d121      	bne.n	8001408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d11a      	bne.n	8001408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80013d8:	4013      	ands	r3, r2
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d111      	bne.n	8001408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ee:	085b      	lsrs	r3, r3, #1
 80013f0:	3b01      	subs	r3, #1
 80013f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d107      	bne.n	8001408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001402:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001404:	429a      	cmp	r2, r3
 8001406:	d001      	beq.n	800140c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e000      	b.n	800140e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800

0800141c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e0cc      	b.n	80015ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001430:	4b68      	ldr	r3, [pc, #416]	; (80015d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	429a      	cmp	r2, r3
 800143c:	d90c      	bls.n	8001458 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800143e:	4b65      	ldr	r3, [pc, #404]	; (80015d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001446:	4b63      	ldr	r3, [pc, #396]	; (80015d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	429a      	cmp	r2, r3
 8001452:	d001      	beq.n	8001458 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e0b8      	b.n	80015ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d020      	beq.n	80014a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	d005      	beq.n	800147c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001470:	4b59      	ldr	r3, [pc, #356]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	4a58      	ldr	r2, [pc, #352]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001476:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800147a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0308 	and.w	r3, r3, #8
 8001484:	2b00      	cmp	r3, #0
 8001486:	d005      	beq.n	8001494 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001488:	4b53      	ldr	r3, [pc, #332]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	4a52      	ldr	r2, [pc, #328]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 800148e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001492:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001494:	4b50      	ldr	r3, [pc, #320]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	494d      	ldr	r1, [pc, #308]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d044      	beq.n	800153c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d107      	bne.n	80014ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ba:	4b47      	ldr	r3, [pc, #284]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d119      	bne.n	80014fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e07f      	b.n	80015ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d003      	beq.n	80014da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	d107      	bne.n	80014ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014da:	4b3f      	ldr	r3, [pc, #252]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d109      	bne.n	80014fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e06f      	b.n	80015ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ea:	4b3b      	ldr	r3, [pc, #236]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e067      	b.n	80015ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014fa:	4b37      	ldr	r3, [pc, #220]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f023 0203 	bic.w	r2, r3, #3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	4934      	ldr	r1, [pc, #208]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001508:	4313      	orrs	r3, r2
 800150a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800150c:	f7ff f960 	bl	80007d0 <HAL_GetTick>
 8001510:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001512:	e00a      	b.n	800152a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001514:	f7ff f95c 	bl	80007d0 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001522:	4293      	cmp	r3, r2
 8001524:	d901      	bls.n	800152a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e04f      	b.n	80015ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152a:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 020c 	and.w	r2, r3, #12
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	429a      	cmp	r2, r3
 800153a:	d1eb      	bne.n	8001514 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800153c:	4b25      	ldr	r3, [pc, #148]	; (80015d4 <HAL_RCC_ClockConfig+0x1b8>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d20c      	bcs.n	8001564 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154a:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <HAL_RCC_ClockConfig+0x1b8>)
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001552:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	429a      	cmp	r2, r3
 800155e:	d001      	beq.n	8001564 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e032      	b.n	80015ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b00      	cmp	r3, #0
 800156e:	d008      	beq.n	8001582 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001570:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	4916      	ldr	r1, [pc, #88]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 800157e:	4313      	orrs	r3, r2
 8001580:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	2b00      	cmp	r3, #0
 800158c:	d009      	beq.n	80015a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800158e:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	490e      	ldr	r1, [pc, #56]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015a2:	f000 f821 	bl	80015e8 <HAL_RCC_GetSysClockFreq>
 80015a6:	4602      	mov	r2, r0
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	091b      	lsrs	r3, r3, #4
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	490a      	ldr	r1, [pc, #40]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 80015b4:	5ccb      	ldrb	r3, [r1, r3]
 80015b6:	fa22 f303 	lsr.w	r3, r2, r3
 80015ba:	4a09      	ldr	r2, [pc, #36]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80015bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <HAL_RCC_ClockConfig+0x1c8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff f8c0 	bl	8000748 <HAL_InitTick>

  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40023c00 	.word	0x40023c00
 80015d8:	40023800 	.word	0x40023800
 80015dc:	0800600c 	.word	0x0800600c
 80015e0:	20000000 	.word	0x20000000
 80015e4:	20000004 	.word	0x20000004

080015e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015ec:	b094      	sub	sp, #80	; 0x50
 80015ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80015f0:	2300      	movs	r3, #0
 80015f2:	647b      	str	r3, [r7, #68]	; 0x44
 80015f4:	2300      	movs	r3, #0
 80015f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015f8:	2300      	movs	r3, #0
 80015fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80015fc:	2300      	movs	r3, #0
 80015fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001600:	4b79      	ldr	r3, [pc, #484]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 030c 	and.w	r3, r3, #12
 8001608:	2b08      	cmp	r3, #8
 800160a:	d00d      	beq.n	8001628 <HAL_RCC_GetSysClockFreq+0x40>
 800160c:	2b08      	cmp	r3, #8
 800160e:	f200 80e1 	bhi.w	80017d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001612:	2b00      	cmp	r3, #0
 8001614:	d002      	beq.n	800161c <HAL_RCC_GetSysClockFreq+0x34>
 8001616:	2b04      	cmp	r3, #4
 8001618:	d003      	beq.n	8001622 <HAL_RCC_GetSysClockFreq+0x3a>
 800161a:	e0db      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800161c:	4b73      	ldr	r3, [pc, #460]	; (80017ec <HAL_RCC_GetSysClockFreq+0x204>)
 800161e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001620:	e0db      	b.n	80017da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001622:	4b73      	ldr	r3, [pc, #460]	; (80017f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001624:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001626:	e0d8      	b.n	80017da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001628:	4b6f      	ldr	r3, [pc, #444]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001630:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001632:	4b6d      	ldr	r3, [pc, #436]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d063      	beq.n	8001706 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800163e:	4b6a      	ldr	r3, [pc, #424]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	099b      	lsrs	r3, r3, #6
 8001644:	2200      	movs	r2, #0
 8001646:	63bb      	str	r3, [r7, #56]	; 0x38
 8001648:	63fa      	str	r2, [r7, #60]	; 0x3c
 800164a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800164c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001650:	633b      	str	r3, [r7, #48]	; 0x30
 8001652:	2300      	movs	r3, #0
 8001654:	637b      	str	r3, [r7, #52]	; 0x34
 8001656:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800165a:	4622      	mov	r2, r4
 800165c:	462b      	mov	r3, r5
 800165e:	f04f 0000 	mov.w	r0, #0
 8001662:	f04f 0100 	mov.w	r1, #0
 8001666:	0159      	lsls	r1, r3, #5
 8001668:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800166c:	0150      	lsls	r0, r2, #5
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4621      	mov	r1, r4
 8001674:	1a51      	subs	r1, r2, r1
 8001676:	6139      	str	r1, [r7, #16]
 8001678:	4629      	mov	r1, r5
 800167a:	eb63 0301 	sbc.w	r3, r3, r1
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	f04f 0300 	mov.w	r3, #0
 8001688:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800168c:	4659      	mov	r1, fp
 800168e:	018b      	lsls	r3, r1, #6
 8001690:	4651      	mov	r1, sl
 8001692:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001696:	4651      	mov	r1, sl
 8001698:	018a      	lsls	r2, r1, #6
 800169a:	4651      	mov	r1, sl
 800169c:	ebb2 0801 	subs.w	r8, r2, r1
 80016a0:	4659      	mov	r1, fp
 80016a2:	eb63 0901 	sbc.w	r9, r3, r1
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	f04f 0300 	mov.w	r3, #0
 80016ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016ba:	4690      	mov	r8, r2
 80016bc:	4699      	mov	r9, r3
 80016be:	4623      	mov	r3, r4
 80016c0:	eb18 0303 	adds.w	r3, r8, r3
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	462b      	mov	r3, r5
 80016c8:	eb49 0303 	adc.w	r3, r9, r3
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	f04f 0300 	mov.w	r3, #0
 80016d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80016da:	4629      	mov	r1, r5
 80016dc:	024b      	lsls	r3, r1, #9
 80016de:	4621      	mov	r1, r4
 80016e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016e4:	4621      	mov	r1, r4
 80016e6:	024a      	lsls	r2, r1, #9
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016ee:	2200      	movs	r2, #0
 80016f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80016f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80016f8:	f7fe fd66 	bl	80001c8 <__aeabi_uldivmod>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4613      	mov	r3, r2
 8001702:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001704:	e058      	b.n	80017b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001706:	4b38      	ldr	r3, [pc, #224]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	099b      	lsrs	r3, r3, #6
 800170c:	2200      	movs	r2, #0
 800170e:	4618      	mov	r0, r3
 8001710:	4611      	mov	r1, r2
 8001712:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001716:	623b      	str	r3, [r7, #32]
 8001718:	2300      	movs	r3, #0
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
 800171c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001720:	4642      	mov	r2, r8
 8001722:	464b      	mov	r3, r9
 8001724:	f04f 0000 	mov.w	r0, #0
 8001728:	f04f 0100 	mov.w	r1, #0
 800172c:	0159      	lsls	r1, r3, #5
 800172e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001732:	0150      	lsls	r0, r2, #5
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4641      	mov	r1, r8
 800173a:	ebb2 0a01 	subs.w	sl, r2, r1
 800173e:	4649      	mov	r1, r9
 8001740:	eb63 0b01 	sbc.w	fp, r3, r1
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	f04f 0300 	mov.w	r3, #0
 800174c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001750:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001754:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001758:	ebb2 040a 	subs.w	r4, r2, sl
 800175c:	eb63 050b 	sbc.w	r5, r3, fp
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	f04f 0300 	mov.w	r3, #0
 8001768:	00eb      	lsls	r3, r5, #3
 800176a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800176e:	00e2      	lsls	r2, r4, #3
 8001770:	4614      	mov	r4, r2
 8001772:	461d      	mov	r5, r3
 8001774:	4643      	mov	r3, r8
 8001776:	18e3      	adds	r3, r4, r3
 8001778:	603b      	str	r3, [r7, #0]
 800177a:	464b      	mov	r3, r9
 800177c:	eb45 0303 	adc.w	r3, r5, r3
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800178e:	4629      	mov	r1, r5
 8001790:	028b      	lsls	r3, r1, #10
 8001792:	4621      	mov	r1, r4
 8001794:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001798:	4621      	mov	r1, r4
 800179a:	028a      	lsls	r2, r1, #10
 800179c:	4610      	mov	r0, r2
 800179e:	4619      	mov	r1, r3
 80017a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017a2:	2200      	movs	r2, #0
 80017a4:	61bb      	str	r3, [r7, #24]
 80017a6:	61fa      	str	r2, [r7, #28]
 80017a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017ac:	f7fe fd0c 	bl	80001c8 <__aeabi_uldivmod>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4613      	mov	r3, r2
 80017b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017b8:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	0c1b      	lsrs	r3, r3, #16
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	3301      	adds	r3, #1
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80017c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017d2:	e002      	b.n	80017da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <HAL_RCC_GetSysClockFreq+0x204>)
 80017d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3750      	adds	r7, #80	; 0x50
 80017e0:	46bd      	mov	sp, r7
 80017e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800
 80017ec:	00f42400 	.word	0x00f42400
 80017f0:	007a1200 	.word	0x007a1200

080017f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017f8:	4b03      	ldr	r3, [pc, #12]	; (8001808 <HAL_RCC_GetHCLKFreq+0x14>)
 80017fa:	681b      	ldr	r3, [r3, #0]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	20000000 	.word	0x20000000

0800180c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001810:	f7ff fff0 	bl	80017f4 <HAL_RCC_GetHCLKFreq>
 8001814:	4602      	mov	r2, r0
 8001816:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	0a9b      	lsrs	r3, r3, #10
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	4903      	ldr	r1, [pc, #12]	; (8001830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001822:	5ccb      	ldrb	r3, [r1, r3]
 8001824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001828:	4618      	mov	r0, r3
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40023800 	.word	0x40023800
 8001830:	0800601c 	.word	0x0800601c

08001834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001838:	f7ff ffdc 	bl	80017f4 <HAL_RCC_GetHCLKFreq>
 800183c:	4602      	mov	r2, r0
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	0b5b      	lsrs	r3, r3, #13
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	4903      	ldr	r1, [pc, #12]	; (8001858 <HAL_RCC_GetPCLK2Freq+0x24>)
 800184a:	5ccb      	ldrb	r3, [r1, r3]
 800184c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001850:	4618      	mov	r0, r3
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40023800 	.word	0x40023800
 8001858:	0800601c 	.word	0x0800601c

0800185c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e07b      	b.n	8001966 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001872:	2b00      	cmp	r3, #0
 8001874:	d108      	bne.n	8001888 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800187e:	d009      	beq.n	8001894 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	61da      	str	r2, [r3, #28]
 8001886:	e005      	b.n	8001894 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d106      	bne.n	80018b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7fe fe30 	bl	8000514 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2202      	movs	r2, #2
 80018b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80018dc:	431a      	orrs	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	431a      	orrs	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001904:	431a      	orrs	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001918:	ea42 0103 	orr.w	r1, r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001920:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	430a      	orrs	r2, r1
 800192a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	0c1b      	lsrs	r3, r3, #16
 8001932:	f003 0104 	and.w	r1, r3, #4
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193a:	f003 0210 	and.w	r2, r3, #16
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	69da      	ldr	r2, [r3, #28]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001954:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e03f      	b.n	8001a00 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	d106      	bne.n	800199a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7fe fe05 	bl	80005a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2224      	movs	r2, #36	; 0x24
 800199e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	68da      	ldr	r2, [r3, #12]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019b0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 fde8 	bl	8002588 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	691a      	ldr	r2, [r3, #16]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019c6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	695a      	ldr	r2, [r3, #20]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019d6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019e6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2220      	movs	r2, #32
 80019f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2220      	movs	r2, #32
 80019fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	; 0x28
 8001a0c:	af02      	add	r7, sp, #8
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	4613      	mov	r3, r2
 8001a16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b20      	cmp	r3, #32
 8001a26:	d17c      	bne.n	8001b22 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d002      	beq.n	8001a34 <HAL_UART_Transmit+0x2c>
 8001a2e:	88fb      	ldrh	r3, [r7, #6]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e075      	b.n	8001b24 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d101      	bne.n	8001a46 <HAL_UART_Transmit+0x3e>
 8001a42:	2302      	movs	r3, #2
 8001a44:	e06e      	b.n	8001b24 <HAL_UART_Transmit+0x11c>
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2221      	movs	r2, #33	; 0x21
 8001a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a5c:	f7fe feb8 	bl	80007d0 <HAL_GetTick>
 8001a60:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	88fa      	ldrh	r2, [r7, #6]
 8001a66:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	88fa      	ldrh	r2, [r7, #6]
 8001a6c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a76:	d108      	bne.n	8001a8a <HAL_UART_Transmit+0x82>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d104      	bne.n	8001a8a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	61bb      	str	r3, [r7, #24]
 8001a88:	e003      	b.n	8001a92 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001a9a:	e02a      	b.n	8001af2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2180      	movs	r1, #128	; 0x80
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f000 fb28 	bl	80020fc <UART_WaitOnFlagUntilTimeout>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e036      	b.n	8001b24 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10b      	bne.n	8001ad4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001aca:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	3302      	adds	r3, #2
 8001ad0:	61bb      	str	r3, [r7, #24]
 8001ad2:	e007      	b.n	8001ae4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	781a      	ldrb	r2, [r3, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	3b01      	subs	r3, #1
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1cf      	bne.n	8001a9c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	2200      	movs	r2, #0
 8001b04:	2140      	movs	r1, #64	; 0x40
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 faf8 	bl	80020fc <UART_WaitOnFlagUntilTimeout>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e006      	b.n	8001b24 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2220      	movs	r2, #32
 8001b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	e000      	b.n	8001b24 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001b22:	2302      	movs	r3, #2
  }
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3720      	adds	r7, #32
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	4613      	mov	r3, r2
 8001b38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b20      	cmp	r3, #32
 8001b44:	d11d      	bne.n	8001b82 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d002      	beq.n	8001b52 <HAL_UART_Receive_IT+0x26>
 8001b4c:	88fb      	ldrh	r3, [r7, #6]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e016      	b.n	8001b84 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <HAL_UART_Receive_IT+0x38>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e00f      	b.n	8001b84 <HAL_UART_Receive_IT+0x58>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	461a      	mov	r2, r3
 8001b76:	68b9      	ldr	r1, [r7, #8]
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f000 fb2d 	bl	80021d8 <UART_Start_Receive_IT>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	e000      	b.n	8001b84 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001b82:	2302      	movs	r3, #2
  }
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b0ba      	sub	sp, #232	; 0xe8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001bca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d10f      	bne.n	8001bf2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bd6:	f003 0320 	and.w	r3, r3, #32
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d009      	beq.n	8001bf2 <HAL_UART_IRQHandler+0x66>
 8001bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001be2:	f003 0320 	and.w	r3, r3, #32
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 fc11 	bl	8002412 <UART_Receive_IT>
      return;
 8001bf0:	e256      	b.n	80020a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001bf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 80de 	beq.w	8001db8 <HAL_UART_IRQHandler+0x22c>
 8001bfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d106      	bne.n	8001c16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c0c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 80d1 	beq.w	8001db8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00b      	beq.n	8001c3a <HAL_UART_IRQHandler+0xae>
 8001c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d005      	beq.n	8001c3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f043 0201 	orr.w	r2, r3, #1
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c3e:	f003 0304 	and.w	r3, r3, #4
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00b      	beq.n	8001c5e <HAL_UART_IRQHandler+0xd2>
 8001c46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d005      	beq.n	8001c5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	f043 0202 	orr.w	r2, r3, #2
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00b      	beq.n	8001c82 <HAL_UART_IRQHandler+0xf6>
 8001c6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d005      	beq.n	8001c82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f043 0204 	orr.w	r2, r3, #4
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d011      	beq.n	8001cb2 <HAL_UART_IRQHandler+0x126>
 8001c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c92:	f003 0320 	and.w	r3, r3, #32
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d105      	bne.n	8001ca6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001c9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d005      	beq.n	8001cb2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f043 0208 	orr.w	r2, r3, #8
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 81ed 	beq.w	8002096 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001cc0:	f003 0320 	and.w	r3, r3, #32
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d008      	beq.n	8001cda <HAL_UART_IRQHandler+0x14e>
 8001cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ccc:	f003 0320 	and.w	r3, r3, #32
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d002      	beq.n	8001cda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 fb9c 	bl	8002412 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce4:	2b40      	cmp	r3, #64	; 0x40
 8001ce6:	bf0c      	ite	eq
 8001ce8:	2301      	moveq	r3, #1
 8001cea:	2300      	movne	r3, #0
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d103      	bne.n	8001d06 <HAL_UART_IRQHandler+0x17a>
 8001cfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d04f      	beq.n	8001da6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 faa4 	bl	8002254 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d16:	2b40      	cmp	r3, #64	; 0x40
 8001d18:	d141      	bne.n	8001d9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	3314      	adds	r3, #20
 8001d20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d28:	e853 3f00 	ldrex	r3, [r3]
 8001d2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001d30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	3314      	adds	r3, #20
 8001d42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001d46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001d4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001d52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001d56:	e841 2300 	strex	r3, r2, [r1]
 8001d5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001d5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1d9      	bne.n	8001d1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d013      	beq.n	8001d96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d72:	4a7d      	ldr	r2, [pc, #500]	; (8001f68 <HAL_UART_IRQHandler+0x3dc>)
 8001d74:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fed9 	bl	8000b32 <HAL_DMA_Abort_IT>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d016      	beq.n	8001db4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d90:	4610      	mov	r0, r2
 8001d92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d94:	e00e      	b.n	8001db4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f99a 	bl	80020d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d9c:	e00a      	b.n	8001db4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f996 	bl	80020d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001da4:	e006      	b.n	8001db4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f992 	bl	80020d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001db2:	e170      	b.n	8002096 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001db4:	bf00      	nop
    return;
 8001db6:	e16e      	b.n	8002096 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	f040 814a 	bne.w	8002056 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dc6:	f003 0310 	and.w	r3, r3, #16
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 8143 	beq.w	8002056 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001dd4:	f003 0310 	and.w	r3, r3, #16
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f000 813c 	beq.w	8002056 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dfe:	2b40      	cmp	r3, #64	; 0x40
 8001e00:	f040 80b4 	bne.w	8001f6c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001e10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 8140 	beq.w	800209a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001e1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001e22:	429a      	cmp	r2, r3
 8001e24:	f080 8139 	bcs.w	800209a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001e2e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e3a:	f000 8088 	beq.w	8001f4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	330c      	adds	r3, #12
 8001e44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e4c:	e853 3f00 	ldrex	r3, [r3]
 8001e50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001e54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	330c      	adds	r3, #12
 8001e66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001e6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001e6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e72:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001e76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001e7a:	e841 2300 	strex	r3, r2, [r1]
 8001e7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001e82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1d9      	bne.n	8001e3e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	3314      	adds	r3, #20
 8001e90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e94:	e853 3f00 	ldrex	r3, [r3]
 8001e98:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001e9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e9c:	f023 0301 	bic.w	r3, r3, #1
 8001ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	3314      	adds	r3, #20
 8001eaa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001eae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001eb2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eb4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001eb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001eba:	e841 2300 	strex	r3, r2, [r1]
 8001ebe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001ec0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1e1      	bne.n	8001e8a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	3314      	adds	r3, #20
 8001ecc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ece:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ed0:	e853 3f00 	ldrex	r3, [r3]
 8001ed4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001ed6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001edc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	3314      	adds	r3, #20
 8001ee6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001eea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001eec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001ef0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001ef2:	e841 2300 	strex	r3, r2, [r1]
 8001ef6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001ef8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1e3      	bne.n	8001ec6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2220      	movs	r2, #32
 8001f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	330c      	adds	r3, #12
 8001f12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f16:	e853 3f00 	ldrex	r3, [r3]
 8001f1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001f1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f1e:	f023 0310 	bic.w	r3, r3, #16
 8001f22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	330c      	adds	r3, #12
 8001f2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001f30:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f32:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f38:	e841 2300 	strex	r3, r2, [r1]
 8001f3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001f3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1e3      	bne.n	8001f0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe fd82 	bl	8000a52 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f8c0 	bl	80020e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001f64:	e099      	b.n	800209a <HAL_UART_IRQHandler+0x50e>
 8001f66:	bf00      	nop
 8001f68:	0800231b 	.word	0x0800231b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 808b 	beq.w	800209e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8001f88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 8086 	beq.w	800209e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	330c      	adds	r3, #12
 8001f98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f9c:	e853 3f00 	ldrex	r3, [r3]
 8001fa0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001fa8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	330c      	adds	r3, #12
 8001fb2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001fb6:	647a      	str	r2, [r7, #68]	; 0x44
 8001fb8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001fbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001fbe:	e841 2300 	strex	r3, r2, [r1]
 8001fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1e3      	bne.n	8001f92 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	3314      	adds	r3, #20
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	e853 3f00 	ldrex	r3, [r3]
 8001fd8:	623b      	str	r3, [r7, #32]
   return(result);
 8001fda:	6a3b      	ldr	r3, [r7, #32]
 8001fdc:	f023 0301 	bic.w	r3, r3, #1
 8001fe0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	3314      	adds	r3, #20
 8001fea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001fee:	633a      	str	r2, [r7, #48]	; 0x30
 8001ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ff2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ff6:	e841 2300 	strex	r3, r2, [r1]
 8001ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1e3      	bne.n	8001fca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2220      	movs	r2, #32
 8002006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	330c      	adds	r3, #12
 8002016:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	e853 3f00 	ldrex	r3, [r3]
 800201e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f023 0310 	bic.w	r3, r3, #16
 8002026:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	330c      	adds	r3, #12
 8002030:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002034:	61fa      	str	r2, [r7, #28]
 8002036:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002038:	69b9      	ldr	r1, [r7, #24]
 800203a:	69fa      	ldr	r2, [r7, #28]
 800203c:	e841 2300 	strex	r3, r2, [r1]
 8002040:	617b      	str	r3, [r7, #20]
   return(result);
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1e3      	bne.n	8002010 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002048:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800204c:	4619      	mov	r1, r3
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f848 	bl	80020e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002054:	e023      	b.n	800209e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800205a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205e:	2b00      	cmp	r3, #0
 8002060:	d009      	beq.n	8002076 <HAL_UART_IRQHandler+0x4ea>
 8002062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f967 	bl	8002342 <UART_Transmit_IT>
    return;
 8002074:	e014      	b.n	80020a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800207a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00e      	beq.n	80020a0 <HAL_UART_IRQHandler+0x514>
 8002082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208a:	2b00      	cmp	r3, #0
 800208c:	d008      	beq.n	80020a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f9a7 	bl	80023e2 <UART_EndTransmit_IT>
    return;
 8002094:	e004      	b.n	80020a0 <HAL_UART_IRQHandler+0x514>
    return;
 8002096:	bf00      	nop
 8002098:	e002      	b.n	80020a0 <HAL_UART_IRQHandler+0x514>
      return;
 800209a:	bf00      	nop
 800209c:	e000      	b.n	80020a0 <HAL_UART_IRQHandler+0x514>
      return;
 800209e:	bf00      	nop
  }
}
 80020a0:	37e8      	adds	r7, #232	; 0xe8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop

080020a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b090      	sub	sp, #64	; 0x40
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	603b      	str	r3, [r7, #0]
 8002108:	4613      	mov	r3, r2
 800210a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800210c:	e050      	b.n	80021b0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800210e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002114:	d04c      	beq.n	80021b0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002118:	2b00      	cmp	r3, #0
 800211a:	d007      	beq.n	800212c <UART_WaitOnFlagUntilTimeout+0x30>
 800211c:	f7fe fb58 	bl	80007d0 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002128:	429a      	cmp	r2, r3
 800212a:	d241      	bcs.n	80021b0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	330c      	adds	r3, #12
 8002132:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002136:	e853 3f00 	ldrex	r3, [r3]
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	330c      	adds	r3, #12
 800214a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800214c:	637a      	str	r2, [r7, #52]	; 0x34
 800214e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002150:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002152:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002154:	e841 2300 	strex	r3, r2, [r1]
 8002158:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800215a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1e5      	bne.n	800212c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	3314      	adds	r3, #20
 8002166:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	e853 3f00 	ldrex	r3, [r3]
 800216e:	613b      	str	r3, [r7, #16]
   return(result);
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	f023 0301 	bic.w	r3, r3, #1
 8002176:	63bb      	str	r3, [r7, #56]	; 0x38
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	3314      	adds	r3, #20
 800217e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002180:	623a      	str	r2, [r7, #32]
 8002182:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002184:	69f9      	ldr	r1, [r7, #28]
 8002186:	6a3a      	ldr	r2, [r7, #32]
 8002188:	e841 2300 	strex	r3, r2, [r1]
 800218c:	61bb      	str	r3, [r7, #24]
   return(result);
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1e5      	bne.n	8002160 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2220      	movs	r2, #32
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2220      	movs	r2, #32
 80021a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e00f      	b.n	80021d0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	4013      	ands	r3, r2
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	429a      	cmp	r2, r3
 80021be:	bf0c      	ite	eq
 80021c0:	2301      	moveq	r3, #1
 80021c2:	2300      	movne	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	461a      	mov	r2, r3
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d09f      	beq.n	800210e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3740      	adds	r7, #64	; 0x40
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	4613      	mov	r3, r2
 80021e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	88fa      	ldrh	r2, [r7, #6]
 80021f0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	88fa      	ldrh	r2, [r7, #6]
 80021f6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2222      	movs	r2, #34	; 0x22
 8002202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d007      	beq.n	8002226 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002224:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	695a      	ldr	r2, [r3, #20]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f042 0201 	orr.w	r2, r2, #1
 8002234:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f042 0220 	orr.w	r2, r2, #32
 8002244:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002254:	b480      	push	{r7}
 8002256:	b095      	sub	sp, #84	; 0x54
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	330c      	adds	r3, #12
 8002262:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002266:	e853 3f00 	ldrex	r3, [r3]
 800226a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800226c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002272:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	330c      	adds	r3, #12
 800227a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800227c:	643a      	str	r2, [r7, #64]	; 0x40
 800227e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002280:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002282:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002284:	e841 2300 	strex	r3, r2, [r1]
 8002288:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800228a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1e5      	bne.n	800225c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	3314      	adds	r3, #20
 8002296:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	e853 3f00 	ldrex	r3, [r3]
 800229e:	61fb      	str	r3, [r7, #28]
   return(result);
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f023 0301 	bic.w	r3, r3, #1
 80022a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	3314      	adds	r3, #20
 80022ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022b8:	e841 2300 	strex	r3, r2, [r1]
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1e5      	bne.n	8002290 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d119      	bne.n	8002300 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	330c      	adds	r3, #12
 80022d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	e853 3f00 	ldrex	r3, [r3]
 80022da:	60bb      	str	r3, [r7, #8]
   return(result);
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f023 0310 	bic.w	r3, r3, #16
 80022e2:	647b      	str	r3, [r7, #68]	; 0x44
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	330c      	adds	r3, #12
 80022ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022ec:	61ba      	str	r2, [r7, #24]
 80022ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022f0:	6979      	ldr	r1, [r7, #20]
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	e841 2300 	strex	r3, r2, [r1]
 80022f8:	613b      	str	r3, [r7, #16]
   return(result);
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1e5      	bne.n	80022cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2220      	movs	r2, #32
 8002304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800230e:	bf00      	nop
 8002310:	3754      	adds	r7, #84	; 0x54
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b084      	sub	sp, #16
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002326:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f7ff fecb 	bl	80020d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800233a:	bf00      	nop
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002342:	b480      	push	{r7}
 8002344:	b085      	sub	sp, #20
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b21      	cmp	r3, #33	; 0x21
 8002354:	d13e      	bne.n	80023d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800235e:	d114      	bne.n	800238a <UART_Transmit_IT+0x48>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d110      	bne.n	800238a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	461a      	mov	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800237c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	1c9a      	adds	r2, r3, #2
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	621a      	str	r2, [r3, #32]
 8002388:	e008      	b.n	800239c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	1c59      	adds	r1, r3, #1
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6211      	str	r1, [r2, #32]
 8002394:	781a      	ldrb	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	3b01      	subs	r3, #1
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	4619      	mov	r1, r3
 80023aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10f      	bne.n	80023d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	e000      	b.n	80023d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80023d4:	2302      	movs	r3, #2
  }
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2220      	movs	r2, #32
 80023fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7ff fe50 	bl	80020a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b08c      	sub	sp, #48	; 0x30
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b22      	cmp	r3, #34	; 0x22
 8002424:	f040 80ab 	bne.w	800257e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002430:	d117      	bne.n	8002462 <UART_Receive_IT+0x50>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d113      	bne.n	8002462 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800243a:	2300      	movs	r3, #0
 800243c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002442:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	b29b      	uxth	r3, r3
 800244c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002450:	b29a      	uxth	r2, r3
 8002452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002454:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245a:	1c9a      	adds	r2, r3, #2
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	629a      	str	r2, [r3, #40]	; 0x28
 8002460:	e026      	b.n	80024b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002466:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002468:	2300      	movs	r3, #0
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002474:	d007      	beq.n	8002486 <UART_Receive_IT+0x74>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10a      	bne.n	8002494 <UART_Receive_IT+0x82>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d106      	bne.n	8002494 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	b2da      	uxtb	r2, r3
 800248e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002490:	701a      	strb	r2, [r3, #0]
 8002492:	e008      	b.n	80024a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	4619      	mov	r1, r3
 80024be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d15a      	bne.n	800257a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0220 	bic.w	r2, r2, #32
 80024d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695a      	ldr	r2, [r3, #20]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0201 	bic.w	r2, r2, #1
 80024f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2220      	movs	r2, #32
 80024f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002500:	2b01      	cmp	r3, #1
 8002502:	d135      	bne.n	8002570 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	330c      	adds	r3, #12
 8002510:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	e853 3f00 	ldrex	r3, [r3]
 8002518:	613b      	str	r3, [r7, #16]
   return(result);
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	f023 0310 	bic.w	r3, r3, #16
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	330c      	adds	r3, #12
 8002528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252a:	623a      	str	r2, [r7, #32]
 800252c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800252e:	69f9      	ldr	r1, [r7, #28]
 8002530:	6a3a      	ldr	r2, [r7, #32]
 8002532:	e841 2300 	strex	r3, r2, [r1]
 8002536:	61bb      	str	r3, [r7, #24]
   return(result);
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1e5      	bne.n	800250a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0310 	and.w	r3, r3, #16
 8002548:	2b10      	cmp	r3, #16
 800254a:	d10a      	bne.n	8002562 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800254c:	2300      	movs	r3, #0
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002566:	4619      	mov	r1, r3
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff fdbb 	bl	80020e4 <HAL_UARTEx_RxEventCallback>
 800256e:	e002      	b.n	8002576 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7ff fda3 	bl	80020bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	e002      	b.n	8002580 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800257a:	2300      	movs	r3, #0
 800257c:	e000      	b.n	8002580 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800257e:	2302      	movs	r3, #2
  }
}
 8002580:	4618      	mov	r0, r3
 8002582:	3730      	adds	r7, #48	; 0x30
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800258c:	b0c0      	sub	sp, #256	; 0x100
 800258e:	af00      	add	r7, sp, #0
 8002590:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80025a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a4:	68d9      	ldr	r1, [r3, #12]
 80025a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	ea40 0301 	orr.w	r3, r0, r1
 80025b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	431a      	orrs	r2, r3
 80025c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	431a      	orrs	r2, r3
 80025c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80025d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80025e0:	f021 010c 	bic.w	r1, r1, #12
 80025e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80025ee:	430b      	orrs	r3, r1
 80025f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80025fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002602:	6999      	ldr	r1, [r3, #24]
 8002604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	ea40 0301 	orr.w	r3, r0, r1
 800260e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	4b8f      	ldr	r3, [pc, #572]	; (8002854 <UART_SetConfig+0x2cc>)
 8002618:	429a      	cmp	r2, r3
 800261a:	d005      	beq.n	8002628 <UART_SetConfig+0xa0>
 800261c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	4b8d      	ldr	r3, [pc, #564]	; (8002858 <UART_SetConfig+0x2d0>)
 8002624:	429a      	cmp	r2, r3
 8002626:	d104      	bne.n	8002632 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002628:	f7ff f904 	bl	8001834 <HAL_RCC_GetPCLK2Freq>
 800262c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002630:	e003      	b.n	800263a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002632:	f7ff f8eb 	bl	800180c <HAL_RCC_GetPCLK1Freq>
 8002636:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800263a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002644:	f040 810c 	bne.w	8002860 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002648:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800264c:	2200      	movs	r2, #0
 800264e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002652:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002656:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800265a:	4622      	mov	r2, r4
 800265c:	462b      	mov	r3, r5
 800265e:	1891      	adds	r1, r2, r2
 8002660:	65b9      	str	r1, [r7, #88]	; 0x58
 8002662:	415b      	adcs	r3, r3
 8002664:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002666:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800266a:	4621      	mov	r1, r4
 800266c:	eb12 0801 	adds.w	r8, r2, r1
 8002670:	4629      	mov	r1, r5
 8002672:	eb43 0901 	adc.w	r9, r3, r1
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002682:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002686:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800268a:	4690      	mov	r8, r2
 800268c:	4699      	mov	r9, r3
 800268e:	4623      	mov	r3, r4
 8002690:	eb18 0303 	adds.w	r3, r8, r3
 8002694:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002698:	462b      	mov	r3, r5
 800269a:	eb49 0303 	adc.w	r3, r9, r3
 800269e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80026a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80026ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80026b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80026b6:	460b      	mov	r3, r1
 80026b8:	18db      	adds	r3, r3, r3
 80026ba:	653b      	str	r3, [r7, #80]	; 0x50
 80026bc:	4613      	mov	r3, r2
 80026be:	eb42 0303 	adc.w	r3, r2, r3
 80026c2:	657b      	str	r3, [r7, #84]	; 0x54
 80026c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80026c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80026cc:	f7fd fd7c 	bl	80001c8 <__aeabi_uldivmod>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4b61      	ldr	r3, [pc, #388]	; (800285c <UART_SetConfig+0x2d4>)
 80026d6:	fba3 2302 	umull	r2, r3, r3, r2
 80026da:	095b      	lsrs	r3, r3, #5
 80026dc:	011c      	lsls	r4, r3, #4
 80026de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026e2:	2200      	movs	r2, #0
 80026e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80026ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80026f0:	4642      	mov	r2, r8
 80026f2:	464b      	mov	r3, r9
 80026f4:	1891      	adds	r1, r2, r2
 80026f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80026f8:	415b      	adcs	r3, r3
 80026fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002700:	4641      	mov	r1, r8
 8002702:	eb12 0a01 	adds.w	sl, r2, r1
 8002706:	4649      	mov	r1, r9
 8002708:	eb43 0b01 	adc.w	fp, r3, r1
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002718:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800271c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002720:	4692      	mov	sl, r2
 8002722:	469b      	mov	fp, r3
 8002724:	4643      	mov	r3, r8
 8002726:	eb1a 0303 	adds.w	r3, sl, r3
 800272a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800272e:	464b      	mov	r3, r9
 8002730:	eb4b 0303 	adc.w	r3, fp, r3
 8002734:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002744:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002748:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800274c:	460b      	mov	r3, r1
 800274e:	18db      	adds	r3, r3, r3
 8002750:	643b      	str	r3, [r7, #64]	; 0x40
 8002752:	4613      	mov	r3, r2
 8002754:	eb42 0303 	adc.w	r3, r2, r3
 8002758:	647b      	str	r3, [r7, #68]	; 0x44
 800275a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800275e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002762:	f7fd fd31 	bl	80001c8 <__aeabi_uldivmod>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	4611      	mov	r1, r2
 800276c:	4b3b      	ldr	r3, [pc, #236]	; (800285c <UART_SetConfig+0x2d4>)
 800276e:	fba3 2301 	umull	r2, r3, r3, r1
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	2264      	movs	r2, #100	; 0x64
 8002776:	fb02 f303 	mul.w	r3, r2, r3
 800277a:	1acb      	subs	r3, r1, r3
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002782:	4b36      	ldr	r3, [pc, #216]	; (800285c <UART_SetConfig+0x2d4>)
 8002784:	fba3 2302 	umull	r2, r3, r3, r2
 8002788:	095b      	lsrs	r3, r3, #5
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002790:	441c      	add	r4, r3
 8002792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002796:	2200      	movs	r2, #0
 8002798:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800279c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80027a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80027a4:	4642      	mov	r2, r8
 80027a6:	464b      	mov	r3, r9
 80027a8:	1891      	adds	r1, r2, r2
 80027aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80027ac:	415b      	adcs	r3, r3
 80027ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80027b4:	4641      	mov	r1, r8
 80027b6:	1851      	adds	r1, r2, r1
 80027b8:	6339      	str	r1, [r7, #48]	; 0x30
 80027ba:	4649      	mov	r1, r9
 80027bc:	414b      	adcs	r3, r1
 80027be:	637b      	str	r3, [r7, #52]	; 0x34
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80027cc:	4659      	mov	r1, fp
 80027ce:	00cb      	lsls	r3, r1, #3
 80027d0:	4651      	mov	r1, sl
 80027d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027d6:	4651      	mov	r1, sl
 80027d8:	00ca      	lsls	r2, r1, #3
 80027da:	4610      	mov	r0, r2
 80027dc:	4619      	mov	r1, r3
 80027de:	4603      	mov	r3, r0
 80027e0:	4642      	mov	r2, r8
 80027e2:	189b      	adds	r3, r3, r2
 80027e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80027e8:	464b      	mov	r3, r9
 80027ea:	460a      	mov	r2, r1
 80027ec:	eb42 0303 	adc.w	r3, r2, r3
 80027f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002800:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002804:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002808:	460b      	mov	r3, r1
 800280a:	18db      	adds	r3, r3, r3
 800280c:	62bb      	str	r3, [r7, #40]	; 0x28
 800280e:	4613      	mov	r3, r2
 8002810:	eb42 0303 	adc.w	r3, r2, r3
 8002814:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002816:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800281a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800281e:	f7fd fcd3 	bl	80001c8 <__aeabi_uldivmod>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4b0d      	ldr	r3, [pc, #52]	; (800285c <UART_SetConfig+0x2d4>)
 8002828:	fba3 1302 	umull	r1, r3, r3, r2
 800282c:	095b      	lsrs	r3, r3, #5
 800282e:	2164      	movs	r1, #100	; 0x64
 8002830:	fb01 f303 	mul.w	r3, r1, r3
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	3332      	adds	r3, #50	; 0x32
 800283a:	4a08      	ldr	r2, [pc, #32]	; (800285c <UART_SetConfig+0x2d4>)
 800283c:	fba2 2303 	umull	r2, r3, r2, r3
 8002840:	095b      	lsrs	r3, r3, #5
 8002842:	f003 0207 	and.w	r2, r3, #7
 8002846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4422      	add	r2, r4
 800284e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002850:	e106      	b.n	8002a60 <UART_SetConfig+0x4d8>
 8002852:	bf00      	nop
 8002854:	40011000 	.word	0x40011000
 8002858:	40011400 	.word	0x40011400
 800285c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002860:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002864:	2200      	movs	r2, #0
 8002866:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800286a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800286e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002872:	4642      	mov	r2, r8
 8002874:	464b      	mov	r3, r9
 8002876:	1891      	adds	r1, r2, r2
 8002878:	6239      	str	r1, [r7, #32]
 800287a:	415b      	adcs	r3, r3
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
 800287e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002882:	4641      	mov	r1, r8
 8002884:	1854      	adds	r4, r2, r1
 8002886:	4649      	mov	r1, r9
 8002888:	eb43 0501 	adc.w	r5, r3, r1
 800288c:	f04f 0200 	mov.w	r2, #0
 8002890:	f04f 0300 	mov.w	r3, #0
 8002894:	00eb      	lsls	r3, r5, #3
 8002896:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800289a:	00e2      	lsls	r2, r4, #3
 800289c:	4614      	mov	r4, r2
 800289e:	461d      	mov	r5, r3
 80028a0:	4643      	mov	r3, r8
 80028a2:	18e3      	adds	r3, r4, r3
 80028a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80028a8:	464b      	mov	r3, r9
 80028aa:	eb45 0303 	adc.w	r3, r5, r3
 80028ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80028b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80028be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	f04f 0300 	mov.w	r3, #0
 80028ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80028ce:	4629      	mov	r1, r5
 80028d0:	008b      	lsls	r3, r1, #2
 80028d2:	4621      	mov	r1, r4
 80028d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028d8:	4621      	mov	r1, r4
 80028da:	008a      	lsls	r2, r1, #2
 80028dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80028e0:	f7fd fc72 	bl	80001c8 <__aeabi_uldivmod>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4b60      	ldr	r3, [pc, #384]	; (8002a6c <UART_SetConfig+0x4e4>)
 80028ea:	fba3 2302 	umull	r2, r3, r3, r2
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	011c      	lsls	r4, r3, #4
 80028f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028f6:	2200      	movs	r2, #0
 80028f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002900:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002904:	4642      	mov	r2, r8
 8002906:	464b      	mov	r3, r9
 8002908:	1891      	adds	r1, r2, r2
 800290a:	61b9      	str	r1, [r7, #24]
 800290c:	415b      	adcs	r3, r3
 800290e:	61fb      	str	r3, [r7, #28]
 8002910:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002914:	4641      	mov	r1, r8
 8002916:	1851      	adds	r1, r2, r1
 8002918:	6139      	str	r1, [r7, #16]
 800291a:	4649      	mov	r1, r9
 800291c:	414b      	adcs	r3, r1
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800292c:	4659      	mov	r1, fp
 800292e:	00cb      	lsls	r3, r1, #3
 8002930:	4651      	mov	r1, sl
 8002932:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002936:	4651      	mov	r1, sl
 8002938:	00ca      	lsls	r2, r1, #3
 800293a:	4610      	mov	r0, r2
 800293c:	4619      	mov	r1, r3
 800293e:	4603      	mov	r3, r0
 8002940:	4642      	mov	r2, r8
 8002942:	189b      	adds	r3, r3, r2
 8002944:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002948:	464b      	mov	r3, r9
 800294a:	460a      	mov	r2, r1
 800294c:	eb42 0303 	adc.w	r3, r2, r3
 8002950:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	67bb      	str	r3, [r7, #120]	; 0x78
 800295e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	f04f 0300 	mov.w	r3, #0
 8002968:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800296c:	4649      	mov	r1, r9
 800296e:	008b      	lsls	r3, r1, #2
 8002970:	4641      	mov	r1, r8
 8002972:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002976:	4641      	mov	r1, r8
 8002978:	008a      	lsls	r2, r1, #2
 800297a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800297e:	f7fd fc23 	bl	80001c8 <__aeabi_uldivmod>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	4611      	mov	r1, r2
 8002988:	4b38      	ldr	r3, [pc, #224]	; (8002a6c <UART_SetConfig+0x4e4>)
 800298a:	fba3 2301 	umull	r2, r3, r3, r1
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	2264      	movs	r2, #100	; 0x64
 8002992:	fb02 f303 	mul.w	r3, r2, r3
 8002996:	1acb      	subs	r3, r1, r3
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	3332      	adds	r3, #50	; 0x32
 800299c:	4a33      	ldr	r2, [pc, #204]	; (8002a6c <UART_SetConfig+0x4e4>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	095b      	lsrs	r3, r3, #5
 80029a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029a8:	441c      	add	r4, r3
 80029aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029ae:	2200      	movs	r2, #0
 80029b0:	673b      	str	r3, [r7, #112]	; 0x70
 80029b2:	677a      	str	r2, [r7, #116]	; 0x74
 80029b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80029b8:	4642      	mov	r2, r8
 80029ba:	464b      	mov	r3, r9
 80029bc:	1891      	adds	r1, r2, r2
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	415b      	adcs	r3, r3
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029c8:	4641      	mov	r1, r8
 80029ca:	1851      	adds	r1, r2, r1
 80029cc:	6039      	str	r1, [r7, #0]
 80029ce:	4649      	mov	r1, r9
 80029d0:	414b      	adcs	r3, r1
 80029d2:	607b      	str	r3, [r7, #4]
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80029e0:	4659      	mov	r1, fp
 80029e2:	00cb      	lsls	r3, r1, #3
 80029e4:	4651      	mov	r1, sl
 80029e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029ea:	4651      	mov	r1, sl
 80029ec:	00ca      	lsls	r2, r1, #3
 80029ee:	4610      	mov	r0, r2
 80029f0:	4619      	mov	r1, r3
 80029f2:	4603      	mov	r3, r0
 80029f4:	4642      	mov	r2, r8
 80029f6:	189b      	adds	r3, r3, r2
 80029f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80029fa:	464b      	mov	r3, r9
 80029fc:	460a      	mov	r2, r1
 80029fe:	eb42 0303 	adc.w	r3, r2, r3
 8002a02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	663b      	str	r3, [r7, #96]	; 0x60
 8002a0e:	667a      	str	r2, [r7, #100]	; 0x64
 8002a10:	f04f 0200 	mov.w	r2, #0
 8002a14:	f04f 0300 	mov.w	r3, #0
 8002a18:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002a1c:	4649      	mov	r1, r9
 8002a1e:	008b      	lsls	r3, r1, #2
 8002a20:	4641      	mov	r1, r8
 8002a22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a26:	4641      	mov	r1, r8
 8002a28:	008a      	lsls	r2, r1, #2
 8002a2a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002a2e:	f7fd fbcb 	bl	80001c8 <__aeabi_uldivmod>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <UART_SetConfig+0x4e4>)
 8002a38:	fba3 1302 	umull	r1, r3, r3, r2
 8002a3c:	095b      	lsrs	r3, r3, #5
 8002a3e:	2164      	movs	r1, #100	; 0x64
 8002a40:	fb01 f303 	mul.w	r3, r1, r3
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	3332      	adds	r3, #50	; 0x32
 8002a4a:	4a08      	ldr	r2, [pc, #32]	; (8002a6c <UART_SetConfig+0x4e4>)
 8002a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a50:	095b      	lsrs	r3, r3, #5
 8002a52:	f003 020f 	and.w	r2, r3, #15
 8002a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4422      	add	r2, r4
 8002a5e:	609a      	str	r2, [r3, #8]
}
 8002a60:	bf00      	nop
 8002a62:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002a66:	46bd      	mov	sp, r7
 8002a68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a6c:	51eb851f 	.word	0x51eb851f

08002a70 <lkv_lcd_init>:
static void lkv_lcd_enable(void);
static void lkv_ldc_delay(uint32_t time);
void lkv_lcd_retur_nhome(void);


void lkv_lcd_init(void){
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af00      	add	r7, sp, #0

	/* enable GPIO LCD PORTs clock */

	 __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	4b47      	ldr	r3, [pc, #284]	; (8002b98 <lkv_lcd_init+0x128>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	4a46      	ldr	r2, [pc, #280]	; (8002b98 <lkv_lcd_init+0x128>)
 8002a80:	f043 0304 	orr.w	r3, r3, #4
 8002a84:	6313      	str	r3, [r2, #48]	; 0x30
 8002a86:	4b44      	ldr	r3, [pc, #272]	; (8002b98 <lkv_lcd_init+0x128>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	f003 0304 	and.w	r3, r3, #4
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	68bb      	ldr	r3, [r7, #8]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	607b      	str	r3, [r7, #4]
 8002a96:	4b40      	ldr	r3, [pc, #256]	; (8002b98 <lkv_lcd_init+0x128>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	4a3f      	ldr	r2, [pc, #252]	; (8002b98 <lkv_lcd_init+0x128>)
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa2:	4b3d      	ldr	r3, [pc, #244]	; (8002b98 <lkv_lcd_init+0x128>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	607b      	str	r3, [r7, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]

	/* enable GPIO LCD PINs */

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aae:	f107 030c 	add.w	r3, r7, #12
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	605a      	str	r2, [r3, #4]
 8002ab8:	609a      	str	r2, [r3, #8]
 8002aba:	60da      	str	r2, [r3, #12]
 8002abc:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	61bb      	str	r3, [r7, #24]

	  GPIO_InitStruct.Pin = LCD_PIN_RS;
 8002aca:	2301      	movs	r3, #1
 8002acc:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(LCD_PIN_RS_PORT, &GPIO_InitStruct);
 8002ace:	f107 030c 	add.w	r3, r7, #12
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4831      	ldr	r0, [pc, #196]	; (8002b9c <lkv_lcd_init+0x12c>)
 8002ad6:	f7fe f84f 	bl	8000b78 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = LCD_PIN_RW;
 8002ada:	2304      	movs	r3, #4
 8002adc:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(LCD_PIN_RW_PORT, &GPIO_InitStruct);
 8002ade:	f107 030c 	add.w	r3, r7, #12
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	482d      	ldr	r0, [pc, #180]	; (8002b9c <lkv_lcd_init+0x12c>)
 8002ae6:	f7fe f847 	bl	8000b78 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = LCD_PIN_EN;
 8002aea:	2301      	movs	r3, #1
 8002aec:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(LCD_PIN_EN_PORT, &GPIO_InitStruct);
 8002aee:	f107 030c 	add.w	r3, r7, #12
 8002af2:	4619      	mov	r1, r3
 8002af4:	482a      	ldr	r0, [pc, #168]	; (8002ba0 <lkv_lcd_init+0x130>)
 8002af6:	f7fe f83f 	bl	8000b78 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = LCD_PIN_D4;
 8002afa:	2302      	movs	r3, #2
 8002afc:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(LCD_PIN_D4_PORT, &GPIO_InitStruct);
 8002afe:	f107 030c 	add.w	r3, r7, #12
 8002b02:	4619      	mov	r1, r3
 8002b04:	4825      	ldr	r0, [pc, #148]	; (8002b9c <lkv_lcd_init+0x12c>)
 8002b06:	f7fe f837 	bl	8000b78 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = LCD_PIN_D5;
 8002b0a:	2308      	movs	r3, #8
 8002b0c:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(LCD_PIN_D5_PORT, &GPIO_InitStruct);
 8002b0e:	f107 030c 	add.w	r3, r7, #12
 8002b12:	4619      	mov	r1, r3
 8002b14:	4821      	ldr	r0, [pc, #132]	; (8002b9c <lkv_lcd_init+0x12c>)
 8002b16:	f7fe f82f 	bl	8000b78 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = LCD_PIN_D6;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(LCD_PIN_D6_PORT, &GPIO_InitStruct);
 8002b1e:	f107 030c 	add.w	r3, r7, #12
 8002b22:	4619      	mov	r1, r3
 8002b24:	481e      	ldr	r0, [pc, #120]	; (8002ba0 <lkv_lcd_init+0x130>)
 8002b26:	f7fe f827 	bl	8000b78 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = LCD_PIN_D7;
 8002b2a:	2308      	movs	r3, #8
 8002b2c:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(LCD_PIN_D7_PORT, &GPIO_InitStruct);
 8002b2e:	f107 030c 	add.w	r3, r7, #12
 8002b32:	4619      	mov	r1, r3
 8002b34:	481a      	ldr	r0, [pc, #104]	; (8002ba0 <lkv_lcd_init+0x130>)
 8002b36:	f7fe f81f 	bl	8000b78 <HAL_GPIO_Init>



	/* LCD Init (datasheet) */
	/*step 1 wait more than 40 ms */
	HAL_Delay(60);
 8002b3a:	203c      	movs	r0, #60	; 0x3c
 8002b3c:	f7fd fe54 	bl	80007e8 <HAL_Delay>

	/*step 2 write 0 0 0 0 1 1 to RS RW D7 D6 D5 D4 */
	HAL_GPIO_WritePin(LCD_PIN_RS_PORT, LCD_PIN_RS, 0);
 8002b40:	2200      	movs	r2, #0
 8002b42:	2101      	movs	r1, #1
 8002b44:	4815      	ldr	r0, [pc, #84]	; (8002b9c <lkv_lcd_init+0x12c>)
 8002b46:	f7fe f9b3 	bl	8000eb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PIN_RW_PORT, LCD_PIN_RW, 0);
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2104      	movs	r1, #4
 8002b4e:	4813      	ldr	r0, [pc, #76]	; (8002b9c <lkv_lcd_init+0x12c>)
 8002b50:	f7fe f9ae 	bl	8000eb0 <HAL_GPIO_WritePin>
	lkv_lcd_write_data(0x3);
 8002b54:	2003      	movs	r0, #3
 8002b56:	f000 f83b 	bl	8002bd0 <lkv_lcd_write_data>

	/*step 3 wait more than 4.1 ms */
	HAL_Delay(6);
 8002b5a:	2006      	movs	r0, #6
 8002b5c:	f7fd fe44 	bl	80007e8 <HAL_Delay>

	/*step 5 write 0 0 0 0 1 1 to RS RW D7 D6 D5 D4 again */
	lkv_lcd_write_data(0x3);
 8002b60:	2003      	movs	r0, #3
 8002b62:	f000 f835 	bl	8002bd0 <lkv_lcd_write_data>

	/*step 6 wait more than 100 us */
	lkv_ldc_delay(150);
 8002b66:	2096      	movs	r0, #150	; 0x96
 8002b68:	f000 f898 	bl	8002c9c <lkv_ldc_delay>

	/*step 7 write 0 0 0 0 1 1 to RS RW D7 D6 D5 D4 again */
	lkv_lcd_write_data(0x3);
 8002b6c:	2003      	movs	r0, #3
 8002b6e:	f000 f82f 	bl	8002bd0 <lkv_lcd_write_data>

	/*step 8 write 0 0 0 0 1 0 to RS RW D7 D6 D5 D4  */
	lkv_lcd_write_data(0x2);
 8002b72:	2002      	movs	r0, #2
 8002b74:	f000 f82c 	bl	8002bd0 <lkv_lcd_write_data>

	/*step 9 Function set -> Display off -> Display clear (wait 2ms) -> Entry mode set  */
	lkv_lcd_send_cmd(LCD_CMD_FUNCTION_SET);
 8002b78:	2028      	movs	r0, #40	; 0x28
 8002b7a:	f000 f863 	bl	8002c44 <lkv_lcd_send_cmd>
	lkv_lcd_send_cmd(LCD_CMD_DISPLY_ONOFF_CONTROL);
 8002b7e:	200e      	movs	r0, #14
 8002b80:	f000 f860 	bl	8002c44 <lkv_lcd_send_cmd>
	lkv_lcd_display_clear();
 8002b84:	f000 f880 	bl	8002c88 <lkv_lcd_display_clear>
	lkv_lcd_send_cmd(LCD_CMD_ENTRY_MODE_SET);
 8002b88:	2006      	movs	r0, #6
 8002b8a:	f000 f85b 	bl	8002c44 <lkv_lcd_send_cmd>
}
 8002b8e:	bf00      	nop
 8002b90:	3720      	adds	r7, #32
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	40020800 	.word	0x40020800
 8002ba0:	40020000 	.word	0x40020000

08002ba4 <lkv_lcd_enable>:
}




void lkv_lcd_enable(void){
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_PIN_EN_PORT, LCD_PIN_EN, 1);
 8002ba8:	2201      	movs	r2, #1
 8002baa:	2101      	movs	r1, #1
 8002bac:	4807      	ldr	r0, [pc, #28]	; (8002bcc <lkv_lcd_enable+0x28>)
 8002bae:	f7fe f97f 	bl	8000eb0 <HAL_GPIO_WritePin>
	lkv_ldc_delay(10); /* thoi gian de ghi cau lenh */
 8002bb2:	200a      	movs	r0, #10
 8002bb4:	f000 f872 	bl	8002c9c <lkv_ldc_delay>
	HAL_GPIO_WritePin(LCD_PIN_EN_PORT, LCD_PIN_EN, 0);
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2101      	movs	r1, #1
 8002bbc:	4803      	ldr	r0, [pc, #12]	; (8002bcc <lkv_lcd_enable+0x28>)
 8002bbe:	f7fe f977 	bl	8000eb0 <HAL_GPIO_WritePin>
	lkv_ldc_delay(100); /* thoi gian de ghi cau lenh + 37 us thuc thi lenh*/
 8002bc2:	2064      	movs	r0, #100	; 0x64
 8002bc4:	f000 f86a 	bl	8002c9c <lkv_ldc_delay>
}
 8002bc8:	bf00      	nop
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40020000 	.word	0x40020000

08002bd0 <lkv_lcd_write_data>:


void lkv_lcd_write_data(uint8_t data){
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_PIN_D4_PORT, LCD_PIN_D4, 1 & (data >> 0));
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	2102      	movs	r1, #2
 8002be6:	4815      	ldr	r0, [pc, #84]	; (8002c3c <lkv_lcd_write_data+0x6c>)
 8002be8:	f7fe f962 	bl	8000eb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PIN_D5_PORT, LCD_PIN_D5, 1 & (data >> 1));
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	085b      	lsrs	r3, r3, #1
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	2108      	movs	r1, #8
 8002bfc:	480f      	ldr	r0, [pc, #60]	; (8002c3c <lkv_lcd_write_data+0x6c>)
 8002bfe:	f7fe f957 	bl	8000eb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PIN_D6_PORT, LCD_PIN_D6, 1 & (data >> 2));
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	089b      	lsrs	r3, r3, #2
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	2102      	movs	r1, #2
 8002c12:	480b      	ldr	r0, [pc, #44]	; (8002c40 <lkv_lcd_write_data+0x70>)
 8002c14:	f7fe f94c 	bl	8000eb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PIN_D7_PORT, LCD_PIN_D7, 1 & (data >> 3));
 8002c18:	79fb      	ldrb	r3, [r7, #7]
 8002c1a:	08db      	lsrs	r3, r3, #3
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	461a      	mov	r2, r3
 8002c26:	2108      	movs	r1, #8
 8002c28:	4805      	ldr	r0, [pc, #20]	; (8002c40 <lkv_lcd_write_data+0x70>)
 8002c2a:	f7fe f941 	bl	8000eb0 <HAL_GPIO_WritePin>
    lkv_lcd_enable();
 8002c2e:	f7ff ffb9 	bl	8002ba4 <lkv_lcd_enable>
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40020800 	.word	0x40020800
 8002c40:	40020000 	.word	0x40020000

08002c44 <lkv_lcd_send_cmd>:



void lkv_lcd_send_cmd(uint8_t cmd){
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	71fb      	strb	r3, [r7, #7]
	/* RS = 0 to chose command register */
	HAL_GPIO_WritePin(LCD_PIN_RS_PORT, LCD_PIN_RS, 0);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2101      	movs	r1, #1
 8002c52:	480c      	ldr	r0, [pc, #48]	; (8002c84 <lkv_lcd_send_cmd+0x40>)
 8002c54:	f7fe f92c 	bl	8000eb0 <HAL_GPIO_WritePin>
	/* RW = 0 to chose Write mode */
	HAL_GPIO_WritePin(LCD_PIN_RW_PORT, LCD_PIN_RW, 0);
 8002c58:	2200      	movs	r2, #0
 8002c5a:	2104      	movs	r1, #4
 8002c5c:	4809      	ldr	r0, [pc, #36]	; (8002c84 <lkv_lcd_send_cmd+0x40>)
 8002c5e:	f7fe f927 	bl	8000eb0 <HAL_GPIO_WritePin>

	/* Send 4 high bits first */
	lkv_lcd_write_data(cmd >> 4);
 8002c62:	79fb      	ldrb	r3, [r7, #7]
 8002c64:	091b      	lsrs	r3, r3, #4
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff ffb1 	bl	8002bd0 <lkv_lcd_write_data>

	/* Send 4 high bits first */
	lkv_lcd_write_data(cmd & 0x0F);
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	f003 030f 	and.w	r3, r3, #15
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff ffaa 	bl	8002bd0 <lkv_lcd_write_data>
}
 8002c7c:	bf00      	nop
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40020800 	.word	0x40020800

08002c88 <lkv_lcd_display_clear>:
	}
	while( *msg != '\0' );
}


void lkv_lcd_display_clear(void){
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
	lkv_lcd_send_cmd(LCD_CMD_DISPLAY_CLEAR);
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	f7ff ffd9 	bl	8002c44 <lkv_lcd_send_cmd>
	HAL_Delay(2);
 8002c92:	2002      	movs	r0, #2
 8002c94:	f7fd fda8 	bl	80007e8 <HAL_Delay>
}
 8002c98:	bf00      	nop
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <lkv_ldc_delay>:

		return FloatToStringXXXXX(value);
	}
}

void lkv_ldc_delay(uint32_t time){
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < time*10 ; i++);
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	e002      	b.n	8002cb0 <lkv_ldc_delay+0x14>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	3301      	adds	r3, #1
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	461a      	mov	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d8f3      	bhi.n	8002caa <lkv_ldc_delay+0xe>
}
 8002cc2:	bf00      	nop
 8002cc4:	bf00      	nop
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <board_init>:
uint16_t volatile process_index = 0;
uint8_t buff_tx[32] = {0};



void board_init(void){
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
	  HAL_Init();
 8002cd4:	f7fd fd16 	bl	8000704 <HAL_Init>
	  SystemClock_Config();
 8002cd8:	f000 f808 	bl	8002cec <SystemClock_Config>
	  MX_GPIO_Init();
 8002cdc:	f000 f8d6 	bl	8002e8c <MX_GPIO_Init>
	  MX_USART3_UART_Init();
 8002ce0:	f000 f8a4 	bl	8002e2c <MX_USART3_UART_Init>
	  MX_SPI1_Init();
 8002ce4:	f000 f86a 	bl	8002dbc <MX_SPI1_Init>
}
 8002ce8:	bf00      	nop
 8002cea:	bd80      	pop	{r7, pc}

08002cec <SystemClock_Config>:


void SystemClock_Config(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b094      	sub	sp, #80	; 0x50
 8002cf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cf2:	f107 0320 	add.w	r3, r7, #32
 8002cf6:	2230      	movs	r2, #48	; 0x30
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f003 f940 	bl	8005f80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d00:	f107 030c 	add.w	r3, r7, #12
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	60da      	str	r2, [r3, #12]
 8002d0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d10:	2300      	movs	r3, #0
 8002d12:	60bb      	str	r3, [r7, #8]
 8002d14:	4b27      	ldr	r3, [pc, #156]	; (8002db4 <SystemClock_Config+0xc8>)
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	4a26      	ldr	r2, [pc, #152]	; (8002db4 <SystemClock_Config+0xc8>)
 8002d1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d1e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d20:	4b24      	ldr	r3, [pc, #144]	; (8002db4 <SystemClock_Config+0xc8>)
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	607b      	str	r3, [r7, #4]
 8002d30:	4b21      	ldr	r3, [pc, #132]	; (8002db8 <SystemClock_Config+0xcc>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a20      	ldr	r2, [pc, #128]	; (8002db8 <SystemClock_Config+0xcc>)
 8002d36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d3a:	6013      	str	r3, [r2, #0]
 8002d3c:	4b1e      	ldr	r3, [pc, #120]	; (8002db8 <SystemClock_Config+0xcc>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d44:	607b      	str	r3, [r7, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d50:	2310      	movs	r3, #16
 8002d52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d54:	2302      	movs	r3, #2
 8002d56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002d5c:	2308      	movs	r3, #8
 8002d5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002d60:	2348      	movs	r3, #72	; 0x48
 8002d62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d64:	2302      	movs	r3, #2
 8002d66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002d68:	2304      	movs	r3, #4
 8002d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d6c:	f107 0320 	add.w	r3, r7, #32
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fe f8db 	bl	8000f2c <HAL_RCC_OscConfig>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002d7c:	f000 f982 	bl	8003084 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d80:	230f      	movs	r3, #15
 8002d82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d84:	2302      	movs	r3, #2
 8002d86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d96:	f107 030c 	add.w	r3, r7, #12
 8002d9a:	2102      	movs	r1, #2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fe fb3d 	bl	800141c <HAL_RCC_ClockConfig>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002da8:	f000 f96c 	bl	8003084 <Error_Handler>
  }
}
 8002dac:	bf00      	nop
 8002dae:	3750      	adds	r7, #80	; 0x50
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40023800 	.word	0x40023800
 8002db8:	40007000 	.word	0x40007000

08002dbc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_SPI1_Init(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002dc0:	4b18      	ldr	r3, [pc, #96]	; (8002e24 <MX_SPI1_Init+0x68>)
 8002dc2:	4a19      	ldr	r2, [pc, #100]	; (8002e28 <MX_SPI1_Init+0x6c>)
 8002dc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002dc6:	4b17      	ldr	r3, [pc, #92]	; (8002e24 <MX_SPI1_Init+0x68>)
 8002dc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002dcc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8002dce:	4b15      	ldr	r3, [pc, #84]	; (8002e24 <MX_SPI1_Init+0x68>)
 8002dd0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002dd4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002dd6:	4b13      	ldr	r3, [pc, #76]	; (8002e24 <MX_SPI1_Init+0x68>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ddc:	4b11      	ldr	r3, [pc, #68]	; (8002e24 <MX_SPI1_Init+0x68>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002de2:	4b10      	ldr	r3, [pc, #64]	; (8002e24 <MX_SPI1_Init+0x68>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002de8:	4b0e      	ldr	r3, [pc, #56]	; (8002e24 <MX_SPI1_Init+0x68>)
 8002dea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002df0:	4b0c      	ldr	r3, [pc, #48]	; (8002e24 <MX_SPI1_Init+0x68>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002df6:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <MX_SPI1_Init+0x68>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002dfc:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <MX_SPI1_Init+0x68>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e02:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <MX_SPI1_Init+0x68>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002e08:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <MX_SPI1_Init+0x68>)
 8002e0a:	220a      	movs	r2, #10
 8002e0c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e0e:	4805      	ldr	r0, [pc, #20]	; (8002e24 <MX_SPI1_Init+0x68>)
 8002e10:	f7fe fd24 	bl	800185c <HAL_SPI_Init>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8002e1a:	f000 f933 	bl	8003084 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20000060 	.word	0x20000060
 8002e28:	40013000 	.word	0x40013000

08002e2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
 void MX_USART3_UART_Init(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e30:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <MX_USART3_UART_Init+0x54>)
 8002e32:	4a14      	ldr	r2, [pc, #80]	; (8002e84 <MX_USART3_UART_Init+0x58>)
 8002e34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8002e36:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <MX_USART3_UART_Init+0x54>)
 8002e38:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002e3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e3e:	4b10      	ldr	r3, [pc, #64]	; (8002e80 <MX_USART3_UART_Init+0x54>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e44:	4b0e      	ldr	r3, [pc, #56]	; (8002e80 <MX_USART3_UART_Init+0x54>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e4a:	4b0d      	ldr	r3, [pc, #52]	; (8002e80 <MX_USART3_UART_Init+0x54>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e50:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <MX_USART3_UART_Init+0x54>)
 8002e52:	220c      	movs	r2, #12
 8002e54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e56:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <MX_USART3_UART_Init+0x54>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e5c:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <MX_USART3_UART_Init+0x54>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e62:	4807      	ldr	r0, [pc, #28]	; (8002e80 <MX_USART3_UART_Init+0x54>)
 8002e64:	f7fe fd83 	bl	800196e <HAL_UART_Init>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002e6e:	f000 f909 	bl	8003084 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

	HAL_UART_Receive_IT(&huart3, &buff_rx, 1);
 8002e72:	2201      	movs	r2, #1
 8002e74:	4904      	ldr	r1, [pc, #16]	; (8002e88 <MX_USART3_UART_Init+0x5c>)
 8002e76:	4802      	ldr	r0, [pc, #8]	; (8002e80 <MX_USART3_UART_Init+0x54>)
 8002e78:	f7fe fe58 	bl	8001b2c <HAL_UART_Receive_IT>

  /* USER CODE END USART3_Init 2 */

}
 8002e7c:	bf00      	nop
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	200000b8 	.word	0x200000b8
 8002e84:	40004800 	.word	0x40004800
 8002e88:	200000fc 	.word	0x200000fc

08002e8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
 void MX_GPIO_Init(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08c      	sub	sp, #48	; 0x30
 8002e90:	af00      	add	r7, sp, #0


  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e92:	f107 031c 	add.w	r3, r7, #28
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	605a      	str	r2, [r3, #4]
 8002e9c:	609a      	str	r2, [r3, #8]
 8002e9e:	60da      	str	r2, [r3, #12]
 8002ea0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ea8:	4870      	ldr	r0, [pc, #448]	; (800306c <MX_GPIO_Init+0x1e0>)
 8002eaa:	f7fe f801 	bl	8000eb0 <HAL_GPIO_WritePin>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61bb      	str	r3, [r7, #24]
 8002eb2:	4b6f      	ldr	r3, [pc, #444]	; (8003070 <MX_GPIO_Init+0x1e4>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	4a6e      	ldr	r2, [pc, #440]	; (8003070 <MX_GPIO_Init+0x1e4>)
 8002eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ebe:	4b6c      	ldr	r3, [pc, #432]	; (8003070 <MX_GPIO_Init+0x1e4>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec6:	61bb      	str	r3, [r7, #24]
 8002ec8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	617b      	str	r3, [r7, #20]
 8002ece:	4b68      	ldr	r3, [pc, #416]	; (8003070 <MX_GPIO_Init+0x1e4>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	4a67      	ldr	r2, [pc, #412]	; (8003070 <MX_GPIO_Init+0x1e4>)
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eda:	4b65      	ldr	r3, [pc, #404]	; (8003070 <MX_GPIO_Init+0x1e4>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	617b      	str	r3, [r7, #20]
 8002ee4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	613b      	str	r3, [r7, #16]
 8002eea:	4b61      	ldr	r3, [pc, #388]	; (8003070 <MX_GPIO_Init+0x1e4>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	4a60      	ldr	r2, [pc, #384]	; (8003070 <MX_GPIO_Init+0x1e4>)
 8002ef0:	f043 0302 	orr.w	r3, r3, #2
 8002ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef6:	4b5e      	ldr	r3, [pc, #376]	; (8003070 <MX_GPIO_Init+0x1e4>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	4b5a      	ldr	r3, [pc, #360]	; (8003070 <MX_GPIO_Init+0x1e4>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	4a59      	ldr	r2, [pc, #356]	; (8003070 <MX_GPIO_Init+0x1e4>)
 8002f0c:	f043 0310 	orr.w	r3, r3, #16
 8002f10:	6313      	str	r3, [r2, #48]	; 0x30
 8002f12:	4b57      	ldr	r3, [pc, #348]	; (8003070 <MX_GPIO_Init+0x1e4>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	4b53      	ldr	r3, [pc, #332]	; (8003070 <MX_GPIO_Init+0x1e4>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	4a52      	ldr	r2, [pc, #328]	; (8003070 <MX_GPIO_Init+0x1e4>)
 8002f28:	f043 0304 	orr.w	r3, r3, #4
 8002f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2e:	4b50      	ldr	r3, [pc, #320]	; (8003070 <MX_GPIO_Init+0x1e4>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	60bb      	str	r3, [r7, #8]
 8002f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	607b      	str	r3, [r7, #4]
 8002f3e:	4b4c      	ldr	r3, [pc, #304]	; (8003070 <MX_GPIO_Init+0x1e4>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	4a4b      	ldr	r2, [pc, #300]	; (8003070 <MX_GPIO_Init+0x1e4>)
 8002f44:	f043 0308 	orr.w	r3, r3, #8
 8002f48:	6313      	str	r3, [r2, #48]	; 0x30
 8002f4a:	4b49      	ldr	r3, [pc, #292]	; (8003070 <MX_GPIO_Init+0x1e4>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	607b      	str	r3, [r7, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8002f56:	2200      	movs	r2, #0
 8002f58:	f240 51fe 	movw	r1, #1534	; 0x5fe
 8002f5c:	4845      	ldr	r0, [pc, #276]	; (8003074 <MX_GPIO_Init+0x1e8>)
 8002f5e:	f7fd ffa7 	bl	8000eb0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8002f62:	2200      	movs	r2, #0
 8002f64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f68:	4840      	ldr	r0, [pc, #256]	; (800306c <MX_GPIO_Init+0x1e0>)
 8002f6a:	f7fd ffa1 	bl	8000eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002f74:	4840      	ldr	r0, [pc, #256]	; (8003078 <MX_GPIO_Init+0x1ec>)
 8002f76:	f7fd ff9b 	bl	8000eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	21d0      	movs	r1, #208	; 0xd0
 8002f7e:	483f      	ldr	r0, [pc, #252]	; (800307c <MX_GPIO_Init+0x1f0>)
 8002f80:	f7fd ff96 	bl	8000eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 PA8
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8002f84:	f240 53fe 	movw	r3, #1534	; 0x5fe
 8002f88:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f92:	2300      	movs	r3, #0
 8002f94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f96:	f107 031c 	add.w	r3, r7, #28
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4835      	ldr	r0, [pc, #212]	; (8003074 <MX_GPIO_Init+0x1e8>)
 8002f9e:	f7fd fdeb 	bl	8000b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fa6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002faa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fac:	2302      	movs	r3, #2
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fb0:	f107 031c 	add.w	r3, r7, #28
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4831      	ldr	r0, [pc, #196]	; (800307c <MX_GPIO_Init+0x1f0>)
 8002fb8:	f7fd fdde 	bl	8000b78 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fc2:	482a      	ldr	r0, [pc, #168]	; (800306c <MX_GPIO_Init+0x1e0>)
 8002fc4:	f7fd ff74 	bl	8000eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002fc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fda:	f107 031c 	add.w	r3, r7, #28
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4822      	ldr	r0, [pc, #136]	; (800306c <MX_GPIO_Init+0x1e0>)
 8002fe2:	f7fd fdc9 	bl	8000b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8002fe6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fec:	2301      	movs	r3, #1
 8002fee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ff8:	f107 031c 	add.w	r3, r7, #28
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	481e      	ldr	r0, [pc, #120]	; (8003078 <MX_GPIO_Init+0x1ec>)
 8003000:	f7fd fdba 	bl	8000b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8003004:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800300a:	2300      	movs	r3, #0
 800300c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800300e:	2302      	movs	r3, #2
 8003010:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003012:	f107 031c 	add.w	r3, r7, #28
 8003016:	4619      	mov	r1, r3
 8003018:	4817      	ldr	r0, [pc, #92]	; (8003078 <MX_GPIO_Init+0x1ec>)
 800301a:	f7fd fdad 	bl	8000b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800301e:	2302      	movs	r3, #2
 8003020:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003022:	2300      	movs	r3, #0
 8003024:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003026:	2302      	movs	r3, #2
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800302a:	f107 031c 	add.w	r3, r7, #28
 800302e:	4619      	mov	r1, r3
 8003030:	4813      	ldr	r0, [pc, #76]	; (8003080 <MX_GPIO_Init+0x1f4>)
 8003032:	f7fd fda1 	bl	8000b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8003036:	23d0      	movs	r3, #208	; 0xd0
 8003038:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800303a:	2301      	movs	r3, #1
 800303c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303e:	2300      	movs	r3, #0
 8003040:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003042:	2300      	movs	r3, #0
 8003044:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003046:	f107 031c 	add.w	r3, r7, #28
 800304a:	4619      	mov	r1, r3
 800304c:	480b      	ldr	r0, [pc, #44]	; (800307c <MX_GPIO_Init+0x1f0>)
 800304e:	f7fd fd93 	bl	8000b78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003052:	2200      	movs	r2, #0
 8003054:	2100      	movs	r1, #0
 8003056:	2006      	movs	r0, #6
 8003058:	f7fd fcc5 	bl	80009e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800305c:	2006      	movs	r0, #6
 800305e:	f7fd fcde 	bl	8000a1e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003062:	bf00      	nop
 8003064:	3730      	adds	r7, #48	; 0x30
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40021000 	.word	0x40021000
 8003070:	40023800 	.word	0x40023800
 8003074:	40020000 	.word	0x40020000
 8003078:	40020800 	.word	0x40020800
 800307c:	40020400 	.word	0x40020400
 8003080:	40020c00 	.word	0x40020c00

08003084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003088:	b672      	cpsid	i
}
 800308a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800308c:	e7fe      	b.n	800308c <Error_Handler+0x8>
	...

08003090 <sm_logger_init>:
static sm_logger_t g_logger = {
        .m_level = LOG_LEVEL_TRACE,
        .m_output_fn = NULL
};

int32_t sm_logger_init(sm_logger_output_fn_t _fn, LOG_LEVEL _level){
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	460b      	mov	r3, r1
 800309a:	70fb      	strb	r3, [r7, #3]
    g_logger.m_level= _level;
 800309c:	4a06      	ldr	r2, [pc, #24]	; (80030b8 <sm_logger_init+0x28>)
 800309e:	78fb      	ldrb	r3, [r7, #3]
 80030a0:	7013      	strb	r3, [r2, #0]
    g_logger.m_output_fn = _fn;
 80030a2:	4a05      	ldr	r2, [pc, #20]	; (80030b8 <sm_logger_init+0x28>)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6053      	str	r3, [r2, #4]

    return 0;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	2000000c 	.word	0x2000000c

080030bc <sm_bsp_log_output>:



 */

void sm_bsp_log_output(const char* data){
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]



}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <main>:


int main(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b090      	sub	sp, #64	; 0x40
 80030d4:	af00      	add	r7, sp, #0

	  board_init();
 80030d6:	f7ff fdfb 	bl	8002cd0 <board_init>
	  lkv_stepmotor_gpio_init();
 80030da:	f002 fed9 	bl	8005e90 <lkv_stepmotor_gpio_init>
	  lkv_lcd_init();
 80030de:	f7ff fcc7 	bl	8002a70 <lkv_lcd_init>

	  nmbs_platform_conf platform_conf;
	  platform_conf.transport = NMBS_TRANSPORT_RTU;
 80030e2:	2301      	movs	r3, #1
 80030e4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	  platform_conf.read = read_serial;
 80030e8:	4b1c      	ldr	r3, [pc, #112]	; (800315c <main+0x8c>)
 80030ea:	633b      	str	r3, [r7, #48]	; 0x30
	  platform_conf.write = write_serial;
 80030ec:	4b1c      	ldr	r3, [pc, #112]	; (8003160 <main+0x90>)
 80030ee:	637b      	str	r3, [r7, #52]	; 0x34
	  platform_conf.arg = NULL;
 80030f0:	2300      	movs	r3, #0
 80030f2:	63bb      	str	r3, [r7, #56]	; 0x38

	  nmbs_callbacks callbacks = {0};
 80030f4:	463b      	mov	r3, r7
 80030f6:	222c      	movs	r2, #44	; 0x2c
 80030f8:	2100      	movs	r1, #0
 80030fa:	4618      	mov	r0, r3
 80030fc:	f002 ff40 	bl	8005f80 <memset>
	  callbacks.read_coils = handle_read_coils;
 8003100:	4b18      	ldr	r3, [pc, #96]	; (8003164 <main+0x94>)
 8003102:	603b      	str	r3, [r7, #0]
	  callbacks.write_multiple_coils = handle_write_multiple_coils;
 8003104:	4b18      	ldr	r3, [pc, #96]	; (8003168 <main+0x98>)
 8003106:	61bb      	str	r3, [r7, #24]
	  callbacks.read_holding_registers = handler_read_holding_registers;
 8003108:	4b18      	ldr	r3, [pc, #96]	; (800316c <main+0x9c>)
 800310a:	60bb      	str	r3, [r7, #8]
	  callbacks.write_multiple_registers = handle_write_multiple_registers;
 800310c:	4b18      	ldr	r3, [pc, #96]	; (8003170 <main+0xa0>)
 800310e:	61fb      	str	r3, [r7, #28]
	  callbacks.write_single_register = handle_write_single_registers;
 8003110:	4b18      	ldr	r3, [pc, #96]	; (8003174 <main+0xa4>)
 8003112:	617b      	str	r3, [r7, #20]
	  callbacks.read_input_registers = handler_read_input_registers;
 8003114:	4b18      	ldr	r3, [pc, #96]	; (8003178 <main+0xa8>)
 8003116:	60fb      	str	r3, [r7, #12]
	  // Create the modbus server
	  nmbs_error err = nmbs_server_create(&nmbs, RTU_SERVER_ADDRESS, &platform_conf, &callbacks);
 8003118:	463b      	mov	r3, r7
 800311a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800311e:	2105      	movs	r1, #5
 8003120:	4816      	ldr	r0, [pc, #88]	; (800317c <main+0xac>)
 8003122:	f002 fe27 	bl	8005d74 <nmbs_server_create>
 8003126:	4603      	mov	r3, r0
 8003128:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  if (err != NMBS_ERROR_NONE) {
 800312c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <main+0x68>
	    onError();
 8003134:	f000 f8f0 	bl	8003318 <onError>
	  }
	  nmbs_set_read_timeout(&nmbs, 1000);
 8003138:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800313c:	480f      	ldr	r0, [pc, #60]	; (800317c <main+0xac>)
 800313e:	f000 fc24 	bl	800398a <nmbs_set_read_timeout>
	  nmbs_set_byte_timeout(&nmbs, 100);
 8003142:	2164      	movs	r1, #100	; 0x64
 8003144:	480d      	ldr	r0, [pc, #52]	; (800317c <main+0xac>)
 8003146:	f000 fc2f 	bl	80039a8 <nmbs_set_byte_timeout>

	  sm_logger_init(sm_bsp_log_output, LOG_LEVEL_DEBUG);
 800314a:	2103      	movs	r1, #3
 800314c:	480c      	ldr	r0, [pc, #48]	; (8003180 <main+0xb0>)
 800314e:	f7ff ff9f 	bl	8003090 <sm_logger_init>



  while (1)
  {
	  nmbs_server_poll(&nmbs);
 8003152:	480a      	ldr	r0, [pc, #40]	; (800317c <main+0xac>)
 8003154:	f002 fe43 	bl	8005dde <nmbs_server_poll>
 8003158:	e7fb      	b.n	8003152 <main+0x82>
 800315a:	bf00      	nop
 800315c:	08003209 	.word	0x08003209
 8003160:	080032ed 	.word	0x080032ed
 8003164:	08003329 	.word	0x08003329
 8003168:	08003415 	.word	0x08003415
 800316c:	080034fd 	.word	0x080034fd
 8003170:	0800355d 	.word	0x0800355d
 8003174:	080035bd 	.word	0x080035bd
 8003178:	080035f9 	.word	0x080035f9
 800317c:	20000504 	.word	0x20000504
 8003180:	080030bd 	.word	0x080030bd

08003184 <SysTick_Handler>:
  }
}


void SysTick_Handler(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
	g_sys_time++;
 8003188:	4b04      	ldr	r3, [pc, #16]	; (800319c <SysTick_Handler+0x18>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	3301      	adds	r3, #1
 800318e:	4a03      	ldr	r2, [pc, #12]	; (800319c <SysTick_Handler+0x18>)
 8003190:	6013      	str	r3, [r2, #0]
  HAL_IncTick();
 8003192:	f7fd fb09 	bl	80007a8 <HAL_IncTick>
}
 8003196:	bf00      	nop
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	2000005c 	.word	0x2000005c

080031a0 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80031a4:	2001      	movs	r0, #1
 80031a6:	f7fd fe9d 	bl	8000ee4 <HAL_GPIO_EXTI_IRQHandler>
}
 80031aa:	bf00      	nop
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <USART3_IRQHandler>:


void USART3_IRQHandler(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart3);
 80031b4:	4810      	ldr	r0, [pc, #64]	; (80031f8 <USART3_IRQHandler+0x48>)
 80031b6:	f7fe fce9 	bl	8001b8c <HAL_UART_IRQHandler>
	HAL_UART_Receive_IT(&huart3, &buff_rx, 1);
 80031ba:	2201      	movs	r2, #1
 80031bc:	490f      	ldr	r1, [pc, #60]	; (80031fc <USART3_IRQHandler+0x4c>)
 80031be:	480e      	ldr	r0, [pc, #56]	; (80031f8 <USART3_IRQHandler+0x48>)
 80031c0:	f7fe fcb4 	bl	8001b2c <HAL_UART_Receive_IT>
	ring_buffer[front_index] = buff_rx;
 80031c4:	4b0e      	ldr	r3, [pc, #56]	; (8003200 <USART3_IRQHandler+0x50>)
 80031c6:	881b      	ldrh	r3, [r3, #0]
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	461a      	mov	r2, r3
 80031cc:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <USART3_IRQHandler+0x4c>)
 80031ce:	7819      	ldrb	r1, [r3, #0]
 80031d0:	4b0c      	ldr	r3, [pc, #48]	; (8003204 <USART3_IRQHandler+0x54>)
 80031d2:	5499      	strb	r1, [r3, r2]
	front_index++;
 80031d4:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <USART3_IRQHandler+0x50>)
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	b29b      	uxth	r3, r3
 80031da:	3301      	adds	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	4b08      	ldr	r3, [pc, #32]	; (8003200 <USART3_IRQHandler+0x50>)
 80031e0:	801a      	strh	r2, [r3, #0]
	if(front_index >= 1024){
 80031e2:	4b07      	ldr	r3, [pc, #28]	; (8003200 <USART3_IRQHandler+0x50>)
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ec:	d302      	bcc.n	80031f4 <USART3_IRQHandler+0x44>
		front_index = 0;
 80031ee:	4b04      	ldr	r3, [pc, #16]	; (8003200 <USART3_IRQHandler+0x50>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	801a      	strh	r2, [r3, #0]
	}
}
 80031f4:	bf00      	nop
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	200000b8 	.word	0x200000b8
 80031fc:	200000fc 	.word	0x200000fc
 8003200:	20000500 	.word	0x20000500
 8003204:	20000100 	.word	0x20000100

08003208 <read_serial>:
uint16_t server_holding_registers[HOLD_REGS_ADDR_MAX] = {0,1,2,3,4,5,6,7,8,9};
uint16_t server_input_registers[INPUT_REGS_ADDR_MAX] = {01,11,21,31,41,51,61,71,81,91};



int32_t read_serial(uint8_t* buf, uint16_t count, int32_t byte_timeout_ms, void* arg) {
 8003208:	b480      	push	{r7}
 800320a:	b089      	sub	sp, #36	; 0x24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	607a      	str	r2, [r7, #4]
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	460b      	mov	r3, r1
 8003216:	817b      	strh	r3, [r7, #10]
	uint32_t timeout = g_sys_time + byte_timeout_ms;
 8003218:	4b30      	ldr	r3, [pc, #192]	; (80032dc <read_serial+0xd4>)
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4413      	add	r3, r2
 8003220:	617b      	str	r3, [r7, #20]
	while(g_sys_time < timeout){
 8003222:	e04e      	b.n	80032c2 <read_serial+0xba>
		uint32_t gap_ = 0;
 8003224:	2300      	movs	r3, #0
 8003226:	61fb      	str	r3, [r7, #28]
		if(front_index > rear_index){
 8003228:	4b2d      	ldr	r3, [pc, #180]	; (80032e0 <read_serial+0xd8>)
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	b29a      	uxth	r2, r3
 800322e:	4b2d      	ldr	r3, [pc, #180]	; (80032e4 <read_serial+0xdc>)
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	b29b      	uxth	r3, r3
 8003234:	429a      	cmp	r2, r3
 8003236:	d908      	bls.n	800324a <read_serial+0x42>
			gap_ = front_index - rear_index;
 8003238:	4b29      	ldr	r3, [pc, #164]	; (80032e0 <read_serial+0xd8>)
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	b29b      	uxth	r3, r3
 800323e:	461a      	mov	r2, r3
 8003240:	4b28      	ldr	r3, [pc, #160]	; (80032e4 <read_serial+0xdc>)
 8003242:	881b      	ldrh	r3, [r3, #0]
 8003244:	b29b      	uxth	r3, r3
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	61fb      	str	r3, [r7, #28]
		}
		if(front_index < rear_index){
 800324a:	4b25      	ldr	r3, [pc, #148]	; (80032e0 <read_serial+0xd8>)
 800324c:	881b      	ldrh	r3, [r3, #0]
 800324e:	b29a      	uxth	r2, r3
 8003250:	4b24      	ldr	r3, [pc, #144]	; (80032e4 <read_serial+0xdc>)
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	b29b      	uxth	r3, r3
 8003256:	429a      	cmp	r2, r3
 8003258:	d209      	bcs.n	800326e <read_serial+0x66>
			gap_ = 1024 + front_index - rear_index;
 800325a:	4b21      	ldr	r3, [pc, #132]	; (80032e0 <read_serial+0xd8>)
 800325c:	881b      	ldrh	r3, [r3, #0]
 800325e:	b29b      	uxth	r3, r3
 8003260:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003264:	4a1f      	ldr	r2, [pc, #124]	; (80032e4 <read_serial+0xdc>)
 8003266:	8812      	ldrh	r2, [r2, #0]
 8003268:	b292      	uxth	r2, r2
 800326a:	1a9b      	subs	r3, r3, r2
 800326c:	61fb      	str	r3, [r7, #28]
		}
		if(gap_ >= count){
 800326e:	897b      	ldrh	r3, [r7, #10]
 8003270:	69fa      	ldr	r2, [r7, #28]
 8003272:	429a      	cmp	r2, r3
 8003274:	d325      	bcc.n	80032c2 <read_serial+0xba>
			for(int i = 0; i < count; i++){
 8003276:	2300      	movs	r3, #0
 8003278:	61bb      	str	r3, [r7, #24]
 800327a:	e01c      	b.n	80032b6 <read_serial+0xae>
				*(buf + i) = ring_buffer[rear_index];
 800327c:	4b19      	ldr	r3, [pc, #100]	; (80032e4 <read_serial+0xdc>)
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	b29b      	uxth	r3, r3
 8003282:	4619      	mov	r1, r3
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4413      	add	r3, r2
 800328a:	4a17      	ldr	r2, [pc, #92]	; (80032e8 <read_serial+0xe0>)
 800328c:	5c52      	ldrb	r2, [r2, r1]
 800328e:	701a      	strb	r2, [r3, #0]
				rear_index++;
 8003290:	4b14      	ldr	r3, [pc, #80]	; (80032e4 <read_serial+0xdc>)
 8003292:	881b      	ldrh	r3, [r3, #0]
 8003294:	b29b      	uxth	r3, r3
 8003296:	3301      	adds	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <read_serial+0xdc>)
 800329c:	801a      	strh	r2, [r3, #0]
				if(rear_index >= 1024){
 800329e:	4b11      	ldr	r3, [pc, #68]	; (80032e4 <read_serial+0xdc>)
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a8:	d302      	bcc.n	80032b0 <read_serial+0xa8>
					rear_index = 0;
 80032aa:	4b0e      	ldr	r3, [pc, #56]	; (80032e4 <read_serial+0xdc>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	801a      	strh	r2, [r3, #0]
			for(int i = 0; i < count; i++){
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	3301      	adds	r3, #1
 80032b4:	61bb      	str	r3, [r7, #24]
 80032b6:	897b      	ldrh	r3, [r7, #10]
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	dbde      	blt.n	800327c <read_serial+0x74>
				}
			}
			return count;
 80032be:	897b      	ldrh	r3, [r7, #10]
 80032c0:	e006      	b.n	80032d0 <read_serial+0xc8>
	while(g_sys_time < timeout){
 80032c2:	4b06      	ldr	r3, [pc, #24]	; (80032dc <read_serial+0xd4>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d8ab      	bhi.n	8003224 <read_serial+0x1c>
		}
	}
	return -1;
 80032cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3724      	adds	r7, #36	; 0x24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	2000005c 	.word	0x2000005c
 80032e0:	20000500 	.word	0x20000500
 80032e4:	20000502 	.word	0x20000502
 80032e8:	20000100 	.word	0x20000100

080032ec <write_serial>:


int32_t write_serial(const uint8_t* buf, uint16_t count, int32_t byte_timeout_ms, void* arg) {
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	607a      	str	r2, [r7, #4]
 80032f6:	603b      	str	r3, [r7, #0]
 80032f8:	460b      	mov	r3, r1
 80032fa:	817b      	strh	r3, [r7, #10]
	HAL_UART_Transmit(&huart3, buf, count, byte_timeout_ms);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	897a      	ldrh	r2, [r7, #10]
 8003300:	68f9      	ldr	r1, [r7, #12]
 8003302:	4804      	ldr	r0, [pc, #16]	; (8003314 <write_serial+0x28>)
 8003304:	f7fe fb80 	bl	8001a08 <HAL_UART_Transmit>
  return count;
 8003308:	897b      	ldrh	r3, [r7, #10]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	200000b8 	.word	0x200000b8

08003318 <onError>:


void onError(void) {
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0

	return;
 800331c:	bf00      	nop
}
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
	...

08003328 <handle_read_coils>:


nmbs_error handle_read_coils(uint16_t address, uint16_t quantity, nmbs_bitfield coils_out, uint8_t unit_id, void *arg) {
 8003328:	b480      	push	{r7}
 800332a:	b087      	sub	sp, #28
 800332c:	af00      	add	r7, sp, #0
 800332e:	60ba      	str	r2, [r7, #8]
 8003330:	461a      	mov	r2, r3
 8003332:	4603      	mov	r3, r0
 8003334:	81fb      	strh	r3, [r7, #14]
 8003336:	460b      	mov	r3, r1
 8003338:	81bb      	strh	r3, [r7, #12]
 800333a:	4613      	mov	r3, r2
 800333c:	71fb      	strb	r3, [r7, #7]
  if (address + quantity > COILS_ADDR_MAX + 1)
 800333e:	89fa      	ldrh	r2, [r7, #14]
 8003340:	89bb      	ldrh	r3, [r7, #12]
 8003342:	4413      	add	r3, r2
 8003344:	2b10      	cmp	r3, #16
 8003346:	dd01      	ble.n	800334c <handle_read_coils+0x24>
    return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 8003348:	2302      	movs	r3, #2
 800334a:	e05a      	b.n	8003402 <handle_read_coils+0xda>

  // Read our coils values into coils_out
  for (int i = 0; i < quantity; i++) {
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]
 8003350:	e052      	b.n	80033f8 <handle_read_coils+0xd0>
    bool value = nmbs_bitfield_read(server_coils, address + i);
 8003352:	89fa      	ldrh	r2, [r7, #14]
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	4413      	add	r3, r2
 8003358:	2b00      	cmp	r3, #0
 800335a:	da00      	bge.n	800335e <handle_read_coils+0x36>
 800335c:	3307      	adds	r3, #7
 800335e:	10db      	asrs	r3, r3, #3
 8003360:	461a      	mov	r2, r3
 8003362:	4b2b      	ldr	r3, [pc, #172]	; (8003410 <handle_read_coils+0xe8>)
 8003364:	5c9b      	ldrb	r3, [r3, r2]
 8003366:	4619      	mov	r1, r3
 8003368:	89fa      	ldrh	r2, [r7, #14]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	4413      	add	r3, r2
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	fa41 f303 	asr.w	r3, r1, r3
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	bf14      	ite	ne
 800337e:	2301      	movne	r3, #1
 8003380:	2300      	moveq	r3, #0
 8003382:	74fb      	strb	r3, [r7, #19]
    nmbs_bitfield_write(coils_out, i, value);
 8003384:	7cfb      	ldrb	r3, [r7, #19]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d014      	beq.n	80033b4 <handle_read_coils+0x8c>
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2b00      	cmp	r3, #0
 800338e:	da00      	bge.n	8003392 <handle_read_coils+0x6a>
 8003390:	3307      	adds	r3, #7
 8003392:	10db      	asrs	r3, r3, #3
 8003394:	461a      	mov	r2, r3
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	4413      	add	r3, r2
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	b25a      	sxtb	r2, r3
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	2101      	movs	r1, #1
 80033a6:	fa01 f303 	lsl.w	r3, r1, r3
 80033aa:	b25b      	sxtb	r3, r3
 80033ac:	4313      	orrs	r3, r2
 80033ae:	b25b      	sxtb	r3, r3
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	e015      	b.n	80033e0 <handle_read_coils+0xb8>
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	da00      	bge.n	80033bc <handle_read_coils+0x94>
 80033ba:	3307      	adds	r3, #7
 80033bc:	10db      	asrs	r3, r3, #3
 80033be:	461a      	mov	r2, r3
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	4413      	add	r3, r2
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	b25a      	sxtb	r2, r3
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	2101      	movs	r1, #1
 80033d0:	fa01 f303 	lsl.w	r3, r1, r3
 80033d4:	b25b      	sxtb	r3, r3
 80033d6:	43db      	mvns	r3, r3
 80033d8:	b25b      	sxtb	r3, r3
 80033da:	4013      	ands	r3, r2
 80033dc:	b25b      	sxtb	r3, r3
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	da00      	bge.n	80033e8 <handle_read_coils+0xc0>
 80033e6:	3307      	adds	r3, #7
 80033e8:	10db      	asrs	r3, r3, #3
 80033ea:	4619      	mov	r1, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	440b      	add	r3, r1
 80033f0:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < quantity; i++) {
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	3301      	adds	r3, #1
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	89bb      	ldrh	r3, [r7, #12]
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	dba8      	blt.n	8003352 <handle_read_coils+0x2a>
  }

  return NMBS_ERROR_NONE;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	371c      	adds	r7, #28
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	20000658 	.word	0x20000658

08003414 <handle_write_multiple_coils>:


nmbs_error handle_write_multiple_coils(uint16_t address, uint16_t quantity, const nmbs_bitfield coils, uint8_t unit_id, void *arg) {
 8003414:	b480      	push	{r7}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
 800341a:	60ba      	str	r2, [r7, #8]
 800341c:	461a      	mov	r2, r3
 800341e:	4603      	mov	r3, r0
 8003420:	81fb      	strh	r3, [r7, #14]
 8003422:	460b      	mov	r3, r1
 8003424:	81bb      	strh	r3, [r7, #12]
 8003426:	4613      	mov	r3, r2
 8003428:	71fb      	strb	r3, [r7, #7]
  if (address + quantity > COILS_ADDR_MAX + 1)
 800342a:	89fa      	ldrh	r2, [r7, #14]
 800342c:	89bb      	ldrh	r3, [r7, #12]
 800342e:	4413      	add	r3, r2
 8003430:	2b10      	cmp	r3, #16
 8003432:	dd01      	ble.n	8003438 <handle_write_multiple_coils+0x24>
    return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 8003434:	2302      	movs	r3, #2
 8003436:	e058      	b.n	80034ea <handle_write_multiple_coils+0xd6>

  // Write coils values to our server_coils
  for (int i = 0; i < quantity; i++) {
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]
 800343c:	e050      	b.n	80034e0 <handle_write_multiple_coils+0xcc>
    nmbs_bitfield_write(server_coils, address + i, nmbs_bitfield_read(coils, i));
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2b00      	cmp	r3, #0
 8003442:	da00      	bge.n	8003446 <handle_write_multiple_coils+0x32>
 8003444:	3307      	adds	r3, #7
 8003446:	10db      	asrs	r3, r3, #3
 8003448:	461a      	mov	r2, r3
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	4413      	add	r3, r2
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	461a      	mov	r2, r3
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	fa42 f303 	asr.w	r3, r2, r3
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d017      	beq.n	8003494 <handle_write_multiple_coils+0x80>
 8003464:	89fa      	ldrh	r2, [r7, #14]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	4413      	add	r3, r2
 800346a:	2b00      	cmp	r3, #0
 800346c:	da00      	bge.n	8003470 <handle_write_multiple_coils+0x5c>
 800346e:	3307      	adds	r3, #7
 8003470:	10db      	asrs	r3, r3, #3
 8003472:	461a      	mov	r2, r3
 8003474:	4b20      	ldr	r3, [pc, #128]	; (80034f8 <handle_write_multiple_coils+0xe4>)
 8003476:	5c9b      	ldrb	r3, [r3, r2]
 8003478:	b25a      	sxtb	r2, r3
 800347a:	89f9      	ldrh	r1, [r7, #14]
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	440b      	add	r3, r1
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	2101      	movs	r1, #1
 8003486:	fa01 f303 	lsl.w	r3, r1, r3
 800348a:	b25b      	sxtb	r3, r3
 800348c:	4313      	orrs	r3, r2
 800348e:	b25b      	sxtb	r3, r3
 8003490:	b2da      	uxtb	r2, r3
 8003492:	e018      	b.n	80034c6 <handle_write_multiple_coils+0xb2>
 8003494:	89fa      	ldrh	r2, [r7, #14]
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	4413      	add	r3, r2
 800349a:	2b00      	cmp	r3, #0
 800349c:	da00      	bge.n	80034a0 <handle_write_multiple_coils+0x8c>
 800349e:	3307      	adds	r3, #7
 80034a0:	10db      	asrs	r3, r3, #3
 80034a2:	461a      	mov	r2, r3
 80034a4:	4b14      	ldr	r3, [pc, #80]	; (80034f8 <handle_write_multiple_coils+0xe4>)
 80034a6:	5c9b      	ldrb	r3, [r3, r2]
 80034a8:	b25a      	sxtb	r2, r3
 80034aa:	89f9      	ldrh	r1, [r7, #14]
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	440b      	add	r3, r1
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	2101      	movs	r1, #1
 80034b6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ba:	b25b      	sxtb	r3, r3
 80034bc:	43db      	mvns	r3, r3
 80034be:	b25b      	sxtb	r3, r3
 80034c0:	4013      	ands	r3, r2
 80034c2:	b25b      	sxtb	r3, r3
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	89f9      	ldrh	r1, [r7, #14]
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	440b      	add	r3, r1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	da00      	bge.n	80034d2 <handle_write_multiple_coils+0xbe>
 80034d0:	3307      	adds	r3, #7
 80034d2:	10db      	asrs	r3, r3, #3
 80034d4:	4619      	mov	r1, r3
 80034d6:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <handle_write_multiple_coils+0xe4>)
 80034d8:	545a      	strb	r2, [r3, r1]
  for (int i = 0; i < quantity; i++) {
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	3301      	adds	r3, #1
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	89bb      	ldrh	r3, [r7, #12]
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	dbaa      	blt.n	800343e <handle_write_multiple_coils+0x2a>
  }

  return NMBS_ERROR_NONE;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	371c      	adds	r7, #28
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	20000658 	.word	0x20000658

080034fc <handler_read_holding_registers>:


nmbs_error handler_read_holding_registers(uint16_t address, uint16_t quantity, uint16_t* registers_out, uint8_t unit_id, void *arg) {
 80034fc:	b480      	push	{r7}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
 8003502:	60ba      	str	r2, [r7, #8]
 8003504:	461a      	mov	r2, r3
 8003506:	4603      	mov	r3, r0
 8003508:	81fb      	strh	r3, [r7, #14]
 800350a:	460b      	mov	r3, r1
 800350c:	81bb      	strh	r3, [r7, #12]
 800350e:	4613      	mov	r3, r2
 8003510:	71fb      	strb	r3, [r7, #7]
  if (address + quantity > HOLD_REGS_ADDR_MAX + 1)
 8003512:	89fa      	ldrh	r2, [r7, #14]
 8003514:	89bb      	ldrh	r3, [r7, #12]
 8003516:	4413      	add	r3, r2
 8003518:	2b0b      	cmp	r3, #11
 800351a:	dd01      	ble.n	8003520 <handler_read_holding_registers+0x24>
    return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 800351c:	2302      	movs	r3, #2
 800351e:	e015      	b.n	800354c <handler_read_holding_registers+0x50>

  // Read our registers values into registers_out
  for (int i = 0; i < quantity; i++)
 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	e00d      	b.n	8003542 <handler_read_holding_registers+0x46>
    registers_out[i] = server_holding_registers[address + i];
 8003526:	89fa      	ldrh	r2, [r7, #14]
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	441a      	add	r2, r3
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	68b9      	ldr	r1, [r7, #8]
 8003532:	440b      	add	r3, r1
 8003534:	4908      	ldr	r1, [pc, #32]	; (8003558 <handler_read_holding_registers+0x5c>)
 8003536:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800353a:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < quantity; i++)
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	3301      	adds	r3, #1
 8003540:	617b      	str	r3, [r7, #20]
 8003542:	89bb      	ldrh	r3, [r7, #12]
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	429a      	cmp	r2, r3
 8003548:	dbed      	blt.n	8003526 <handler_read_holding_registers+0x2a>

  return NMBS_ERROR_NONE;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	371c      	adds	r7, #28
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	20000014 	.word	0x20000014

0800355c <handle_write_multiple_registers>:


nmbs_error handle_write_multiple_registers(uint16_t address, uint16_t quantity, const uint16_t* registers, uint8_t unit_id, void *arg) {
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	60ba      	str	r2, [r7, #8]
 8003564:	461a      	mov	r2, r3
 8003566:	4603      	mov	r3, r0
 8003568:	81fb      	strh	r3, [r7, #14]
 800356a:	460b      	mov	r3, r1
 800356c:	81bb      	strh	r3, [r7, #12]
 800356e:	4613      	mov	r3, r2
 8003570:	71fb      	strb	r3, [r7, #7]
  if (address + quantity > HOLD_REGS_ADDR_MAX + 1)
 8003572:	89fa      	ldrh	r2, [r7, #14]
 8003574:	89bb      	ldrh	r3, [r7, #12]
 8003576:	4413      	add	r3, r2
 8003578:	2b0b      	cmp	r3, #11
 800357a:	dd01      	ble.n	8003580 <handle_write_multiple_registers+0x24>
    return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 800357c:	2302      	movs	r3, #2
 800357e:	e015      	b.n	80035ac <handle_write_multiple_registers+0x50>

  // Write registers values to our server_holding_registers
  for (int i = 0; i < quantity; i++)
 8003580:	2300      	movs	r3, #0
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	e00d      	b.n	80035a2 <handle_write_multiple_registers+0x46>
	  server_holding_registers[address + i] = registers[i];
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	441a      	add	r2, r3
 800358e:	89f9      	ldrh	r1, [r7, #14]
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	440b      	add	r3, r1
 8003594:	8811      	ldrh	r1, [r2, #0]
 8003596:	4a08      	ldr	r2, [pc, #32]	; (80035b8 <handle_write_multiple_registers+0x5c>)
 8003598:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < quantity; i++)
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	3301      	adds	r3, #1
 80035a0:	617b      	str	r3, [r7, #20]
 80035a2:	89bb      	ldrh	r3, [r7, #12]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	dbed      	blt.n	8003586 <handle_write_multiple_registers+0x2a>

  return NMBS_ERROR_NONE;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	371c      	adds	r7, #28
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	20000014 	.word	0x20000014

080035bc <handle_write_single_registers>:

nmbs_error handle_write_single_registers(uint16_t address, uint16_t value, uint8_t unit_id, void *arg) {
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	607b      	str	r3, [r7, #4]
 80035c4:	4603      	mov	r3, r0
 80035c6:	81fb      	strh	r3, [r7, #14]
 80035c8:	460b      	mov	r3, r1
 80035ca:	81bb      	strh	r3, [r7, #12]
 80035cc:	4613      	mov	r3, r2
 80035ce:	72fb      	strb	r3, [r7, #11]
  if (address > HOLD_REGS_ADDR_MAX + 1)
 80035d0:	89fb      	ldrh	r3, [r7, #14]
 80035d2:	2b0b      	cmp	r3, #11
 80035d4:	d901      	bls.n	80035da <handle_write_single_registers+0x1e>
    return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 80035d6:	2302      	movs	r3, #2
 80035d8:	e005      	b.n	80035e6 <handle_write_single_registers+0x2a>

  // Write register value to our server_holding_register

	  server_holding_registers[address] = value;
 80035da:	89fb      	ldrh	r3, [r7, #14]
 80035dc:	4905      	ldr	r1, [pc, #20]	; (80035f4 <handle_write_single_registers+0x38>)
 80035de:	89ba      	ldrh	r2, [r7, #12]
 80035e0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  return NMBS_ERROR_NONE;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	20000014 	.word	0x20000014

080035f8 <handler_read_input_registers>:


nmbs_error handler_read_input_registers(uint16_t address, uint16_t quantity, uint16_t* registers_out, uint8_t unit_id, void *arg) {
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60ba      	str	r2, [r7, #8]
 8003600:	461a      	mov	r2, r3
 8003602:	4603      	mov	r3, r0
 8003604:	81fb      	strh	r3, [r7, #14]
 8003606:	460b      	mov	r3, r1
 8003608:	81bb      	strh	r3, [r7, #12]
 800360a:	4613      	mov	r3, r2
 800360c:	71fb      	strb	r3, [r7, #7]
  if (address + quantity > INPUT_REGS_ADDR_MAX + 1)
 800360e:	89fa      	ldrh	r2, [r7, #14]
 8003610:	89bb      	ldrh	r3, [r7, #12]
 8003612:	4413      	add	r3, r2
 8003614:	2b0b      	cmp	r3, #11
 8003616:	dd01      	ble.n	800361c <handler_read_input_registers+0x24>
    return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 8003618:	2302      	movs	r3, #2
 800361a:	e015      	b.n	8003648 <handler_read_input_registers+0x50>

  // Read our registers values into registers_out
  for (int i = 0; i < quantity; i++)
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	e00d      	b.n	800363e <handler_read_input_registers+0x46>
    registers_out[i] = server_input_registers[address + i];
 8003622:	89fa      	ldrh	r2, [r7, #14]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	441a      	add	r2, r3
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	440b      	add	r3, r1
 8003630:	4908      	ldr	r1, [pc, #32]	; (8003654 <handler_read_input_registers+0x5c>)
 8003632:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003636:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < quantity; i++)
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	3301      	adds	r3, #1
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	89bb      	ldrh	r3, [r7, #12]
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	429a      	cmp	r2, r3
 8003644:	dbed      	blt.n	8003622 <handler_read_input_registers+0x2a>

  return NMBS_ERROR_NONE;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	371c      	adds	r7, #28
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	20000028 	.word	0x20000028

08003658 <get_1>:
#else
#define NMBS_DEBUG_PRINT(...) (void) (0)
#endif


static uint8_t get_1(nmbs_t* nmbs) {
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
    uint8_t result = nmbs->msg.buf[nmbs->msg.buf_idx];
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8003666:	461a      	mov	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	5c9b      	ldrb	r3, [r3, r2]
 800366c:	73fb      	strb	r3, [r7, #15]
    nmbs->msg.buf_idx++;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8003674:	3301      	adds	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
    return result;
 800367e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <put_1>:


static void put_1(nmbs_t* nmbs, uint8_t data) {
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	70fb      	strb	r3, [r7, #3]
    nmbs->msg.buf[nmbs->msg.buf_idx] = data;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800369e:	4619      	mov	r1, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	78fa      	ldrb	r2, [r7, #3]
 80036a4:	545a      	strb	r2, [r3, r1]
    nmbs->msg.buf_idx++;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80036ac:	3301      	adds	r3, #1
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <discard_1>:


static void discard_1(nmbs_t* nmbs) {
 80036c2:	b480      	push	{r7}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
    nmbs->msg.buf_idx++;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80036d0:	3301      	adds	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <discard_n>:


static void discard_n(nmbs_t* nmbs, uint16_t n) {
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
 80036ee:	460b      	mov	r3, r1
 80036f0:	807b      	strh	r3, [r7, #2]
    nmbs->msg.buf_idx += n;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 80036f8:	887b      	ldrh	r3, [r7, #2]
 80036fa:	4413      	add	r3, r2
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <get_2>:


static uint16_t get_2(nmbs_t* nmbs) {
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
    uint16_t result =
            ((uint16_t) nmbs->msg.buf[nmbs->msg.buf_idx]) << 8 | (uint16_t) nmbs->msg.buf[nmbs->msg.buf_idx + 1];
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800371e:	461a      	mov	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	5c9b      	ldrb	r3, [r3, r2]
 8003724:	021b      	lsls	r3, r3, #8
 8003726:	b21a      	sxth	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800372e:	3301      	adds	r3, #1
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	5ccb      	ldrb	r3, [r1, r3]
 8003734:	b21b      	sxth	r3, r3
 8003736:	4313      	orrs	r3, r2
 8003738:	b21b      	sxth	r3, r3
    uint16_t result =
 800373a:	81fb      	strh	r3, [r7, #14]
    nmbs->msg.buf_idx += 2;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8003742:	3302      	adds	r3, #2
 8003744:	b29a      	uxth	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
    return result;
 800374c:	89fb      	ldrh	r3, [r7, #14]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <put_2>:


static void put_2(nmbs_t* nmbs, uint16_t data) {
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
 8003762:	460b      	mov	r3, r1
 8003764:	807b      	strh	r3, [r7, #2]
    nmbs->msg.buf[nmbs->msg.buf_idx] = (uint8_t) ((data >> 8) & 0xFFU);
 8003766:	887b      	ldrh	r3, [r7, #2]
 8003768:	0a1b      	lsrs	r3, r3, #8
 800376a:	b299      	uxth	r1, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8003772:	461a      	mov	r2, r3
 8003774:	b2c9      	uxtb	r1, r1
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	5499      	strb	r1, [r3, r2]
    nmbs->msg.buf[nmbs->msg.buf_idx + 1] = (uint8_t) data;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8003780:	3301      	adds	r3, #1
 8003782:	887a      	ldrh	r2, [r7, #2]
 8003784:	b2d1      	uxtb	r1, r2
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	54d1      	strb	r1, [r2, r3]
    nmbs->msg.buf_idx += 2;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8003790:	3302      	adds	r3, #2
 8003792:	b29a      	uxth	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <get_n>:


static uint8_t* get_n(nmbs_t* nmbs, uint16_t n) {
 80037a6:	b480      	push	{r7}
 80037a8:	b085      	sub	sp, #20
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
 80037ae:	460b      	mov	r3, r1
 80037b0:	807b      	strh	r3, [r7, #2]
    uint8_t* msg_buf_ptr = nmbs->msg.buf + nmbs->msg.buf_idx;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	f8b2 2104 	ldrh.w	r2, [r2, #260]	; 0x104
 80037ba:	4413      	add	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]
    nmbs->msg.buf_idx += n;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 80037c4:	887b      	ldrh	r3, [r7, #2]
 80037c6:	4413      	add	r3, r2
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
    return msg_buf_ptr;
 80037d0:	68fb      	ldr	r3, [r7, #12]
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <get_regs>:


static uint16_t* get_regs(nmbs_t* nmbs, uint16_t n) {
 80037de:	b480      	push	{r7}
 80037e0:	b085      	sub	sp, #20
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	460b      	mov	r3, r1
 80037e8:	807b      	strh	r3, [r7, #2]
    uint16_t* msg_buf_ptr = (uint16_t*) (nmbs->msg.buf + nmbs->msg.buf_idx);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	f8b2 2104 	ldrh.w	r2, [r2, #260]	; 0x104
 80037f2:	4413      	add	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]
    nmbs->msg.buf_idx += n * 2;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 80037fc:	887b      	ldrh	r3, [r7, #2]
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	b29b      	uxth	r3, r3
 8003802:	4413      	add	r3, r2
 8003804:	b29a      	uxth	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
    while (n--) {
 800380c:	e016      	b.n	800383c <get_regs+0x5e>
        msg_buf_ptr[n] = (msg_buf_ptr[n] << 8) | ((msg_buf_ptr[n] >> 8) & 0xFF);
 800380e:	887b      	ldrh	r3, [r7, #2]
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	4413      	add	r3, r2
 8003816:	881b      	ldrh	r3, [r3, #0]
 8003818:	021b      	lsls	r3, r3, #8
 800381a:	b21a      	sxth	r2, r3
 800381c:	887b      	ldrh	r3, [r7, #2]
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	68f9      	ldr	r1, [r7, #12]
 8003822:	440b      	add	r3, r1
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	0a1b      	lsrs	r3, r3, #8
 8003828:	b29b      	uxth	r3, r3
 800382a:	b21b      	sxth	r3, r3
 800382c:	4313      	orrs	r3, r2
 800382e:	b219      	sxth	r1, r3
 8003830:	887b      	ldrh	r3, [r7, #2]
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	4413      	add	r3, r2
 8003838:	b28a      	uxth	r2, r1
 800383a:	801a      	strh	r2, [r3, #0]
    while (n--) {
 800383c:	887b      	ldrh	r3, [r7, #2]
 800383e:	1e5a      	subs	r2, r3, #1
 8003840:	807a      	strh	r2, [r7, #2]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1e3      	bne.n	800380e <get_regs+0x30>
    }
    return msg_buf_ptr;
 8003846:	68fb      	ldr	r3, [r7, #12]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <swap_regs>:
        msg_buf_ptr[n] = (data[n] << 8) | ((data[n] >> 8) & 0xFF);
    }
}


static void swap_regs(uint16_t* data, uint16_t n) {
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	460b      	mov	r3, r1
 800385e:	807b      	strh	r3, [r7, #2]
    while (n--) {
 8003860:	e016      	b.n	8003890 <swap_regs+0x3c>
        data[n] = (data[n] << 8) | ((data[n] >> 8) & 0xFF);
 8003862:	887b      	ldrh	r3, [r7, #2]
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	4413      	add	r3, r2
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	021b      	lsls	r3, r3, #8
 800386e:	b21a      	sxth	r2, r3
 8003870:	887b      	ldrh	r3, [r7, #2]
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	440b      	add	r3, r1
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	0a1b      	lsrs	r3, r3, #8
 800387c:	b29b      	uxth	r3, r3
 800387e:	b21b      	sxth	r3, r3
 8003880:	4313      	orrs	r3, r2
 8003882:	b219      	sxth	r1, r3
 8003884:	887b      	ldrh	r3, [r7, #2]
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	4413      	add	r3, r2
 800388c:	b28a      	uxth	r2, r1
 800388e:	801a      	strh	r2, [r3, #0]
    while (n--) {
 8003890:	887b      	ldrh	r3, [r7, #2]
 8003892:	1e5a      	subs	r2, r3, #1
 8003894:	807a      	strh	r2, [r7, #2]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1e3      	bne.n	8003862 <swap_regs+0xe>
    }
}
 800389a:	bf00      	nop
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <msg_buf_reset>:


static void msg_buf_reset(nmbs_t* nmbs) {
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
    nmbs->msg.buf_idx = 0;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <msg_state_reset>:


static void msg_state_reset(nmbs_t* nmbs) {
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
    msg_buf_reset(nmbs);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f7ff ffeb 	bl	80038a8 <msg_buf_reset>
    nmbs->msg.unit_id = 0;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    nmbs->msg.fc = 0;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    nmbs->msg.transaction_id = 0;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
    nmbs->msg.broadcast = false;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
    nmbs->msg.ignored = false;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
}
 80038fa:	bf00      	nop
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <nmbs_create>:
        nmbs->msg.broadcast = true;
}
#endif


nmbs_error nmbs_create(nmbs_t* nmbs, const nmbs_platform_conf* platform_conf) {
 8003902:	b590      	push	{r4, r7, lr}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	6039      	str	r1, [r7, #0]
    if (!nmbs)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d102      	bne.n	8003918 <nmbs_create+0x16>
        return NMBS_ERROR_INVALID_ARGUMENT;
 8003912:	f04f 33ff 	mov.w	r3, #4294967295
 8003916:	e034      	b.n	8003982 <nmbs_create+0x80>

    memset(nmbs, 0, sizeof(nmbs_t));
 8003918:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800391c:	2100      	movs	r1, #0
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f002 fb2e 	bl	8005f80 <memset>

    nmbs->byte_timeout_ms = -1;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f04f 32ff 	mov.w	r2, #4294967295
 800392a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    nmbs->read_timeout_ms = -1;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f04f 32ff 	mov.w	r2, #4294967295
 8003934:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

    if (!platform_conf)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d102      	bne.n	8003944 <nmbs_create+0x42>
        return NMBS_ERROR_INVALID_ARGUMENT;
 800393e:	f04f 33ff 	mov.w	r3, #4294967295
 8003942:	e01e      	b.n	8003982 <nmbs_create+0x80>

    if (platform_conf->transport != NMBS_TRANSPORT_RTU && platform_conf->transport != NMBS_TRANSPORT_TCP)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d006      	beq.n	800395a <nmbs_create+0x58>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b02      	cmp	r3, #2
 8003952:	d002      	beq.n	800395a <nmbs_create+0x58>
        return NMBS_ERROR_INVALID_ARGUMENT;
 8003954:	f04f 33ff 	mov.w	r3, #4294967295
 8003958:	e013      	b.n	8003982 <nmbs_create+0x80>

    if (!platform_conf->read || !platform_conf->write)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <nmbs_create+0x68>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d102      	bne.n	8003970 <nmbs_create+0x6e>
        return NMBS_ERROR_INVALID_ARGUMENT;
 800396a:	f04f 33ff 	mov.w	r3, #4294967295
 800396e:	e008      	b.n	8003982 <nmbs_create+0x80>

    nmbs->platform = *platform_conf;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8003978:	4613      	mov	r3, r2
 800397a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800397c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    return NMBS_ERROR_NONE;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	bd90      	pop	{r4, r7, pc}

0800398a <nmbs_set_read_timeout>:


void nmbs_set_read_timeout(nmbs_t* nmbs, int32_t timeout_ms) {
 800398a:	b480      	push	{r7}
 800398c:	b083      	sub	sp, #12
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
 8003992:	6039      	str	r1, [r7, #0]
    nmbs->read_timeout_ms = timeout_ms;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <nmbs_set_byte_timeout>:


void nmbs_set_byte_timeout(nmbs_t* nmbs, int32_t timeout_ms) {
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
    nmbs->byte_timeout_ms = timeout_ms;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
}
 80039ba:	bf00      	nop
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <nmbs_crc_calc>:
void nmbs_set_platform_arg(nmbs_t* nmbs, void* arg) {
    nmbs->platform.arg = arg;
}


uint16_t nmbs_crc_calc(const uint8_t* data, uint32_t length) {
 80039c6:	b480      	push	{r7}
 80039c8:	b087      	sub	sp, #28
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
 80039ce:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0xFFFF;
 80039d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039d4:	82fb      	strh	r3, [r7, #22]
    for (uint32_t i = 0; i < length; i++) {
 80039d6:	2300      	movs	r3, #0
 80039d8:	613b      	str	r3, [r7, #16]
 80039da:	e026      	b.n	8003a2a <nmbs_crc_calc+0x64>
        crc ^= (uint16_t) data[i];
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	4413      	add	r3, r2
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	8afb      	ldrh	r3, [r7, #22]
 80039e8:	4053      	eors	r3, r2
 80039ea:	82fb      	strh	r3, [r7, #22]
        for (int j = 8; j != 0; j--) {
 80039ec:	2308      	movs	r3, #8
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	e015      	b.n	8003a1e <nmbs_crc_calc+0x58>
            if ((crc & 0x0001) != 0) {
 80039f2:	8afb      	ldrh	r3, [r7, #22]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00a      	beq.n	8003a12 <nmbs_crc_calc+0x4c>
                crc >>= 1;
 80039fc:	8afb      	ldrh	r3, [r7, #22]
 80039fe:	085b      	lsrs	r3, r3, #1
 8003a00:	82fb      	strh	r3, [r7, #22]
                crc ^= 0xA001;
 8003a02:	8afb      	ldrh	r3, [r7, #22]
 8003a04:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8003a08:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	82fb      	strh	r3, [r7, #22]
 8003a10:	e002      	b.n	8003a18 <nmbs_crc_calc+0x52>
            }
            else
                crc >>= 1;
 8003a12:	8afb      	ldrh	r3, [r7, #22]
 8003a14:	085b      	lsrs	r3, r3, #1
 8003a16:	82fb      	strh	r3, [r7, #22]
        for (int j = 8; j != 0; j--) {
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	60fb      	str	r3, [r7, #12]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1e6      	bne.n	80039f2 <nmbs_crc_calc+0x2c>
    for (uint32_t i = 0; i < length; i++) {
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	3301      	adds	r3, #1
 8003a28:	613b      	str	r3, [r7, #16]
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d3d4      	bcc.n	80039dc <nmbs_crc_calc+0x16>
        }
    }

    return (uint16_t) (crc << 8) | (uint16_t) (crc >> 8);
 8003a32:	8afb      	ldrh	r3, [r7, #22]
 8003a34:	ba5b      	rev16	r3, r3
 8003a36:	b29b      	uxth	r3, r3
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	371c      	adds	r7, #28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <recv>:


static nmbs_error recv(nmbs_t* nmbs, uint16_t count) {
 8003a44:	b590      	push	{r4, r7, lr}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	807b      	strh	r3, [r7, #2]
    int32_t ret =
            nmbs->platform.read(nmbs->msg.buf + nmbs->msg.buf_idx, count, nmbs->byte_timeout_ms, nmbs->platform.arg);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	f8b2 2104 	ldrh.w	r2, [r2, #260]	; 0x104
 8003a5e:	1898      	adds	r0, r3, r2
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003a6c:	8879      	ldrh	r1, [r7, #2]
 8003a6e:	47a0      	blx	r4
 8003a70:	60f8      	str	r0, [r7, #12]

    if (ret == count)
 8003a72:	887b      	ldrh	r3, [r7, #2]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d101      	bne.n	8003a7e <recv+0x3a>
        return NMBS_ERROR_NONE;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e00e      	b.n	8003a9c <recv+0x58>

    if (ret < count) {
 8003a7e:	887b      	ldrh	r3, [r7, #2]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	da08      	bge.n	8003a98 <recv+0x54>
        if (ret < 0)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	da02      	bge.n	8003a92 <recv+0x4e>
            return NMBS_ERROR_TRANSPORT;
 8003a8c:	f06f 0303 	mvn.w	r3, #3
 8003a90:	e004      	b.n	8003a9c <recv+0x58>

        return NMBS_ERROR_TIMEOUT;
 8003a92:	f06f 0302 	mvn.w	r3, #2
 8003a96:	e001      	b.n	8003a9c <recv+0x58>
    }

    return NMBS_ERROR_TRANSPORT;
 8003a98:	f06f 0303 	mvn.w	r3, #3
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd90      	pop	{r4, r7, pc}

08003aa4 <send>:


static nmbs_error send(nmbs_t* nmbs, uint16_t count) {
 8003aa4:	b590      	push	{r4, r7, lr}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	460b      	mov	r3, r1
 8003aae:	807b      	strh	r3, [r7, #2]
    int32_t ret = nmbs->platform.write(nmbs->msg.buf, count, nmbs->byte_timeout_ms, nmbs->platform.arg);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003ac4:	8879      	ldrh	r1, [r7, #2]
 8003ac6:	47a0      	blx	r4
 8003ac8:	60f8      	str	r0, [r7, #12]

    if (ret == count)
 8003aca:	887b      	ldrh	r3, [r7, #2]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d101      	bne.n	8003ad6 <send+0x32>
        return NMBS_ERROR_NONE;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	e00e      	b.n	8003af4 <send+0x50>

    if (ret < count) {
 8003ad6:	887b      	ldrh	r3, [r7, #2]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	da08      	bge.n	8003af0 <send+0x4c>
        if (ret < 0)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	da02      	bge.n	8003aea <send+0x46>
            return NMBS_ERROR_TRANSPORT;
 8003ae4:	f06f 0303 	mvn.w	r3, #3
 8003ae8:	e004      	b.n	8003af4 <send+0x50>

        return NMBS_ERROR_TIMEOUT;
 8003aea:	f06f 0302 	mvn.w	r3, #2
 8003aee:	e001      	b.n	8003af4 <send+0x50>
    }

    return NMBS_ERROR_TRANSPORT;
 8003af0:	f06f 0303 	mvn.w	r3, #3
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd90      	pop	{r4, r7, pc}

08003afc <recv_msg_footer>:


static nmbs_error recv_msg_footer(nmbs_t* nmbs) {
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
    NMBS_DEBUG_PRINT("\n");

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d122      	bne.n	8003b54 <recv_msg_footer+0x58>
        uint16_t crc = nmbs_crc_calc(nmbs->msg.buf, nmbs->msg.buf_idx);
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8003b16:	4619      	mov	r1, r3
 8003b18:	4610      	mov	r0, r2
 8003b1a:	f7ff ff54 	bl	80039c6 <nmbs_crc_calc>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	81fb      	strh	r3, [r7, #14]

        nmbs_error err = recv(nmbs, 2);
 8003b22:	2102      	movs	r1, #2
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f7ff ff8d 	bl	8003a44 <recv>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	737b      	strb	r3, [r7, #13]
        if (err != NMBS_ERROR_NONE)
 8003b2e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <recv_msg_footer+0x40>
            return err;
 8003b36:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003b3a:	e00c      	b.n	8003b56 <recv_msg_footer+0x5a>

        uint16_t recv_crc = get_2(nmbs);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff fde7 	bl	8003710 <get_2>
 8003b42:	4603      	mov	r3, r0
 8003b44:	817b      	strh	r3, [r7, #10]

        if (recv_crc != crc)
 8003b46:	897a      	ldrh	r2, [r7, #10]
 8003b48:	89fb      	ldrh	r3, [r7, #14]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d002      	beq.n	8003b54 <recv_msg_footer+0x58>
            return NMBS_ERROR_CRC;
 8003b4e:	f06f 0304 	mvn.w	r3, #4
 8003b52:	e000      	b.n	8003b56 <recv_msg_footer+0x5a>
    }

    return NMBS_ERROR_NONE;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <recv_msg_header>:


static nmbs_error recv_msg_header(nmbs_t* nmbs, bool* first_byte_received) {
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b086      	sub	sp, #24
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	6039      	str	r1, [r7, #0]
    // We wait for the read timeout here, just for the first message byte
    int32_t old_byte_timeout = nmbs->byte_timeout_ms;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8003b6e:	617b      	str	r3, [r7, #20]
    nmbs->byte_timeout_ms = nmbs->read_timeout_ms;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138

    msg_state_reset(nmbs);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7ff fea1 	bl	80038c4 <msg_state_reset>

    *first_byte_received = false;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2200      	movs	r2, #0
 8003b86:	701a      	strb	r2, [r3, #0]

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d131      	bne.n	8003bf6 <recv_msg_header+0x98>
        nmbs_error err = recv(nmbs, 1);
 8003b92:	2101      	movs	r1, #1
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f7ff ff55 	bl	8003a44 <recv>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	737b      	strb	r3, [r7, #13]

        nmbs->byte_timeout_ms = old_byte_timeout;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138

        if (err != NMBS_ERROR_NONE)
 8003ba6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d002      	beq.n	8003bb4 <recv_msg_header+0x56>
            return err;
 8003bae:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003bb2:	e07b      	b.n	8003cac <recv_msg_header+0x14e>

        *first_byte_received = true;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	701a      	strb	r2, [r3, #0]

        nmbs->msg.unit_id = get_1(nmbs);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7ff fd4c 	bl	8003658 <get_1>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

        err = recv(nmbs, 1);
 8003bca:	2101      	movs	r1, #1
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7ff ff39 	bl	8003a44 <recv>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	737b      	strb	r3, [r7, #13]
        if (err != NMBS_ERROR_NONE)
 8003bd6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d002      	beq.n	8003be4 <recv_msg_header+0x86>
            return err;
 8003bde:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003be2:	e063      	b.n	8003cac <recv_msg_header+0x14e>

        nmbs->msg.fc = get_1(nmbs);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7ff fd37 	bl	8003658 <get_1>
 8003bea:	4603      	mov	r3, r0
 8003bec:	461a      	mov	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
 8003bf4:	e059      	b.n	8003caa <recv_msg_header+0x14c>
    }
    else if (nmbs->platform.transport == NMBS_TRANSPORT_TCP) {
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d154      	bne.n	8003caa <recv_msg_header+0x14c>
        nmbs_error err = recv(nmbs, 1);
 8003c00:	2101      	movs	r1, #1
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7ff ff1e 	bl	8003a44 <recv>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	74fb      	strb	r3, [r7, #19]

        nmbs->byte_timeout_ms = old_byte_timeout;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138

        if (err != NMBS_ERROR_NONE)
 8003c14:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <recv_msg_header+0xc4>
            return err;
 8003c1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003c20:	e044      	b.n	8003cac <recv_msg_header+0x14e>

        *first_byte_received = true;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2201      	movs	r2, #1
 8003c26:	701a      	strb	r2, [r3, #0]

        // Advance buf_idx
        discard_1(nmbs);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f7ff fd4a 	bl	80036c2 <discard_1>

        err = recv(nmbs, 7);
 8003c2e:	2107      	movs	r1, #7
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff ff07 	bl	8003a44 <recv>
 8003c36:	4603      	mov	r3, r0
 8003c38:	74fb      	strb	r3, [r7, #19]
        if (err != NMBS_ERROR_NONE)
 8003c3a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <recv_msg_header+0xea>
            return err;
 8003c42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003c46:	e031      	b.n	8003cac <recv_msg_header+0x14e>

        // Starting over
        msg_buf_reset(nmbs);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7ff fe2d 	bl	80038a8 <msg_buf_reset>

        nmbs->msg.transaction_id = get_2(nmbs);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7ff fd5e 	bl	8003710 <get_2>
 8003c54:	4603      	mov	r3, r0
 8003c56:	461a      	mov	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
        uint16_t protocol_id = get_2(nmbs);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7ff fd56 	bl	8003710 <get_2>
 8003c64:	4603      	mov	r3, r0
 8003c66:	823b      	strh	r3, [r7, #16]
        uint16_t length = get_2(nmbs);    // We should actually check the length of the request against this value
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7ff fd51 	bl	8003710 <get_2>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	81fb      	strh	r3, [r7, #14]
        nmbs->msg.unit_id = get_1(nmbs);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7ff fcf0 	bl	8003658 <get_1>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
        nmbs->msg.fc = get_1(nmbs);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff fce8 	bl	8003658 <get_1>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107

        if (protocol_id != 0)
 8003c92:	8a3b      	ldrh	r3, [r7, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <recv_msg_header+0x140>
            return NMBS_ERROR_INVALID_TCP_MBAP;
 8003c98:	f06f 0305 	mvn.w	r3, #5
 8003c9c:	e006      	b.n	8003cac <recv_msg_header+0x14e>

        if (length > 255)
 8003c9e:	89fb      	ldrh	r3, [r7, #14]
 8003ca0:	2bff      	cmp	r3, #255	; 0xff
 8003ca2:	d902      	bls.n	8003caa <recv_msg_header+0x14c>
            return NMBS_ERROR_INVALID_TCP_MBAP;
 8003ca4:	f06f 0305 	mvn.w	r3, #5
 8003ca8:	e000      	b.n	8003cac <recv_msg_header+0x14e>
    }

    return NMBS_ERROR_NONE;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <put_msg_header>:


static void put_msg_header(nmbs_t* nmbs, uint16_t data_length) {
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	807b      	strh	r3, [r7, #2]
    msg_buf_reset(nmbs);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff fdf1 	bl	80038a8 <msg_buf_reset>

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d107      	bne.n	8003ce0 <put_msg_header+0x2c>
        put_1(nmbs, nmbs->msg.unit_id);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7ff fcd7 	bl	800368c <put_1>
 8003cde:	e01d      	b.n	8003d1c <put_msg_header+0x68>
    }
    else if (nmbs->platform.transport == NMBS_TRANSPORT_TCP) {
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d118      	bne.n	8003d1c <put_msg_header+0x68>
        put_2(nmbs, nmbs->msg.transaction_id);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7ff fd31 	bl	800375a <put_2>
        put_2(nmbs, 0);
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7ff fd2d 	bl	800375a <put_2>
        put_2(nmbs, (uint16_t) (1 + 1 + data_length));
 8003d00:	887b      	ldrh	r3, [r7, #2]
 8003d02:	3302      	adds	r3, #2
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	4619      	mov	r1, r3
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff fd26 	bl	800375a <put_2>
        put_1(nmbs, nmbs->msg.unit_id);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8003d14:	4619      	mov	r1, r3
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff fcb8 	bl	800368c <put_1>
    }

    put_1(nmbs, nmbs->msg.fc);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8003d22:	4619      	mov	r1, r3
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7ff fcb1 	bl	800368c <put_1>
}
 8003d2a:	bf00      	nop
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <send_msg>:


static nmbs_error send_msg(nmbs_t* nmbs) {
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b084      	sub	sp, #16
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
    NMBS_DEBUG_PRINT("\n");

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d10e      	bne.n	8003d62 <send_msg+0x30>
        uint16_t crc = nmbs_crc_calc(nmbs->msg.buf, nmbs->msg.buf_idx);
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4610      	mov	r0, r2
 8003d50:	f7ff fe39 	bl	80039c6 <nmbs_crc_calc>
 8003d54:	4603      	mov	r3, r0
 8003d56:	81fb      	strh	r3, [r7, #14]
        put_2(nmbs, crc);
 8003d58:	89fb      	ldrh	r3, [r7, #14]
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f7ff fcfc 	bl	800375a <put_2>
    }

    nmbs_error err = send(nmbs, nmbs->msg.buf_idx);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8003d68:	4619      	mov	r1, r3
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7ff fe9a 	bl	8003aa4 <send>
 8003d70:	4603      	mov	r3, r0
 8003d72:	737b      	strb	r3, [r7, #13]

    return err;
 8003d74:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <recv_req_header>:


#ifndef NMBS_SERVER_DISABLED
static nmbs_error recv_req_header(nmbs_t* nmbs, bool* first_byte_received) {
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
    nmbs_error err = recv_msg_header(nmbs, first_byte_received);
 8003d8a:	6839      	ldr	r1, [r7, #0]
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7ff fee6 	bl	8003b5e <recv_msg_header>
 8003d92:	4603      	mov	r3, r0
 8003d94:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8003d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d002      	beq.n	8003da4 <recv_req_header+0x24>
        return err;
 8003d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003da2:	e021      	b.n	8003de8 <recv_req_header+0x68>

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d11b      	bne.n	8003de6 <recv_req_header+0x66>
        // Check if request is for us
        if (nmbs->msg.unit_id == NMBS_BROADCAST_ADDRESS)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8003db4:	2200      	movs	r2, #0
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d104      	bne.n	8003dc4 <recv_req_header+0x44>
            nmbs->msg.broadcast = true;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 8003dc2:	e010      	b.n	8003de6 <recv_req_header+0x66>
        else if (nmbs->msg.unit_id != nmbs->address_rtu)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d004      	beq.n	8003dde <recv_req_header+0x5e>
            nmbs->msg.ignored = true;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
 8003ddc:	e003      	b.n	8003de6 <recv_req_header+0x66>
        else
            nmbs->msg.ignored = false;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
    }

    return NMBS_ERROR_NONE;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <put_res_header>:


static void put_res_header(nmbs_t* nmbs, uint16_t data_length) {
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	807b      	strh	r3, [r7, #2]
    put_msg_header(nmbs, data_length);
 8003dfc:	887b      	ldrh	r3, [r7, #2]
 8003dfe:	4619      	mov	r1, r3
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7ff ff57 	bl	8003cb4 <put_msg_header>
    NMBS_DEBUG_PRINT("%d NMBS res -> address_rtu %d\tfc %d\t", nmbs->address_rtu, nmbs->address_rtu, nmbs->msg.fc);
}
 8003e06:	bf00      	nop
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <send_exception_msg>:


static nmbs_error send_exception_msg(nmbs_t* nmbs, uint8_t exception) {
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b082      	sub	sp, #8
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
 8003e16:	460b      	mov	r3, r1
 8003e18:	70fb      	strb	r3, [r7, #3]
    nmbs->msg.fc += 0x80;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8003e20:	3b80      	subs	r3, #128	; 0x80
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    put_msg_header(nmbs, 1);
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7ff ff41 	bl	8003cb4 <put_msg_header>
    put_1(nmbs, exception);
 8003e32:	78fb      	ldrb	r3, [r7, #3]
 8003e34:	4619      	mov	r1, r3
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7ff fc28 	bl	800368c <put_1>

    NMBS_DEBUG_PRINT("%d NMBS res -> address_rtu %d\texception %d", nmbs->address_rtu, nmbs->address_rtu, exception);

    return send_msg(nmbs);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff ff78 	bl	8003d32 <send_msg>
 8003e42:	4603      	mov	r3, r0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <recv_res_header>:
#endif


static nmbs_error recv_res_header(nmbs_t* nmbs) {
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
    uint16_t req_transaction_id = nmbs->msg.transaction_id;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 8003e5a:	81fb      	strh	r3, [r7, #14]
    uint8_t req_unit_id = nmbs->msg.unit_id;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8003e62:	737b      	strb	r3, [r7, #13]
    uint8_t req_fc = nmbs->msg.fc;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8003e6a:	733b      	strb	r3, [r7, #12]

    bool first_byte_received;
    nmbs_error err = recv_msg_header(nmbs, &first_byte_received);
 8003e6c:	f107 0309 	add.w	r3, r7, #9
 8003e70:	4619      	mov	r1, r3
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7ff fe73 	bl	8003b5e <recv_msg_header>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	72fb      	strb	r3, [r7, #11]
    if (err != NMBS_ERROR_NONE)
 8003e7c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <recv_res_header+0x3e>
        return err;
 8003e84:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003e88:	e057      	b.n	8003f3a <recv_res_header+0xee>

    if (nmbs->platform.transport == NMBS_TRANSPORT_TCP) {
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d108      	bne.n	8003ea6 <recv_res_header+0x5a>
        if (nmbs->msg.transaction_id != req_transaction_id)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 8003e9a:	89fa      	ldrh	r2, [r7, #14]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d002      	beq.n	8003ea6 <recv_res_header+0x5a>
            return NMBS_ERROR_INVALID_TCP_MBAP;
 8003ea0:	f06f 0305 	mvn.w	r3, #5
 8003ea4:	e049      	b.n	8003f3a <recv_res_header+0xee>
    }

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU && nmbs->msg.unit_id != req_unit_id)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d108      	bne.n	8003ec2 <recv_res_header+0x76>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8003eb6:	7b7a      	ldrb	r2, [r7, #13]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d002      	beq.n	8003ec2 <recv_res_header+0x76>
        return NMBS_ERROR_INVALID_UNIT_ID;
 8003ebc:	f06f 0306 	mvn.w	r3, #6
 8003ec0:	e03b      	b.n	8003f3a <recv_res_header+0xee>

    if (nmbs->msg.fc != req_fc) {
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8003ec8:	7b3a      	ldrb	r2, [r7, #12]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d034      	beq.n	8003f38 <recv_res_header+0xec>
        if (nmbs->msg.fc - 0x80 == req_fc) {
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8003ed4:	f1a3 0280 	sub.w	r2, r3, #128	; 0x80
 8003ed8:	7b3b      	ldrb	r3, [r7, #12]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d129      	bne.n	8003f32 <recv_res_header+0xe6>
            err = recv(nmbs, 1);
 8003ede:	2101      	movs	r1, #1
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f7ff fdaf 	bl	8003a44 <recv>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	72fb      	strb	r3, [r7, #11]
            if (err != NMBS_ERROR_NONE)
 8003eea:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <recv_res_header+0xac>
                return err;
 8003ef2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003ef6:	e020      	b.n	8003f3a <recv_res_header+0xee>

            uint8_t exception = get_1(nmbs);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7ff fbad 	bl	8003658 <get_1>
 8003efe:	4603      	mov	r3, r0
 8003f00:	72bb      	strb	r3, [r7, #10]
            err = recv_msg_footer(nmbs);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7ff fdfa 	bl	8003afc <recv_msg_footer>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	72fb      	strb	r3, [r7, #11]
            if (err != NMBS_ERROR_NONE)
 8003f0c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <recv_res_header+0xce>
                return err;
 8003f14:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003f18:	e00f      	b.n	8003f3a <recv_res_header+0xee>

            if (exception < 1 || exception > 4)
 8003f1a:	7abb      	ldrb	r3, [r7, #10]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <recv_res_header+0xda>
 8003f20:	7abb      	ldrb	r3, [r7, #10]
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d902      	bls.n	8003f2c <recv_res_header+0xe0>
                return NMBS_ERROR_INVALID_RESPONSE;
 8003f26:	f06f 0301 	mvn.w	r3, #1
 8003f2a:	e006      	b.n	8003f3a <recv_res_header+0xee>

            NMBS_DEBUG_PRINT("%d NMBS res <- address_rtu %d\texception %d\n", nmbs->address_rtu, nmbs->msg.unit_id,
                             exception);
            return (nmbs_error) exception;
 8003f2c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8003f30:	e003      	b.n	8003f3a <recv_res_header+0xee>
        }

        return NMBS_ERROR_INVALID_RESPONSE;
 8003f32:	f06f 0301 	mvn.w	r3, #1
 8003f36:	e000      	b.n	8003f3a <recv_res_header+0xee>
    }

    NMBS_DEBUG_PRINT("%d NMBS res <- address_rtu %d\tfc %d\t", nmbs->address_rtu, nmbs->msg.unit_id, nmbs->msg.fc);

    return NMBS_ERROR_NONE;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <recv_read_discrete_res>:
#endif
}
#endif


static nmbs_error recv_read_discrete_res(nmbs_t* nmbs, nmbs_bitfield values) {
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b084      	sub	sp, #16
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
 8003f4a:	6039      	str	r1, [r7, #0]
    nmbs_error err = recv_res_header(nmbs);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7ff ff7d 	bl	8003e4c <recv_res_header>
 8003f52:	4603      	mov	r3, r0
 8003f54:	72fb      	strb	r3, [r7, #11]
    if (err != NMBS_ERROR_NONE)
 8003f56:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <recv_read_discrete_res+0x22>
        return err;
 8003f5e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003f62:	e044      	b.n	8003fee <recv_read_discrete_res+0xac>

    err = recv(nmbs, 1);
 8003f64:	2101      	movs	r1, #1
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7ff fd6c 	bl	8003a44 <recv>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	72fb      	strb	r3, [r7, #11]
    if (err != NMBS_ERROR_NONE)
 8003f70:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <recv_read_discrete_res+0x3c>
        return err;
 8003f78:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003f7c:	e037      	b.n	8003fee <recv_read_discrete_res+0xac>

    uint8_t coils_bytes = get_1(nmbs);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff fb6a 	bl	8003658 <get_1>
 8003f84:	4603      	mov	r3, r0
 8003f86:	72bb      	strb	r3, [r7, #10]
    NMBS_DEBUG_PRINT("b %d\t", coils_bytes);

    err = recv(nmbs, coils_bytes);
 8003f88:	7abb      	ldrb	r3, [r7, #10]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff fd58 	bl	8003a44 <recv>
 8003f94:	4603      	mov	r3, r0
 8003f96:	72fb      	strb	r3, [r7, #11]
    if (err != NMBS_ERROR_NONE)
 8003f98:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <recv_read_discrete_res+0x64>
        return err;
 8003fa0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003fa4:	e023      	b.n	8003fee <recv_read_discrete_res+0xac>

    NMBS_DEBUG_PRINT("coils ");
    for (int i = 0; i < coils_bytes; i++) {
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	e00f      	b.n	8003fcc <recv_read_discrete_res+0x8a>
        uint8_t coil = get_1(nmbs);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7ff fb53 	bl	8003658 <get_1>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	727b      	strb	r3, [r7, #9]
        if (values)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d004      	beq.n	8003fc6 <recv_read_discrete_res+0x84>
            values[i] = coil;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	7a7a      	ldrb	r2, [r7, #9]
 8003fc4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < coils_bytes; i++) {
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	7abb      	ldrb	r3, [r7, #10]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	dbeb      	blt.n	8003fac <recv_read_discrete_res+0x6a>
        NMBS_DEBUG_PRINT("%d ", coil);
    }

    err = recv_msg_footer(nmbs);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7ff fd91 	bl	8003afc <recv_msg_footer>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	72fb      	strb	r3, [r7, #11]
    if (err != NMBS_ERROR_NONE)
 8003fde:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d002      	beq.n	8003fec <recv_read_discrete_res+0xaa>
        return err;
 8003fe6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003fea:	e000      	b.n	8003fee <recv_read_discrete_res+0xac>

    return NMBS_ERROR_NONE;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <recv_read_registers_res>:


static nmbs_error recv_read_registers_res(nmbs_t* nmbs, uint16_t quantity, uint16_t* registers) {
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b086      	sub	sp, #24
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	60f8      	str	r0, [r7, #12]
 8003ffe:	460b      	mov	r3, r1
 8004000:	607a      	str	r2, [r7, #4]
 8004002:	817b      	strh	r3, [r7, #10]
    nmbs_error err = recv_res_header(nmbs);
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f7ff ff21 	bl	8003e4c <recv_res_header>
 800400a:	4603      	mov	r3, r0
 800400c:	74fb      	strb	r3, [r7, #19]
    if (err != NMBS_ERROR_NONE)
 800400e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <recv_read_registers_res+0x26>
        return err;
 8004016:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800401a:	e050      	b.n	80040be <recv_read_registers_res+0xc8>

    err = recv(nmbs, 1);
 800401c:	2101      	movs	r1, #1
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f7ff fd10 	bl	8003a44 <recv>
 8004024:	4603      	mov	r3, r0
 8004026:	74fb      	strb	r3, [r7, #19]
    if (err != NMBS_ERROR_NONE)
 8004028:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <recv_read_registers_res+0x40>
        return err;
 8004030:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004034:	e043      	b.n	80040be <recv_read_registers_res+0xc8>

    uint8_t registers_bytes = get_1(nmbs);
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f7ff fb0e 	bl	8003658 <get_1>
 800403c:	4603      	mov	r3, r0
 800403e:	74bb      	strb	r3, [r7, #18]
    NMBS_DEBUG_PRINT("b %d\t", registers_bytes);

    err = recv(nmbs, registers_bytes);
 8004040:	7cbb      	ldrb	r3, [r7, #18]
 8004042:	b29b      	uxth	r3, r3
 8004044:	4619      	mov	r1, r3
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f7ff fcfc 	bl	8003a44 <recv>
 800404c:	4603      	mov	r3, r0
 800404e:	74fb      	strb	r3, [r7, #19]
    if (err != NMBS_ERROR_NONE)
 8004050:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d002      	beq.n	800405e <recv_read_registers_res+0x68>
        return err;
 8004058:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800405c:	e02f      	b.n	80040be <recv_read_registers_res+0xc8>

    NMBS_DEBUG_PRINT("regs ");
    for (int i = 0; i < registers_bytes / 2; i++) {
 800405e:	2300      	movs	r3, #0
 8004060:	617b      	str	r3, [r7, #20]
 8004062:	e010      	b.n	8004086 <recv_read_registers_res+0x90>
        uint16_t reg = get_2(nmbs);
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f7ff fb53 	bl	8003710 <get_2>
 800406a:	4603      	mov	r3, r0
 800406c:	823b      	strh	r3, [r7, #16]
        if (registers)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <recv_read_registers_res+0x8a>
            registers[i] = reg;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	4413      	add	r3, r2
 800407c:	8a3a      	ldrh	r2, [r7, #16]
 800407e:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < registers_bytes / 2; i++) {
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	3301      	adds	r3, #1
 8004084:	617b      	str	r3, [r7, #20]
 8004086:	7cbb      	ldrb	r3, [r7, #18]
 8004088:	085b      	lsrs	r3, r3, #1
 800408a:	b2db      	uxtb	r3, r3
 800408c:	461a      	mov	r2, r3
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	4293      	cmp	r3, r2
 8004092:	dbe7      	blt.n	8004064 <recv_read_registers_res+0x6e>
        NMBS_DEBUG_PRINT("%d ", reg);
    }

    err = recv_msg_footer(nmbs);
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f7ff fd31 	bl	8003afc <recv_msg_footer>
 800409a:	4603      	mov	r3, r0
 800409c:	74fb      	strb	r3, [r7, #19]
    if (err != NMBS_ERROR_NONE)
 800409e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <recv_read_registers_res+0xb6>
        return err;
 80040a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80040aa:	e008      	b.n	80040be <recv_read_registers_res+0xc8>

    if (registers_bytes != quantity * 2)
 80040ac:	7cba      	ldrb	r2, [r7, #18]
 80040ae:	897b      	ldrh	r3, [r7, #10]
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d002      	beq.n	80040bc <recv_read_registers_res+0xc6>
        return NMBS_ERROR_INVALID_RESPONSE;
 80040b6:	f06f 0301 	mvn.w	r3, #1
 80040ba:	e000      	b.n	80040be <recv_read_registers_res+0xc8>

    return NMBS_ERROR_NONE;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3718      	adds	r7, #24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <recv_write_single_coil_res>:


nmbs_error recv_write_single_coil_res(nmbs_t* nmbs, uint16_t address, uint16_t value_req) {
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b084      	sub	sp, #16
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
 80040ce:	460b      	mov	r3, r1
 80040d0:	807b      	strh	r3, [r7, #2]
 80040d2:	4613      	mov	r3, r2
 80040d4:	803b      	strh	r3, [r7, #0]
    nmbs_error err = recv_res_header(nmbs);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7ff feb8 	bl	8003e4c <recv_res_header>
 80040dc:	4603      	mov	r3, r0
 80040de:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 80040e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d002      	beq.n	80040ee <recv_write_single_coil_res+0x28>
        return err;
 80040e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ec:	e031      	b.n	8004152 <recv_write_single_coil_res+0x8c>

    err = recv(nmbs, 4);
 80040ee:	2104      	movs	r1, #4
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f7ff fca7 	bl	8003a44 <recv>
 80040f6:	4603      	mov	r3, r0
 80040f8:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 80040fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d002      	beq.n	8004108 <recv_write_single_coil_res+0x42>
        return err;
 8004102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004106:	e024      	b.n	8004152 <recv_write_single_coil_res+0x8c>

    uint16_t address_res = get_2(nmbs);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff fb01 	bl	8003710 <get_2>
 800410e:	4603      	mov	r3, r0
 8004110:	81bb      	strh	r3, [r7, #12]
    uint16_t value_res = get_2(nmbs);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7ff fafc 	bl	8003710 <get_2>
 8004118:	4603      	mov	r3, r0
 800411a:	817b      	strh	r3, [r7, #10]

    NMBS_DEBUG_PRINT("a %d\tvalue %d", address, value_res);

    err = recv_msg_footer(nmbs);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f7ff fced 	bl	8003afc <recv_msg_footer>
 8004122:	4603      	mov	r3, r0
 8004124:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8004126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <recv_write_single_coil_res+0x6e>
        return err;
 800412e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004132:	e00e      	b.n	8004152 <recv_write_single_coil_res+0x8c>

    if (address_res != address)
 8004134:	89ba      	ldrh	r2, [r7, #12]
 8004136:	887b      	ldrh	r3, [r7, #2]
 8004138:	429a      	cmp	r2, r3
 800413a:	d002      	beq.n	8004142 <recv_write_single_coil_res+0x7c>
        return NMBS_ERROR_INVALID_RESPONSE;
 800413c:	f06f 0301 	mvn.w	r3, #1
 8004140:	e007      	b.n	8004152 <recv_write_single_coil_res+0x8c>

    if (value_res != value_req)
 8004142:	897a      	ldrh	r2, [r7, #10]
 8004144:	883b      	ldrh	r3, [r7, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d002      	beq.n	8004150 <recv_write_single_coil_res+0x8a>
        return NMBS_ERROR_INVALID_RESPONSE;
 800414a:	f06f 0301 	mvn.w	r3, #1
 800414e:	e000      	b.n	8004152 <recv_write_single_coil_res+0x8c>

    return NMBS_ERROR_NONE;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <recv_write_single_register_res>:


nmbs_error recv_write_single_register_res(nmbs_t* nmbs, uint16_t address, uint16_t value_req) {
 800415a:	b580      	push	{r7, lr}
 800415c:	b084      	sub	sp, #16
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
 8004162:	460b      	mov	r3, r1
 8004164:	807b      	strh	r3, [r7, #2]
 8004166:	4613      	mov	r3, r2
 8004168:	803b      	strh	r3, [r7, #0]
    nmbs_error err = recv_res_header(nmbs);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7ff fe6e 	bl	8003e4c <recv_res_header>
 8004170:	4603      	mov	r3, r0
 8004172:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8004174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <recv_write_single_register_res+0x28>
        return err;
 800417c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004180:	e031      	b.n	80041e6 <recv_write_single_register_res+0x8c>

    err = recv(nmbs, 4);
 8004182:	2104      	movs	r1, #4
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7ff fc5d 	bl	8003a44 <recv>
 800418a:	4603      	mov	r3, r0
 800418c:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 800418e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <recv_write_single_register_res+0x42>
        return err;
 8004196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800419a:	e024      	b.n	80041e6 <recv_write_single_register_res+0x8c>

    uint16_t address_res = get_2(nmbs);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7ff fab7 	bl	8003710 <get_2>
 80041a2:	4603      	mov	r3, r0
 80041a4:	81bb      	strh	r3, [r7, #12]
    uint16_t value_res = get_2(nmbs);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7ff fab2 	bl	8003710 <get_2>
 80041ac:	4603      	mov	r3, r0
 80041ae:	817b      	strh	r3, [r7, #10]
    NMBS_DEBUG_PRINT("a %d\tvalue %d ", address, value_res);

    err = recv_msg_footer(nmbs);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7ff fca3 	bl	8003afc <recv_msg_footer>
 80041b6:	4603      	mov	r3, r0
 80041b8:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 80041ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d002      	beq.n	80041c8 <recv_write_single_register_res+0x6e>
        return err;
 80041c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041c6:	e00e      	b.n	80041e6 <recv_write_single_register_res+0x8c>

    if (address_res != address)
 80041c8:	89ba      	ldrh	r2, [r7, #12]
 80041ca:	887b      	ldrh	r3, [r7, #2]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d002      	beq.n	80041d6 <recv_write_single_register_res+0x7c>
        return NMBS_ERROR_INVALID_RESPONSE;
 80041d0:	f06f 0301 	mvn.w	r3, #1
 80041d4:	e007      	b.n	80041e6 <recv_write_single_register_res+0x8c>

    if (value_res != value_req)
 80041d6:	897a      	ldrh	r2, [r7, #10]
 80041d8:	883b      	ldrh	r3, [r7, #0]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d002      	beq.n	80041e4 <recv_write_single_register_res+0x8a>
        return NMBS_ERROR_INVALID_RESPONSE;
 80041de:	f06f 0301 	mvn.w	r3, #1
 80041e2:	e000      	b.n	80041e6 <recv_write_single_register_res+0x8c>

    return NMBS_ERROR_NONE;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <recv_write_multiple_coils_res>:


nmbs_error recv_write_multiple_coils_res(nmbs_t* nmbs, uint16_t address, uint16_t quantity) {
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b084      	sub	sp, #16
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
 80041f6:	460b      	mov	r3, r1
 80041f8:	807b      	strh	r3, [r7, #2]
 80041fa:	4613      	mov	r3, r2
 80041fc:	803b      	strh	r3, [r7, #0]
    nmbs_error err = recv_res_header(nmbs);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7ff fe24 	bl	8003e4c <recv_res_header>
 8004204:	4603      	mov	r3, r0
 8004206:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8004208:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <recv_write_multiple_coils_res+0x28>
        return err;
 8004210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004214:	e031      	b.n	800427a <recv_write_multiple_coils_res+0x8c>

    err = recv(nmbs, 4);
 8004216:	2104      	movs	r1, #4
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f7ff fc13 	bl	8003a44 <recv>
 800421e:	4603      	mov	r3, r0
 8004220:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8004222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d002      	beq.n	8004230 <recv_write_multiple_coils_res+0x42>
        return err;
 800422a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800422e:	e024      	b.n	800427a <recv_write_multiple_coils_res+0x8c>

    uint16_t address_res = get_2(nmbs);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f7ff fa6d 	bl	8003710 <get_2>
 8004236:	4603      	mov	r3, r0
 8004238:	81bb      	strh	r3, [r7, #12]
    uint16_t quantity_res = get_2(nmbs);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7ff fa68 	bl	8003710 <get_2>
 8004240:	4603      	mov	r3, r0
 8004242:	817b      	strh	r3, [r7, #10]
    NMBS_DEBUG_PRINT("a %d\tq %d", address_res, quantity_res);

    err = recv_msg_footer(nmbs);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7ff fc59 	bl	8003afc <recv_msg_footer>
 800424a:	4603      	mov	r3, r0
 800424c:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 800424e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <recv_write_multiple_coils_res+0x6e>
        return err;
 8004256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800425a:	e00e      	b.n	800427a <recv_write_multiple_coils_res+0x8c>

    if (address_res != address)
 800425c:	89ba      	ldrh	r2, [r7, #12]
 800425e:	887b      	ldrh	r3, [r7, #2]
 8004260:	429a      	cmp	r2, r3
 8004262:	d002      	beq.n	800426a <recv_write_multiple_coils_res+0x7c>
        return NMBS_ERROR_INVALID_RESPONSE;
 8004264:	f06f 0301 	mvn.w	r3, #1
 8004268:	e007      	b.n	800427a <recv_write_multiple_coils_res+0x8c>

    if (quantity_res != quantity)
 800426a:	897a      	ldrh	r2, [r7, #10]
 800426c:	883b      	ldrh	r3, [r7, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d002      	beq.n	8004278 <recv_write_multiple_coils_res+0x8a>
        return NMBS_ERROR_INVALID_RESPONSE;
 8004272:	f06f 0301 	mvn.w	r3, #1
 8004276:	e000      	b.n	800427a <recv_write_multiple_coils_res+0x8c>

    return NMBS_ERROR_NONE;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <recv_write_multiple_registers_res>:


nmbs_error recv_write_multiple_registers_res(nmbs_t* nmbs, uint16_t address, uint16_t quantity) {
 8004282:	b580      	push	{r7, lr}
 8004284:	b084      	sub	sp, #16
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
 800428a:	460b      	mov	r3, r1
 800428c:	807b      	strh	r3, [r7, #2]
 800428e:	4613      	mov	r3, r2
 8004290:	803b      	strh	r3, [r7, #0]
    nmbs_error err = recv_res_header(nmbs);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7ff fdda 	bl	8003e4c <recv_res_header>
 8004298:	4603      	mov	r3, r0
 800429a:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 800429c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d002      	beq.n	80042aa <recv_write_multiple_registers_res+0x28>
        return err;
 80042a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042a8:	e031      	b.n	800430e <recv_write_multiple_registers_res+0x8c>

    err = recv(nmbs, 4);
 80042aa:	2104      	movs	r1, #4
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7ff fbc9 	bl	8003a44 <recv>
 80042b2:	4603      	mov	r3, r0
 80042b4:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 80042b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <recv_write_multiple_registers_res+0x42>
        return err;
 80042be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042c2:	e024      	b.n	800430e <recv_write_multiple_registers_res+0x8c>

    uint16_t address_res = get_2(nmbs);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f7ff fa23 	bl	8003710 <get_2>
 80042ca:	4603      	mov	r3, r0
 80042cc:	81bb      	strh	r3, [r7, #12]
    uint16_t quantity_res = get_2(nmbs);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7ff fa1e 	bl	8003710 <get_2>
 80042d4:	4603      	mov	r3, r0
 80042d6:	817b      	strh	r3, [r7, #10]
    NMBS_DEBUG_PRINT("a %d\tq %d", address_res, quantity_res);

    err = recv_msg_footer(nmbs);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff fc0f 	bl	8003afc <recv_msg_footer>
 80042de:	4603      	mov	r3, r0
 80042e0:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 80042e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d002      	beq.n	80042f0 <recv_write_multiple_registers_res+0x6e>
        return err;
 80042ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042ee:	e00e      	b.n	800430e <recv_write_multiple_registers_res+0x8c>

    if (address_res != address)
 80042f0:	89ba      	ldrh	r2, [r7, #12]
 80042f2:	887b      	ldrh	r3, [r7, #2]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d002      	beq.n	80042fe <recv_write_multiple_registers_res+0x7c>
        return NMBS_ERROR_INVALID_RESPONSE;
 80042f8:	f06f 0301 	mvn.w	r3, #1
 80042fc:	e007      	b.n	800430e <recv_write_multiple_registers_res+0x8c>

    if (quantity_res != quantity)
 80042fe:	897a      	ldrh	r2, [r7, #10]
 8004300:	883b      	ldrh	r3, [r7, #0]
 8004302:	429a      	cmp	r2, r3
 8004304:	d002      	beq.n	800430c <recv_write_multiple_registers_res+0x8a>
        return NMBS_ERROR_INVALID_RESPONSE;
 8004306:	f06f 0301 	mvn.w	r3, #1
 800430a:	e000      	b.n	800430e <recv_write_multiple_registers_res+0x8c>

    return NMBS_ERROR_NONE;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <recv_read_file_record_res>:


nmbs_error recv_read_file_record_res(nmbs_t* nmbs, uint16_t* registers, uint16_t count) {
 8004316:	b580      	push	{r7, lr}
 8004318:	b086      	sub	sp, #24
 800431a:	af00      	add	r7, sp, #0
 800431c:	60f8      	str	r0, [r7, #12]
 800431e:	60b9      	str	r1, [r7, #8]
 8004320:	4613      	mov	r3, r2
 8004322:	80fb      	strh	r3, [r7, #6]
    nmbs_error err = recv_res_header(nmbs);
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f7ff fd91 	bl	8003e4c <recv_res_header>
 800432a:	4603      	mov	r3, r0
 800432c:	75fb      	strb	r3, [r7, #23]
    if (err != NMBS_ERROR_NONE)
 800432e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <recv_read_file_record_res+0x26>
        return err;
 8004336:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800433a:	e060      	b.n	80043fe <recv_read_file_record_res+0xe8>

    err = recv(nmbs, 1);
 800433c:	2101      	movs	r1, #1
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f7ff fb80 	bl	8003a44 <recv>
 8004344:	4603      	mov	r3, r0
 8004346:	75fb      	strb	r3, [r7, #23]
    if (err != NMBS_ERROR_NONE)
 8004348:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d002      	beq.n	8004356 <recv_read_file_record_res+0x40>
        return err;
 8004350:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004354:	e053      	b.n	80043fe <recv_read_file_record_res+0xe8>

    uint8_t response_size = get_1(nmbs);
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f7ff f97e 	bl	8003658 <get_1>
 800435c:	4603      	mov	r3, r0
 800435e:	75bb      	strb	r3, [r7, #22]

    err = recv(nmbs, response_size);
 8004360:	7dbb      	ldrb	r3, [r7, #22]
 8004362:	b29b      	uxth	r3, r3
 8004364:	4619      	mov	r1, r3
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f7ff fb6c 	bl	8003a44 <recv>
 800436c:	4603      	mov	r3, r0
 800436e:	75fb      	strb	r3, [r7, #23]
    if (err != NMBS_ERROR_NONE)
 8004370:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d002      	beq.n	800437e <recv_read_file_record_res+0x68>
        return err;
 8004378:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800437c:	e03f      	b.n	80043fe <recv_read_file_record_res+0xe8>

    uint8_t subreq_data_size = get_1(nmbs) - 1;
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f7ff f96a 	bl	8003658 <get_1>
 8004384:	4603      	mov	r3, r0
 8004386:	3b01      	subs	r3, #1
 8004388:	757b      	strb	r3, [r7, #21]
    uint8_t subreq_reference_type = get_1(nmbs);
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f7ff f964 	bl	8003658 <get_1>
 8004390:	4603      	mov	r3, r0
 8004392:	753b      	strb	r3, [r7, #20]
    uint16_t* subreq_record_data = (uint16_t*) get_n(nmbs, subreq_data_size);
 8004394:	7d7b      	ldrb	r3, [r7, #21]
 8004396:	b29b      	uxth	r3, r3
 8004398:	4619      	mov	r1, r3
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f7ff fa03 	bl	80037a6 <get_n>
 80043a0:	6138      	str	r0, [r7, #16]

    err = recv_msg_footer(nmbs);
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f7ff fbaa 	bl	8003afc <recv_msg_footer>
 80043a8:	4603      	mov	r3, r0
 80043aa:	75fb      	strb	r3, [r7, #23]
    if (err != NMBS_ERROR_NONE)
 80043ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d002      	beq.n	80043ba <recv_read_file_record_res+0xa4>
        return err;
 80043b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80043b8:	e021      	b.n	80043fe <recv_read_file_record_res+0xe8>

    if (registers) {
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d01d      	beq.n	80043fc <recv_read_file_record_res+0xe6>
        if (subreq_reference_type != 6)
 80043c0:	7d3b      	ldrb	r3, [r7, #20]
 80043c2:	2b06      	cmp	r3, #6
 80043c4:	d002      	beq.n	80043cc <recv_read_file_record_res+0xb6>
            return NMBS_ERROR_INVALID_RESPONSE;
 80043c6:	f06f 0301 	mvn.w	r3, #1
 80043ca:	e018      	b.n	80043fe <recv_read_file_record_res+0xe8>

        if (count != (subreq_data_size / 2))
 80043cc:	7d7b      	ldrb	r3, [r7, #21]
 80043ce:	085b      	lsrs	r3, r3, #1
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	88fa      	ldrh	r2, [r7, #6]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d002      	beq.n	80043e0 <recv_read_file_record_res+0xca>
            return NMBS_ERROR_INVALID_RESPONSE;
 80043da:	f06f 0301 	mvn.w	r3, #1
 80043de:	e00e      	b.n	80043fe <recv_read_file_record_res+0xe8>

        swap_regs(subreq_record_data, subreq_data_size / 2);
 80043e0:	7d7b      	ldrb	r3, [r7, #21]
 80043e2:	085b      	lsrs	r3, r3, #1
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	4619      	mov	r1, r3
 80043ea:	6938      	ldr	r0, [r7, #16]
 80043ec:	f7ff fa32 	bl	8003854 <swap_regs>
        memcpy(registers, subreq_record_data, subreq_data_size);
 80043f0:	7d7b      	ldrb	r3, [r7, #21]
 80043f2:	461a      	mov	r2, r3
 80043f4:	6939      	ldr	r1, [r7, #16]
 80043f6:	68b8      	ldr	r0, [r7, #8]
 80043f8:	f001 fdee 	bl	8005fd8 <memcpy>
    }

    return NMBS_ERROR_NONE;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3718      	adds	r7, #24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <recv_write_file_record_res>:


nmbs_error recv_write_file_record_res(nmbs_t* nmbs, uint16_t file_number, uint16_t record_number,
                                      const uint16_t* registers, uint16_t count) {
 8004406:	b580      	push	{r7, lr}
 8004408:	b088      	sub	sp, #32
 800440a:	af00      	add	r7, sp, #0
 800440c:	60f8      	str	r0, [r7, #12]
 800440e:	607b      	str	r3, [r7, #4]
 8004410:	460b      	mov	r3, r1
 8004412:	817b      	strh	r3, [r7, #10]
 8004414:	4613      	mov	r3, r2
 8004416:	813b      	strh	r3, [r7, #8]
    nmbs_error err = recv_res_header(nmbs);
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f7ff fd17 	bl	8003e4c <recv_res_header>
 800441e:	4603      	mov	r3, r0
 8004420:	77fb      	strb	r3, [r7, #31]
    if (err != NMBS_ERROR_NONE)
 8004422:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <recv_write_file_record_res+0x2a>
        return err;
 800442a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800442e:	e079      	b.n	8004524 <recv_write_file_record_res+0x11e>

    err = recv(nmbs, 1);
 8004430:	2101      	movs	r1, #1
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f7ff fb06 	bl	8003a44 <recv>
 8004438:	4603      	mov	r3, r0
 800443a:	77fb      	strb	r3, [r7, #31]
    if (err != NMBS_ERROR_NONE)
 800443c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <recv_write_file_record_res+0x44>
        return err;
 8004444:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004448:	e06c      	b.n	8004524 <recv_write_file_record_res+0x11e>

    uint8_t response_size = get_1(nmbs);
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f7ff f904 	bl	8003658 <get_1>
 8004450:	4603      	mov	r3, r0
 8004452:	77bb      	strb	r3, [r7, #30]

    err = recv(nmbs, response_size);
 8004454:	7fbb      	ldrb	r3, [r7, #30]
 8004456:	b29b      	uxth	r3, r3
 8004458:	4619      	mov	r1, r3
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f7ff faf2 	bl	8003a44 <recv>
 8004460:	4603      	mov	r3, r0
 8004462:	77fb      	strb	r3, [r7, #31]
    if (err != NMBS_ERROR_NONE)
 8004464:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <recv_write_file_record_res+0x6c>
        return err;
 800446c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004470:	e058      	b.n	8004524 <recv_write_file_record_res+0x11e>

    uint8_t subreq_reference_type = get_1(nmbs);
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f7ff f8f0 	bl	8003658 <get_1>
 8004478:	4603      	mov	r3, r0
 800447a:	777b      	strb	r3, [r7, #29]
    uint16_t subreq_file_number = get_2(nmbs);
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f7ff f947 	bl	8003710 <get_2>
 8004482:	4603      	mov	r3, r0
 8004484:	837b      	strh	r3, [r7, #26]
    uint16_t subreq_record_number = get_2(nmbs);
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f7ff f942 	bl	8003710 <get_2>
 800448c:	4603      	mov	r3, r0
 800448e:	833b      	strh	r3, [r7, #24]
    uint16_t subreq_record_length = get_2(nmbs);
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f7ff f93d 	bl	8003710 <get_2>
 8004496:	4603      	mov	r3, r0
 8004498:	82fb      	strh	r3, [r7, #22]
    NMBS_DEBUG_PRINT("a %d\tr %d\tl %d\t fwrite ", subreq_file_number, subreq_record_number, subreq_record_length);

    uint16_t subreq_data_size = subreq_record_length * 2;
 800449a:	8afb      	ldrh	r3, [r7, #22]
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	82bb      	strh	r3, [r7, #20]
    uint16_t* subreq_record_data = (uint16_t*) get_n(nmbs, subreq_data_size);
 80044a0:	8abb      	ldrh	r3, [r7, #20]
 80044a2:	4619      	mov	r1, r3
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f7ff f97e 	bl	80037a6 <get_n>
 80044aa:	6138      	str	r0, [r7, #16]

    err = recv_msg_footer(nmbs);
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f7ff fb25 	bl	8003afc <recv_msg_footer>
 80044b2:	4603      	mov	r3, r0
 80044b4:	77fb      	strb	r3, [r7, #31]
    if (err != NMBS_ERROR_NONE)
 80044b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <recv_write_file_record_res+0xbe>
        return err;
 80044be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80044c2:	e02f      	b.n	8004524 <recv_write_file_record_res+0x11e>

    if (registers) {
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d02b      	beq.n	8004522 <recv_write_file_record_res+0x11c>
        if (subreq_reference_type != 6)
 80044ca:	7f7b      	ldrb	r3, [r7, #29]
 80044cc:	2b06      	cmp	r3, #6
 80044ce:	d002      	beq.n	80044d6 <recv_write_file_record_res+0xd0>
            return NMBS_ERROR_INVALID_RESPONSE;
 80044d0:	f06f 0301 	mvn.w	r3, #1
 80044d4:	e026      	b.n	8004524 <recv_write_file_record_res+0x11e>

        if (subreq_file_number != file_number)
 80044d6:	8b7a      	ldrh	r2, [r7, #26]
 80044d8:	897b      	ldrh	r3, [r7, #10]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d002      	beq.n	80044e4 <recv_write_file_record_res+0xde>
            return NMBS_ERROR_INVALID_RESPONSE;
 80044de:	f06f 0301 	mvn.w	r3, #1
 80044e2:	e01f      	b.n	8004524 <recv_write_file_record_res+0x11e>

        if (subreq_record_number != record_number)
 80044e4:	8b3a      	ldrh	r2, [r7, #24]
 80044e6:	893b      	ldrh	r3, [r7, #8]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d002      	beq.n	80044f2 <recv_write_file_record_res+0xec>
            return NMBS_ERROR_INVALID_RESPONSE;
 80044ec:	f06f 0301 	mvn.w	r3, #1
 80044f0:	e018      	b.n	8004524 <recv_write_file_record_res+0x11e>

        if (subreq_record_length != count)
 80044f2:	8afa      	ldrh	r2, [r7, #22]
 80044f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d002      	beq.n	8004500 <recv_write_file_record_res+0xfa>
            return NMBS_ERROR_INVALID_RESPONSE;
 80044fa:	f06f 0301 	mvn.w	r3, #1
 80044fe:	e011      	b.n	8004524 <recv_write_file_record_res+0x11e>

        swap_regs(subreq_record_data, subreq_record_length);
 8004500:	8afb      	ldrh	r3, [r7, #22]
 8004502:	4619      	mov	r1, r3
 8004504:	6938      	ldr	r0, [r7, #16]
 8004506:	f7ff f9a5 	bl	8003854 <swap_regs>
        if (memcmp(registers, subreq_record_data, subreq_data_size) != 0)
 800450a:	8abb      	ldrh	r3, [r7, #20]
 800450c:	461a      	mov	r2, r3
 800450e:	6939      	ldr	r1, [r7, #16]
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f001 fd25 	bl	8005f60 <memcmp>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <recv_write_file_record_res+0x11c>
            return NMBS_ERROR_INVALID_RESPONSE;
 800451c:	f06f 0301 	mvn.w	r3, #1
 8004520:	e000      	b.n	8004524 <recv_write_file_record_res+0x11e>
    }

    return NMBS_ERROR_NONE;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3720      	adds	r7, #32
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <handle_read_discrete>:


#ifndef NMBS_SERVER_DISABLED
#if !defined(NMBS_SERVER_READ_COILS_DISABLED) || !defined(NMBS_SERVER_READ_DISCRETE_INPUTS_DISABLED)
static nmbs_error handle_read_discrete(nmbs_t* nmbs,
                                       nmbs_error (*callback)(uint16_t, uint16_t, nmbs_bitfield, uint8_t, void*)) {
 800452c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800452e:	b0c7      	sub	sp, #284	; 0x11c
 8004530:	af02      	add	r7, sp, #8
 8004532:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004536:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800453a:	6018      	str	r0, [r3, #0]
 800453c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004540:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004544:	6019      	str	r1, [r3, #0]
    nmbs_error err = recv(nmbs, 4);
 8004546:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800454a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800454e:	2104      	movs	r1, #4
 8004550:	6818      	ldr	r0, [r3, #0]
 8004552:	f7ff fa77 	bl	8003a44 <recv>
 8004556:	4603      	mov	r3, r0
 8004558:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 800455c:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <handle_read_discrete+0x3e>
        return err;
 8004564:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004568:	e11d      	b.n	80047a6 <handle_read_discrete+0x27a>

    uint16_t address = get_2(nmbs);
 800456a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800456e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004572:	6818      	ldr	r0, [r3, #0]
 8004574:	f7ff f8cc 	bl	8003710 <get_2>
 8004578:	4603      	mov	r3, r0
 800457a:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    uint16_t quantity = get_2(nmbs);
 800457e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004582:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004586:	6818      	ldr	r0, [r3, #0]
 8004588:	f7ff f8c2 	bl	8003710 <get_2>
 800458c:	4603      	mov	r3, r0
 800458e:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106

    NMBS_DEBUG_PRINT("a %d\tq %d", address, quantity);

    err = recv_msg_footer(nmbs);
 8004592:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004596:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800459a:	6818      	ldr	r0, [r3, #0]
 800459c:	f7ff faae 	bl	8003afc <recv_msg_footer>
 80045a0:	4603      	mov	r3, r0
 80045a2:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 80045a6:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <handle_read_discrete+0x88>
        return err;
 80045ae:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80045b2:	e0f8      	b.n	80047a6 <handle_read_discrete+0x27a>

    if (!nmbs->msg.ignored) {
 80045b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80045b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 80045c2:	f083 0301 	eor.w	r3, r3, #1
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 80e1 	beq.w	8004790 <handle_read_discrete+0x264>
        if (quantity < 1 || quantity > 2000)
 80045ce:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d004      	beq.n	80045e0 <handle_read_discrete+0xb4>
 80045d6:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80045da:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80045de:	d909      	bls.n	80045f4 <handle_read_discrete+0xc8>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 80045e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80045e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80045e8:	2103      	movs	r1, #3
 80045ea:	6818      	ldr	r0, [r3, #0]
 80045ec:	f7ff fc0f 	bl	8003e0e <send_exception_msg>
 80045f0:	4603      	mov	r3, r0
 80045f2:	e0d8      	b.n	80047a6 <handle_read_discrete+0x27a>

        if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 80045f4:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 80045f8:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80045fc:	4413      	add	r3, r2
 80045fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004602:	d909      	bls.n	8004618 <handle_read_discrete+0xec>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8004604:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004608:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800460c:	2102      	movs	r1, #2
 800460e:	6818      	ldr	r0, [r3, #0]
 8004610:	f7ff fbfd 	bl	8003e0e <send_exception_msg>
 8004614:	4603      	mov	r3, r0
 8004616:	e0c6      	b.n	80047a6 <handle_read_discrete+0x27a>

        if (callback) {
 8004618:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800461c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 80aa 	beq.w	800477c <handle_read_discrete+0x250>
            nmbs_bitfield bitfield = {0};
 8004628:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800462c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004630:	2200      	movs	r2, #0
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	3304      	adds	r3, #4
 8004636:	22f6      	movs	r2, #246	; 0xf6
 8004638:	2100      	movs	r1, #0
 800463a:	4618      	mov	r0, r3
 800463c:	f001 fca0 	bl	8005f80 <memset>
            err = callback(address, quantity, bitfield, nmbs->msg.unit_id, nmbs->platform.arg);
 8004640:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004644:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f893 6106 	ldrb.w	r6, [r3, #262]	; 0x106
 800464e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004652:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800465c:	f107 0508 	add.w	r5, r7, #8
 8004660:	f8b7 1106 	ldrh.w	r1, [r7, #262]	; 0x106
 8004664:	f8b7 0108 	ldrh.w	r0, [r7, #264]	; 0x108
 8004668:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800466c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004670:	9200      	str	r2, [sp, #0]
 8004672:	681c      	ldr	r4, [r3, #0]
 8004674:	4633      	mov	r3, r6
 8004676:	462a      	mov	r2, r5
 8004678:	47a0      	blx	r4
 800467a:	4603      	mov	r3, r0
 800467c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
            if (err != NMBS_ERROR_NONE) {
 8004680:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004684:	2b00      	cmp	r3, #0
 8004686:	d01d      	beq.n	80046c4 <handle_read_discrete+0x198>
                if (nmbs_error_is_exception(err))
 8004688:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 800468c:	2b00      	cmp	r3, #0
 800468e:	dd0f      	ble.n	80046b0 <handle_read_discrete+0x184>
 8004690:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004694:	2b04      	cmp	r3, #4
 8004696:	dc0b      	bgt.n	80046b0 <handle_read_discrete+0x184>
                    return send_exception_msg(nmbs, err);
 8004698:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 800469c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80046a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80046a4:	4611      	mov	r1, r2
 80046a6:	6818      	ldr	r0, [r3, #0]
 80046a8:	f7ff fbb1 	bl	8003e0e <send_exception_msg>
 80046ac:	4603      	mov	r3, r0
 80046ae:	e07a      	b.n	80047a6 <handle_read_discrete+0x27a>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 80046b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80046b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80046b8:	2104      	movs	r1, #4
 80046ba:	6818      	ldr	r0, [r3, #0]
 80046bc:	f7ff fba7 	bl	8003e0e <send_exception_msg>
 80046c0:	4603      	mov	r3, r0
 80046c2:	e070      	b.n	80047a6 <handle_read_discrete+0x27a>
            }

            if (!nmbs->msg.broadcast) {
 80046c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80046c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 80046d2:	f083 0301 	eor.w	r3, r3, #1
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d063      	beq.n	80047a4 <handle_read_discrete+0x278>
                uint8_t discrete_bytes = (quantity + 7) / 8;
 80046dc:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80046e0:	3307      	adds	r3, #7
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	da00      	bge.n	80046e8 <handle_read_discrete+0x1bc>
 80046e6:	3307      	adds	r3, #7
 80046e8:	10db      	asrs	r3, r3, #3
 80046ea:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
                put_res_header(nmbs, 1 + discrete_bytes);
 80046ee:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	3301      	adds	r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80046fc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004700:	4611      	mov	r1, r2
 8004702:	6818      	ldr	r0, [r3, #0]
 8004704:	f7ff fb74 	bl	8003df0 <put_res_header>

                put_1(nmbs, discrete_bytes);
 8004708:	f897 2105 	ldrb.w	r2, [r7, #261]	; 0x105
 800470c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004710:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004714:	4611      	mov	r1, r2
 8004716:	6818      	ldr	r0, [r3, #0]
 8004718:	f7fe ffb8 	bl	800368c <put_1>

                NMBS_DEBUG_PRINT("b %d\t", discrete_bytes);

                NMBS_DEBUG_PRINT("coils ");
                for (int i = 0; i < discrete_bytes; i++) {
 800471c:	2300      	movs	r3, #0
 800471e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004722:	e014      	b.n	800474e <handle_read_discrete+0x222>
                    put_1(nmbs, bitfield[i]);
 8004724:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004728:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 800472c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004730:	4413      	add	r3, r2
 8004732:	781a      	ldrb	r2, [r3, #0]
 8004734:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004738:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800473c:	4611      	mov	r1, r2
 800473e:	6818      	ldr	r0, [r3, #0]
 8004740:	f7fe ffa4 	bl	800368c <put_1>
                for (int i = 0; i < discrete_bytes; i++) {
 8004744:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004748:	3301      	adds	r3, #1
 800474a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800474e:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8004752:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004756:	429a      	cmp	r2, r3
 8004758:	dbe4      	blt.n	8004724 <handle_read_discrete+0x1f8>
                    NMBS_DEBUG_PRINT("%d ", bitfield[i]);
                }

                err = send_msg(nmbs);
 800475a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800475e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004762:	6818      	ldr	r0, [r3, #0]
 8004764:	f7ff fae5 	bl	8003d32 <send_msg>
 8004768:	4603      	mov	r3, r0
 800476a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
                if (err != NMBS_ERROR_NONE)
 800476e:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004772:	2b00      	cmp	r3, #0
 8004774:	d016      	beq.n	80047a4 <handle_read_discrete+0x278>
                    return err;
 8004776:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 800477a:	e014      	b.n	80047a6 <handle_read_discrete+0x27a>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 800477c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004780:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004784:	2101      	movs	r1, #1
 8004786:	6818      	ldr	r0, [r3, #0]
 8004788:	f7ff fb41 	bl	8003e0e <send_exception_msg>
 800478c:	4603      	mov	r3, r0
 800478e:	e00a      	b.n	80047a6 <handle_read_discrete+0x27a>
        }
    }
    else {
        return recv_read_discrete_res(nmbs, NULL);
 8004790:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004794:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004798:	2100      	movs	r1, #0
 800479a:	6818      	ldr	r0, [r3, #0]
 800479c:	f7ff fbd1 	bl	8003f42 <recv_read_discrete_res>
 80047a0:	4603      	mov	r3, r0
 80047a2:	e000      	b.n	80047a6 <handle_read_discrete+0x27a>
    }

    return NMBS_ERROR_NONE;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080047b0 <handle_read_registers>:
#endif


#if !defined(NMBS_SERVER_READ_HOLDING_REGISTERS_DISABLED) || !defined(NMBS_SERVER_READ_INPUT_REGISTERS_DISABLED)
static nmbs_error handle_read_registers(nmbs_t* nmbs,
                                        nmbs_error (*callback)(uint16_t, uint16_t, uint16_t*, uint8_t, void*)) {
 80047b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047b2:	b0c7      	sub	sp, #284	; 0x11c
 80047b4:	af02      	add	r7, sp, #8
 80047b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80047ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80047be:	6018      	str	r0, [r3, #0]
 80047c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80047c4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80047c8:	6019      	str	r1, [r3, #0]
    nmbs_error err = recv(nmbs, 4);
 80047ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80047ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80047d2:	2104      	movs	r1, #4
 80047d4:	6818      	ldr	r0, [r3, #0]
 80047d6:	f7ff f935 	bl	8003a44 <recv>
 80047da:	4603      	mov	r3, r0
 80047dc:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 80047e0:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <handle_read_registers+0x3e>
        return err;
 80047e8:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80047ec:	e119      	b.n	8004a22 <handle_read_registers+0x272>

    uint16_t address = get_2(nmbs);
 80047ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80047f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80047f6:	6818      	ldr	r0, [r3, #0]
 80047f8:	f7fe ff8a 	bl	8003710 <get_2>
 80047fc:	4603      	mov	r3, r0
 80047fe:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    uint16_t quantity = get_2(nmbs);
 8004802:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004806:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800480a:	6818      	ldr	r0, [r3, #0]
 800480c:	f7fe ff80 	bl	8003710 <get_2>
 8004810:	4603      	mov	r3, r0
 8004812:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106

    NMBS_DEBUG_PRINT("a %d\tq %d", address, quantity);

    err = recv_msg_footer(nmbs);
 8004816:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800481a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800481e:	6818      	ldr	r0, [r3, #0]
 8004820:	f7ff f96c 	bl	8003afc <recv_msg_footer>
 8004824:	4603      	mov	r3, r0
 8004826:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 800482a:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 800482e:	2b00      	cmp	r3, #0
 8004830:	d002      	beq.n	8004838 <handle_read_registers+0x88>
        return err;
 8004832:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004836:	e0f4      	b.n	8004a22 <handle_read_registers+0x272>

    if (!nmbs->msg.ignored) {
 8004838:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800483c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8004846:	f083 0301 	eor.w	r3, r3, #1
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 80db 	beq.w	8004a08 <handle_read_registers+0x258>
        if (quantity < 1 || quantity > 125)
 8004852:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <handle_read_registers+0xb2>
 800485a:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 800485e:	2b7d      	cmp	r3, #125	; 0x7d
 8004860:	d909      	bls.n	8004876 <handle_read_registers+0xc6>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8004862:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004866:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800486a:	2103      	movs	r1, #3
 800486c:	6818      	ldr	r0, [r3, #0]
 800486e:	f7ff face 	bl	8003e0e <send_exception_msg>
 8004872:	4603      	mov	r3, r0
 8004874:	e0d5      	b.n	8004a22 <handle_read_registers+0x272>

        if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 8004876:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 800487a:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 800487e:	4413      	add	r3, r2
 8004880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004884:	d909      	bls.n	800489a <handle_read_registers+0xea>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8004886:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800488a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800488e:	2102      	movs	r1, #2
 8004890:	6818      	ldr	r0, [r3, #0]
 8004892:	f7ff fabc 	bl	8003e0e <send_exception_msg>
 8004896:	4603      	mov	r3, r0
 8004898:	e0c3      	b.n	8004a22 <handle_read_registers+0x272>

        if (callback) {
 800489a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800489e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 80a5 	beq.w	80049f4 <handle_read_registers+0x244>
            uint16_t regs[125] = {0};
 80048aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80048ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048b2:	4618      	mov	r0, r3
 80048b4:	23fa      	movs	r3, #250	; 0xfa
 80048b6:	461a      	mov	r2, r3
 80048b8:	2100      	movs	r1, #0
 80048ba:	f001 fb61 	bl	8005f80 <memset>
            err = callback(address, quantity, regs, nmbs->msg.unit_id, nmbs->platform.arg);
 80048be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80048c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f893 6106 	ldrb.w	r6, [r3, #262]	; 0x106
 80048cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80048d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80048da:	f107 0508 	add.w	r5, r7, #8
 80048de:	f8b7 1106 	ldrh.w	r1, [r7, #262]	; 0x106
 80048e2:	f8b7 0108 	ldrh.w	r0, [r7, #264]	; 0x108
 80048e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80048ea:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80048ee:	9200      	str	r2, [sp, #0]
 80048f0:	681c      	ldr	r4, [r3, #0]
 80048f2:	4633      	mov	r3, r6
 80048f4:	462a      	mov	r2, r5
 80048f6:	47a0      	blx	r4
 80048f8:	4603      	mov	r3, r0
 80048fa:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
            if (err != NMBS_ERROR_NONE) {
 80048fe:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004902:	2b00      	cmp	r3, #0
 8004904:	d01d      	beq.n	8004942 <handle_read_registers+0x192>
                if (nmbs_error_is_exception(err))
 8004906:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 800490a:	2b00      	cmp	r3, #0
 800490c:	dd0f      	ble.n	800492e <handle_read_registers+0x17e>
 800490e:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004912:	2b04      	cmp	r3, #4
 8004914:	dc0b      	bgt.n	800492e <handle_read_registers+0x17e>
                    return send_exception_msg(nmbs, err);
 8004916:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 800491a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800491e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004922:	4611      	mov	r1, r2
 8004924:	6818      	ldr	r0, [r3, #0]
 8004926:	f7ff fa72 	bl	8003e0e <send_exception_msg>
 800492a:	4603      	mov	r3, r0
 800492c:	e079      	b.n	8004a22 <handle_read_registers+0x272>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 800492e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004932:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004936:	2104      	movs	r1, #4
 8004938:	6818      	ldr	r0, [r3, #0]
 800493a:	f7ff fa68 	bl	8003e0e <send_exception_msg>
 800493e:	4603      	mov	r3, r0
 8004940:	e06f      	b.n	8004a22 <handle_read_registers+0x272>
            }

            if (!nmbs->msg.broadcast) {
 8004942:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004946:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8004950:	f083 0301 	eor.w	r3, r3, #1
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d062      	beq.n	8004a20 <handle_read_registers+0x270>
                uint8_t regs_bytes = quantity * 2;
 800495a:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 800495e:	b2db      	uxtb	r3, r3
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
                put_res_header(nmbs, 1 + regs_bytes);
 8004966:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 800496a:	b29b      	uxth	r3, r3
 800496c:	3301      	adds	r3, #1
 800496e:	b29a      	uxth	r2, r3
 8004970:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004974:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004978:	4611      	mov	r1, r2
 800497a:	6818      	ldr	r0, [r3, #0]
 800497c:	f7ff fa38 	bl	8003df0 <put_res_header>

                put_1(nmbs, regs_bytes);
 8004980:	f897 2105 	ldrb.w	r2, [r7, #261]	; 0x105
 8004984:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004988:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800498c:	4611      	mov	r1, r2
 800498e:	6818      	ldr	r0, [r3, #0]
 8004990:	f7fe fe7c 	bl	800368c <put_1>

                NMBS_DEBUG_PRINT("b %d\t", regs_bytes);

                NMBS_DEBUG_PRINT("regs ");
                for (int i = 0; i < quantity; i++) {
 8004994:	2300      	movs	r3, #0
 8004996:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800499a:	e014      	b.n	80049c6 <handle_read_registers+0x216>
                    put_2(nmbs, regs[i]);
 800499c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80049a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049a4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80049a8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80049ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80049b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80049b4:	4611      	mov	r1, r2
 80049b6:	6818      	ldr	r0, [r3, #0]
 80049b8:	f7fe fecf 	bl	800375a <put_2>
                for (int i = 0; i < quantity; i++) {
 80049bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049c0:	3301      	adds	r3, #1
 80049c2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80049c6:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80049ca:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80049ce:	429a      	cmp	r2, r3
 80049d0:	dbe4      	blt.n	800499c <handle_read_registers+0x1ec>
                    NMBS_DEBUG_PRINT("%d ", regs[i]);
                }

                err = send_msg(nmbs);
 80049d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80049d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80049da:	6818      	ldr	r0, [r3, #0]
 80049dc:	f7ff f9a9 	bl	8003d32 <send_msg>
 80049e0:	4603      	mov	r3, r0
 80049e2:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
                if (err != NMBS_ERROR_NONE)
 80049e6:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d018      	beq.n	8004a20 <handle_read_registers+0x270>
                    return err;
 80049ee:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80049f2:	e016      	b.n	8004a22 <handle_read_registers+0x272>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 80049f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80049f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80049fc:	2101      	movs	r1, #1
 80049fe:	6818      	ldr	r0, [r3, #0]
 8004a00:	f7ff fa05 	bl	8003e0e <send_exception_msg>
 8004a04:	4603      	mov	r3, r0
 8004a06:	e00c      	b.n	8004a22 <handle_read_registers+0x272>
        }
    }
    else {
        return recv_read_registers_res(nmbs, quantity, NULL);
 8004a08:	f8b7 1106 	ldrh.w	r1, [r7, #262]	; 0x106
 8004a0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004a10:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a14:	2200      	movs	r2, #0
 8004a16:	6818      	ldr	r0, [r3, #0]
 8004a18:	f7ff faed 	bl	8003ff6 <recv_read_registers_res>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	e000      	b.n	8004a22 <handle_read_registers+0x272>
    }

    return NMBS_ERROR_NONE;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a2c <handle_read_coils>:
#endif


#ifndef NMBS_SERVER_READ_COILS_DISABLED
static nmbs_error handle_read_coils(nmbs_t* nmbs) {
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
    return handle_read_discrete(nmbs, nmbs->callbacks.read_coils);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f7ff fd75 	bl	800452c <handle_read_discrete>
 8004a42:	4603      	mov	r3, r0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3708      	adds	r7, #8
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <handle_read_discrete_inputs>:
#endif


#ifndef NMBS_SERVER_READ_DISCRETE_INPUTS_DISABLED
static nmbs_error handle_read_discrete_inputs(nmbs_t* nmbs) {
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
    return handle_read_discrete(nmbs, nmbs->callbacks.read_discrete_inputs);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f7ff fd65 	bl	800452c <handle_read_discrete>
 8004a62:	4603      	mov	r3, r0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <handle_read_holding_registers>:
#endif


#ifndef NMBS_SERVER_READ_HOLDING_REGISTERS_DISABLED
static nmbs_error handle_read_holding_registers(nmbs_t* nmbs) {
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
    return handle_read_registers(nmbs, nmbs->callbacks.read_holding_registers);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7ff fe97 	bl	80047b0 <handle_read_registers>
 8004a82:	4603      	mov	r3, r0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3708      	adds	r7, #8
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <handle_read_input_registers>:
#endif


#ifndef NMBS_SERVER_READ_INPUT_REGISTERS_DISABLED
static nmbs_error handle_read_input_registers(nmbs_t* nmbs) {
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
    return handle_read_registers(nmbs, nmbs->callbacks.read_input_registers);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7ff fe87 	bl	80047b0 <handle_read_registers>
 8004aa2:	4603      	mov	r3, r0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3708      	adds	r7, #8
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <handle_write_single_coil>:
#endif


#ifndef NMBS_SERVER_WRITE_SINGLE_COIL_DISABLED
static nmbs_error handle_write_single_coil(nmbs_t* nmbs) {
 8004aac:	b590      	push	{r4, r7, lr}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
    nmbs_error err = recv(nmbs, 4);
 8004ab4:	2104      	movs	r1, #4
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7fe ffc4 	bl	8003a44 <recv>
 8004abc:	4603      	mov	r3, r0
 8004abe:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8004ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d002      	beq.n	8004ace <handle_write_single_coil+0x22>
        return err;
 8004ac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004acc:	e08c      	b.n	8004be8 <handle_write_single_coil+0x13c>

    uint16_t address = get_2(nmbs);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7fe fe1e 	bl	8003710 <get_2>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	81bb      	strh	r3, [r7, #12]
    uint16_t value = get_2(nmbs);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f7fe fe19 	bl	8003710 <get_2>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	817b      	strh	r3, [r7, #10]

    NMBS_DEBUG_PRINT("a %d\tvalue %d", address, value);

    err = recv_msg_footer(nmbs);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7ff f80a 	bl	8003afc <recv_msg_footer>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8004aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d002      	beq.n	8004afa <handle_write_single_coil+0x4e>
        return err;
 8004af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004af8:	e076      	b.n	8004be8 <handle_write_single_coil+0x13c>

    if (!nmbs->msg.ignored) {
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8004b00:	f083 0301 	eor.w	r3, r3, #1
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d065      	beq.n	8004bd6 <handle_write_single_coil+0x12a>
        if (nmbs->callbacks.write_single_coil) {
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d05a      	beq.n	8004bca <handle_write_single_coil+0x11e>
            if (value != 0 && value != 0xFF00)
 8004b14:	897b      	ldrh	r3, [r7, #10]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d009      	beq.n	8004b2e <handle_write_single_coil+0x82>
 8004b1a:	897b      	ldrh	r3, [r7, #10]
 8004b1c:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8004b20:	d005      	beq.n	8004b2e <handle_write_single_coil+0x82>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8004b22:	2103      	movs	r1, #3
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7ff f972 	bl	8003e0e <send_exception_msg>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	e05c      	b.n	8004be8 <handle_write_single_coil+0x13c>

            err = nmbs->callbacks.write_single_coil(address, value == 0 ? false : true, nmbs->msg.unit_id,
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f8d3 411c 	ldr.w	r4, [r3, #284]	; 0x11c
 8004b34:	897b      	ldrh	r3, [r7, #10]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	bf14      	ite	ne
 8004b3a:	2301      	movne	r3, #1
 8004b3c:	2300      	moveq	r3, #0
 8004b3e:	b2d9      	uxtb	r1, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8004b4c:	89b8      	ldrh	r0, [r7, #12]
 8004b4e:	47a0      	blx	r4
 8004b50:	4603      	mov	r3, r0
 8004b52:	73fb      	strb	r3, [r7, #15]
                                                    nmbs->platform.arg);
            if (err != NMBS_ERROR_NONE) {
 8004b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d014      	beq.n	8004b86 <handle_write_single_coil+0xda>
                if (nmbs_error_is_exception(err))
 8004b5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	dd0a      	ble.n	8004b7a <handle_write_single_coil+0xce>
 8004b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	dc06      	bgt.n	8004b7a <handle_write_single_coil+0xce>
                    return send_exception_msg(nmbs, err);
 8004b6c:	7bfb      	ldrb	r3, [r7, #15]
 8004b6e:	4619      	mov	r1, r3
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7ff f94c 	bl	8003e0e <send_exception_msg>
 8004b76:	4603      	mov	r3, r0
 8004b78:	e036      	b.n	8004be8 <handle_write_single_coil+0x13c>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8004b7a:	2104      	movs	r1, #4
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7ff f946 	bl	8003e0e <send_exception_msg>
 8004b82:	4603      	mov	r3, r0
 8004b84:	e030      	b.n	8004be8 <handle_write_single_coil+0x13c>
            }

            if (!nmbs->msg.broadcast) {
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8004b8c:	f083 0301 	eor.w	r3, r3, #1
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d027      	beq.n	8004be6 <handle_write_single_coil+0x13a>
                put_res_header(nmbs, 4);
 8004b96:	2104      	movs	r1, #4
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7ff f929 	bl	8003df0 <put_res_header>

                put_2(nmbs, address);
 8004b9e:	89bb      	ldrh	r3, [r7, #12]
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7fe fdd9 	bl	800375a <put_2>
                put_2(nmbs, value);
 8004ba8:	897b      	ldrh	r3, [r7, #10]
 8004baa:	4619      	mov	r1, r3
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f7fe fdd4 	bl	800375a <put_2>
                NMBS_DEBUG_PRINT("a %d\tvalue %d", address, value);

                err = send_msg(nmbs);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7ff f8bd 	bl	8003d32 <send_msg>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	73fb      	strb	r3, [r7, #15]
                if (err != NMBS_ERROR_NONE)
 8004bbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d010      	beq.n	8004be6 <handle_write_single_coil+0x13a>
                    return err;
 8004bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bc8:	e00e      	b.n	8004be8 <handle_write_single_coil+0x13c>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8004bca:	2101      	movs	r1, #1
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7ff f91e 	bl	8003e0e <send_exception_msg>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	e008      	b.n	8004be8 <handle_write_single_coil+0x13c>
        }
    }
    else {
        return recv_write_single_coil_res(nmbs, address, value);
 8004bd6:	897a      	ldrh	r2, [r7, #10]
 8004bd8:	89bb      	ldrh	r3, [r7, #12]
 8004bda:	4619      	mov	r1, r3
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7ff fa72 	bl	80040c6 <recv_write_single_coil_res>
 8004be2:	4603      	mov	r3, r0
 8004be4:	e000      	b.n	8004be8 <handle_write_single_coil+0x13c>
    }

    return NMBS_ERROR_NONE;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd90      	pop	{r4, r7, pc}

08004bf0 <handle_write_single_register>:
#endif


#ifndef NMBS_SERVER_WRITE_SINGLE_REGISTER_DISABLED
static nmbs_error handle_write_single_register(nmbs_t* nmbs) {
 8004bf0:	b590      	push	{r4, r7, lr}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
    nmbs_error err = recv(nmbs, 4);
 8004bf8:	2104      	movs	r1, #4
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7fe ff22 	bl	8003a44 <recv>
 8004c00:	4603      	mov	r3, r0
 8004c02:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8004c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <handle_write_single_register+0x22>
        return err;
 8004c0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c10:	e07a      	b.n	8004d08 <handle_write_single_register+0x118>

    uint16_t address = get_2(nmbs);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7fe fd7c 	bl	8003710 <get_2>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	81bb      	strh	r3, [r7, #12]
    uint16_t value = get_2(nmbs);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7fe fd77 	bl	8003710 <get_2>
 8004c22:	4603      	mov	r3, r0
 8004c24:	817b      	strh	r3, [r7, #10]

    NMBS_DEBUG_PRINT("a %d\tvalue %d", address, value);

    err = recv_msg_footer(nmbs);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7fe ff68 	bl	8003afc <recv_msg_footer>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8004c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d002      	beq.n	8004c3e <handle_write_single_register+0x4e>
        return err;
 8004c38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c3c:	e064      	b.n	8004d08 <handle_write_single_register+0x118>

    if (!nmbs->msg.ignored) {
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8004c44:	f083 0301 	eor.w	r3, r3, #1
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d053      	beq.n	8004cf6 <handle_write_single_register+0x106>
        if (nmbs->callbacks.write_single_register) {
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d048      	beq.n	8004cea <handle_write_single_register+0xfa>
            err = nmbs->callbacks.write_single_register(address, value, nmbs->msg.unit_id, nmbs->platform.arg);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8004c6a:	8979      	ldrh	r1, [r7, #10]
 8004c6c:	89b8      	ldrh	r0, [r7, #12]
 8004c6e:	47a0      	blx	r4
 8004c70:	4603      	mov	r3, r0
 8004c72:	73fb      	strb	r3, [r7, #15]
            if (err != NMBS_ERROR_NONE) {
 8004c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d014      	beq.n	8004ca6 <handle_write_single_register+0xb6>
                if (nmbs_error_is_exception(err))
 8004c7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	dd0a      	ble.n	8004c9a <handle_write_single_register+0xaa>
 8004c84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c88:	2b04      	cmp	r3, #4
 8004c8a:	dc06      	bgt.n	8004c9a <handle_write_single_register+0xaa>
                    return send_exception_msg(nmbs, err);
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
 8004c8e:	4619      	mov	r1, r3
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff f8bc 	bl	8003e0e <send_exception_msg>
 8004c96:	4603      	mov	r3, r0
 8004c98:	e036      	b.n	8004d08 <handle_write_single_register+0x118>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8004c9a:	2104      	movs	r1, #4
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f7ff f8b6 	bl	8003e0e <send_exception_msg>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	e030      	b.n	8004d08 <handle_write_single_register+0x118>
            }

            if (!nmbs->msg.broadcast) {
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8004cac:	f083 0301 	eor.w	r3, r3, #1
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d027      	beq.n	8004d06 <handle_write_single_register+0x116>
                put_res_header(nmbs, 4);
 8004cb6:	2104      	movs	r1, #4
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7ff f899 	bl	8003df0 <put_res_header>

                put_2(nmbs, address);
 8004cbe:	89bb      	ldrh	r3, [r7, #12]
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7fe fd49 	bl	800375a <put_2>
                put_2(nmbs, value);
 8004cc8:	897b      	ldrh	r3, [r7, #10]
 8004cca:	4619      	mov	r1, r3
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7fe fd44 	bl	800375a <put_2>
                NMBS_DEBUG_PRINT("a %d\tvalue %d", address, value);

                err = send_msg(nmbs);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7ff f82d 	bl	8003d32 <send_msg>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	73fb      	strb	r3, [r7, #15]
                if (err != NMBS_ERROR_NONE)
 8004cdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d010      	beq.n	8004d06 <handle_write_single_register+0x116>
                    return err;
 8004ce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ce8:	e00e      	b.n	8004d08 <handle_write_single_register+0x118>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8004cea:	2101      	movs	r1, #1
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7ff f88e 	bl	8003e0e <send_exception_msg>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	e008      	b.n	8004d08 <handle_write_single_register+0x118>
        }
    }
    else {
        return recv_write_single_register_res(nmbs, address, value);
 8004cf6:	897a      	ldrh	r2, [r7, #10]
 8004cf8:	89bb      	ldrh	r3, [r7, #12]
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f7ff fa2c 	bl	800415a <recv_write_single_register_res>
 8004d02:	4603      	mov	r3, r0
 8004d04:	e000      	b.n	8004d08 <handle_write_single_register+0x118>
    }

    return NMBS_ERROR_NONE;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3714      	adds	r7, #20
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd90      	pop	{r4, r7, pc}

08004d10 <handle_write_multiple_coils>:
#endif


#ifndef NMBS_SERVER_WRITE_MULTIPLE_COILS_DISABLED
static nmbs_error handle_write_multiple_coils(nmbs_t* nmbs) {
 8004d10:	b5b0      	push	{r4, r5, r7, lr}
 8004d12:	b0c6      	sub	sp, #280	; 0x118
 8004d14:	af02      	add	r7, sp, #8
 8004d16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d1a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d1e:	6018      	str	r0, [r3, #0]
    nmbs_error err = recv(nmbs, 5);
 8004d20:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d24:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d28:	2105      	movs	r1, #5
 8004d2a:	6818      	ldr	r0, [r3, #0]
 8004d2c:	f7fe fe8a 	bl	8003a44 <recv>
 8004d30:	4603      	mov	r3, r0
 8004d32:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8004d36:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <handle_write_multiple_coils+0x34>
        return err;
 8004d3e:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004d42:	e163      	b.n	800500c <handle_write_multiple_coils+0x2fc>

    uint16_t address = get_2(nmbs);
 8004d44:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d48:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d4c:	6818      	ldr	r0, [r3, #0]
 8004d4e:	f7fe fcdf 	bl	8003710 <get_2>
 8004d52:	4603      	mov	r3, r0
 8004d54:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    uint16_t quantity = get_2(nmbs);
 8004d58:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d5c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d60:	6818      	ldr	r0, [r3, #0]
 8004d62:	f7fe fcd5 	bl	8003710 <get_2>
 8004d66:	4603      	mov	r3, r0
 8004d68:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
    uint8_t coils_bytes = get_1(nmbs);
 8004d6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d70:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d74:	6818      	ldr	r0, [r3, #0]
 8004d76:	f7fe fc6f 	bl	8003658 <get_1>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105

    NMBS_DEBUG_PRINT("a %d\tq %d\tb %d\tcoils ", address, quantity, coils_bytes);

    err = recv(nmbs, coils_bytes);
 8004d80:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d8a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d8e:	4611      	mov	r1, r2
 8004d90:	6818      	ldr	r0, [r3, #0]
 8004d92:	f7fe fe57 	bl	8003a44 <recv>
 8004d96:	4603      	mov	r3, r0
 8004d98:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8004d9c:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d002      	beq.n	8004daa <handle_write_multiple_coils+0x9a>
        return err;
 8004da4:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004da8:	e130      	b.n	800500c <handle_write_multiple_coils+0x2fc>

    nmbs_bitfield coils = {0};
 8004daa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004dae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	3304      	adds	r3, #4
 8004db8:	22f6      	movs	r2, #246	; 0xf6
 8004dba:	2100      	movs	r1, #0
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f001 f8df 	bl	8005f80 <memset>
    for (int i = 0; i < coils_bytes; i++) {
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004dc8:	e016      	b.n	8004df8 <handle_write_multiple_coils+0xe8>
        coils[i] = get_1(nmbs);
 8004dca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004dce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004dd2:	6818      	ldr	r0, [r3, #0]
 8004dd4:	f7fe fc40 	bl	8003658 <get_1>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	4619      	mov	r1, r3
 8004ddc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004de0:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8004de4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004de8:	4413      	add	r3, r2
 8004dea:	460a      	mov	r2, r1
 8004dec:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < coils_bytes; i++) {
 8004dee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004df2:	3301      	adds	r3, #1
 8004df4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004df8:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8004dfc:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004e00:	429a      	cmp	r2, r3
 8004e02:	dbe2      	blt.n	8004dca <handle_write_multiple_coils+0xba>
        NMBS_DEBUG_PRINT("%d ", coils[i]);
    }

    err = recv_msg_footer(nmbs);
 8004e04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e08:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e0c:	6818      	ldr	r0, [r3, #0]
 8004e0e:	f7fe fe75 	bl	8003afc <recv_msg_footer>
 8004e12:	4603      	mov	r3, r0
 8004e14:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8004e18:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d002      	beq.n	8004e26 <handle_write_multiple_coils+0x116>
        return err;
 8004e20:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004e24:	e0f2      	b.n	800500c <handle_write_multiple_coils+0x2fc>

    if (!nmbs->msg.ignored) {
 8004e26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8004e34:	f083 0301 	eor.w	r3, r3, #1
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 80d8 	beq.w	8004ff0 <handle_write_multiple_coils+0x2e0>
        if (quantity < 1 || quantity > 0x07B0)
 8004e40:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d004      	beq.n	8004e52 <handle_write_multiple_coils+0x142>
 8004e48:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8004e4c:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 8004e50:	d909      	bls.n	8004e66 <handle_write_multiple_coils+0x156>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8004e52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e56:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e5a:	2103      	movs	r1, #3
 8004e5c:	6818      	ldr	r0, [r3, #0]
 8004e5e:	f7fe ffd6 	bl	8003e0e <send_exception_msg>
 8004e62:	4603      	mov	r3, r0
 8004e64:	e0d2      	b.n	800500c <handle_write_multiple_coils+0x2fc>

        if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 8004e66:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 8004e6a:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8004e6e:	4413      	add	r3, r2
 8004e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e74:	d909      	bls.n	8004e8a <handle_write_multiple_coils+0x17a>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8004e76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e7a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e7e:	2102      	movs	r1, #2
 8004e80:	6818      	ldr	r0, [r3, #0]
 8004e82:	f7fe ffc4 	bl	8003e0e <send_exception_msg>
 8004e86:	4603      	mov	r3, r0
 8004e88:	e0c0      	b.n	800500c <handle_write_multiple_coils+0x2fc>

        if (coils_bytes == 0)
 8004e8a:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d109      	bne.n	8004ea6 <handle_write_multiple_coils+0x196>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8004e92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e96:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e9a:	2103      	movs	r1, #3
 8004e9c:	6818      	ldr	r0, [r3, #0]
 8004e9e:	f7fe ffb6 	bl	8003e0e <send_exception_msg>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	e0b2      	b.n	800500c <handle_write_multiple_coils+0x2fc>

        if ((quantity + 7) / 8 != coils_bytes)
 8004ea6:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8004eaa:	3307      	adds	r3, #7
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	da00      	bge.n	8004eb2 <handle_write_multiple_coils+0x1a2>
 8004eb0:	3307      	adds	r3, #7
 8004eb2:	10db      	asrs	r3, r3, #3
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d009      	beq.n	8004ed2 <handle_write_multiple_coils+0x1c2>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8004ebe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ec2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ec6:	2103      	movs	r1, #3
 8004ec8:	6818      	ldr	r0, [r3, #0]
 8004eca:	f7fe ffa0 	bl	8003e0e <send_exception_msg>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	e09c      	b.n	800500c <handle_write_multiple_coils+0x2fc>

        if (nmbs->callbacks.write_multiple_coils) {
 8004ed2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ed6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d07b      	beq.n	8004fdc <handle_write_multiple_coils+0x2cc>
            err = nmbs->callbacks.write_multiple_coils(address, quantity, coils, nmbs->msg.unit_id, nmbs->platform.arg);
 8004ee4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ee8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f8d3 4124 	ldr.w	r4, [r3, #292]	; 0x124
 8004ef2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ef6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f893 5106 	ldrb.w	r5, [r3, #262]	; 0x106
 8004f00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f04:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8004f0e:	f107 0208 	add.w	r2, r7, #8
 8004f12:	f8b7 1106 	ldrh.w	r1, [r7, #262]	; 0x106
 8004f16:	f8b7 0108 	ldrh.w	r0, [r7, #264]	; 0x108
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	462b      	mov	r3, r5
 8004f1e:	47a0      	blx	r4
 8004f20:	4603      	mov	r3, r0
 8004f22:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
            if (err != NMBS_ERROR_NONE) {
 8004f26:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d01d      	beq.n	8004f6a <handle_write_multiple_coils+0x25a>
                if (nmbs_error_is_exception(err))
 8004f2e:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	dd0f      	ble.n	8004f56 <handle_write_multiple_coils+0x246>
 8004f36:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004f3a:	2b04      	cmp	r3, #4
 8004f3c:	dc0b      	bgt.n	8004f56 <handle_write_multiple_coils+0x246>
                    return send_exception_msg(nmbs, err);
 8004f3e:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 8004f42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f46:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f4a:	4611      	mov	r1, r2
 8004f4c:	6818      	ldr	r0, [r3, #0]
 8004f4e:	f7fe ff5e 	bl	8003e0e <send_exception_msg>
 8004f52:	4603      	mov	r3, r0
 8004f54:	e05a      	b.n	800500c <handle_write_multiple_coils+0x2fc>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8004f56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f5a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f5e:	2104      	movs	r1, #4
 8004f60:	6818      	ldr	r0, [r3, #0]
 8004f62:	f7fe ff54 	bl	8003e0e <send_exception_msg>
 8004f66:	4603      	mov	r3, r0
 8004f68:	e050      	b.n	800500c <handle_write_multiple_coils+0x2fc>
            }

            if (!nmbs->msg.broadcast) {
 8004f6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f6e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8004f78:	f083 0301 	eor.w	r3, r3, #1
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d043      	beq.n	800500a <handle_write_multiple_coils+0x2fa>
                put_res_header(nmbs, 4);
 8004f82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f86:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f8a:	2104      	movs	r1, #4
 8004f8c:	6818      	ldr	r0, [r3, #0]
 8004f8e:	f7fe ff2f 	bl	8003df0 <put_res_header>

                put_2(nmbs, address);
 8004f92:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 8004f96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f9a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f9e:	4611      	mov	r1, r2
 8004fa0:	6818      	ldr	r0, [r3, #0]
 8004fa2:	f7fe fbda 	bl	800375a <put_2>
                put_2(nmbs, quantity);
 8004fa6:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 8004faa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004fae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004fb2:	4611      	mov	r1, r2
 8004fb4:	6818      	ldr	r0, [r3, #0]
 8004fb6:	f7fe fbd0 	bl	800375a <put_2>
                NMBS_DEBUG_PRINT("a %d\tq %d", address, quantity);

                err = send_msg(nmbs);
 8004fba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004fbe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004fc2:	6818      	ldr	r0, [r3, #0]
 8004fc4:	f7fe feb5 	bl	8003d32 <send_msg>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
                if (err != NMBS_ERROR_NONE)
 8004fce:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d019      	beq.n	800500a <handle_write_multiple_coils+0x2fa>
                    return err;
 8004fd6:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8004fda:	e017      	b.n	800500c <handle_write_multiple_coils+0x2fc>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8004fdc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004fe0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	6818      	ldr	r0, [r3, #0]
 8004fe8:	f7fe ff11 	bl	8003e0e <send_exception_msg>
 8004fec:	4603      	mov	r3, r0
 8004fee:	e00d      	b.n	800500c <handle_write_multiple_coils+0x2fc>
        }
    }
    else {
        return recv_write_multiple_coils_res(nmbs, address, quantity);
 8004ff0:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 8004ff4:	f8b7 1108 	ldrh.w	r1, [r7, #264]	; 0x108
 8004ff8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ffc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005000:	6818      	ldr	r0, [r3, #0]
 8005002:	f7ff f8f4 	bl	80041ee <recv_write_multiple_coils_res>
 8005006:	4603      	mov	r3, r0
 8005008:	e000      	b.n	800500c <handle_write_multiple_coils+0x2fc>
    }

    return NMBS_ERROR_NONE;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005012:	46bd      	mov	sp, r7
 8005014:	bdb0      	pop	{r4, r5, r7, pc}

08005016 <handle_write_multiple_registers>:
#endif


#ifndef NMBS_SERVER_WRITE_MULTIPLE_REGISTERS_DISABLED
static nmbs_error handle_write_multiple_registers(nmbs_t* nmbs) {
 8005016:	b5b0      	push	{r4, r5, r7, lr}
 8005018:	b0c6      	sub	sp, #280	; 0x118
 800501a:	af02      	add	r7, sp, #8
 800501c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005020:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005024:	6018      	str	r0, [r3, #0]
    nmbs_error err = recv(nmbs, 5);
 8005026:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800502a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800502e:	2105      	movs	r1, #5
 8005030:	6818      	ldr	r0, [r3, #0]
 8005032:	f7fe fd07 	bl	8003a44 <recv>
 8005036:	4603      	mov	r3, r0
 8005038:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 800503c:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <handle_write_multiple_registers+0x34>
        return err;
 8005044:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8005048:	e153      	b.n	80052f2 <handle_write_multiple_registers+0x2dc>

    uint16_t address = get_2(nmbs);
 800504a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800504e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005052:	6818      	ldr	r0, [r3, #0]
 8005054:	f7fe fb5c 	bl	8003710 <get_2>
 8005058:	4603      	mov	r3, r0
 800505a:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    uint16_t quantity = get_2(nmbs);
 800505e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005062:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005066:	6818      	ldr	r0, [r3, #0]
 8005068:	f7fe fb52 	bl	8003710 <get_2>
 800506c:	4603      	mov	r3, r0
 800506e:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
    uint8_t registers_bytes = get_1(nmbs);
 8005072:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005076:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800507a:	6818      	ldr	r0, [r3, #0]
 800507c:	f7fe faec 	bl	8003658 <get_1>
 8005080:	4603      	mov	r3, r0
 8005082:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105

    NMBS_DEBUG_PRINT("a %d\tq %d\tb %d\tregs ", address, quantity, registers_bytes);

    err = recv(nmbs, registers_bytes);
 8005086:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 800508a:	b29a      	uxth	r2, r3
 800508c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005090:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005094:	4611      	mov	r1, r2
 8005096:	6818      	ldr	r0, [r3, #0]
 8005098:	f7fe fcd4 	bl	8003a44 <recv>
 800509c:	4603      	mov	r3, r0
 800509e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 80050a2:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d002      	beq.n	80050b0 <handle_write_multiple_registers+0x9a>
        return err;
 80050aa:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80050ae:	e120      	b.n	80052f2 <handle_write_multiple_registers+0x2dc>

    uint16_t registers[0x007B];
    for (int i = 0; i < registers_bytes / 2; i++) {
 80050b0:	2300      	movs	r3, #0
 80050b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80050b6:	e015      	b.n	80050e4 <handle_write_multiple_registers+0xce>
        registers[i] = get_2(nmbs);
 80050b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80050bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80050c0:	6818      	ldr	r0, [r3, #0]
 80050c2:	f7fe fb25 	bl	8003710 <get_2>
 80050c6:	4603      	mov	r3, r0
 80050c8:	4619      	mov	r1, r3
 80050ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80050ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050d2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80050d6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 0; i < registers_bytes / 2; i++) {
 80050da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050de:	3301      	adds	r3, #1
 80050e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80050e4:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80050e8:	085b      	lsrs	r3, r3, #1
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	461a      	mov	r2, r3
 80050ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050f2:	4293      	cmp	r3, r2
 80050f4:	dbe0      	blt.n	80050b8 <handle_write_multiple_registers+0xa2>
        NMBS_DEBUG_PRINT("%d ", registers[i]);
    }

    err = recv_msg_footer(nmbs);
 80050f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80050fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80050fe:	6818      	ldr	r0, [r3, #0]
 8005100:	f7fe fcfc 	bl	8003afc <recv_msg_footer>
 8005104:	4603      	mov	r3, r0
 8005106:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 800510a:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 800510e:	2b00      	cmp	r3, #0
 8005110:	d002      	beq.n	8005118 <handle_write_multiple_registers+0x102>
        return err;
 8005112:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8005116:	e0ec      	b.n	80052f2 <handle_write_multiple_registers+0x2dc>

    if (!nmbs->msg.ignored) {
 8005118:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800511c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8005126:	f083 0301 	eor.w	r3, r3, #1
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 80d2 	beq.w	80052d6 <handle_write_multiple_registers+0x2c0>
        if (quantity < 1 || quantity > 0x007B)
 8005132:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <handle_write_multiple_registers+0x12c>
 800513a:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 800513e:	2b7b      	cmp	r3, #123	; 0x7b
 8005140:	d909      	bls.n	8005156 <handle_write_multiple_registers+0x140>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8005142:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005146:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800514a:	2103      	movs	r1, #3
 800514c:	6818      	ldr	r0, [r3, #0]
 800514e:	f7fe fe5e 	bl	8003e0e <send_exception_msg>
 8005152:	4603      	mov	r3, r0
 8005154:	e0cd      	b.n	80052f2 <handle_write_multiple_registers+0x2dc>

        if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 8005156:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 800515a:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 800515e:	4413      	add	r3, r2
 8005160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005164:	d909      	bls.n	800517a <handle_write_multiple_registers+0x164>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8005166:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800516a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800516e:	2102      	movs	r1, #2
 8005170:	6818      	ldr	r0, [r3, #0]
 8005172:	f7fe fe4c 	bl	8003e0e <send_exception_msg>
 8005176:	4603      	mov	r3, r0
 8005178:	e0bb      	b.n	80052f2 <handle_write_multiple_registers+0x2dc>

        if (registers_bytes == 0)
 800517a:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 800517e:	2b00      	cmp	r3, #0
 8005180:	d109      	bne.n	8005196 <handle_write_multiple_registers+0x180>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8005182:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005186:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800518a:	2103      	movs	r1, #3
 800518c:	6818      	ldr	r0, [r3, #0]
 800518e:	f7fe fe3e 	bl	8003e0e <send_exception_msg>
 8005192:	4603      	mov	r3, r0
 8005194:	e0ad      	b.n	80052f2 <handle_write_multiple_registers+0x2dc>

        if (registers_bytes != quantity * 2)
 8005196:	f897 2105 	ldrb.w	r2, [r7, #261]	; 0x105
 800519a:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 800519e:	005b      	lsls	r3, r3, #1
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d009      	beq.n	80051b8 <handle_write_multiple_registers+0x1a2>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 80051a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80051a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80051ac:	2103      	movs	r1, #3
 80051ae:	6818      	ldr	r0, [r3, #0]
 80051b0:	f7fe fe2d 	bl	8003e0e <send_exception_msg>
 80051b4:	4603      	mov	r3, r0
 80051b6:	e09c      	b.n	80052f2 <handle_write_multiple_registers+0x2dc>

        if (nmbs->callbacks.write_multiple_registers) {
 80051b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80051bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d07b      	beq.n	80052c2 <handle_write_multiple_registers+0x2ac>
            err = nmbs->callbacks.write_multiple_registers(address, quantity, registers, nmbs->msg.unit_id,
 80051ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80051ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f8d3 4128 	ldr.w	r4, [r3, #296]	; 0x128
 80051d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80051dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f893 5106 	ldrb.w	r5, [r3, #262]	; 0x106
 80051e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80051ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80051f4:	f107 020c 	add.w	r2, r7, #12
 80051f8:	f8b7 1106 	ldrh.w	r1, [r7, #262]	; 0x106
 80051fc:	f8b7 0108 	ldrh.w	r0, [r7, #264]	; 0x108
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	462b      	mov	r3, r5
 8005204:	47a0      	blx	r4
 8005206:	4603      	mov	r3, r0
 8005208:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
                                                           nmbs->platform.arg);
            if (err != NMBS_ERROR_NONE) {
 800520c:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8005210:	2b00      	cmp	r3, #0
 8005212:	d01d      	beq.n	8005250 <handle_write_multiple_registers+0x23a>
                if (nmbs_error_is_exception(err))
 8005214:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8005218:	2b00      	cmp	r3, #0
 800521a:	dd0f      	ble.n	800523c <handle_write_multiple_registers+0x226>
 800521c:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8005220:	2b04      	cmp	r3, #4
 8005222:	dc0b      	bgt.n	800523c <handle_write_multiple_registers+0x226>
                    return send_exception_msg(nmbs, err);
 8005224:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 8005228:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800522c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005230:	4611      	mov	r1, r2
 8005232:	6818      	ldr	r0, [r3, #0]
 8005234:	f7fe fdeb 	bl	8003e0e <send_exception_msg>
 8005238:	4603      	mov	r3, r0
 800523a:	e05a      	b.n	80052f2 <handle_write_multiple_registers+0x2dc>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 800523c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005240:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005244:	2104      	movs	r1, #4
 8005246:	6818      	ldr	r0, [r3, #0]
 8005248:	f7fe fde1 	bl	8003e0e <send_exception_msg>
 800524c:	4603      	mov	r3, r0
 800524e:	e050      	b.n	80052f2 <handle_write_multiple_registers+0x2dc>
            }

            if (!nmbs->msg.broadcast) {
 8005250:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005254:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 800525e:	f083 0301 	eor.w	r3, r3, #1
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d043      	beq.n	80052f0 <handle_write_multiple_registers+0x2da>
                put_res_header(nmbs, 4);
 8005268:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800526c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005270:	2104      	movs	r1, #4
 8005272:	6818      	ldr	r0, [r3, #0]
 8005274:	f7fe fdbc 	bl	8003df0 <put_res_header>

                put_2(nmbs, address);
 8005278:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 800527c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005280:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005284:	4611      	mov	r1, r2
 8005286:	6818      	ldr	r0, [r3, #0]
 8005288:	f7fe fa67 	bl	800375a <put_2>
                put_2(nmbs, quantity);
 800528c:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 8005290:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005294:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005298:	4611      	mov	r1, r2
 800529a:	6818      	ldr	r0, [r3, #0]
 800529c:	f7fe fa5d 	bl	800375a <put_2>
                NMBS_DEBUG_PRINT("a %d\tq %d", address, quantity);

                err = send_msg(nmbs);
 80052a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80052a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80052a8:	6818      	ldr	r0, [r3, #0]
 80052aa:	f7fe fd42 	bl	8003d32 <send_msg>
 80052ae:	4603      	mov	r3, r0
 80052b0:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
                if (err != NMBS_ERROR_NONE)
 80052b4:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d019      	beq.n	80052f0 <handle_write_multiple_registers+0x2da>
                    return err;
 80052bc:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80052c0:	e017      	b.n	80052f2 <handle_write_multiple_registers+0x2dc>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 80052c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80052c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80052ca:	2101      	movs	r1, #1
 80052cc:	6818      	ldr	r0, [r3, #0]
 80052ce:	f7fe fd9e 	bl	8003e0e <send_exception_msg>
 80052d2:	4603      	mov	r3, r0
 80052d4:	e00d      	b.n	80052f2 <handle_write_multiple_registers+0x2dc>
        }
    }
    else {
        return recv_write_multiple_registers_res(nmbs, address, quantity);
 80052d6:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 80052da:	f8b7 1108 	ldrh.w	r1, [r7, #264]	; 0x108
 80052de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80052e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80052e6:	6818      	ldr	r0, [r3, #0]
 80052e8:	f7fe ffcb 	bl	8004282 <recv_write_multiple_registers_res>
 80052ec:	4603      	mov	r3, r0
 80052ee:	e000      	b.n	80052f2 <handle_write_multiple_registers+0x2dc>
    }

    return NMBS_ERROR_NONE;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bdb0      	pop	{r4, r5, r7, pc}

080052fc <handle_read_file_record>:
#endif

#ifndef NMBS_SERVER_READ_FILE_RECORD_DISABLED
static nmbs_error handle_read_file_record(nmbs_t* nmbs) {
 80052fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005300:	b08b      	sub	sp, #44	; 0x2c
 8005302:	af02      	add	r7, sp, #8
 8005304:	6078      	str	r0, [r7, #4]
 8005306:	466b      	mov	r3, sp
 8005308:	461e      	mov	r6, r3
    nmbs_error err = recv(nmbs, 1);
 800530a:	2101      	movs	r1, #1
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f7fe fb99 	bl	8003a44 <recv>
 8005312:	4603      	mov	r3, r0
 8005314:	76fb      	strb	r3, [r7, #27]
    if (err != NMBS_ERROR_NONE)
 8005316:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d002      	beq.n	8005324 <handle_read_file_record+0x28>
        return err;
 800531e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005322:	e199      	b.n	8005658 <handle_read_file_record+0x35c>

    uint8_t request_size = get_1(nmbs);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7fe f997 	bl	8003658 <get_1>
 800532a:	4603      	mov	r3, r0
 800532c:	76bb      	strb	r3, [r7, #26]

    err = recv(nmbs, request_size);
 800532e:	7ebb      	ldrb	r3, [r7, #26]
 8005330:	b29b      	uxth	r3, r3
 8005332:	4619      	mov	r1, r3
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f7fe fb85 	bl	8003a44 <recv>
 800533a:	4603      	mov	r3, r0
 800533c:	76fb      	strb	r3, [r7, #27]
    if (err != NMBS_ERROR_NONE)
 800533e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d002      	beq.n	800534c <handle_read_file_record+0x50>
        return err;
 8005346:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800534a:	e185      	b.n	8005658 <handle_read_file_record+0x35c>

    const uint8_t subreq_header_size = 7;
 800534c:	2307      	movs	r3, #7
 800534e:	767b      	strb	r3, [r7, #25]
    const uint8_t subreq_count = request_size / subreq_header_size;
 8005350:	7eba      	ldrb	r2, [r7, #26]
 8005352:	7e7b      	ldrb	r3, [r7, #25]
 8005354:	fbb2 f3f3 	udiv	r3, r2, r3
 8005358:	763b      	strb	r3, [r7, #24]
        uint16_t record_length;
    }
#ifdef __STDC_NO_VLA__
    subreq[35];    // 245 / subreq_header_size
#else
    subreq[subreq_count];
 800535a:	7e3b      	ldrb	r3, [r7, #24]
 800535c:	3b01      	subs	r3, #1
 800535e:	617b      	str	r3, [r7, #20]
 8005360:	7e3b      	ldrb	r3, [r7, #24]
 8005362:	2200      	movs	r2, #0
 8005364:	4698      	mov	r8, r3
 8005366:	4691      	mov	r9, r2
 8005368:	f04f 0200 	mov.w	r2, #0
 800536c:	f04f 0300 	mov.w	r3, #0
 8005370:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005374:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005378:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800537c:	7e3b      	ldrb	r3, [r7, #24]
 800537e:	2200      	movs	r2, #0
 8005380:	461c      	mov	r4, r3
 8005382:	4615      	mov	r5, r2
 8005384:	f04f 0200 	mov.w	r2, #0
 8005388:	f04f 0300 	mov.w	r3, #0
 800538c:	01ab      	lsls	r3, r5, #6
 800538e:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 8005392:	01a2      	lsls	r2, r4, #6
 8005394:	7e3b      	ldrb	r3, [r7, #24]
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	3307      	adds	r3, #7
 800539a:	08db      	lsrs	r3, r3, #3
 800539c:	00db      	lsls	r3, r3, #3
 800539e:	ebad 0d03 	sub.w	sp, sp, r3
 80053a2:	ab02      	add	r3, sp, #8
 80053a4:	3301      	adds	r3, #1
 80053a6:	085b      	lsrs	r3, r3, #1
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	613b      	str	r3, [r7, #16]
#endif

    uint8_t response_data_size = 0;
 80053ac:	2300      	movs	r3, #0
 80053ae:	77fb      	strb	r3, [r7, #31]

    for (uint8_t i = 0; i < subreq_count; i++) {
 80053b0:	2300      	movs	r3, #0
 80053b2:	77bb      	strb	r3, [r7, #30]
 80053b4:	e038      	b.n	8005428 <handle_read_file_record+0x12c>
        subreq[i].reference_type = get_1(nmbs);
 80053b6:	7fbc      	ldrb	r4, [r7, #30]
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f7fe f94d 	bl	8003658 <get_1>
 80053be:	4603      	mov	r3, r0
 80053c0:	461a      	mov	r2, r3
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
        subreq[i].file_number = get_2(nmbs);
 80053c8:	7fbc      	ldrb	r4, [r7, #30]
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7fe f9a0 	bl	8003710 <get_2>
 80053d0:	4603      	mov	r3, r0
 80053d2:	4619      	mov	r1, r3
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	00e3      	lsls	r3, r4, #3
 80053d8:	4413      	add	r3, r2
 80053da:	460a      	mov	r2, r1
 80053dc:	805a      	strh	r2, [r3, #2]
        subreq[i].record_number = get_2(nmbs);
 80053de:	7fbc      	ldrb	r4, [r7, #30]
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7fe f995 	bl	8003710 <get_2>
 80053e6:	4603      	mov	r3, r0
 80053e8:	4619      	mov	r1, r3
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	00e3      	lsls	r3, r4, #3
 80053ee:	4413      	add	r3, r2
 80053f0:	460a      	mov	r2, r1
 80053f2:	809a      	strh	r2, [r3, #4]
        subreq[i].record_length = get_2(nmbs);
 80053f4:	7fbc      	ldrb	r4, [r7, #30]
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7fe f98a 	bl	8003710 <get_2>
 80053fc:	4603      	mov	r3, r0
 80053fe:	4619      	mov	r1, r3
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	00e3      	lsls	r3, r4, #3
 8005404:	4413      	add	r3, r2
 8005406:	460a      	mov	r2, r1
 8005408:	80da      	strh	r2, [r3, #6]

        response_data_size += 2 + subreq[i].record_length * 2;
 800540a:	7fbb      	ldrb	r3, [r7, #30]
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	4413      	add	r3, r2
 8005412:	88db      	ldrh	r3, [r3, #6]
 8005414:	3301      	adds	r3, #1
 8005416:	b2db      	uxtb	r3, r3
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	b2da      	uxtb	r2, r3
 800541c:	7ffb      	ldrb	r3, [r7, #31]
 800541e:	4413      	add	r3, r2
 8005420:	77fb      	strb	r3, [r7, #31]
    for (uint8_t i = 0; i < subreq_count; i++) {
 8005422:	7fbb      	ldrb	r3, [r7, #30]
 8005424:	3301      	adds	r3, #1
 8005426:	77bb      	strb	r3, [r7, #30]
 8005428:	7fba      	ldrb	r2, [r7, #30]
 800542a:	7e3b      	ldrb	r3, [r7, #24]
 800542c:	429a      	cmp	r2, r3
 800542e:	d3c2      	bcc.n	80053b6 <handle_read_file_record+0xba>
    }

    discard_n(nmbs, request_size % subreq_header_size);
 8005430:	7ebb      	ldrb	r3, [r7, #26]
 8005432:	7e7a      	ldrb	r2, [r7, #25]
 8005434:	fbb3 f1f2 	udiv	r1, r3, r2
 8005438:	fb01 f202 	mul.w	r2, r1, r2
 800543c:	1a9b      	subs	r3, r3, r2
 800543e:	b2db      	uxtb	r3, r3
 8005440:	b29b      	uxth	r3, r3
 8005442:	4619      	mov	r1, r3
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f7fe f94e 	bl	80036e6 <discard_n>

    err = recv_msg_footer(nmbs);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7fe fb56 	bl	8003afc <recv_msg_footer>
 8005450:	4603      	mov	r3, r0
 8005452:	76fb      	strb	r3, [r7, #27]
    if (err != NMBS_ERROR_NONE)
 8005454:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <handle_read_file_record+0x166>
        return err;
 800545c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005460:	e0fa      	b.n	8005658 <handle_read_file_record+0x35c>

    if (!nmbs->msg.ignored) {
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8005468:	f083 0301 	eor.w	r3, r3, #1
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 80ea 	beq.w	8005648 <handle_read_file_record+0x34c>
        if (request_size % subreq_header_size)
 8005474:	7ebb      	ldrb	r3, [r7, #26]
 8005476:	7e7a      	ldrb	r2, [r7, #25]
 8005478:	fbb3 f1f2 	udiv	r1, r3, r2
 800547c:	fb01 f202 	mul.w	r2, r1, r2
 8005480:	1a9b      	subs	r3, r3, r2
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b00      	cmp	r3, #0
 8005486:	d005      	beq.n	8005494 <handle_read_file_record+0x198>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8005488:	2103      	movs	r1, #3
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7fe fcbf 	bl	8003e0e <send_exception_msg>
 8005490:	4603      	mov	r3, r0
 8005492:	e0e1      	b.n	8005658 <handle_read_file_record+0x35c>

        if (request_size < 0x07 || request_size > 0xF5)
 8005494:	7ebb      	ldrb	r3, [r7, #26]
 8005496:	2b06      	cmp	r3, #6
 8005498:	d902      	bls.n	80054a0 <handle_read_file_record+0x1a4>
 800549a:	7ebb      	ldrb	r3, [r7, #26]
 800549c:	2bf5      	cmp	r3, #245	; 0xf5
 800549e:	d905      	bls.n	80054ac <handle_read_file_record+0x1b0>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 80054a0:	2103      	movs	r1, #3
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7fe fcb3 	bl	8003e0e <send_exception_msg>
 80054a8:	4603      	mov	r3, r0
 80054aa:	e0d5      	b.n	8005658 <handle_read_file_record+0x35c>

        for (uint8_t i = 0; i < subreq_count; i++) {
 80054ac:	2300      	movs	r3, #0
 80054ae:	777b      	strb	r3, [r7, #29]
 80054b0:	e037      	b.n	8005522 <handle_read_file_record+0x226>
            if (subreq[i].reference_type != 0x06)
 80054b2:	7f7a      	ldrb	r2, [r7, #29]
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 80054ba:	2b06      	cmp	r3, #6
 80054bc:	d005      	beq.n	80054ca <handle_read_file_record+0x1ce>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 80054be:	2102      	movs	r1, #2
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f7fe fca4 	bl	8003e0e <send_exception_msg>
 80054c6:	4603      	mov	r3, r0
 80054c8:	e0c6      	b.n	8005658 <handle_read_file_record+0x35c>

            if (subreq[i].file_number == 0x0000)
 80054ca:	7f7b      	ldrb	r3, [r7, #29]
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	4413      	add	r3, r2
 80054d2:	885b      	ldrh	r3, [r3, #2]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d105      	bne.n	80054e4 <handle_read_file_record+0x1e8>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 80054d8:	2102      	movs	r1, #2
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7fe fc97 	bl	8003e0e <send_exception_msg>
 80054e0:	4603      	mov	r3, r0
 80054e2:	e0b9      	b.n	8005658 <handle_read_file_record+0x35c>

            if (subreq[i].record_number > 0x270F)
 80054e4:	7f7b      	ldrb	r3, [r7, #29]
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	00db      	lsls	r3, r3, #3
 80054ea:	4413      	add	r3, r2
 80054ec:	889b      	ldrh	r3, [r3, #4]
 80054ee:	f242 720f 	movw	r2, #9999	; 0x270f
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d905      	bls.n	8005502 <handle_read_file_record+0x206>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 80054f6:	2102      	movs	r1, #2
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f7fe fc88 	bl	8003e0e <send_exception_msg>
 80054fe:	4603      	mov	r3, r0
 8005500:	e0aa      	b.n	8005658 <handle_read_file_record+0x35c>

            if (subreq[i].record_length > 124)
 8005502:	7f7b      	ldrb	r3, [r7, #29]
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	4413      	add	r3, r2
 800550a:	88db      	ldrh	r3, [r3, #6]
 800550c:	2b7c      	cmp	r3, #124	; 0x7c
 800550e:	d905      	bls.n	800551c <handle_read_file_record+0x220>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8005510:	2102      	movs	r1, #2
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7fe fc7b 	bl	8003e0e <send_exception_msg>
 8005518:	4603      	mov	r3, r0
 800551a:	e09d      	b.n	8005658 <handle_read_file_record+0x35c>
        for (uint8_t i = 0; i < subreq_count; i++) {
 800551c:	7f7b      	ldrb	r3, [r7, #29]
 800551e:	3301      	adds	r3, #1
 8005520:	777b      	strb	r3, [r7, #29]
 8005522:	7f7a      	ldrb	r2, [r7, #29]
 8005524:	7e3b      	ldrb	r3, [r7, #24]
 8005526:	429a      	cmp	r2, r3
 8005528:	d3c3      	bcc.n	80054b2 <handle_read_file_record+0x1b6>

            NMBS_DEBUG_PRINT("a %d\tr %d\tl %d\t fread ", subreq[i].file_number, subreq[i].record_number,
                             subreq[i].record_length);
        }

        put_res_header(nmbs, response_data_size);
 800552a:	7ffb      	ldrb	r3, [r7, #31]
 800552c:	b29b      	uxth	r3, r3
 800552e:	4619      	mov	r1, r3
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7fe fc5d 	bl	8003df0 <put_res_header>
        put_1(nmbs, response_data_size);
 8005536:	7ffb      	ldrb	r3, [r7, #31]
 8005538:	4619      	mov	r1, r3
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7fe f8a6 	bl	800368c <put_1>

        if (nmbs->callbacks.read_file_record) {
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8005546:	2b00      	cmp	r3, #0
 8005548:	d064      	beq.n	8005614 <handle_read_file_record+0x318>
            for (uint8_t i = 0; i < subreq_count; i++) {
 800554a:	2300      	movs	r3, #0
 800554c:	773b      	strb	r3, [r7, #28]
 800554e:	e05c      	b.n	800560a <handle_read_file_record+0x30e>
                uint16_t subreq_data_size = subreq[i].record_length * 2;
 8005550:	7f3b      	ldrb	r3, [r7, #28]
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	00db      	lsls	r3, r3, #3
 8005556:	4413      	add	r3, r2
 8005558:	88db      	ldrh	r3, [r3, #6]
 800555a:	005b      	lsls	r3, r3, #1
 800555c:	81fb      	strh	r3, [r7, #14]
                put_1(nmbs, subreq_data_size + 1);
 800555e:	89fb      	ldrh	r3, [r7, #14]
 8005560:	b2db      	uxtb	r3, r3
 8005562:	3301      	adds	r3, #1
 8005564:	b2db      	uxtb	r3, r3
 8005566:	4619      	mov	r1, r3
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7fe f88f 	bl	800368c <put_1>
                put_1(nmbs, 0x06);    // add Reference Type const
 800556e:	2106      	movs	r1, #6
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7fe f88b 	bl	800368c <put_1>
                uint16_t* subreq_data = (uint16_t*) get_n(nmbs, subreq_data_size);
 8005576:	89fb      	ldrh	r3, [r7, #14]
 8005578:	4619      	mov	r1, r3
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7fe f913 	bl	80037a6 <get_n>
 8005580:	60b8      	str	r0, [r7, #8]

                err = nmbs->callbacks.read_file_record(subreq[i].file_number, subreq[i].record_number, subreq_data,
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8d3 412c 	ldr.w	r4, [r3, #300]	; 0x12c
 8005588:	7f3b      	ldrb	r3, [r7, #28]
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	00db      	lsls	r3, r3, #3
 800558e:	4413      	add	r3, r2
 8005590:	8858      	ldrh	r0, [r3, #2]
 8005592:	7f3b      	ldrb	r3, [r7, #28]
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	00db      	lsls	r3, r3, #3
 8005598:	4413      	add	r3, r2
 800559a:	8899      	ldrh	r1, [r3, #4]
 800559c:	7f3b      	ldrb	r3, [r7, #28]
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	00db      	lsls	r3, r3, #3
 80055a2:	4413      	add	r3, r2
 80055a4:	88dd      	ldrh	r5, [r3, #6]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	f8d2 214c 	ldr.w	r2, [r2, #332]	; 0x14c
 80055b2:	9201      	str	r2, [sp, #4]
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	462b      	mov	r3, r5
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	47a0      	blx	r4
 80055bc:	4603      	mov	r3, r0
 80055be:	76fb      	strb	r3, [r7, #27]
                                                       subreq[i].record_length, nmbs->msg.unit_id, nmbs->platform.arg);
                if (err != NMBS_ERROR_NONE) {
 80055c0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d014      	beq.n	80055f2 <handle_read_file_record+0x2f6>
                    if (nmbs_error_is_exception(err))
 80055c8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	dd0a      	ble.n	80055e6 <handle_read_file_record+0x2ea>
 80055d0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	dc06      	bgt.n	80055e6 <handle_read_file_record+0x2ea>
                        return send_exception_msg(nmbs, err);
 80055d8:	7efb      	ldrb	r3, [r7, #27]
 80055da:	4619      	mov	r1, r3
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f7fe fc16 	bl	8003e0e <send_exception_msg>
 80055e2:	4603      	mov	r3, r0
 80055e4:	e038      	b.n	8005658 <handle_read_file_record+0x35c>

                    return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 80055e6:	2104      	movs	r1, #4
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f7fe fc10 	bl	8003e0e <send_exception_msg>
 80055ee:	4603      	mov	r3, r0
 80055f0:	e032      	b.n	8005658 <handle_read_file_record+0x35c>
                }

                swap_regs(subreq_data, subreq[i].record_length);
 80055f2:	7f3b      	ldrb	r3, [r7, #28]
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	00db      	lsls	r3, r3, #3
 80055f8:	4413      	add	r3, r2
 80055fa:	88db      	ldrh	r3, [r3, #6]
 80055fc:	4619      	mov	r1, r3
 80055fe:	68b8      	ldr	r0, [r7, #8]
 8005600:	f7fe f928 	bl	8003854 <swap_regs>
            for (uint8_t i = 0; i < subreq_count; i++) {
 8005604:	7f3b      	ldrb	r3, [r7, #28]
 8005606:	3301      	adds	r3, #1
 8005608:	773b      	strb	r3, [r7, #28]
 800560a:	7f3a      	ldrb	r2, [r7, #28]
 800560c:	7e3b      	ldrb	r3, [r7, #24]
 800560e:	429a      	cmp	r2, r3
 8005610:	d39e      	bcc.n	8005550 <handle_read_file_record+0x254>
 8005612:	e005      	b.n	8005620 <handle_read_file_record+0x324>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8005614:	2101      	movs	r1, #1
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7fe fbf9 	bl	8003e0e <send_exception_msg>
 800561c:	4603      	mov	r3, r0
 800561e:	e01b      	b.n	8005658 <handle_read_file_record+0x35c>
        }

        if (!nmbs->msg.broadcast) {
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8005626:	f083 0301 	eor.w	r3, r3, #1
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	d012      	beq.n	8005656 <handle_read_file_record+0x35a>
            err = send_msg(nmbs);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f7fe fb7e 	bl	8003d32 <send_msg>
 8005636:	4603      	mov	r3, r0
 8005638:	76fb      	strb	r3, [r7, #27]
            if (err != NMBS_ERROR_NONE)
 800563a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d009      	beq.n	8005656 <handle_read_file_record+0x35a>
                return err;
 8005642:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005646:	e007      	b.n	8005658 <handle_read_file_record+0x35c>
        }
    }
    else {
        return recv_read_file_record_res(nmbs, NULL, 0);
 8005648:	2200      	movs	r2, #0
 800564a:	2100      	movs	r1, #0
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f7fe fe62 	bl	8004316 <recv_read_file_record_res>
 8005652:	4603      	mov	r3, r0
 8005654:	e000      	b.n	8005658 <handle_read_file_record+0x35c>
    }

    return NMBS_ERROR_NONE;
 8005656:	2300      	movs	r3, #0
 8005658:	46b5      	mov	sp, r6
}
 800565a:	4618      	mov	r0, r3
 800565c:	3724      	adds	r7, #36	; 0x24
 800565e:	46bd      	mov	sp, r7
 8005660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005664 <handle_write_file_record>:
#endif

#ifndef NMBS_SERVER_WRITE_FILE_RECORD_DISABLED
static nmbs_error handle_write_file_record(nmbs_t* nmbs) {
 8005664:	b5b0      	push	{r4, r5, r7, lr}
 8005666:	b08a      	sub	sp, #40	; 0x28
 8005668:	af02      	add	r7, sp, #8
 800566a:	6078      	str	r0, [r7, #4]
    nmbs_error err = recv(nmbs, 1);
 800566c:	2101      	movs	r1, #1
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7fe f9e8 	bl	8003a44 <recv>
 8005674:	4603      	mov	r3, r0
 8005676:	777b      	strb	r3, [r7, #29]
    if (err != NMBS_ERROR_NONE)
 8005678:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <handle_write_file_record+0x22>
        return err;
 8005680:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8005684:	e132      	b.n	80058ec <handle_write_file_record+0x288>

    uint8_t request_size = get_1(nmbs);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7fd ffe6 	bl	8003658 <get_1>
 800568c:	4603      	mov	r3, r0
 800568e:	773b      	strb	r3, [r7, #28]

    err = recv(nmbs, request_size);
 8005690:	7f3b      	ldrb	r3, [r7, #28]
 8005692:	b29b      	uxth	r3, r3
 8005694:	4619      	mov	r1, r3
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7fe f9d4 	bl	8003a44 <recv>
 800569c:	4603      	mov	r3, r0
 800569e:	777b      	strb	r3, [r7, #29]
    if (err != NMBS_ERROR_NONE)
 80056a0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d002      	beq.n	80056ae <handle_write_file_record+0x4a>
        return err;
 80056a8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80056ac:	e11e      	b.n	80058ec <handle_write_file_record+0x288>

    // We can save msg.buf index and use it later for context recovery.
    uint16_t msg_buf_idx = nmbs->msg.buf_idx;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80056b4:	837b      	strh	r3, [r7, #26]
    discard_n(nmbs, request_size);
 80056b6:	7f3b      	ldrb	r3, [r7, #28]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	4619      	mov	r1, r3
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7fe f812 	bl	80036e6 <discard_n>

    err = recv_msg_footer(nmbs);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7fe fa1a 	bl	8003afc <recv_msg_footer>
 80056c8:	4603      	mov	r3, r0
 80056ca:	777b      	strb	r3, [r7, #29]
    if (err != NMBS_ERROR_NONE)
 80056cc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <handle_write_file_record+0x76>
        return err;
 80056d4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80056d8:	e108      	b.n	80058ec <handle_write_file_record+0x288>

    if (!nmbs->msg.ignored) {
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 80056e0:	f083 0301 	eor.w	r3, r3, #1
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f000 80f5 	beq.w	80058d6 <handle_write_file_record+0x272>
        const uint8_t subreq_header_size = 7;
 80056ec:	2307      	movs	r3, #7
 80056ee:	767b      	strb	r3, [r7, #25]
        uint16_t size = request_size;
 80056f0:	7f3b      	ldrb	r3, [r7, #28]
 80056f2:	83fb      	strh	r3, [r7, #30]
        nmbs->msg.buf_idx = msg_buf_idx;    // restore context
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	8b7a      	ldrh	r2, [r7, #26]
 80056f8:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104

        if (request_size < 0x07 || request_size > 0xFB)
 80056fc:	7f3b      	ldrb	r3, [r7, #28]
 80056fe:	2b06      	cmp	r3, #6
 8005700:	d902      	bls.n	8005708 <handle_write_file_record+0xa4>
 8005702:	7f3b      	ldrb	r3, [r7, #28]
 8005704:	2bfb      	cmp	r3, #251	; 0xfb
 8005706:	d905      	bls.n	8005714 <handle_write_file_record+0xb0>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8005708:	2103      	movs	r1, #3
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7fe fb7f 	bl	8003e0e <send_exception_msg>
 8005710:	4603      	mov	r3, r0
 8005712:	e0eb      	b.n	80058ec <handle_write_file_record+0x288>

        do {
            uint8_t subreq_reference_type = get_1(nmbs);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f7fd ff9f 	bl	8003658 <get_1>
 800571a:	4603      	mov	r3, r0
 800571c:	763b      	strb	r3, [r7, #24]
            uint16_t subreq_file_number_c = get_2(nmbs);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7fd fff6 	bl	8003710 <get_2>
 8005724:	4603      	mov	r3, r0
 8005726:	82fb      	strh	r3, [r7, #22]
            uint16_t subreq_record_number_c = get_2(nmbs);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7fd fff1 	bl	8003710 <get_2>
 800572e:	4603      	mov	r3, r0
 8005730:	82bb      	strh	r3, [r7, #20]
            uint16_t subreq_record_length_c = get_2(nmbs);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7fd ffec 	bl	8003710 <get_2>
 8005738:	4603      	mov	r3, r0
 800573a:	827b      	strh	r3, [r7, #18]
            discard_n(nmbs, subreq_record_length_c * 2);
 800573c:	8a7b      	ldrh	r3, [r7, #18]
 800573e:	005b      	lsls	r3, r3, #1
 8005740:	b29b      	uxth	r3, r3
 8005742:	4619      	mov	r1, r3
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f7fd ffce 	bl	80036e6 <discard_n>

            if (subreq_reference_type != 0x06)
 800574a:	7e3b      	ldrb	r3, [r7, #24]
 800574c:	2b06      	cmp	r3, #6
 800574e:	d005      	beq.n	800575c <handle_write_file_record+0xf8>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8005750:	2102      	movs	r1, #2
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7fe fb5b 	bl	8003e0e <send_exception_msg>
 8005758:	4603      	mov	r3, r0
 800575a:	e0c7      	b.n	80058ec <handle_write_file_record+0x288>

            if (subreq_file_number_c == 0x0000)
 800575c:	8afb      	ldrh	r3, [r7, #22]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d105      	bne.n	800576e <handle_write_file_record+0x10a>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8005762:	2102      	movs	r1, #2
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f7fe fb52 	bl	8003e0e <send_exception_msg>
 800576a:	4603      	mov	r3, r0
 800576c:	e0be      	b.n	80058ec <handle_write_file_record+0x288>

            if (subreq_record_number_c > 0x270F)
 800576e:	8abb      	ldrh	r3, [r7, #20]
 8005770:	f242 720f 	movw	r2, #9999	; 0x270f
 8005774:	4293      	cmp	r3, r2
 8005776:	d905      	bls.n	8005784 <handle_write_file_record+0x120>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8005778:	2102      	movs	r1, #2
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f7fe fb47 	bl	8003e0e <send_exception_msg>
 8005780:	4603      	mov	r3, r0
 8005782:	e0b3      	b.n	80058ec <handle_write_file_record+0x288>

            if (subreq_record_length_c > 122)
 8005784:	8a7b      	ldrh	r3, [r7, #18]
 8005786:	2b7a      	cmp	r3, #122	; 0x7a
 8005788:	d905      	bls.n	8005796 <handle_write_file_record+0x132>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 800578a:	2102      	movs	r1, #2
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f7fe fb3e 	bl	8003e0e <send_exception_msg>
 8005792:	4603      	mov	r3, r0
 8005794:	e0aa      	b.n	80058ec <handle_write_file_record+0x288>

            NMBS_DEBUG_PRINT("a %d\tr %d\tl %d\t fwrite ", subreq_file_number_c, subreq_record_number_c,
                             subreq_record_length_c);
            size -= (subreq_header_size + subreq_record_length_c * 2);
 8005796:	7e7b      	ldrb	r3, [r7, #25]
 8005798:	b29a      	uxth	r2, r3
 800579a:	8a7b      	ldrh	r3, [r7, #18]
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	b29b      	uxth	r3, r3
 80057a0:	4413      	add	r3, r2
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	8bfa      	ldrh	r2, [r7, #30]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	83fb      	strh	r3, [r7, #30]
        } while (size >= subreq_header_size);
 80057aa:	7e7b      	ldrb	r3, [r7, #25]
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	8bfa      	ldrh	r2, [r7, #30]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d2af      	bcs.n	8005714 <handle_write_file_record+0xb0>

        if (size)
 80057b4:	8bfb      	ldrh	r3, [r7, #30]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d005      	beq.n	80057c6 <handle_write_file_record+0x162>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 80057ba:	2103      	movs	r1, #3
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f7fe fb26 	bl	8003e0e <send_exception_msg>
 80057c2:	4603      	mov	r3, r0
 80057c4:	e092      	b.n	80058ec <handle_write_file_record+0x288>

        // checks completed

        size = request_size;
 80057c6:	7f3b      	ldrb	r3, [r7, #28]
 80057c8:	83fb      	strh	r3, [r7, #30]
        nmbs->msg.buf_idx = msg_buf_idx;    // restore context
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	8b7a      	ldrh	r2, [r7, #26]
 80057ce:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104

        do {
            discard_1(nmbs);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7fd ff75 	bl	80036c2 <discard_1>
            uint16_t subreq_file_number = get_2(nmbs);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f7fd ff99 	bl	8003710 <get_2>
 80057de:	4603      	mov	r3, r0
 80057e0:	823b      	strh	r3, [r7, #16]
            uint16_t subreq_record_number = get_2(nmbs);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7fd ff94 	bl	8003710 <get_2>
 80057e8:	4603      	mov	r3, r0
 80057ea:	81fb      	strh	r3, [r7, #14]
            uint16_t subreq_record_length = get_2(nmbs);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f7fd ff8f 	bl	8003710 <get_2>
 80057f2:	4603      	mov	r3, r0
 80057f4:	81bb      	strh	r3, [r7, #12]
            uint16_t* subreq_data = get_regs(nmbs, subreq_record_length);
 80057f6:	89bb      	ldrh	r3, [r7, #12]
 80057f8:	4619      	mov	r1, r3
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7fd ffef 	bl	80037de <get_regs>
 8005800:	60b8      	str	r0, [r7, #8]

            if (nmbs->callbacks.write_file_record) {
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8005808:	2b00      	cmp	r3, #0
 800580a:	d031      	beq.n	8005870 <handle_write_file_record+0x20c>
                err = nmbs->callbacks.write_file_record(subreq_file_number, subreq_record_number, subreq_data,
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f8d3 4130 	ldr.w	r4, [r3, #304]	; 0x130
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	f8d2 214c 	ldr.w	r2, [r2, #332]	; 0x14c
 800581e:	89bd      	ldrh	r5, [r7, #12]
 8005820:	89f9      	ldrh	r1, [r7, #14]
 8005822:	8a38      	ldrh	r0, [r7, #16]
 8005824:	9201      	str	r2, [sp, #4]
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	462b      	mov	r3, r5
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	47a0      	blx	r4
 800582e:	4603      	mov	r3, r0
 8005830:	777b      	strb	r3, [r7, #29]
                                                        subreq_record_length, nmbs->msg.unit_id, nmbs->platform.arg);
                if (err != NMBS_ERROR_NONE) {
 8005832:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d014      	beq.n	8005864 <handle_write_file_record+0x200>
                    if (nmbs_error_is_exception(err))
 800583a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800583e:	2b00      	cmp	r3, #0
 8005840:	dd0a      	ble.n	8005858 <handle_write_file_record+0x1f4>
 8005842:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8005846:	2b04      	cmp	r3, #4
 8005848:	dc06      	bgt.n	8005858 <handle_write_file_record+0x1f4>
                        return send_exception_msg(nmbs, err);
 800584a:	7f7b      	ldrb	r3, [r7, #29]
 800584c:	4619      	mov	r1, r3
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7fe fadd 	bl	8003e0e <send_exception_msg>
 8005854:	4603      	mov	r3, r0
 8005856:	e049      	b.n	80058ec <handle_write_file_record+0x288>

                    return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8005858:	2104      	movs	r1, #4
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7fe fad7 	bl	8003e0e <send_exception_msg>
 8005860:	4603      	mov	r3, r0
 8005862:	e043      	b.n	80058ec <handle_write_file_record+0x288>
                }

                swap_regs(subreq_data, subreq_record_length);    // restore swapping
 8005864:	89bb      	ldrh	r3, [r7, #12]
 8005866:	4619      	mov	r1, r3
 8005868:	68b8      	ldr	r0, [r7, #8]
 800586a:	f7fd fff3 	bl	8003854 <swap_regs>
 800586e:	e005      	b.n	800587c <handle_write_file_record+0x218>
            }
            else {
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8005870:	2101      	movs	r1, #1
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7fe facb 	bl	8003e0e <send_exception_msg>
 8005878:	4603      	mov	r3, r0
 800587a:	e037      	b.n	80058ec <handle_write_file_record+0x288>
            }

            size -= (subreq_header_size + subreq_record_length * 2);
 800587c:	7e7b      	ldrb	r3, [r7, #25]
 800587e:	b29a      	uxth	r2, r3
 8005880:	89bb      	ldrh	r3, [r7, #12]
 8005882:	005b      	lsls	r3, r3, #1
 8005884:	b29b      	uxth	r3, r3
 8005886:	4413      	add	r3, r2
 8005888:	b29b      	uxth	r3, r3
 800588a:	8bfa      	ldrh	r2, [r7, #30]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	83fb      	strh	r3, [r7, #30]
        } while (size >= subreq_header_size);
 8005890:	7e7b      	ldrb	r3, [r7, #25]
 8005892:	b29b      	uxth	r3, r3
 8005894:	8bfa      	ldrh	r2, [r7, #30]
 8005896:	429a      	cmp	r2, r3
 8005898:	d29b      	bcs.n	80057d2 <handle_write_file_record+0x16e>

        if (!nmbs->msg.broadcast) {
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 80058a0:	f083 0301 	eor.w	r3, r3, #1
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d01f      	beq.n	80058ea <handle_write_file_record+0x286>
            // The normal response to 'Write File' is an echo of the request.
            // We can restore buffer index and response msg.
            nmbs->msg.buf_idx = msg_buf_idx;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	8b7a      	ldrh	r2, [r7, #26]
 80058ae:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
            discard_n(nmbs, request_size);
 80058b2:	7f3b      	ldrb	r3, [r7, #28]
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	4619      	mov	r1, r3
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f7fd ff14 	bl	80036e6 <discard_n>

            err = send_msg(nmbs);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7fe fa37 	bl	8003d32 <send_msg>
 80058c4:	4603      	mov	r3, r0
 80058c6:	777b      	strb	r3, [r7, #29]
            if (err != NMBS_ERROR_NONE)
 80058c8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00c      	beq.n	80058ea <handle_write_file_record+0x286>
                return err;
 80058d0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80058d4:	e00a      	b.n	80058ec <handle_write_file_record+0x288>
        }
    }
    else {
        return recv_write_file_record_res(nmbs, 0, 0, NULL, 0);
 80058d6:	2300      	movs	r3, #0
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	2300      	movs	r3, #0
 80058dc:	2200      	movs	r2, #0
 80058de:	2100      	movs	r1, #0
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f7fe fd90 	bl	8004406 <recv_write_file_record_res>
 80058e6:	4603      	mov	r3, r0
 80058e8:	e000      	b.n	80058ec <handle_write_file_record+0x288>
    }

    return NMBS_ERROR_NONE;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3720      	adds	r7, #32
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bdb0      	pop	{r4, r5, r7, pc}

080058f4 <handle_read_write_registers>:
#endif

#ifndef NMBS_SERVER_READ_WRITE_REGISTERS_DISABLED
static nmbs_error handle_read_write_registers(nmbs_t* nmbs) {
 80058f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f8:	b091      	sub	sp, #68	; 0x44
 80058fa:	af02      	add	r7, sp, #8
 80058fc:	60f8      	str	r0, [r7, #12]
 80058fe:	466b      	mov	r3, sp
 8005900:	60bb      	str	r3, [r7, #8]
    nmbs_error err = recv(nmbs, 9);
 8005902:	2109      	movs	r1, #9
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f7fe f89d 	bl	8003a44 <recv>
 800590a:	4603      	mov	r3, r0
 800590c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (err != NMBS_ERROR_NONE)
 8005910:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <handle_read_write_registers+0x2a>
        return err;
 8005918:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800591c:	e19d      	b.n	8005c5a <handle_read_write_registers+0x366>

    uint16_t read_address = get_2(nmbs);
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f7fd fef6 	bl	8003710 <get_2>
 8005924:	4603      	mov	r3, r0
 8005926:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint16_t read_quantity = get_2(nmbs);
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f7fd fef1 	bl	8003710 <get_2>
 800592e:	4603      	mov	r3, r0
 8005930:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint16_t write_address = get_2(nmbs);
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f7fd feec 	bl	8003710 <get_2>
 8005938:	4603      	mov	r3, r0
 800593a:	853b      	strh	r3, [r7, #40]	; 0x28
    uint16_t write_quantity = get_2(nmbs);
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f7fd fee7 	bl	8003710 <get_2>
 8005942:	4603      	mov	r3, r0
 8005944:	84fb      	strh	r3, [r7, #38]	; 0x26

    uint8_t byte_count_write = get_1(nmbs);
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f7fd fe86 	bl	8003658 <get_1>
 800594c:	4603      	mov	r3, r0
 800594e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

    NMBS_DEBUG_PRINT("ra %d\trq %d\t wa %d\t wq %d\t b %d\tregs ", read_address, read_quantity, write_address,
                     write_quantity, byte_count_write);

    err = recv(nmbs, byte_count_write);
 8005952:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005956:	b29b      	uxth	r3, r3
 8005958:	4619      	mov	r1, r3
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f7fe f872 	bl	8003a44 <recv>
 8005960:	4603      	mov	r3, r0
 8005962:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (err != NMBS_ERROR_NONE)
 8005966:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <handle_read_write_registers+0x80>
        return err;
 800596e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005972:	e172      	b.n	8005c5a <handle_read_write_registers+0x366>

#ifdef __STDC_NO_VLA__
    uint16_t registers[0x007B];
#else
    uint16_t registers[byte_count_write / 2];
 8005974:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005978:	085b      	lsrs	r3, r3, #1
 800597a:	b2db      	uxtb	r3, r3
 800597c:	4619      	mov	r1, r3
 800597e:	1e4b      	subs	r3, r1, #1
 8005980:	623b      	str	r3, [r7, #32]
 8005982:	460a      	mov	r2, r1
 8005984:	2300      	movs	r3, #0
 8005986:	603a      	str	r2, [r7, #0]
 8005988:	607b      	str	r3, [r7, #4]
 800598a:	f04f 0200 	mov.w	r2, #0
 800598e:	f04f 0300 	mov.w	r3, #0
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	0103      	lsls	r3, r0, #4
 8005996:	6838      	ldr	r0, [r7, #0]
 8005998:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800599c:	6838      	ldr	r0, [r7, #0]
 800599e:	0102      	lsls	r2, r0, #4
 80059a0:	460a      	mov	r2, r1
 80059a2:	2300      	movs	r3, #0
 80059a4:	4692      	mov	sl, r2
 80059a6:	469b      	mov	fp, r3
 80059a8:	f04f 0200 	mov.w	r2, #0
 80059ac:	f04f 0300 	mov.w	r3, #0
 80059b0:	ea4f 130b 	mov.w	r3, fp, lsl #4
 80059b4:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 80059b8:	ea4f 120a 	mov.w	r2, sl, lsl #4
 80059bc:	460b      	mov	r3, r1
 80059be:	005b      	lsls	r3, r3, #1
 80059c0:	3307      	adds	r3, #7
 80059c2:	08db      	lsrs	r3, r3, #3
 80059c4:	00db      	lsls	r3, r3, #3
 80059c6:	ebad 0d03 	sub.w	sp, sp, r3
 80059ca:	ab02      	add	r3, sp, #8
 80059cc:	3301      	adds	r3, #1
 80059ce:	085b      	lsrs	r3, r3, #1
 80059d0:	005b      	lsls	r3, r3, #1
 80059d2:	61fb      	str	r3, [r7, #28]
#endif
    for (int i = 0; i < byte_count_write / 2; i++) {
 80059d4:	2300      	movs	r3, #0
 80059d6:	637b      	str	r3, [r7, #52]	; 0x34
 80059d8:	e00b      	b.n	80059f2 <handle_read_write_registers+0xfe>
        registers[i] = get_2(nmbs);
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f7fd fe98 	bl	8003710 <get_2>
 80059e0:	4603      	mov	r3, r0
 80059e2:	4619      	mov	r1, r3
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059e8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 0; i < byte_count_write / 2; i++) {
 80059ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ee:	3301      	adds	r3, #1
 80059f0:	637b      	str	r3, [r7, #52]	; 0x34
 80059f2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80059f6:	085b      	lsrs	r3, r3, #1
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	461a      	mov	r2, r3
 80059fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fe:	4293      	cmp	r3, r2
 8005a00:	dbeb      	blt.n	80059da <handle_read_write_registers+0xe6>
        NMBS_DEBUG_PRINT("%d ", registers[i]);
    }

    err = recv_msg_footer(nmbs);
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f7fe f87a 	bl	8003afc <recv_msg_footer>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (err != NMBS_ERROR_NONE)
 8005a0e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d002      	beq.n	8005a1c <handle_read_write_registers+0x128>
        return err;
 8005a16:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005a1a:	e11e      	b.n	8005c5a <handle_read_write_registers+0x366>

    if (!nmbs->msg.ignored) {
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8005a22:	f083 0301 	eor.w	r3, r3, #1
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 810d 	beq.w	8005c48 <handle_read_write_registers+0x354>
        if (read_quantity < 1 || read_quantity > 0x007D)
 8005a2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d002      	beq.n	8005a3a <handle_read_write_registers+0x146>
 8005a34:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005a36:	2b7d      	cmp	r3, #125	; 0x7d
 8005a38:	d905      	bls.n	8005a46 <handle_read_write_registers+0x152>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8005a3a:	2103      	movs	r1, #3
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f7fe f9e6 	bl	8003e0e <send_exception_msg>
 8005a42:	4603      	mov	r3, r0
 8005a44:	e109      	b.n	8005c5a <handle_read_write_registers+0x366>

        if (write_quantity < 1 || write_quantity > 0x007B)
 8005a46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d002      	beq.n	8005a52 <handle_read_write_registers+0x15e>
 8005a4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a4e:	2b7b      	cmp	r3, #123	; 0x7b
 8005a50:	d905      	bls.n	8005a5e <handle_read_write_registers+0x16a>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8005a52:	2103      	movs	r1, #3
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f7fe f9da 	bl	8003e0e <send_exception_msg>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	e0fd      	b.n	8005c5a <handle_read_write_registers+0x366>

        if (byte_count_write != write_quantity * 2)
 8005a5e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8005a62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d005      	beq.n	8005a76 <handle_read_write_registers+0x182>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8005a6a:	2103      	movs	r1, #3
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f7fe f9ce 	bl	8003e0e <send_exception_msg>
 8005a72:	4603      	mov	r3, r0
 8005a74:	e0f1      	b.n	8005c5a <handle_read_write_registers+0x366>

        if ((uint32_t) read_address + (uint32_t) read_quantity > ((uint32_t) 0xFFFF) + 1)
 8005a76:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8005a78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a80:	d905      	bls.n	8005a8e <handle_read_write_registers+0x19a>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8005a82:	2102      	movs	r1, #2
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f7fe f9c2 	bl	8003e0e <send_exception_msg>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	e0e5      	b.n	8005c5a <handle_read_write_registers+0x366>

        if ((uint32_t) write_address + (uint32_t) write_quantity > ((uint32_t) 0xFFFF) + 1)
 8005a8e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005a90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a92:	4413      	add	r3, r2
 8005a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a98:	d905      	bls.n	8005aa6 <handle_read_write_registers+0x1b2>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8005a9a:	2102      	movs	r1, #2
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f7fe f9b6 	bl	8003e0e <send_exception_msg>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	e0d9      	b.n	8005c5a <handle_read_write_registers+0x366>

        if (!nmbs->callbacks.write_multiple_registers || !nmbs->callbacks.read_holding_registers)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d004      	beq.n	8005aba <handle_read_write_registers+0x1c6>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d105      	bne.n	8005ac6 <handle_read_write_registers+0x1d2>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8005aba:	2101      	movs	r1, #1
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f7fe f9a6 	bl	8003e0e <send_exception_msg>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	e0c9      	b.n	8005c5a <handle_read_write_registers+0x366>

        err = nmbs->callbacks.write_multiple_registers(write_address, write_quantity, registers, nmbs->msg.unit_id,
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f8d3 6128 	ldr.w	r6, [r3, #296]	; 0x128
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8005ad8:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8005ada:	8d38      	ldrh	r0, [r7, #40]	; 0x28
 8005adc:	9300      	str	r3, [sp, #0]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	69fa      	ldr	r2, [r7, #28]
 8005ae2:	47b0      	blx	r6
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                                       nmbs->platform.arg);
        if (err != NMBS_ERROR_NONE) {
 8005aea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d015      	beq.n	8005b1e <handle_read_write_registers+0x22a>
            if (nmbs_error_is_exception(err))
 8005af2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	dd0b      	ble.n	8005b12 <handle_read_write_registers+0x21e>
 8005afa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	dc07      	bgt.n	8005b12 <handle_read_write_registers+0x21e>
                return send_exception_msg(nmbs, err);
 8005b02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b06:	4619      	mov	r1, r3
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f7fe f980 	bl	8003e0e <send_exception_msg>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	e0a3      	b.n	8005c5a <handle_read_write_registers+0x366>

            return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8005b12:	2104      	movs	r1, #4
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f7fe f97a 	bl	8003e0e <send_exception_msg>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	e09d      	b.n	8005c5a <handle_read_write_registers+0x366>
        }

        if (!nmbs->msg.broadcast) {
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8005b24:	f083 0301 	eor.w	r3, r3, #1
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f000 8094 	beq.w	8005c58 <handle_read_write_registers+0x364>
 8005b30:	466b      	mov	r3, sp
 8005b32:	461e      	mov	r6, r3
#ifdef __STDC_NO_VLA__
            uint16_t regs[125];
#else
            uint16_t regs[read_quantity];
 8005b34:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8005b36:	460b      	mov	r3, r1
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	61bb      	str	r3, [r7, #24]
 8005b3c:	b28b      	uxth	r3, r1
 8005b3e:	2200      	movs	r2, #0
 8005b40:	4698      	mov	r8, r3
 8005b42:	4691      	mov	r9, r2
 8005b44:	f04f 0200 	mov.w	r2, #0
 8005b48:	f04f 0300 	mov.w	r3, #0
 8005b4c:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8005b50:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8005b54:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8005b58:	b28b      	uxth	r3, r1
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	461c      	mov	r4, r3
 8005b5e:	4615      	mov	r5, r2
 8005b60:	f04f 0200 	mov.w	r2, #0
 8005b64:	f04f 0300 	mov.w	r3, #0
 8005b68:	012b      	lsls	r3, r5, #4
 8005b6a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8005b6e:	0122      	lsls	r2, r4, #4
 8005b70:	460b      	mov	r3, r1
 8005b72:	005b      	lsls	r3, r3, #1
 8005b74:	3307      	adds	r3, #7
 8005b76:	08db      	lsrs	r3, r3, #3
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	ebad 0d03 	sub.w	sp, sp, r3
 8005b7e:	ab02      	add	r3, sp, #8
 8005b80:	3301      	adds	r3, #1
 8005b82:	085b      	lsrs	r3, r3, #1
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	617b      	str	r3, [r7, #20]
#endif
            err = nmbs->callbacks.read_holding_registers(read_address, read_quantity, regs, nmbs->msg.unit_id,
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f8d3 4114 	ldr.w	r4, [r3, #276]	; 0x114
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8005b9a:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8005b9c:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 8005b9e:	9300      	str	r3, [sp, #0]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	47a0      	blx	r4
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                                         nmbs->platform.arg);
            if (err != NMBS_ERROR_NONE) {
 8005bac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d015      	beq.n	8005be0 <handle_read_write_registers+0x2ec>
                if (nmbs_error_is_exception(err))
 8005bb4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	dd0b      	ble.n	8005bd4 <handle_read_write_registers+0x2e0>
 8005bbc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005bc0:	2b04      	cmp	r3, #4
 8005bc2:	dc07      	bgt.n	8005bd4 <handle_read_write_registers+0x2e0>
                    return send_exception_msg(nmbs, err);
 8005bc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005bc8:	4619      	mov	r1, r3
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f7fe f91f 	bl	8003e0e <send_exception_msg>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	e037      	b.n	8005c44 <handle_read_write_registers+0x350>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8005bd4:	2104      	movs	r1, #4
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f7fe f919 	bl	8003e0e <send_exception_msg>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	e031      	b.n	8005c44 <handle_read_write_registers+0x350>
            }

            uint8_t regs_bytes = read_quantity * 2;
 8005be0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	74fb      	strb	r3, [r7, #19]
            put_res_header(nmbs, 1 + regs_bytes);
 8005be8:	7cfb      	ldrb	r3, [r7, #19]
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	3301      	adds	r3, #1
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f7fe f8fc 	bl	8003df0 <put_res_header>

            put_1(nmbs, regs_bytes);
 8005bf8:	7cfb      	ldrb	r3, [r7, #19]
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f7fd fd45 	bl	800368c <put_1>

            NMBS_DEBUG_PRINT("b %d\t", regs_bytes);

            NMBS_DEBUG_PRINT("regs ");
            for (int i = 0; i < read_quantity; i++) {
 8005c02:	2300      	movs	r3, #0
 8005c04:	633b      	str	r3, [r7, #48]	; 0x30
 8005c06:	e00a      	b.n	8005c1e <handle_read_write_registers+0x32a>
                put_2(nmbs, regs[i]);
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c0c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005c10:	4619      	mov	r1, r3
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f7fd fda1 	bl	800375a <put_2>
            for (int i = 0; i < read_quantity; i++) {
 8005c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	633b      	str	r3, [r7, #48]	; 0x30
 8005c1e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c22:	429a      	cmp	r2, r3
 8005c24:	dbf0      	blt.n	8005c08 <handle_read_write_registers+0x314>
                NMBS_DEBUG_PRINT("%d ", regs[i]);
            }

            err = send_msg(nmbs);
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f7fe f883 	bl	8003d32 <send_msg>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            if (err != NMBS_ERROR_NONE)
 8005c32:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d002      	beq.n	8005c40 <handle_read_write_registers+0x34c>
                return err;
 8005c3a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005c3e:	e001      	b.n	8005c44 <handle_read_write_registers+0x350>
 8005c40:	46b5      	mov	sp, r6
 8005c42:	e009      	b.n	8005c58 <handle_read_write_registers+0x364>
                    return send_exception_msg(nmbs, err);
 8005c44:	46b5      	mov	sp, r6
 8005c46:	e008      	b.n	8005c5a <handle_read_write_registers+0x366>
        }
    }
    else {
        return recv_write_multiple_registers_res(nmbs, write_address, write_quantity);
 8005c48:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005c4a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f7fe fb17 	bl	8004282 <recv_write_multiple_registers_res>
 8005c54:	4603      	mov	r3, r0
 8005c56:	e000      	b.n	8005c5a <handle_read_write_registers+0x366>
    }

    return NMBS_ERROR_NONE;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	373c      	adds	r7, #60	; 0x3c
 8005c62:	46bd      	mov	sp, r7
 8005c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005c68 <handle_req_fc>:
#endif


static nmbs_error handle_req_fc(nmbs_t* nmbs) {
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
    NMBS_DEBUG_PRINT("fc %d\t", nmbs->msg.fc);

    nmbs_error err;
    switch (nmbs->msg.fc) {
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8005c76:	3b01      	subs	r3, #1
 8005c78:	2b16      	cmp	r3, #22
 8005c7a:	d873      	bhi.n	8005d64 <handle_req_fc+0xfc>
 8005c7c:	a201      	add	r2, pc, #4	; (adr r2, 8005c84 <handle_req_fc+0x1c>)
 8005c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c82:	bf00      	nop
 8005c84:	08005ce1 	.word	0x08005ce1
 8005c88:	08005ced 	.word	0x08005ced
 8005c8c:	08005cf9 	.word	0x08005cf9
 8005c90:	08005d05 	.word	0x08005d05
 8005c94:	08005d11 	.word	0x08005d11
 8005c98:	08005d1d 	.word	0x08005d1d
 8005c9c:	08005d65 	.word	0x08005d65
 8005ca0:	08005d65 	.word	0x08005d65
 8005ca4:	08005d65 	.word	0x08005d65
 8005ca8:	08005d65 	.word	0x08005d65
 8005cac:	08005d65 	.word	0x08005d65
 8005cb0:	08005d65 	.word	0x08005d65
 8005cb4:	08005d65 	.word	0x08005d65
 8005cb8:	08005d65 	.word	0x08005d65
 8005cbc:	08005d29 	.word	0x08005d29
 8005cc0:	08005d35 	.word	0x08005d35
 8005cc4:	08005d65 	.word	0x08005d65
 8005cc8:	08005d65 	.word	0x08005d65
 8005ccc:	08005d65 	.word	0x08005d65
 8005cd0:	08005d41 	.word	0x08005d41
 8005cd4:	08005d4d 	.word	0x08005d4d
 8005cd8:	08005d65 	.word	0x08005d65
 8005cdc:	08005d59 	.word	0x08005d59
#ifndef NMBS_SERVER_WRITE_MULTIPLE_COILS_DISABLED
        case 1:
            err = handle_read_coils(nmbs);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f7fe fea3 	bl	8004a2c <handle_read_coils>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	73fb      	strb	r3, [r7, #15]
            break;
 8005cea:	e03d      	b.n	8005d68 <handle_req_fc+0x100>
#endif

#ifndef NMBS_SERVER_READ_DISCRETE_INPUTS_DISABLED
        case 2:
            err = handle_read_discrete_inputs(nmbs);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f7fe fead 	bl	8004a4c <handle_read_discrete_inputs>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	73fb      	strb	r3, [r7, #15]
            break;
 8005cf6:	e037      	b.n	8005d68 <handle_req_fc+0x100>
#endif

#ifndef NMBS_SERVER_READ_HOLDING_REGISTERS_DISABLED
        case 3:
            err = handle_read_holding_registers(nmbs);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7fe feb7 	bl	8004a6c <handle_read_holding_registers>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	73fb      	strb	r3, [r7, #15]
            break;
 8005d02:	e031      	b.n	8005d68 <handle_req_fc+0x100>
#endif

#ifndef NMBS_SERVER_READ_INPUT_REGISTERS_DISABLED
        case 4:
            err = handle_read_input_registers(nmbs);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f7fe fec1 	bl	8004a8c <handle_read_input_registers>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	73fb      	strb	r3, [r7, #15]
            break;
 8005d0e:	e02b      	b.n	8005d68 <handle_req_fc+0x100>
#endif

#ifndef NMBS_SERVER_WRITE_SINGLE_COIL_DISABLED
        case 5:
            err = handle_write_single_coil(nmbs);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f7fe fecb 	bl	8004aac <handle_write_single_coil>
 8005d16:	4603      	mov	r3, r0
 8005d18:	73fb      	strb	r3, [r7, #15]
            break;
 8005d1a:	e025      	b.n	8005d68 <handle_req_fc+0x100>
#endif

#ifndef NMBS_SERVER_WRITE_SINGLE_REGISTER_DISABLED
        case 6:
            err = handle_write_single_register(nmbs);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f7fe ff67 	bl	8004bf0 <handle_write_single_register>
 8005d22:	4603      	mov	r3, r0
 8005d24:	73fb      	strb	r3, [r7, #15]
            break;
 8005d26:	e01f      	b.n	8005d68 <handle_req_fc+0x100>
#endif

#ifndef NMBS_SERVER_WRITE_MULTIPLE_COILS_DISABLED
        case 15:
            err = handle_write_multiple_coils(nmbs);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f7fe fff1 	bl	8004d10 <handle_write_multiple_coils>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	73fb      	strb	r3, [r7, #15]
            break;
 8005d32:	e019      	b.n	8005d68 <handle_req_fc+0x100>
#endif

#ifndef NMBS_SERVER_WRITE_MULTIPLE_REGISTERS_DISABLED
        case 16:
            err = handle_write_multiple_registers(nmbs);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f7ff f96e 	bl	8005016 <handle_write_multiple_registers>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	73fb      	strb	r3, [r7, #15]
            break;
 8005d3e:	e013      	b.n	8005d68 <handle_req_fc+0x100>
#endif

#ifndef NMBS_SERVER_READ_FILE_RECORD_DISABLED
        case 20:
            err = handle_read_file_record(nmbs);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7ff fadb 	bl	80052fc <handle_read_file_record>
 8005d46:	4603      	mov	r3, r0
 8005d48:	73fb      	strb	r3, [r7, #15]
            break;
 8005d4a:	e00d      	b.n	8005d68 <handle_req_fc+0x100>
#endif

#ifndef NMBS_SERVER_WRITE_FILE_RECORD_DISABLED
        case 21:
            err = handle_write_file_record(nmbs);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7ff fc89 	bl	8005664 <handle_write_file_record>
 8005d52:	4603      	mov	r3, r0
 8005d54:	73fb      	strb	r3, [r7, #15]
            break;
 8005d56:	e007      	b.n	8005d68 <handle_req_fc+0x100>
#endif

#ifndef NMBS_SERVER_READ_WRITE_REGISTERS_DISABLED
        case 23:
            err = handle_read_write_registers(nmbs);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f7ff fdcb 	bl	80058f4 <handle_read_write_registers>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	73fb      	strb	r3, [r7, #15]
            break;
 8005d62:	e001      	b.n	8005d68 <handle_req_fc+0x100>
#endif
        default:
            err = NMBS_EXCEPTION_ILLEGAL_FUNCTION;
 8005d64:	2301      	movs	r3, #1
 8005d66:	73fb      	strb	r3, [r7, #15]
    }

    return err;
 8005d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <nmbs_server_create>:


nmbs_error nmbs_server_create(nmbs_t* nmbs, uint8_t address_rtu, const nmbs_platform_conf* platform_conf,
                              const nmbs_callbacks* callbacks) {
 8005d74:	b5b0      	push	{r4, r5, r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	607a      	str	r2, [r7, #4]
 8005d7e:	603b      	str	r3, [r7, #0]
 8005d80:	460b      	mov	r3, r1
 8005d82:	72fb      	strb	r3, [r7, #11]
    if (platform_conf->transport == NMBS_TRANSPORT_RTU && address_rtu == 0)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d105      	bne.n	8005d98 <nmbs_server_create+0x24>
 8005d8c:	7afb      	ldrb	r3, [r7, #11]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d102      	bne.n	8005d98 <nmbs_server_create+0x24>
        return NMBS_ERROR_INVALID_ARGUMENT;
 8005d92:	f04f 33ff 	mov.w	r3, #4294967295
 8005d96:	e01e      	b.n	8005dd6 <nmbs_server_create+0x62>

    nmbs_error ret = nmbs_create(nmbs, platform_conf);
 8005d98:	6879      	ldr	r1, [r7, #4]
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f7fd fdb1 	bl	8003902 <nmbs_create>
 8005da0:	4603      	mov	r3, r0
 8005da2:	75fb      	strb	r3, [r7, #23]
    if (ret != NMBS_ERROR_NONE)
 8005da4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d002      	beq.n	8005db2 <nmbs_server_create+0x3e>
        return ret;
 8005dac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005db0:	e011      	b.n	8005dd6 <nmbs_server_create+0x62>

    nmbs->address_rtu = address_rtu;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	7afa      	ldrb	r2, [r7, #11]
 8005db6:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
    nmbs->callbacks = *callbacks;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8005dc2:	4615      	mov	r5, r2
 8005dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dcc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005dd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    return NMBS_ERROR_NONE;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3718      	adds	r7, #24
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bdb0      	pop	{r4, r5, r7, pc}

08005dde <nmbs_server_poll>:


nmbs_error nmbs_server_poll(nmbs_t* nmbs) {
 8005dde:	b590      	push	{r4, r7, lr}
 8005de0:	b085      	sub	sp, #20
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
    msg_state_reset(nmbs);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7fd fd6c 	bl	80038c4 <msg_state_reset>

    bool first_byte_received = false;
 8005dec:	2300      	movs	r3, #0
 8005dee:	73bb      	strb	r3, [r7, #14]
    nmbs_error err = recv_req_header(nmbs, &first_byte_received);
 8005df0:	f107 030e 	add.w	r3, r7, #14
 8005df4:	4619      	mov	r1, r3
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7fd ffc2 	bl	8003d80 <recv_req_header>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE) {
 8005e00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00f      	beq.n	8005e28 <nmbs_server_poll+0x4a>
        if (!first_byte_received && err == NMBS_ERROR_TIMEOUT)
 8005e08:	7bbb      	ldrb	r3, [r7, #14]
 8005e0a:	f083 0301 	eor.w	r3, r3, #1
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d006      	beq.n	8005e22 <nmbs_server_poll+0x44>
 8005e14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e18:	f113 0f03 	cmn.w	r3, #3
 8005e1c:	d101      	bne.n	8005e22 <nmbs_server_poll+0x44>
            return NMBS_ERROR_NONE;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	e031      	b.n	8005e86 <nmbs_server_poll+0xa8>

        return err;
 8005e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e26:	e02e      	b.n	8005e86 <nmbs_server_poll+0xa8>
        else
            printf("address_rtu %d\t", nmbs->msg.unit_id);
    }
#endif

    err = handle_req_fc(nmbs);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7ff ff1d 	bl	8005c68 <handle_req_fc>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE && !nmbs_error_is_exception(err)) {
 8005e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d024      	beq.n	8005e84 <nmbs_server_poll+0xa6>
 8005e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	dd03      	ble.n	8005e4a <nmbs_server_poll+0x6c>
 8005e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e46:	2b04      	cmp	r3, #4
 8005e48:	dd1c      	ble.n	8005e84 <nmbs_server_poll+0xa6>
        if (nmbs->platform.transport == NMBS_TRANSPORT_RTU && err != NMBS_ERROR_TIMEOUT && nmbs->msg.ignored) {
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d114      	bne.n	8005e7e <nmbs_server_poll+0xa0>
 8005e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e58:	f113 0f03 	cmn.w	r3, #3
 8005e5c:	d00f      	beq.n	8005e7e <nmbs_server_poll+0xa0>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00a      	beq.n	8005e7e <nmbs_server_poll+0xa0>
            // Flush the remaining data on the line
            nmbs->platform.read(nmbs->msg.buf, sizeof(nmbs->msg.buf), 0, nmbs->platform.arg);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8005e76:	2200      	movs	r2, #0
 8005e78:	f44f 7182 	mov.w	r1, #260	; 0x104
 8005e7c:	47a0      	blx	r4
        }

        return err;
 8005e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e82:	e000      	b.n	8005e86 <nmbs_server_poll+0xa8>
    }

    return NMBS_ERROR_NONE;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd90      	pop	{r4, r7, pc}
	...

08005e90 <lkv_stepmotor_gpio_init>:
}




void lkv_stepmotor_gpio_init(void){
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b088      	sub	sp, #32
 8005e94:	af00      	add	r7, sp, #0

	/* enable GPIO LCD PORTs clock */

	 __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e96:	2300      	movs	r3, #0
 8005e98:	60bb      	str	r3, [r7, #8]
 8005e9a:	4b2d      	ldr	r3, [pc, #180]	; (8005f50 <lkv_stepmotor_gpio_init+0xc0>)
 8005e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9e:	4a2c      	ldr	r2, [pc, #176]	; (8005f50 <lkv_stepmotor_gpio_init+0xc0>)
 8005ea0:	f043 0304 	orr.w	r3, r3, #4
 8005ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ea6:	4b2a      	ldr	r3, [pc, #168]	; (8005f50 <lkv_stepmotor_gpio_init+0xc0>)
 8005ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eaa:	f003 0304 	and.w	r3, r3, #4
 8005eae:	60bb      	str	r3, [r7, #8]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
	 __HAL_RCC_GPIOH_CLK_ENABLE();
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	607b      	str	r3, [r7, #4]
 8005eb6:	4b26      	ldr	r3, [pc, #152]	; (8005f50 <lkv_stepmotor_gpio_init+0xc0>)
 8005eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eba:	4a25      	ldr	r2, [pc, #148]	; (8005f50 <lkv_stepmotor_gpio_init+0xc0>)
 8005ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ec2:	4b23      	ldr	r3, [pc, #140]	; (8005f50 <lkv_stepmotor_gpio_init+0xc0>)
 8005ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eca:	607b      	str	r3, [r7, #4]
 8005ecc:	687b      	ldr	r3, [r7, #4]
	 __HAL_RCC_GPIOE_CLK_ENABLE();
 8005ece:	2300      	movs	r3, #0
 8005ed0:	603b      	str	r3, [r7, #0]
 8005ed2:	4b1f      	ldr	r3, [pc, #124]	; (8005f50 <lkv_stepmotor_gpio_init+0xc0>)
 8005ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed6:	4a1e      	ldr	r2, [pc, #120]	; (8005f50 <lkv_stepmotor_gpio_init+0xc0>)
 8005ed8:	f043 0310 	orr.w	r3, r3, #16
 8005edc:	6313      	str	r3, [r2, #48]	; 0x30
 8005ede:	4b1c      	ldr	r3, [pc, #112]	; (8005f50 <lkv_stepmotor_gpio_init+0xc0>)
 8005ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee2:	f003 0310 	and.w	r3, r3, #16
 8005ee6:	603b      	str	r3, [r7, #0]
 8005ee8:	683b      	ldr	r3, [r7, #0]

	/* enable GPIO LCD PINs */

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005eea:	f107 030c 	add.w	r3, r7, #12
 8005eee:	2200      	movs	r2, #0
 8005ef0:	601a      	str	r2, [r3, #0]
 8005ef2:	605a      	str	r2, [r3, #4]
 8005ef4:	609a      	str	r2, [r3, #8]
 8005ef6:	60da      	str	r2, [r3, #12]
 8005ef8:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005efa:	2301      	movs	r3, #1
 8005efc:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005efe:	2300      	movs	r3, #0
 8005f00:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005f02:	2302      	movs	r3, #2
 8005f04:	61bb      	str	r3, [r7, #24]

	  GPIO_InitStruct.Pin = DRIVER_PIN_1;
 8005f06:	2301      	movs	r3, #1
 8005f08:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(DRIVER_PIN_1_PORT, &GPIO_InitStruct);
 8005f0a:	f107 030c 	add.w	r3, r7, #12
 8005f0e:	4619      	mov	r1, r3
 8005f10:	4810      	ldr	r0, [pc, #64]	; (8005f54 <lkv_stepmotor_gpio_init+0xc4>)
 8005f12:	f7fa fe31 	bl	8000b78 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = DRIVER_PIN_2;
 8005f16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005f1a:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(DRIVER_PIN_2_PORT, &GPIO_InitStruct);
 8005f1c:	f107 030c 	add.w	r3, r7, #12
 8005f20:	4619      	mov	r1, r3
 8005f22:	480d      	ldr	r0, [pc, #52]	; (8005f58 <lkv_stepmotor_gpio_init+0xc8>)
 8005f24:	f7fa fe28 	bl	8000b78 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = DRIVER_PIN_3;
 8005f28:	2340      	movs	r3, #64	; 0x40
 8005f2a:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(DRIVER_PIN_3_PORT, &GPIO_InitStruct);
 8005f2c:	f107 030c 	add.w	r3, r7, #12
 8005f30:	4619      	mov	r1, r3
 8005f32:	480a      	ldr	r0, [pc, #40]	; (8005f5c <lkv_stepmotor_gpio_init+0xcc>)
 8005f34:	f7fa fe20 	bl	8000b78 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = DRIVER_PIN_4;
 8005f38:	2310      	movs	r3, #16
 8005f3a:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(DRIVER_PIN_4_PORT, &GPIO_InitStruct);
 8005f3c:	f107 030c 	add.w	r3, r7, #12
 8005f40:	4619      	mov	r1, r3
 8005f42:	4806      	ldr	r0, [pc, #24]	; (8005f5c <lkv_stepmotor_gpio_init+0xcc>)
 8005f44:	f7fa fe18 	bl	8000b78 <HAL_GPIO_Init>

}
 8005f48:	bf00      	nop
 8005f4a:	3720      	adds	r7, #32
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	40023800 	.word	0x40023800
 8005f54:	40021c00 	.word	0x40021c00
 8005f58:	40020800 	.word	0x40020800
 8005f5c:	40021000 	.word	0x40021000

08005f60 <memcmp>:
 8005f60:	b510      	push	{r4, lr}
 8005f62:	3901      	subs	r1, #1
 8005f64:	4402      	add	r2, r0
 8005f66:	4290      	cmp	r0, r2
 8005f68:	d101      	bne.n	8005f6e <memcmp+0xe>
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	e005      	b.n	8005f7a <memcmp+0x1a>
 8005f6e:	7803      	ldrb	r3, [r0, #0]
 8005f70:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005f74:	42a3      	cmp	r3, r4
 8005f76:	d001      	beq.n	8005f7c <memcmp+0x1c>
 8005f78:	1b18      	subs	r0, r3, r4
 8005f7a:	bd10      	pop	{r4, pc}
 8005f7c:	3001      	adds	r0, #1
 8005f7e:	e7f2      	b.n	8005f66 <memcmp+0x6>

08005f80 <memset>:
 8005f80:	4402      	add	r2, r0
 8005f82:	4603      	mov	r3, r0
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d100      	bne.n	8005f8a <memset+0xa>
 8005f88:	4770      	bx	lr
 8005f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f8e:	e7f9      	b.n	8005f84 <memset+0x4>

08005f90 <__libc_init_array>:
 8005f90:	b570      	push	{r4, r5, r6, lr}
 8005f92:	4d0d      	ldr	r5, [pc, #52]	; (8005fc8 <__libc_init_array+0x38>)
 8005f94:	4c0d      	ldr	r4, [pc, #52]	; (8005fcc <__libc_init_array+0x3c>)
 8005f96:	1b64      	subs	r4, r4, r5
 8005f98:	10a4      	asrs	r4, r4, #2
 8005f9a:	2600      	movs	r6, #0
 8005f9c:	42a6      	cmp	r6, r4
 8005f9e:	d109      	bne.n	8005fb4 <__libc_init_array+0x24>
 8005fa0:	4d0b      	ldr	r5, [pc, #44]	; (8005fd0 <__libc_init_array+0x40>)
 8005fa2:	4c0c      	ldr	r4, [pc, #48]	; (8005fd4 <__libc_init_array+0x44>)
 8005fa4:	f000 f826 	bl	8005ff4 <_init>
 8005fa8:	1b64      	subs	r4, r4, r5
 8005faa:	10a4      	asrs	r4, r4, #2
 8005fac:	2600      	movs	r6, #0
 8005fae:	42a6      	cmp	r6, r4
 8005fb0:	d105      	bne.n	8005fbe <__libc_init_array+0x2e>
 8005fb2:	bd70      	pop	{r4, r5, r6, pc}
 8005fb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fb8:	4798      	blx	r3
 8005fba:	3601      	adds	r6, #1
 8005fbc:	e7ee      	b.n	8005f9c <__libc_init_array+0xc>
 8005fbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fc2:	4798      	blx	r3
 8005fc4:	3601      	adds	r6, #1
 8005fc6:	e7f2      	b.n	8005fae <__libc_init_array+0x1e>
 8005fc8:	0800602c 	.word	0x0800602c
 8005fcc:	0800602c 	.word	0x0800602c
 8005fd0:	0800602c 	.word	0x0800602c
 8005fd4:	08006030 	.word	0x08006030

08005fd8 <memcpy>:
 8005fd8:	440a      	add	r2, r1
 8005fda:	4291      	cmp	r1, r2
 8005fdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fe0:	d100      	bne.n	8005fe4 <memcpy+0xc>
 8005fe2:	4770      	bx	lr
 8005fe4:	b510      	push	{r4, lr}
 8005fe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fee:	4291      	cmp	r1, r2
 8005ff0:	d1f9      	bne.n	8005fe6 <memcpy+0xe>
 8005ff2:	bd10      	pop	{r4, pc}

08005ff4 <_init>:
 8005ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff6:	bf00      	nop
 8005ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ffa:	bc08      	pop	{r3}
 8005ffc:	469e      	mov	lr, r3
 8005ffe:	4770      	bx	lr

08006000 <_fini>:
 8006000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006002:	bf00      	nop
 8006004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006006:	bc08      	pop	{r3}
 8006008:	469e      	mov	lr, r3
 800600a:	4770      	bx	lr
